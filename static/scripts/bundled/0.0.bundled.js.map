{"version":3,"sources":["webpack:///0.0.bundled.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js","webpack:///./galaxy/scripts/mvc/dataset/data.js","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js","webpack:///./galaxy/scripts/mvc/ui/ui-table.js","webpack:///./galaxy/scripts/mvc/ui/icon-button.js","webpack:///./galaxy/scripts/ui/editable-text.js","webpack:///./galaxy/scripts/viz/trackster/util.js","webpack:///./galaxy/scripts/mvc/citation/citation-model.js","webpack:///./galaxy/scripts/mvc/tool/tool-form.js","webpack:///./galaxy/scripts/mvc/tool/tool-template.js","webpack:///./galaxy/scripts/mvc/ui/ui-list.js","webpack:///./galaxy/scripts/mvc/ui/ui-options.js","webpack:///./galaxy/scripts/mvc/ui/ui-tabs.js","webpack:///./galaxy/scripts/libs/bibtex.js","webpack:///./galaxy/scripts/mvc/citation/citation-view.js","webpack:///./galaxy/scripts/mvc/form/form-data.js","webpack:///./galaxy/scripts/mvc/form/form-input.js","webpack:///./galaxy/scripts/mvc/form/form-parameters.js","webpack:///./galaxy/scripts/mvc/form/form-repeat.js","webpack:///./galaxy/scripts/mvc/form/form-section.js","webpack:///./galaxy/scripts/mvc/form/form-select-content.js","webpack:///./galaxy/scripts/mvc/form/form-view.js","webpack:///./galaxy/scripts/mvc/tool/tool-form-base.js","webpack:///./galaxy/scripts/mvc/tool/tools.js","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js","webpack:///./galaxy/scripts/utils/config.js","webpack:///./galaxy/scripts/utils/deferred.js","webpack:///./galaxy/scripts/viz/visualization.js","webpack:///./galaxy/scripts/viz/trackster.js","webpack:///./galaxy/scripts/viz/trackster/filters.js","webpack:///./galaxy/scripts/viz/trackster/painters.js","webpack:///./galaxy/scripts/viz/trackster/slotting.js","webpack:///./galaxy/scripts/viz/trackster/tracks.js","webpack:///./galaxy/scripts/viz/viz_views.js"],"names":["webpackJsonp","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Backbone","$","Utils","Select","Slider","Options","Drilldown","Buttons","Modal","Label","View","extend","tagName","initialize","options","this","model","Model","setElement","listenTo","render","title","new_title","set","value","get","$el","removeClass","addClass","html","Message","message","status","cls","persistent","update","fadeIn","timeout","window","clearTimeout","self","setTimeout","fadeOut","Input","type","placeholder","disabled","visible","area","events","input","new_val","undefined","attr","id","val","removeAttr","_onchange","Hidden","append","$info","$hidden","show","hide","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","RadioButton","Checkbox","Radio","apply","call","merge","uid","icon","buttons","body","scrollable","nopadding","operations","placement","operations_flt","collapsible","collapsed","_template","$body","$title","$header","$content","$footer","css","$buttons","each","name","item","prop","remove","$operations","cursor","text-decoration","on","expand","collapse","empty","header","footer","enableButton","find","disableButton","hideOperation","showOperation","setOperation","callback","off","height","trigger","disable","enable","tmpl","_","Frames","mod_icon_btn","DatasetMetadata","Dataset","defaults","hda_ldda","metadata","_set_metadata","keys","attributes","k","indexOf","new_key","split","silent","get_metadata","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","first_data_chunk","chunk_index","at_eof","url_viz","get_next_chunk","next_chunk","Deferred","getJSON","chunk","success","rval","ck_data","resolve","DatasetCollection","Collection","TabularDatasetChunkedView","row_count","loading_chunk","TabularButtonTracksterView","expand_to_container","scroll_elt","attempt_to_fetch","func","scrolled_to_bottom","loading_indicator","when","then","result","_renderChunk","data_table","cellpadding","column_names","header_container","appendTo","header_row","join","j","first_chunk","scroll","_renderCell","cell_contents","index","colspan","$cell","text","column_types","length","_renderRow","line","cells","row","num_columns","slice","TopLevelTabularDatasetChunkedView","parents","p","scrollTop","EmbeddedTabularDatasetChunkedView","position","overflow","innerHeight","el","scrollHeight","col","chrom","start","end","dataset_id","genome_build","file_ext","search","str","array","match","parent","modal","frame","console","log","btn_viz","IconButtonView","IconButton","icon_class","mouseover tr","mouseleave","e","is_numeric","n","isNaN","parseFloat","isFinite","target","children","eq","btn_viz_pars","gene_region","offset","left","top","click","create_trackster_action","vis_url","dataset_params","dbkey","listTracksParams","ajax","url","param","dataType","error","Cancel","table_html","View in saved visualization","Add to visualization","vis_id","add","content","View in new visualization","createTabularDatasetChunkedView","dataset_config","parent_elt","embedded","view","ButtonBase","floating","cls_wait","onclick","tooltip","wait","unwait","href","icons","$icon","current","total","onchange","$button","setIcon","icon_cls","width","$menu","pull","onunload","tag","$root","preventDefault","addMenu","menuOptions","divider","_templateMenu","$item","_templateMenuItem","_templateDivider","download","margin","optionsDefault","ondblclick","onconfirm","cls_tr","dblclick","$thead","$tbody","$tmessage","_row","addHeader","wrapper","appendHeader","align","fade","_commit","prepend","del","_refresh","delAll","new_value","before","after","size","_onclick","old_value","closest","_ondblclick","on_click","menu_options","is_menu_button","enabled","tooltip_config","bind","new_elem","template","toJSON","replaceWith","event","isFunction","buffer","IconButtonCollection","IconButtonMenuView","collection","button","elt","make_popupmenu","create_icon_buttons_menu","config","global_config","map","button_config","__WEBPACK_AMD_DEFINE_FACTORY__","factory","jQuery","fn","make_text_editable","config_dict","num_cols","num_rows","use_textarea","on_finish","help_text","container","input_elt","button_elt","set_text","new_text","cur_text","rows","cols","trim","keyup","keyCode","blur","stopPropagation","focus","select","commatize","number","rgx","test","replace","is_deferred","d","ServerStateDeferred","ajax_settings","interval","success_fn","go","deferred","_go","get_random_color","colors","i","parseInt","new_color","nr","ng","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","brightness","r","g","b","difference","r1","g1","b1","r2","g2","b2","Math","max","min","ok","num_tries","round","random","abs","toString","substr","parseBibtex","baseMVC","_l","BibtexParser","logNamespace","Citation","LoggableMixin","_logNamespace","bibtex","entry","entries","_fields","rawFields","Fields","key","lowerKey","toLowerCase","entryType","EntryType","fields","BaseCitationCollection","partial","HistoryCitationCollection","history_id","ToolCitationCollection","tool_id","Ui","ToolFormBase","ToolTemplate","customize","execute","execute_btn","version","portlet","submit","job_id","job_remap","inputs","label","display","ignore","help","job_def","tool_version","data","create","validate","emit","debug","request","response","currHistoryPanel","refreshContents","err_data","error_messages","matchResponse","input_id","highlight","err_msg","Close","job_inputs","batch_n","batch_src","job_input_id","input_value","input_field","field_list","input_def","input_list","optional","batch","values","src","$tmpl","jobs","njobs","njobs_text","outputs","hid","JSON","stringify","requirements","requirements_message","req","Portlet","multiple","isArray","v","v_id","v_name","lst","push","_templateRow","Base","error_text","wait_text","$message","$options","all_button","_getValue","_templateOptions","$option","_templateOption","Array","first","_size","exists","_messageShow","_messageHide","selected","BaseIcons","pair","title_new","onnew","$nav","first_tab","current_id","$tabs","list","$tab_new","_template_tab_new","$tab_title","_template_tab","$tab_content","_template_tab_content","ondel","$del_icon","delRemovable","retitle","arg0","accumulator","tempStorage","parser","parse","errors","getErrors","STATES_","ENTRY_OR_JUNK","OBJECT_TYPE","ENTRY_KEY","KV_KEY","EQUALS","KV_VALUE","DATA_","CALLBACK_","CHAR_","LINE_","CHAR_IN_LINE_","SKIPWS_","SKIPCOMMENT_","PARSETMP_","SKIPTILLEOL_","VALBRACES_","BRACETYPE_","BRACECOUNT_","STATE_","ERRORS_","ENTRY_TYPES_","inproceedings","proceedings","article","techreport","misc","mastersthesis","book","phdthesis","incollection","unpublished","inbook","manual","periodical","booklet","masterthesis","conference","online","MACROS_","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","processCharacter_","error_","processEntry_","f","raw","CHARCONV_","re","rep","len","processed","c","skip","ObjectType","AnotherIteration","ot","Key","EntryKey","Value","\"","{","delim","doneParsingValue","macro","splice","citationModel","CitationView","className","formattedReference","ref","authorsAndYear","_asSentence","author","year","pages","address","volume","journal","booktitle","howpublished","note","institution","_formatBookInfo","doiUrl","doi","info","chapter","editor","publisher","series","issn","CitationListView","renderCitation","click .citations-to-bibtex","click .citations-to-formatted","citation","citationView","rawTextarea","citationsElement","showFormatted","showBibtex","partialWarningElement","Manager","app","checksum","sum","section","field","flat_id","flat_dict","result_dict","element_list","convert","identifier","head","node","section_label","block_indices","block_prefix","block_label","pos","sort","a","test_param","selectedCase","matchCase","flat","collapsible_value","payload","p_id","dict","_iterate","matchModel","matchIds","new_id","separator","child","hasClass","truevalue","falsevalue","cases","matchContext","context","isObject","mapping","cache","mapped","text_enable","text_disable","cls_enable","cls_disable","$field","$preview","$collapsible","$collapsible_icon","$error_text","$error","$backdrop","opacity","reset","_tooltip","tmp","argument","collapsible_preview","text_value","SelectContent","SelectLibrary","SelectFtp","ColorPicker","types","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","fieldClass","incompatible","_fieldSelect","_fieldText","_fieldData","extensions","is_workflow","option","SelectClass","searchable","_fieldDrilldown","str_value","String","_fieldSlider","precise","_fieldHidden","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","Table","empty_text","button_new","table","button_delete","table_row","hideOptions","isEmpty","Repeat","InputElement","Parameters","parameters","_addConditional","_addRepeat","_addSection","_addRow","sustain_conditionals","case_def","section_id","section_row","nonhidden","sub_section_id","sub_section","block_index","repeat","n_cache","sustain_repeats","input_element","button_visible","expanded","Tabs","history","radio_buttons","mode","textify","hda_error","hdca_error","select_single","select_multiple","select_collection","button_type","refresh","$batch","template_batch","n_buttons","button_width","margin-left","_update","select_options","hda","hdca","err","id_list","_select","_batch","details","map_over_type","FormSection","FormData","initial_errors","new_model","isEqual","new_options","opt","active","is_dynamic","$panel","filter","animate","_renderForm","current_check","new_check","FormBase","CitationModel","_buildForm","needs_update","process","_updateModel","_buildModel","description","_operations","_footer","hide_message","build_url","build_data","params","error_message","is","large","reject","model_url","update_url","current_state","versions_button","narrow","sustain_version","versions","menu_button","biostar_url","open","prompt","location","origin","user","sharable_url","menu","citations","$citations","citation_list_view","fetch","util","ToolForm","VisibilityMixin","toggle","is_visible","ToolParameter","num_samples","unescape","copy","set_value","ToolParameterCollection","DataToolParameter","IntegerToolParameter","get_samples","d3","scale","linear","domain","ticks","FloatToolParameter","SelectToolParameter","subModelTypes","Tool","p_class","remove_inputs","tool","incompatible_inputs","only_samplable_inputs","valid_inputs","apply_search_results","results","set_input_value","set_input_values","inputs_dict","input_name","run","_run","rerun","target_dataset","regions","action","target_dataset_id","get_inputs_dict","input_dict","additional_params","run_deferred","ss_deferred","contentType","ToolCollection","ToolSectionLabel","ToolSection","elems","clear_search_results","cur_label","all_hidden","ToolSearch","search_hint_string","min_chars_for_search","clear_btn_url","search_url","query","clear_key","do_search","q","timer","ga","clear_search","ToolPanel","tool_search","tools","layout","parse_elt","elt_dict","model_class","panel_elt","BaseView","update_visible","ToolLinkView","$link","templates","tool_link","upload","form","ToolSectionLabelView","ToolSectionView","update_open","panel_section","section_body","tool_view","label_view","click .toolSectionTitle > a","slideDown","slideUp","ToolSearchView","keyup :input","click #search-clear-btn","focus_and_select","clear","query_changed","evData","which","ToolPanelView","handle_search_results","search_view","section_title_view","ToolFormView","tool_form","tool_panel_view","tool_form_view","show_tool","done","variable","standard","base","theme","$view","$value","_build","$boxes","_templateCheck","hex","x","rgb","_content","padding","line_def","bottom","_templateContent","$label","$line","$box","_templateBox","initial","header_index","_setState","header_id","is_expanded","$subgroup","attach","iterate","level","has_options","new_header","$group","$buttongroup","$select","$icon_dropdown","select2","minHeight","currentY","pageY","currentHeight","_availableOptions","sorter","findWhere","closeOnSelect","setOnChange","available","escape","List","ftpfile_list","Libraries","LibraryDatasets","library_id","libraries","datasets","library_select","dataset_list","library_current","step","useslider","$slider","slider","ui","$text","pressed","_isParameter","substring","util_mod","config_mod","ConfigSetting","known_settings_defaults","s","default_value","ConfigSettingCollection","to_key_value_dict","setting","get_value","set_default_value","from_models_and_saved_values","models","saved_values","m","ConfigSettingCollectionView","container_div","tip","siblings","document","unbind","new_color_icon","tip_inner","farb_obj","farbtastic","fixed_farb_obj","setColor","render_in_modal","cancel_fn","ok_fn","update_from_form","check_enter_esc","OK","last","has_deferred","promise","always","state","charAt","toUpperCase","ready","isEmptyObject","data_mod","CustomToJSON","json","constructor","to_json_keys","to_json_mappers","select_datasets","dataset_url","add_track_async_url","filters","alert","Add","requests","data_type","track_defs","arguments","arg","CanvasManager","default_font","dummy_canvas","new_canvas","dummy_context","getContext","font","char_width_px","measureText","patterns","load_pattern","path","image","Image","onload","createPattern","get_pattern","canvas","manager","Cache","num_elements","obj_cache","key_ary","get_elt","key_str","stale","move_key_to_end","set_elt","deleted_key","shift","most_recently_added","GenomeDataManager","dataset","genome","init_data","min_region_size","filters_manager","data_mode_compatible","can_subset","initial_entries","add_data","set_data","region","data_is_ready","ready_deferred","query_type","search_features","load_data","resolution","extra_params","low","high","filter_names","filter_cols","get_data","entry_region","is_subregion","contains","subset_entry","last_request","DEEP_DATA_REQ","BROAD_DATA_REQ","get_more_data","req_type","cur_data","_mark_stale","query_low","start_val","max_high","query_region","data_manager","new_data_request","new_data_available","concat","max_low","can_get_more_detailed_data","dataset_type","get_more_detailed_data","detail_multiplier","get_genome_wide_data","all_data_available","gw_data","chrom_info","chrom_data","GenomeRegion","genome_wide_data","subregion","subset_fns","bigwig","data_point","refseq","seq_start","subregion_data","same","GenomeReferenceDataManager","dataset_placeholder","data_url","Genome","chroms_info","get_chroms_info","get_chrom_region","chr_name","get_chrom_len","str_val","from_str","pieces","start_end","compute_overlap","a_region","overlap","first_chrom","second_chrom","first_start","second_start","first_end","second_end","overlap_results","DIF_CHROMS","BEFORE","OVERLAP_START","CONTAINS","AFTER","CONTAINED_BY","OVERLAP_END","chrom_len","overlaps","intersection","GenomeRegionCollection","BrowserBookmark","BrowserBookmarkCollection","BackboneTrack","prefs","preloaded_data","BackboneTrackCollection","Visualization","save","vis_json","GenomeVisualization","drawables","bookmarks","viewport","tracks","unset","add_tracks","dummy","obj_type","content_visible","TrackBrowserRouter","Router","route","new_loc","navigate","change_location","go_to","__WEBPACK_AMD_REQUIRE_ARRAY__","mod_utils","cssLoadFile","visualization","query_string","TracksterUI","baseURL","save_viz","annotation","overview_track_name","overview_drawable","viz_config","to_dict","overview","vis_info","has_changes","pushState","hash","createButtonMenu","f-dbkey","new_tracks","track","add_drawable","object_from_template","DrawableGroup","force_right_panel","handle_unsaved_changes","buttonMenu","add_bookmarks","Insert","hda_id","ldda_id","add_bookmark","editable","bookmarks_container","new_bookmark","position_div","annotation_div","delete_icon_container","prependTo","create_visualization","view_config","viewport_config","drawables_config","bookmarks_config","TracksterView","load_chroms_deferred","overview_drawable_name","change_chrom","set_overview","bookmark","set_up_router","init_keyboard_nav","srcElement","move_fraction","viewport_container","Leave without Saving","Save","resize_window","galaxy_config","view_existing","choose_existing_or_new","view_new","view_in_saved","show_choice","init_editor","template_view_new","Create","create_browser","dbkeys_in_genomes","default_dbkey","add_dataset","track_data","GalaxyApp","Filter","obj_dict","tool_exp_name","create_action_icon","css_class","on_click_fn","NumberFilter","Number","MAX_VALUE","slider_label","edit_slider_values","span","cur_value","input_size","multi_value","slider_row","slider_min","slider_max","invalid","a_val","parent_div","filter_label","values_span","values_span_container","slider_div","control_element","range","get_slider_step","slide","change","display_controls_div","transparency_icon","alpha_filter","request_draw","force","clear_after","height_icon","height_filter","hover","applies_to","element","_keep_val","keep","to_filter","returnVal","update_attrs","updated","floor","ceil","update_ui_elt","FiltersManager","alpha_filter_name","height_filter_name","filters_dict","add_filter","run_buttons_row","run_on_dataset_button","filter_manager","run_on_dataset","filter_dicts","new_track","remove_all","init_filters","clear_filters","tool_filter_conditions","get_or_create_dict_item","new_item","active_filters","active_filters_list","run_filter","input_dataset_id","filter_tuple","tool_filters","tool_filter_str","url_params","cond","run_tool_url","first_region","second_region","is_overlap","dashedLine","ctx","x1","y1","x2","y2","dashLen","dX","dY","dashes","sqrt","dashX","dashY","fillRect","drawDownwardEquilateralTriangle","down_vertex_x","down_vertex_y","side_len","y","beginPath","moveTo","lineTo","strokeStyle","fillStyle","fill","stroke","closePath","Scaler","default_val","gen_val","DrawResults","incomplete_features","feature_mapper","Painter","view_start","view_end","default_prefs","draw","w_scale","get_start_draw_pos","chrom_pos","_chrom_pos_to_draw_pos","get_end_draw_pos","get_draw_pos","LinePainter","min_value","max_value","overflow_color","in_path","vertical_range","height_px","y_zero","x_scaled","delta_x_px","painter_color","block_color","pref_color","pref_r","pref_g","pref_b","top_overflow","bot_overflow","saturation","new_r","new_g","new_b","overflow_x","restore","FeaturePositionMapper","slot_height","feature_positions","translation","y_translation","map_feature_data","feature_data","slot","x_start","x_end","get_feature_data","feature_dict","FeaturePainter","alpha_scaler","height_scaler","max_label_length","connector_color","get_required_height","rows_required","required_height","get_row_height","y_scale","get_top_padding","slots","textAlign","x_draw_coords","feature","feature_uid","feature_start","feature_end","draw_element","tile_low","tile_high","DENSE_TRACK_HEIGHT","NO_DETAIL_TRACK_HEIGHT","SQUISH_TRACK_HEIGHT","PACK_TRACK_HEIGHT","NO_DETAIL_FEATURE_HEIGHT","DENSE_FEATURE_HEIGHT","SQUISH_FEATURE_HEIGHT","PACK_FEATURE_HEIGHT","LABEL_SPACING","CONNECTOR_COLOR","LinkedFeaturePainter","draw_background_connector","draw_individual_connectors","y_start","feature_name","feature_strand","f_start","f_end","draw_start","draw_end","thick_start","thick_end","reverse_strand_color","label_color","globalAlpha","feature_ts","feature_te","feature_blocks","full_height","thin_height","thick_height","cur_y_start","cur_height","k_len","last_block_start","last_block_end","block","block_start","block_end","block_thick_start","block_thick_end","draw_connector","hscale_factor","new_height","ws_height","fillText","ReadPainter","ref_seq","base_color_fn","show_insertions","_parse_cigar","cigar_str","cigar_ops","blocks","cur_block","base_pos","parsed_cigar","op","op_len","op_char","cigar","draw_read","strand","read_seq","update_base_offset","cig_op","cig_len","update_seq_offset","get_draw_coord","sequence_coord","s_start","s_end","tile_region","base_offset","seq_offset","gap","detail_block_color","pack_mode","draw_height","rect_y","paint_utils","ReadPainterUtils","drawing_blocks","draw_last","t","cig_id","cig","cur_seq","start_pos","show_differences","c_start","draw_deletion","insert_x_coord","seq","x_center","str_len","connector","b1_end","b2_start","line_height","ArcLinkedFeaturePainter","longest_feature_length","calculate_longest_feature_length","view_range","block1_start","block1_end","block2_start","block2_end","radius","PI","arc","Color","alpha","eval","toCSS","toHSL","h","l","toARGB","argb","mix","color2","weight","color1","w","w1","w2","LinearRamp","start_color","end_color","start_value","end_value","value_range","map_value","SplitRamp","middle_color","positive_ramp","negative_ramp","DiagonalHeatmapPainter","Infinity","pos_color","neg_color","s1","e1","s2","e2","invsqrt2","ramp","rotate","row_height","px_per_base","draw_details","delete_details_thickness","thickness","VariantPainter","divider_height","summary_height","show_sample_data","locus_data","alt","sample_gts","allele_counts","variant","draw_x_start","draw_y_start","genotype","get_indel_info","ref_len","alt_len","base_px","feature_height","draw_summary","flatten","alt_info","indel_info","allele_frac","snp","PACK_SPACING","SlottedInfo","FeatureSlotter","max_rows","start_end_dct","include_label","_get_draw_coords","text_align","f_name","text_len","_find_slot","draw_coords","slot_num","has_overlap","s_e","slot_features","features","undone","highest_slot","slotted_info","old_draw_coords","new_draw_coords","slotted_coords","dc","viz_views","slotting","painters","filters_mod","tools_mod","html_elt_js_obj_dict","is_container","obj","moveable","handle_class","container_selector","element_js_obj","handle","relative","this_obj","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","insertAfter","move_drawable","deltaY","ERROR_PADDING","MAX_FEATURE_DEPTH","MIN_SQUISH_VIEW_WIDTH","TILE_SIZE","DEFAULT_DATA_QUERY_WAIT","MAX_CHROMS_SELECTABLE","DATA_ERROR","DATA_NOCONVERTER","DATA_NONE","DATA_PENDING","DATA_CANNOT_RUN_TOOL","DATA_OK","TILE_CACHE_SIZE","CONTINUOUS_DATA_MODES","Drawable","id_counter","drag_handle_class","is_overview","action_icons","config_params","config_onchange","build_container_div","header_div","header_view","TrackHeaderView","icons_div","action_icons_def","drawable","toggle_icon","hide_contents","show_contents","init","changed","can_draw","_draw","set_name","new_name","old_name","revert_name","update_intro_div","update_icons","get_drawables","DrawableCollection","unpack_drawables","drawables_array","dictified_drawables","other","replace_drawable","old_drawable","new_drawable","update_html","new_position","get_tracks","track_type","queue","content_div","saved_filters_managers","old_manager","setup_multitrack_filtering","group","show_composite_track","_restore_filter_managers","clear_tile_cache","tiles_div","num_drawables","composite_icon","filters_icon","CompositeTrack","same_type","a_type","get_type","num_feature_tracks","can_composite","FeatureTrack","LineTrack","shared_filters","new_filter","filter_name","composite_track","stand_alone","label_tracks","tracks_to_be_redrawn","zoom_factor","min_separation","canvas_manager","ownerDocument","requested_redraw","parent_element","top_container","browser_content_div","bottom_container","top_labeltrack","intro_div","nav_container","nav","overview_viewport","overview_close","overview_highlight","overview_box_background","overview_box","default_overview_height","nav_controls","chrom_select","submit_nav","location_span","nav_input","autocomplete","source","all_features","feature_search_deferreds","term","dataset_features","minLength","hidden_input","zo_link","zoom_out","zi_link","zoom_in","load_chroms","pageX","current_x","offsetX","delta","delta_chrom","move_delta","reset_overview","clientX","original_low","current_height","clientY","new_scroll","proxy","startX","update_location","old_low","request_redraw","add_label_track","LabelTrack","resize_timer","redraw","get_base_color","trigger_navigate","new_chrom","new_low","new_high","delay","url_parms","num","reference","ref_track","ReferenceTrack","reference_track","chrom_options","prev_chroms","next_chroms","chrom_start_index","start_index","found","grep","fraction","current_chrom_span","data_fetch","redraw_on_move_fn","label_track","track_list","track_options","to","requestAnimationFrame","_redraw","resolution_px_b","left_px","width_px","min_width_px","point","cur_center","new_half","resize_viewport","postdraw_actions","TracksterTool","tool_state","state_dict","ToolParameterView","change :input","param_div","html_div","update_value","update_event","TracksterToolView","set_visible","keydown","param_view","run_tool_row","run_on_region_button","run_on_region","update_params","current_track","track_name","tool_region_and_parameters_str","init_for_tool_data","change_mode","set_filters_manager","set_dataset","success_callback","FilterScaler","Tile","html_elt","predisplay_actions","LineTrackTile","FeatureTrackTile","all_slotted","seq_data","has_icons","other_tiles_features_drawn","Track","dataset_check_type","data_url_extra_params","data_query_wait","data_and_mode_compatible","min_height_px","max_height_px","visible_height_px","resize","add_resize_handle","regions_to_use","view_region","bookmarked_regions","No","Yes","on_resize","in_handle","in_drag","drag_control","original_height","tile_cache","ReadTrack","VariantTrack","show_message","msg_html","retry","init_deferred","kind","valid_chroms","predraw_init","msg_elt","stats","mean","sd","TiledTrack","filters_available","left_offset","dynamic_tool_div","overlay_div","slotters","set_min_max","new_mode","mode_icon","tools_icon","param_space_viz_icon","_gen_tile_cache_key","before_draw","tile_promise","tile_width","tile_index","tile_promises","tiles","draw_helper","tile","_add_yaxis_label","on_change","pref_name","line_track_tiles","icons_present","get_mode","update_auto_mode","display_mode","_get_drawables","is_tile","o","show_tile","get_tile_data","data_mode","tile_data","tile_drawn","tracks_data","pop","drawing_modes","drawing_heights","get_canvas_height","translate","globalCompositeOperation","draw_tile","canvas_width","_draw_line_track_tile","painter","tile_element","track_height","region_str","param_str","extra_info","tickDistance","pow","new_div","screenPosition","display_modes","union","show_group","visible_height","init_deferreds","update_all_min_max","max_height","new_visible","cur_visible","subset","DiagonalHeatmapTrack","summary_draw_height","set_painter_from_config","all_incomplete_features","pluck","inc_features","tile_incomplete_features","omit","new_canvas_ctx","drawImage","new_tile","example_feature","show_more_rows_icon","incremental_slots","slotter","dummy_painter","cur_tile","filtered","hide_feature","flen","filter_alpha_scaler","filter_height_scaler","draw_results","deferreds","sample_names","font_size","font-size","samples_div_html","line-height","addable_objects","VcfTrack","drawable_type","update_name","render_action_icons","icon_dict","add_action_icon","set_display_modes","new_modes","init_mode","mode_mapping"],"mappings":"AAAAA,cAAc,EAAE,IACT,CACA,CACA,CACA,CACA,CACA,CACA,CAED,SAASC,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GCXnC,SAAAC,EAAAC,GAGAH,GAAAD,EAAA,GACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAAAE,EACA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAAAC,GAAAT,EAAAU,KAAAC,QACAC,QAAA,QACAC,WAAA,SAAAC,GACAC,KAAAC,MAAAF,KAAAE,OAAA,GAAAhB,GAAAiB,MAAAH,GACAC,KAAAH,QAAAE,EAAAF,SAAAG,KAAAH,QACAG,KAAAG,WAAAjB,EAAA,IAAAc,KAAAH,QAAA,OACAG,KAAAI,SAAAJ,KAAAC,MAAA,SAAAD,KAAAK,OAAAL,MACAA,KAAAK,UAEAC,MAAA,SAAAC,GACAP,KAAAC,MAAAO,IAAA,QAAAD,IAEAE,MAAA,WACA,MAAAT,MAAAC,MAAAS,IAAA,UAEAL,OAAA,WAKA,MAJAL,MAAAW,IAAAC,cACAC,SAAA,YACAA,SAAAb,KAAAC,MAAAS,IAAA,QACAI,KAAAd,KAAAC,MAAAS,IAAA,UACAV,QAKAe,EAAA9B,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GACAC,KAAAC,MAAAF,KAAAE,OAAA,GAAAhB,GAAAiB,OACAc,QAAA,KACAC,OAAA,OACAC,IAAA,GACAC,YAAA,IACaX,IAAAT,GACbC,KAAAI,SAAAJ,KAAAC,MAAA,SAAAD,KAAAK,OAAAL,MACAA,KAAAK,UAEAe,OAAA,SAAArB,GACAC,KAAAC,MAAAO,IAAAT,IAEAM,OAAA,WACAL,KAAAW,IAAAC,cAAAC,SAAA,cAAAA,SAAAb,KAAAC,MAAAS,IAAA,OACA,IAAAO,GAAAjB,KAAAC,MAAAS,IAAA,SAQA,IAPAV,KAAAC,MAAAS,IAAA,SACAV,KAAAW,IAAAE,UAAA,WAAAI,GAAA,QACA,UAAAA,GAAA,SACAA,GAAA,gBAEAjB,KAAAW,IAAAE,SAAA,SAAAA,SAAA,SAAAI,GAEAjB,KAAAC,MAAAS,IAAA,YAIA,GAHAV,KAAAW,IAAAG,KAAAd,KAAAC,MAAAS,IAAA,YACAV,KAAAW,IAAAU,SACArB,KAAAsB,SAAAC,OAAAC,aAAAxB,KAAAsB,UACAtB,KAAAC,MAAAS,IAAA,eACA,GAAAe,GAAAzB,IACAA,MAAAsB,QAAAC,OAAAG,WAAA,WACAD,EAAAd,IAAAgB,WACqB,UAGrB3B,MAAAW,IAAAgB,SAEA,OAAA3B,SAKA4B,EAAA3C,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GACAC,KAAAC,MAAAF,KAAAE,OAAA,GAAAhB,GAAAiB,OACA2B,KAAA,OACAC,YAAA,GACAC,UAAA,EACAC,SAAA,EACAd,IAAA,GACAe,MAAA,IACazB,IAAAT,GACbC,KAAAH,QAAAG,KAAAC,MAAAS,IAAA,2BACAV,KAAAG,WAAAjB,EAAA,IAAAc,KAAAH,QAAA,OACAG,KAAAI,SAAAJ,KAAAC,MAAA,SAAAD,KAAAK,OAAAL,MACAA,KAAAK,UAEA6B,QACAC,MAAA,aAEA1B,MAAA,SAAA2B,GAEA,MADAC,UAAAD,GAAApC,KAAAC,MAAAO,IAAA,wBAAA4B,KAAA,IACApC,KAAAC,MAAAS,IAAA,UAEAL,OAAA,WAUA,MATAL,MAAAW,IAAAC,cACAC,SAAA,MAAAb,KAAAH,SACAgB,SAAAb,KAAAC,MAAAS,IAAA,QACA4B,KAAA,KAAAtC,KAAAC,MAAAsC,IACAD,KAAA,OAAAtC,KAAAC,MAAAS,IAAA,SACA4B,KAAA,cAAAtC,KAAAC,MAAAS,IAAA,gBACA8B,IAAAxC,KAAAC,MAAAS,IAAA,UACAV,KAAAC,MAAAS,IAAA,YAAAV,KAAAW,IAAA2B,KAAA,eAAAtC,KAAAW,IAAA8B,WAAA,YACAzC,KAAAW,IAAAX,KAAAC,MAAAS,IAAA,4BACAV,MAEA0C,UAAA,WACA1C,KAAAS,MAAAT,KAAAW,IAAA6B,OACAxC,KAAAC,MAAAS,IAAA,aAAAV,KAAAC,MAAAS,IAAA,YAAAV,KAAAC,MAAAS,IAAA,aAKAiC,EAAA1D,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GACAC,KAAAC,MAAAF,KAAAE,OAAA,GAAAhB,GAAAiB,MAAAH,GACAC,KAAAG,WAAAjB,EAAA,UAAA0D,OAAA5C,KAAA6C,MAAA3D,EAAA,WACA0D,OAAA5C,KAAA8C,QAAA5D,EAAA,YACAc,KAAAI,SAAAJ,KAAAC,MAAA,SAAAD,KAAAK,OAAAL,MACAA,KAAAK,UAEAI,MAAA,SAAA2B,GAEA,MADAC,UAAAD,GAAApC,KAAAC,MAAAO,IAAA,QAAA4B,GACApC,KAAAC,MAAAS,IAAA,UAEAL,OAAA,WAIA,MAHAL,MAAAW,IAAA2B,KAAA,KAAAtC,KAAAC,MAAAsC,IACAvC,KAAA8C,QAAAN,IAAAxC,KAAAC,MAAAS,IAAA,UACAV,KAAAC,MAAAS,IAAA,QAAAV,KAAA6C,MAAAE,OAAAjC,KAAAd,KAAAC,MAAAS,IAAA,SAAAV,KAAA6C,MAAAG,OACAhD,OAIA,QACAiD,OAAAzD,EAAA0D,cACAC,WAAA3D,EAAA2D,WACAC,YAAA5D,EAAA4D,YACAC,WAAA7D,EAAA6D,WACAC,WAAA9D,EAAA8D,WACA1B,QACAlC,QACAqB,UACAtB,QACA8D,YAAAjE,EAAAiE,YACAC,SAAAlE,EAAAkE,SACAC,MAAAnE,EAAAmE,MACArE,SACAuD,SACAtD,SACAE,cAECmE,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MDY6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAGjF,CAED,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GAA0D,SAASC,EAAUC,GElLhHH,GAAAD,EAAA,IAAAE,EAAA,SAAAG,GACA,GAAAQ,GAAAV,EAAAU,KAAAC,QACAoC,SAAA,EACAlC,WAAA,SAAAC,GACA,GAAA0B,GAAAzB,IACAA,MAAAD,QAAAZ,EAAAyE,MAAA7D,GACAwC,GAAApD,EAAA0E,MACAvD,MAAA,GACAwD,KAAA,GACAC,QAAA,KACAC,KAAA,KACAC,YAAA,EACAC,WAAA,EACAC,WAAA,KACAC,UAAA,SACAlD,IAAA,aACAmD,eAAA,QACAC,aAAA,EACAC,WAAA,IAEAvE,KAAAG,WAAAH,KAAAwE,UAAAxE,KAAAD,UAGAC,KAAAyE,MAAAzE,KAAAd,EAAA,iBACAc,KAAA0E,OAAA1E,KAAAd,EAAA,uBACAc,KAAA2E,QAAA3E,KAAAd,EAAA,mBACAc,KAAA4E,SAAA5E,KAAAd,EAAA,oBACAc,KAAA6E,QAAA7E,KAAAd,EAAA,mBAGAc,KAAAD,QAAAmE,YACAlE,KAAA4E,SAAAE,IAAA,iBACA9E,KAAAyE,MAAAK,IAAA,kBAIA9E,KAAA+E,SAAA/E,KAAAd,EAAA,oBACAc,KAAAD,QAAAgE,QACA7E,EAAA8F,KAAAhF,KAAAD,QAAAgE,QAAA,SAAAkB,EAAAC,GACAA,EAAAvE,IAAAwE,KAAA,KAAAF,GACAxD,EAAAsD,SAAAnC,OAAAsC,EAAAvE,OAGAX,KAAA+E,SAAAK,SAIApF,KAAAqF,YAAArF,KAAAd,EAAA,uBACAc,KAAAD,QAAAoE,YACAjF,EAAA8F,KAAAhF,KAAAD,QAAAoE,WAAA,SAAAc,EAAAC,GACAA,EAAAvE,IAAAwE,KAAA,KAAAF,GACAxD,EAAA4D,YAAAzC,OAAAsC,EAAAvE,OAKAX,KAAAD,QAAAiE,MAAAhE,KAAA4C,OAAA5C,KAAAD,QAAAiE,MAGAhE,KAAAuE,WAAA,EACAvE,KAAAD,QAAAuE,cACAtE,KAAA0E,OAAA7D,SAAA,gBAAAiE,KACAQ,OAAA,UACAC,kBAAA,cAEAvF,KAAA0E,OAAAc,GAAA,mBACA/D,EAAA8C,UAAuC9C,EAAAgE,SAAwBhE,EAAAiE,aAE/D1F,KAAAD,QAAAwE,WAAAvE,KAAA0F,aAKA9C,OAAA,SAAAjC,GACAX,KAAAyE,MAAA7B,OAAAjC,IAIAgF,MAAA,WACA3F,KAAAyE,MAAAkB,SAIAC,OAAA,WACA,MAAA5F,MAAA2E,SAIAX,KAAA,WACA,MAAAhE,MAAAyE,OAIAoB,OAAA,WACA,MAAA7F,MAAA6E,SAIA9B,KAAA,WACA/C,KAAAgC,SAAA,EACAhC,KAAAW,IAAAU,OAAA,SAIA2B,KAAA,WACAhD,KAAAgC,SAAA,EACAhC,KAAAW,IAAAgB,QAAA,SAIAmE,aAAA,SAAAvD,GACAvC,KAAA+E,SAAAgB,KAAA,IAAAxD,GAAA4C,KAAA,gBAIAa,cAAA,SAAAzD,GACAvC,KAAA+E,SAAAgB,KAAA,IAAAxD,GAAA4C,KAAA,gBAIAc,cAAA,SAAA1D,GACAvC,KAAAqF,YAAAU,KAAA,IAAAxD,GAAAS,QAIAkD,cAAA,SAAA3D,GACAvC,KAAAqF,YAAAU,KAAA,IAAAxD,GAAAQ,QAIAoD,aAAA,SAAA5D,EAAA6D,GACA,GAAAzF,GAAAX,KAAAqF,YAAAU,KAAA,IAAAxD,EACA5B,GAAA0F,IAAA,SACA1F,EAAA6E,GAAA,QAAAY,IAIA9F,MAAA,SAAAC,GACA,GAAAI,GAAAX,KAAA0E,MAIA,OAHAnE,IACAI,EAAAG,KAAAP,GAEAI,EAAAG,QAIA4E,SAAA,WACA1F,KAAAuE,WAAA,EACAvE,KAAA4E,SAAA0B,OAAA,MACAtG,KAAAyE,MAAAzB,OACAhD,KAAA6E,QAAA7B,OACAhD,KAAAuG,QAAA,cAIAd,OAAA,WACAzF,KAAAuE,WAAA,EACAvE,KAAA4E,SAAA0B,OAAA,QACAtG,KAAAyE,MAAApD,OAAA,QACArB,KAAA6E,QAAAxD,OAAA,QACArB,KAAAuG,QAAA,aAIAC,QAAA,WACAxG,KAAAd,EAAA,qBAAA6D,QAIA0D,OAAA,WACAzG,KAAAd,EAAA,qBAAA8D,QAIAwB,UAAA,SAAAzE,GACA,GAAA2G,GAAA,YAAA3G,EAAAwC,GAAA,YAAAxC,EAAAmB,IAAA,IAwBA,OAvBAnB,GAAAO,QACAoG,GAAA,6EACA3G,EAAAsE,eAAA,kCAEAtE,EAAA+D,OACA4C,GAAA,qBAAA3G,EAAA+D,KAAA,gBAEA4C,GAAA,oCAAA3G,EAAAO,MAAA,uBAIAoG,GAAA,gCACA,OAAA3G,EAAAqE,YACAsC,GAAA,kCAEAA,GAAA,8BACA,UAAA3G,EAAAqE,YACAsC,GAAA,kCAEAA,GAAA,6EAOA,QACA/G,SAEC+D,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MFoL6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAGhF,CAEF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GGxYnC,SAAAC,EAAA0H,EAAAzH,GACAH,GAAAD,EAAA,GAAAA,EAAA,IAAAA,EAAA,KAAAE,EAAA,SAAAS,EAAAmH,EAAAC,GAKA,GAAAC,GAAA7H,EAAAiB,MAAAN,WAMAmH,EAAA9H,EAAAiB,MAAAN,QACAoH,UACAzE,GAAA,GACAV,KAAA,GACAoD,KAAA,GACAgC,SAAA,MACAC,SAAA,MAGApH,WAAA,WAGAE,KAAAU,IAAA,aACAV,KAAAmH,gBAIAnH,KAAAwF,GAAA,SAAAxF,KAAAmH,cAAAnH,OAGAmH,cAAA,WACA,GAAAD,GAAA,GAAAJ,EAGAH,GAAA3B,KAAA2B,EAAAS,KAAApH,KAAAqH,YAAA,SAAAC,GACA,OAAAA,EAAAC,QAAA,cAEA,GAAAC,GAAAF,EAAAG,MAAA,eACAP,GAAA1G,IAAAgH,EAAAxH,KAAAqH,WAAAC,UACAtH,MAAAqH,WAAAC,KAEStH,MAGTA,KAAAQ,IAAA,WAAA0G,GAAwCQ,QAAA,KAMxCC,aAAA,SAAAC,GACA,MAAA5H,MAAAqH,WAAAH,SAAAxG,IAAAkH,IAGAC,QAAAC,OAAAC,KAAA,iBAMAC,EAAAjB,EAAAnH,QACAoH,SAAAL,EAAA/G,UAAyBmH,EAAAkB,UAAAjB,UACzBkB,UAAA,KACAC,iBAAA,KACAC,YAAA,GACAC,QAAA,IAGAvI,WAAA,SAAAC,GACAgH,EAAAkB,UAAAnI,WAAA6D,KAAA3D,MAGAA,KAAAqH,WAAAe,YAAApI,KAAAqH,WAAAc,iBAAA,IACAnI,KAAAqH,WAAAa,UAAAJ,OAAAC,KAAA,8BAAA/H,KAAAuC,GACAvC,KAAAqH,WAAAiB,QAAAR,OAAAC,KAAA,iBAMAQ,eAAA,WAEA,GAAAvI,KAAAqH,WAAAgB,OACA,WAIA,IAAA5G,GAAAzB,KACAwI,EAAAtJ,EAAAuJ,UAiBA,OAhBAvJ,GAAAwJ,QAAA1I,KAAAqH,WAAAa,WACAS,MAAAlH,EAAA4F,WAAAe,gBACSQ,QAAA,SAAAD,GACT,GAAAE,EACA,MAAAF,EAAAG,QAEAD,EAAAF,GAIAlH,EAAA4F,WAAAgB,QAAA,EACAQ,EAAA,MAEAL,EAAAO,QAAAF,KAGAL,KAIAQ,EAAA/J,EAAAgK,WAAArJ,QACAK,MAAA8G,IAQAmC,EAAAjK,EAAAU,KAAAC,QAKAE,WAAA,SAAAC,GAEAC,KAAAmJ,UAAA,EACAnJ,KAAAoJ,eAAA,EAGA,GAAAC,IACApJ,MAAAF,EAAAE,MACAU,IAAAX,KAAAW,OAIA2I,oBAAA,WACAtJ,KAAAW,IAAA2F,SAAAtG,KAAAuJ,WAAAjD,UACAtG,KAAAwJ,oBAIAA,iBAAA,SAAAC,GACA,GAAAhI,GAAAzB,MACAA,KAAAoJ,eAAApJ,KAAA0J,uBACA1J,KAAAoJ,eAAA,EACApJ,KAAA2J,kBAAA5G,OACA7D,EAAA0K,KAAAnI,EAAAxB,MAAAsI,kBAAAsB,KAAA,SAAAC,GACAA,IACArI,EAAAsI,aAAAD,GACArI,EAAA2H,eAAA,GAEA3H,EAAAkI,kBAAA3G,OACAvB,EAAA6H,0BAKAjJ,OAAA,WAEAL,KAAA2J,kBAAAzK,EAAA,UAAAoD,KAAA,0BACAtC,KAAAW,IAAAiC,OAAA5C,KAAA2J,kBAGA,IAAAK,GAAA9K,EAAA,YAAAoD,MACAC,GAAA,gBACA0H,YAAA,GAEAjK,MAAAW,IAAAiC,OAAAoH,EACA,IAAAE,GAAAlK,KAAAC,MAAA0H,aAAA,gBACAwC,EAAAjL,EAAA,YAAAkL,SAAAJ,GACAK,EAAAnL,EAAA,SAAAkL,SAAAD,EACA,IAAAD,EACAG,EAAAzH,OAAA,OAAAsH,EAAAI,KAAA,0BAEA,QAAAC,GAAA,EAA2BA,GAAAvK,KAAAC,MAAA0H,aAAA,WAAyC4C,IACpEF,EAAAzH,OAAA,OAAA2H,EAAA,QAKA,IAAA9I,GAAAzB,KACAwK,EAAAxK,KAAAC,MAAAS,IAAA,mBACA8J,GAEAxK,KAAA+J,aAAAS,GAIAtL,EAAA0K,KAAAnI,EAAAxB,MAAAsI,kBAAAsB,KAAA,SAAAC,GACArI,EAAAsI,aAAAD,KAOA9J,KAAAuJ,WAAAkB,OAAA,WACAhJ,EAAA+H,sBAOAE,mBAAA,WACA,UAKAgB,YAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAA5L,EAAA,QAAA6L,KAAAJ,GACAK,EAAAhL,KAAAC,MAAA0H,aAAA,eAWA,OAVAtF,UAAAwI,EACAC,EAAAxI,KAAA,UAAAuI,GAAAhK,SAAA,eACSmK,GACTJ,EAAAI,EAAAC,SACA,QAAAD,EAAAJ,IAAA,SAAAI,EAAAJ,IAEAE,EAAAjK,SAAA,gBAIAiK,GAGAI,WAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAA1D,MAAA,KACA4D,EAAAnM,EAAA,QACAoM,EAAAtL,KAAAC,MAAA0H,aAAA,UA+BA,OA7BA3H,MAAAmJ,UAAA,OACAkC,EAAAxK,SAAA,YAGAuK,EAAAH,SAAAK,EACA3E,EAAA3B,KAAAoG,EAAA,SAAAT,EAAAC,GACAS,EAAAzI,OAAA5C,KAAA0K,YAAAC,EAAAC,KACa5K,MAEboL,EAAAH,OAAAK,GAEA3E,EAAA3B,KAAAoG,EAAAG,MAAA,EAAAD,EAAA,YAAAX,EAAAC,GACAS,EAAAzI,OAAA5C,KAAA0K,YAAAC,EAAAC,KACa5K,MACbqL,EAAAzI,OAAA5C,KAAA0K,YAAAU,EAAAG,MAAAD,EAAA,GAAAhB,KAAA,KAAAgB,EAAA,KAEAA,EAAA,GAAAF,EAAAH,SAAAK,EAAA,GAEA3E,EAAA3B,KAAAoG,EAAA,SAAAT,EAAAC,GACAS,EAAAzI,OAAA5C,KAAA0K,YAAAC,EAAAC,KACa5K,MACbqL,EAAAzI,OAAA1D,EAAA,UAIAmM,EAAAzI,OAAA5C,KAAA0K,YAAAS,EAAA,EAAAG,IAGAtL,KAAAmJ,YACAkC,GAGAtB,aAAA,SAAApB,GACA,GAAAqB,GAAAhK,KAAAW,IAAAoF,KAAA,QACAY,GAAA3B,KAAA2D,EAAAG,QAAArB,MAAA,eAAA0D,EAAAP,GACA,KAAAO,GACAnB,EAAApH,OAAA5C,KAAAkL,WAAAC,KAESnL,SAQTwL,EAAAtC,EAAAtJ,QAEAE,WAAA,SAAAC,GACAmJ,EAAAjB,UAAAnI,WAAA6D,KAAA3D,KAAAD,GAGAwJ,WAAA5C,EAAAZ,KAAA/F,KAAAW,IAAA8K,UAAA,SAAAC,GACA,eAAAxM,EAAAwM,GAAA5G,IAAA,cAIAyE,aAA0BA,WAAAhI,QAG1BvB,KAAAuJ,WAAArK,EAAAqK,aAMAG,mBAAA,WACA,MAAA1J,MAAAW,IAAA2F,SAAAtG,KAAAuJ,WAAAoC,YAAA3L,KAAAuJ,WAAAjD,UAAA,KAQAsF,EAAA1C,EAAAtJ,QAEAE,WAAA,SAAAC,GACAmJ,EAAAjB,UAAAnI,WAAA6D,KAAA3D,KAAAD,GAGAC,KAAAuJ,WAAAvJ,KAAAW,IAAAmE,KACA+G,SAAA,WACAC,SAAA,SACAxF,OAAAvG,EAAAuG,QAAA,WAOAoD,mBAAA,WACA,MAAA1J,MAAAW,IAAAgL,YAAA3L,KAAAW,IAAAoL,eAAA/L,KAAAgM,GAAAC,gBAMA5C,EAAApK,EAAAU,KAAAC,QAGAsM,KACAC,MAAA,KACAC,MAAA,KACAC,IAAA,MAIA/D,QAAA,KAGAgE,WAAA,KAGAC,aAAA,KAGAC,SAAA,KAGA1M,WAAA,SAAAC,GAmDA,QAAA0M,GAAAC,EAAAC,GACA,OAAApC,GAAA,EAA+BA,EAAAoC,EAAA1B,OAAkBV,IACjD,GAAAoC,EAAApC,GAAAqC,MAAAF,GAAA,MAAAnC,EACA,UApDA,GAAAzC,GAAA+E,OAAA/E,MAaA,IAVAA,KAAAgF,QACA9M,KAAA8M,MAAAhF,EAAAgF,OAIAhF,KAAAiF,QACA/M,KAAA+M,MAAAjF,EAAAiF,OAIA/M,KAAA8M,OAAA9M,KAAA+M,MAAA,CAKA,GAAA9M,GAAAF,EAAAE,MACAiH,EAAAjH,EAAAS,IAAA,WAGA,IAAAT,EAAAS,IAAA,aAQA,GAHAV,KAAAwM,SAAAvM,EAAAS,IAAA,YAGA,OAAAV,KAAAwM,SACA,CAEA,KAAAtF,EAAAxG,IAAA,aAAAwG,EAAAxG,IAAA,aAAAwG,EAAAxG,IAAA,WAQA,WADAsM,SAAAC,IAAA,yDAJAjN,MAAAkM,IAAAC,MAAAjF,EAAAxG,IAAA,cACAV,KAAAkM,IAAAE,MAAAlF,EAAAxG,IAAA,cACAV,KAAAkM,IAAAG,IAAAnF,EAAAxG,IAAA,YAQA,UAAAV,KAAAwM,WAUAxM,KAAAkM,IAAAC,MAAAM,EAAA,QAAAvF,EAAAxG,IAAA,iBACAV,KAAAkM,IAAAE,MAAAK,EAAA,MAAAvF,EAAAxG,IAAA,iBACAV,KAAAkM,IAAAG,IAAA,KAGA,IAAArM,KAAAkM,IAAAC,OAAA,IAAAnM,KAAAkM,IAAAE,OAEA,WADAY,SAAAC,IAAA,yDAMA,IAAA5K,SAAArC,KAAAkM,IAAAC,MAAA,CAKA,IAAAlM,EAAAsC,GAIA,WADAyK,SAAAC,IAAA,8DAKA,IAPAjN,KAAAsM,WAAArM,EAAAsC,IAOAtC,EAAAS,IAAA,WAIA,WADAsM,SAAAC,IAAA,wEAFAjN,MAAAsI,QAAArI,EAAAS,IAAA,WAOAT,EAAAS,IAAA,kBACAV,KAAAuM,aAAAtM,EAAAS,IAAA,gBAIA,IAAAwM,GAAA,GAAArG,GAAAsG,gBACAlN,MAAA,GAAA4G,GAAAuG,YACA9M,MAAA,YACA+M,WAAA,cACA9K,GAAA,aAKAvC,MAAAG,WAAAJ,EAAAY,KAGAX,KAAAW,IAAAiC,OAAAsK,EAAA7M,SAAAM,KAGAX,KAAAgD,WAIAd,QAEAoL,eAAA,OACAC,WAAA,QAIAxK,KAAA,SAAAyK,GAEA,QAAAC,GAAAC,GACA,OAAAC,MAAAC,WAAAF,KAAAG,SAAAH,GAIA,UAAA1N,KAAAkM,IAAAC,MAAA,CAIA,GAAAd,GAAAnM,EAAAsO,EAAAM,QAAAjB,SAGAV,EAAAd,EAAA0C,WAAAC,GAAAhO,KAAAkM,IAAAC,OAAArL,OACAsL,EAAAf,EAAA0C,WAAAC,GAAAhO,KAAAkM,IAAAE,OAAAtL,OAGAuL,EAAArM,KAAAkM,IAAAG,IAAAhB,EAAA0C,WAAAC,GAAAhO,KAAAkM,IAAAG,KAAAvL,OAAAsL,CAGA,KAAAD,EAAAS,MAAA,YAAAT,GAAAsB,EAAArB,GAAA,CAGA,GAAA6B,IACA3B,WAAAtM,KAAAsM,WACA4B,YAAA/B,EAAA,IAAAC,EAAA,IAAAC,GAIA8B,EAAA9C,EAAA8C,SACAC,EAAAD,EAAAC,KAAA,GACAC,EAAAF,EAAAE,IAAAnP,EAAAqC,QAAAoK,YAAA,CAGAzM,GAAA,YAAA4F,KAA+B+G,SAAA,QAAAwC,MAAA,KAAAD,OAAA,OAC/BlP,EAAA,YAAAmH,IAAA,SACAnH,EAAA,YAAAoP,MAAAtO,KAAAuO,wBAAAvO,KAAAsI,QAAA2F,EAAAjO,KAAAuM,eAGArN,EAAA,YAAA6D,WAGA7D,GAAA,YAAA8D,SAKAA,KAAA,WACAhD,KAAAW,IAAAoF,KAAA,YAAA/C,QAIAuL,wBAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAjN,GAAAzB,IAGA,mBACA,GAAA2O,KAwEA,OAvEAD,KACAC,EAAA,WAAAD,GAEAxP,EAAA0P,MACAC,IAAAL,EAAA,gBAAAtP,EAAA4P,MAAAH,GACAI,SAAA,OACAC,MAAA,WAEAvN,EAAAqL,MAAA/J,MACAzC,MAAA,wBACA0D,KAAA,oGACAD,SACAkL,OAAA,WACAxN,EAAAqL,MAAA9J,YAKA4F,QAAA,SAAAsG,GACAzN,EAAAqL,MAAA/J,MACAzC,MAAA,4CACAyD,SACAkL,OAAA,WACAxN,EAAAqL,MAAA9J,QAEAmM,8BAAA,WAEA1N,EAAAqL,MAAA/J,MAEAzC,MAAA,kCACA0D,KAAAkL,EACAnL,SACAkL,OAAA,WACAxN,EAAAqL,MAAA9J,QAEAoM,uBAAA,WAEA3N,EAAAqL,MAAA9J,OAGAvB,EAAAqL,MAAAnM,IAAAoF,KAAA,0BAAAf,KAAA,WAEA,GAAAqK,GAAAnQ,EAAAc,MAAAwC,KACAiM,GAAAlM,GAAA8M,EAGA5N,EAAAsL,MAAAuC,KACAhP,MAAA,YACAuB,KAAA,MACA0N,QAAAf,EAAA,cAAAtP,EAAA4P,MAAAL,YAOAe,4BAAA,WAEA/N,EAAAqL,MAAA9J,OAGAvB,EAAAsL,MAAAuC,KACAhP,MAAA,YACAuB,KAAA,MACA0N,QAAAf,EAAA,cAAAtP,EAAA4P,MAAAL,aAOA,MA6BAgB,EAAA,SAAA1P,GAEAA,EAAAE,QACAF,EAAAE,MAAA,GAAA+H,GAAAjI,EAAA2P,gBAGA,IAAAC,GAAA5P,EAAA4P,WACAC,EAAA7P,EAAA6P,eAGA7P,GAAA6P,eACA7P,GAAA4P,iBACA5P,GAAA2P,cAGA,IAAAG,GAAAD,EAAA,GAAAhE,GAAA7L,GACA,GAAAyL,GAAAzL,EAWA,OAVA8P,GAAAxP,SAEAsP,IACAA,EAAA/M,OAAAiN,EAAAlP,KAIAkP,EAAAvG,uBAGAuG,EAGA,QACA9I,UACAiB,iBACAgB,oBACAE,4BACAuG,oCAGC/L,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MH0Y6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,GAAIA,EAAoB,KAGxG,CAEF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GInjCnC,SAAAC,EAAAC,GAEAH,GAAAD,EAAA,IAAAE,EAAA,SAAAG,GAGA,GAAA2Q,GAAA7Q,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GACAC,KAAAD,QAAAZ,EAAAyE,MAAA7D,GACAwC,GAAApD,EAAA0E,MACAvD,MAAA,GACAyP,SAAA,QACAjM,KAAA,GACA5C,IAAA,4BACA8O,SAAA,iBAEAhQ,KAAAG,WAAAH,KAAAwE,UAAAxE,KAAAD,SACA,IAAA0B,GAAAzB,IACAd,GAAAc,KAAAgM,IAAAxG,GAAA,mBACAtG,EAAA,YAAA8D,OACAjD,EAAAkQ,UAAAxO,EAAAM,UACAhC,EAAAkQ,YAGA/Q,EAAAc,KAAAgM,IAAAkE,SAAmC5P,MAAAP,EAAAmQ,QAAA9L,UAAA,YAInCoC,QAAA,WACAxG,KAAAW,IAAAE,SAAA,YACAb,KAAA+B,UAAA,GAIA0E,OAAA,WACAzG,KAAAW,IAAAC,YAAA,YACAZ,KAAA+B,UAAA,GAIAoO,KAAA,WACAnQ,KAAAW,IAAAC,YAAAZ,KAAAD,QAAAmB,KAAAL,SAAAb,KAAAD,QAAAiQ,UAAA7K,KAAA,eACAnF,KAAAd,EAAA,SAAA0B,YAAAZ,KAAAD,QAAA+D,MAAAjD,SAAA,sBACAb,KAAAd,EAAA,UAAA4B,KAAA,eAIAsP,OAAA,WACApQ,KAAAW,IAAAC,YAAAZ,KAAAD,QAAAiQ,UAAAnP,SAAAb,KAAAD,QAAAmB,KAAAiE,KAAA,eACAnF,KAAAd,EAAA,SAAA0B,YAAA,sBAAAC,SAAAb,KAAAD,QAAA+D,MACA9D,KAAAd,EAAA,UAAA4B,KAAAd,KAAAD,QAAAO,QAIAkE,UAAA,SAAAzE,GACA,GAAA2M,GAAA,eAAA3M,EAAAwC,GAAA,iCAAAxC,EAAAgQ,SAAA,2BAA8GhQ,EAAAmB,IAAA,IAM9G,OALAnB,GAAA+D,OACA4I,GAAA,qBAAA3M,EAAA+D,KAAA,aAEA4I,GAAA,uBAAA3M,EAAAO,MAAA,sBAQAgD,EAAAwM,EAAAlQ,QACAE,WAAA,SAAAC,GACA+P,EAAA7H,UAAAnI,WAAA6D,KAAA3D,KAAAD,IAEAyE,UAAA,SAAAzE,GACA,gBAAAA,EAAAwC,GAAA,YAAAxC,EAAAmB,IAAA,YAAAnB,EAAAsQ,MAAA,kCACAtQ,EAAAO,MAAA,cAAAP,EAAA+N,QAAA,0BAAA/N,EAAA+D,KAAA,aAOAV,EAAAnE,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GAEAC,KAAAD,QAAAZ,EAAAyE,MAAA7D,GACAO,MAAA,sBACAgQ,OAAA,gEACA7P,MAAA,IAIAT,KAAAG,WAAAH,KAAAwE,aACAxE,KAAA0E,OAAA1E,KAAAd,EAAA,UACAc,KAAAuQ,MAAAvQ,KAAAd,EAAA,SAGAc,KAAAS,MAAAT,KAAAD,QAAAU,OAGAT,KAAA0E,OAAA5D,KAAAd,KAAAD,QAAAO,MAGA,IAAAmB,GAAAzB,IACAA,MAAAW,IAAA6E,GAAA,mBACA/D,EAAA+O,QAAA,IAAA/O,EAAA+O,SAAA,KACA/O,EAAAhB,MAAAgB,EAAA+O,SACA/O,EAAA1B,QAAAkQ,SAAAxO,EAAA1B,QAAAkQ,aAUAxP,MAAA,SAAA2B,EAAAqO,GAaA,MAZApO,UAAAD,IACAqO,GACA,IAAArO,IACAA,MAAAqO,GAAA,MAGAzQ,KAAAwQ,QAAApO,EACApC,KAAAuQ,MAAA3P,cACAC,SAAA,QACAA,SAAAb,KAAAD,QAAAuQ,MAAAlO,IACApC,KAAAD,QAAA2Q,UAAA1Q,KAAAD,QAAA2Q,SAAAtO,IAEApC,KAAAwQ,SAKAhM,UAAA,WACA,yFAUArB,EAAAlE,EAAAU,KAAAC,QACAE,WAAA,SAAAC,GAEAC,KAAAD,QAAAZ,EAAAyE,MAAA7D,GACAwC,GAAApD,EAAA0E,MACAvD,MAAA,GACAyP,SAAA,QACA7O,IAAA,iBACA4C,KAAA,GACAoM,QAAA,GACAD,QAAA,OAIAjQ,KAAAG,WAAAH,KAAAwE,UAAAxE,KAAAD,UAGAC,KAAA2Q,QAAA3Q,KAAAW,IAAAoF,KAAA,UAGA,IAAAtE,GAAAzB,IACAd,GAAAc,KAAAgM,IAAAxG,GAAA,mBAEAtG,EAAA,YAAA8D,OAGAjD,EAAAkQ,UAAAxO,EAAAM,UACAhC,EAAAkQ,YAKAjQ,KAAA2Q,QAAAT,SAAmC5P,MAAAP,EAAAmQ,QAAA9L,UAAA,YAInCoC,QAAA,WACAxG,KAAA2Q,QAAA9P,SAAA,YACAb,KAAA+B,UAAA,GAIA0E,OAAA,WACAzG,KAAA2Q,QAAA/P,YAAA,YACAZ,KAAA+B,UAAA,GAIA6O,QAAA,SAAAC,GACA7Q,KAAAd,EAAA,KAAA0B,YAAAZ,KAAAD,QAAA+D,MAAAjD,SAAAgQ,GACA7Q,KAAAD,QAAA+D,KAAA+M,GAIArM,UAAA,SAAAzE,GAEA,GAAA+Q,GAAA,EACA/Q,GAAAO,QACAwQ,EAAA,eAIA,IAAApE,GAAA,YAAA3M,EAAAwC,GAAA,mBAAAxC,EAAAgQ,SAAA,KAA6Fe,EAAA,YAAA/Q,EAAAmB,IAAA,wBAU7F,OAPAwL,IADA3M,EAAAO,MACA,qBAAAP,EAAA+D,KAAA,gCACA/D,EAAAO,MAAA,UAEA,qBAAAP,EAAA+D,KAAA,MAEA4I,GAAA,kBASArJ,EAAApE,EAAAU,KAAAC,QAEAmR,MAAA,KAGAjR,WAAA,SAAAC,GAEAC,KAAAD,QAAAZ,EAAAyE,MAAA7D,GAEAwC,GAAA,GACAjC,MAAA,GACAyP,SAAA,QACAiB,KAAA,QACAlN,KAAA,KACAmM,QAAA,KACA/O,IAAA,gCACAgP,QAAA,GAGApC,OAAA,GACAuC,KAAA,GACAY,SAAA,KACAjP,SAAA,EACAkP,IAAA,KAIAlR,KAAAG,WAAAjB,EAAAc,KAAAwE,UAAAxE,KAAAD,UAGA,IAAAoR,GAAAjS,EAAAc,KAAAgM,IAAAjG,KAAA,SAGAtE,EAAAzB,IACAmR,GAAA3L,GAAA,iBAAAgI,GAEAtO,EAAA,YAAA8D,OAGAwK,EAAA4D,iBAGA3P,EAAA1B,QAAAkQ,SACAxO,EAAA1B,QAAAkQ,YAKAjQ,KAAAD,QAAAiC,SACAhC,KAAAgD,OAGAmO,EAAAjB,SAA4B5P,MAAAP,EAAAmQ,QAAA9L,UAAA,YAI5BrB,KAAA,WACA7D,EAAAc,KAAAgM,IAAAjJ,QAIAC,KAAA,WACA9D,EAAAc,KAAAgM,IAAAhJ,QAIAqO,QAAA,SAAAtR,GAEA,GAAAuR,IACAhR,MAAA,GACAwN,OAAA,GACAuC,KAAA,GACAJ,QAAA,KACAsB,SAAA,EACAzN,KAAA,KACA5C,IAAA,wBAIAoQ,GAAAnS,EAAAyE,MAAA7D,EAAAuR,GAGAtR,KAAA+Q,QAEA7R,EAAAc,KAAAgM,IAAApJ,OAAA5C,KAAAwR,iBAGAxR,KAAA+Q,MAAA7R,EAAAc,KAAAgM,IAAAjG,KAAA,SAIA,IAAA0L,GAAAvS,EAAAc,KAAA0R,kBAAAJ,GAGAG,GAAAjM,GAAA,iBAAAgI,GACA8D,EAAArB,UACAzC,EAAA4D,iBACAE,EAAArB,aAKAjQ,KAAA+Q,MAAAnO,OAAA6O,GAGAH,EAAAC,SACAvR,KAAA+Q,MAAAnO,OAAA1D,EAAAc,KAAA2R,sBAKAD,kBAAA,SAAA3R,GACA,GAAA2G,GAAA,sCACA3G,EAAAsQ,KAAA,aAAAtQ,EAAA+N,OAAA,IAWA,OAVA/N,GAAA6R,WACAlL,GAAA,aAAA3G,EAAA6R,SAAA,KAEAlL,GAAA,IACA3G,EAAA+D,OACA4C,GAAA,gBAAA3G,EAAA+D,KAAA,OAEA4C,GAAA,IAAA3G,EAAAO,MACA,aAMAkR,cAAA,WACA,4CAAAxR,KAAAD,QAAAiR,KAAA,mBAGAW,iBAAA,WACA,+BAIAnN,UAAA,SAAAzE,GAEA,GAAA+Q,GAAA,GACAe,EAAA,EACA9R,GAAAO,MACAwQ,EAAA,eAEAe,EAAA,cAEA,IAAAnF,GAAA,YAAA3M,EAAAwC,GAAA,mBAAAxC,EAAAgQ,SAAA,KAA6Fe,EAAA,qBAAA/Q,EAAAmB,IAAA,4EAC7F2Q,EAAA,uBACA9R,EAAA+D,KAAA,KAMA,OALA/D,GAAAO,QACAoM,GAAA,6BAAuC3M,EAAAO,MAAA,WAEvCoM,GAAA,iBAMA,QACAxJ,cAAA4M,EACAxM,aACAH,aACAC,cACAC,eAECK,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MJqjC6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAIlF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GK97CnC,SAAAC,EAAAC,GACAH,GAAAD,EAAA,IAAAE,EAAA,SAAAG,GAKA,GAAAQ,GAAAV,EAAAU,KAAAC,QAEAyL,IAAA,KAGAlC,UAAA,EAGA2I,gBACAvC,QAAA,wBACAmB,SAAA,KACAqB,WAAA,KACAC,UAAA,KACA9Q,IAAA,WACA+Q,OAAA,IAIA/P,QACAoM,MAAA,WACA4D,SAAA,eAIApS,WAAA,SAAAC,GAEAC,KAAAD,QAAAZ,EAAAyE,MAAA7D,EAAAC,KAAA8R,eAGA,IAAAnR,GAAAzB,EAAAc,KAAAwE,UAAAxE,KAAAD,SAGAC,MAAAmS,OAAAxR,EAAAoF,KAAA,SACA/F,KAAAoS,OAAAzR,EAAAoF,KAAA,SACA/F,KAAAqS,UAAA1R,EAAAoF,KAAA,YAGA/F,KAAAG,WAAAQ,GAGAX,KAAAqL,IAAArL,KAAAsS,QAIAC,UAAA,SAAA5R,GACA,GAAA6R,GAAAtT,EAAA,YACAsT,GAAA5P,OAAAjC,GACAX,KAAAqL,IAAAzI,OAAA4P,IAIAC,aAAA,WAEAzS,KAAAmS,OAAAvP,OAAA5C,KAAAqL,KAGArL,KAAAqL,IAAAnM,EAAA,cAIAoQ,IAAA,SAAA3O,EAAAmQ,EAAA4B,GACA,GAAAF,GAAAtT,EAAA,YACA4R,IACA0B,EAAA1N,IAAA,QAAAgM,GAEA4B,GACAF,EAAA1N,IAAA,aAAA4N,GAEAF,EAAA5P,OAAAjC,GACAX,KAAAqL,IAAAzI,OAAA4P,IAIA5P,OAAA,SAAAL,EAAAoQ,GACA3S,KAAA4S,QAAArQ,EAAAoQ,GAAA,IAIAE,QAAA,SAAAtQ,EAAAoQ,GACA3S,KAAA4S,QAAArQ,EAAAoQ,GAAA,IAIAjS,IAAA,SAAA6B,GACA,MAAAvC,MAAAW,IAAAoF,KAAA,IAAAxD,IAIAuQ,IAAA,SAAAvQ,GACA,GAAA2C,GAAAlF,KAAAoS,OAAArM,KAAA,IAAAxD,EACA2C,GAAA+F,OAAA,IACA/F,EAAAE,SACApF,KAAAmJ,YACAnJ,KAAA+S,aAKAC,OAAA,WACAhT,KAAAoS,OAAAzM,QACA3F,KAAAmJ,UAAA,EACAnJ,KAAA+S,YAIAtS,MAAA,SAAAwS,GAEAjT,KAAAkT,OAAAlT,KAAAoS,OAAArM,KAAA,YAAAzD,KAAA,MAGAD,SAAA4Q,IACAjT,KAAAoS,OAAArM,KAAA,MAAAnF,YAAA,WACAqS,GACAjT,KAAAoS,OAAArM,KAAA,IAAAkN,GAAApS,SAAA,WAKA,IAAAsS,GAAAnT,KAAAoS,OAAArM,KAAA,YAAAzD,KAAA,KACA,OAAAD,UAAA8Q,EACA,MAGAA,GAAAnT,KAAAkT,QAAAlT,KAAAD,QAAA2Q,UACA1Q,KAAAD,QAAA2Q,SAAAuC,GAIAE,IAKAC,KAAA,WACA,MAAApT,MAAAoS,OAAArM,KAAA,MAAAkF,QAIA2H,QAAA,SAAArQ,EAAAoQ,EAAAE,GAEA7S,KAAA8S,IAAAvQ,GAGAvC,KAAAqL,IAAA/I,KAAA,KAAAC,GAGAsQ,EACA7S,KAAAoS,OAAAS,QAAA7S,KAAAqL,KAEArL,KAAAoS,OAAAxP,OAAA5C,KAAAqL,KAIAsH,IACA3S,KAAAqL,IAAArI,OACAhD,KAAAqL,IAAAhK,UAIArB,KAAAqL,IAAArL,KAAAsS,OAGAtS,KAAAmJ,YACAnJ,KAAA+S,YAIAT,KAAA,WACA,MAAApT,GAAA,cAAAc,KAAAD,QAAAkS,OAAA,YAIAoB,SAAA,SAAA7F,GAEA,GAAA8F,GAAAtT,KAAAS,QACAwS,EAAA/T,EAAAsO,EAAAM,QAAAyF,QAAA,MAAAjR,KAAA,KACA,KAAA2Q,GAEAA,GAAAK,GAAAL,IACAjT,KAAAD,QAAAiS,UACAhS,KAAAD,QAAAiS,UAAAiB,GAEAjT,KAAAS,MAAAwS,KAOAO,YAAA,SAAAhG,GACA,GAAA/M,GAAAT,KAAAS,OACAA,IAAAT,KAAAD,QAAAgS,YACA/R,KAAAD,QAAAgS,WAAAtR,IAKAsS,SAAA,WACA,GAAA/S,KAAAmJ,UACAnJ,KAAAqS,UAAAtP,OAEA/C,KAAAqS,UAAArP,QAKAwB,UAAA,SAAAzE,GACA,4BACAA,EAAAmB,IAAA,qDAIAnB,EAAAwP,QAAA,qBAKA,QACA5P,SAGC+D,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MLg8C6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAIlF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GAA0D,SAASC,EAAU0H,EAAGzH,GMzqDnHH,KAGAC,EAAA,WAKA,GAAAoO,GAAAnO,EAAAiB,MAAAN,QACAoH,UACA1G,MAAA,GACA+M,WAAA,GACAoG,SAAA,KACAC,aAAA,KACAC,gBAAA,EACApR,GAAA,KACA8N,KAAA,KACAvC,OAAA,KACA8F,SAAA,EACA5R,SAAA,EACA6R,qBAOA1G,EAAAlO,EAAAU,KAAAC,QAEAE,WAAA,WAEAE,KAAAC,MAAAoH,WAAAwM,gBAAgDzP,UAAA,UAChDpE,KAAAC,MAAA6T,KAAA,SAAA9T,KAAAK,OAAAL,OAGAK,OAAA,WAEAL,KAAAW,IAAAuP,QAAA,OAEA,IAAA6D,GAAA/T,KAAAgU,SAAAhU,KAAAC,MAAAgU,SAKA,OAHAF,GAAA7D,QAAAlQ,KAAAC,MAAAS,IAAA,mBACAV,KAAAW,IAAAuT,YAAAH,GACA/T,KAAAG,WAAA4T,GACA/T,MAGAkC,QACAoM,MAAA,SAGAA,MAAA,SAAA6F,GAEA,MAAAxN,GAAAyN,WAAApU,KAAAC,MAAAS,IAAA,cACAV,KAAAC,MAAAS,IAAA,YAAAyT,IACA,IAGA,GAIAH,SAAA,SAAAjU,GACA,GAAAsU,GAAA,UAAAtU,EAAAO,MAAA,sBAqCA,OAnCAP,GAAA4T,iBACAU,GAAA,gBAGAA,GAAA,IAAAtU,EAAAsN,WAEAtN,EAAA6T,UACAS,GAAA,aAIAA,GAAA,IAEAtU,EAAAwC,KACA8R,GAAA,QAAAtU,EAAAwC,GAAA,KAGA8R,GAAA,UAAAtU,EAAAsQ,KAAA,IAEAtQ,EAAA+N,SACAuG,GAAA,YAAAtU,EAAA+N,OAAA,KAGA/N,EAAAiC,UACAqS,GAAA,2BAKAA,EADAtU,EAAA6T,QACA,MAAAS,EAAA,KAEA,SAAAA,EAAA,KAIAnV,EAAAmV,MAKAC,EAAArV,EAAAgK,WAAArJ,QACAK,MAAAmN,IAOAmH,EAAAtV,EAAAU,KAAAC,QAEAC,QAAA,MAEAC,WAAA,WACAE,KAAAK,UAGAA,OAAA,WAEA,GAAAoB,GAAAzB,IAwBA,OAvBAA,MAAAwU,WAAAxP,KAAA,SAAAyP,GAEA,GAAAC,GAAAxV,EAAA,QACAoD,KAAA,6BACAA,KAAA,QAAAmS,EAAApN,WAAA/G,OACAO,SAAA,2BACAA,SAAA4T,EAAApN,WAAAgG,YACAjD,SAAA3I,EAAAd,KACA2N,MAAAmG,EAAApN,WAAAoM,SAGAgB,GAAApN,WAAAwM,gBACAa,EAAAxE,QAAAuE,EAAApN,WAAAwM,eAIA,IAAAH,GAAAe,EAAA/T,IAAA,UACAgT,IACAiB,eAAAD,EAAAhB,KAKA1T,QAUA4U,EAAA,SAAAC,EAAAC,GAGAA,SAGA,IAAA/Q,GAAA,GAAAuQ,GACA3N,EAAAoO,IAAAF,EAAA,SAAAG,GACA,UAAA5H,GAAAzG,EAAA/G,OAAAoV,EAAAF,MAKA,WAAAP,IAAoCC,WAAAzQ,IAKpC,QACAqJ,aACAD,iBACAmH,uBACAC,qBACAK,6BAEClR,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MN2qD6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,GAAIA,EAAoB,KAI1G,SAASF,EAAQC,EAASC,GOr2DhC,GAAAmW,GAAAlW,EAAAC,GAEA,SAAAkW,GAKAnW,GAAAD,EAAA,IAAAmW,EAAA,EAAAjW,EAAA,kBAAAiW,KAAAvR,MAAA7E,EAAAE,GAAAkW,IAAA5S,SAAArD,IAAAJ,EAAAC,QAAAG,KAMC,SAAAmW,GACD,YAEA,IAAAjW,GAAAiW,CAQAjW,GAAAkW,GAAAC,mBAAA,SAAAC,GAEA,GAAAC,GAAA,YAAAD,KAAAC,SAAA,GACAC,EAAA,YAAAF,KAAAE,SAAA,EACAC,EAAA,gBAAAH,KAAAG,cAAA,EACAC,EAAA,aAAAJ,KAAAI,UAAA,KACAC,EAAA,aAAAL,KAAAK,UAAA,KAGAC,EAAA1W,EAAAc,KAiFA,OAhFA4V,GAAA/U,SAAA,iBAAAyN,MAAA,SAAAd,GAEA,KAAAtO,EAAAc,MAAA+N,SAAA,UAAA9C,OAAA,IAIA2K,EAAAhV,YAAA,gBAGA,IAkBAiV,GAAAC,EAlBAC,EAAA,SAAAC,GACAJ,EAAA7P,KAAA,UAAAX,SAEA,KAAA4Q,EACAJ,EAAA7K,KAAAiL,GAGAJ,EAAA9U,KAAA,QAEA8U,EAAA/U,SAAA,iBAEA6U,GACAA,EAAAM,IAKAC,EAAA,YAAAX,KAAAW,SAAAL,EAAA7K,MAGA0K,IACAI,EAAA3W,EAAA,eACAoD,MAAuB4T,KAAAV,EAAAW,KAAAZ,IAAiCxK,KAAA7L,EAAAkX,KAAAH,IACxDI,MAAA,SAAA7I,GACA,KAAAA,EAAA8I,SAEAP,EAAAE,KAGAH,EAAA5W,EAAA,aAAA6L,KAAA,QAAAuD,MAAA,WAGA,MAFAyH,GAAAF,EAAArT,QAEA,KAIAqT,EAAA3W,EAAA,wBAAAoD,MAAwD7B,MAAAvB,EAAAkX,KAAAH,GAAA7C,KAAAmC,IACxDgB,KAAA,WACAR,EAAAE,KACaI,MAAA,SAAA7I,GACb,KAAAA,EAAA8I,QAEApX,EAAAc,MAAAuG,QAAA,QACiB,KAAAiH,EAAA8I,SAEjBP,EAAA7W,EAAAc,MAAAwC,OAIAgL,EAAAgJ,oBAKAZ,EAAA7K,KAAA,IACA6K,EAAAhT,OAAAiT,GACAC,GACAF,EAAAhT,OAAAkT,GAEAD,EAAAY,QACAZ,EAAAa,SAGAlJ,EAAAgJ,qBAIAb,GACAC,EAAAtT,KAAA,QAAAqT,GAAAzF,UAGA0F,MPg3DM,SAAShX,EAAQC,EAASC,GAE/B,GAAIE,IAA0D,SAASC,EAAUC,GQp+DlFF,EAAA,WAKA,QAAA2X,GAAAC,GACAA,GAAA,EAEA,KADA,GAAAC,GAAA,eACAA,EAAAC,KAAAF,IACAA,IAAAG,QAAAF,EAAA,QAEA,OAAAD,GAMA,GAAAI,GAAA,SAAAC,GACA,iBAAAA,IAOAC,EAAAjY,EAAAiB,MAAAN,QACAoH,UACAmQ,iBACAC,SAAA,IACAC,WAAA,SAAAvN,GAAsC,WAMtCwN,GAAA,WACA,GAAAC,GAAArY,EAAAuJ,WACAhH,EAAAzB,KACAmX,EAAA1V,EAAAf,IAAA,iBACA2W,EAAA5V,EAAAf,IAAA,cACA0W,EAAA3V,EAAAf,IAAA,YACA8W,EAAA,WACAtY,EAAA0P,KAAAuI,GAAAvO,QAAA,SAAAkB,GACAuN,EAAAvN,GAEAyN,EAAAxO,QAAAe,GAIApI,WAAA8V,EAAAJ,KAKA,OADAI,KACAD,KASAE,EAAA,SAAAC,GAEAA,IAAkBA,EAAA,WAGlB,qBACAA,MAIA,QAAAC,GAAA,EAAmBA,EAAAD,EAAAzM,OAAmB0M,IACtCD,EAAAC,GAAAC,SAAAF,EAAAC,GAAApM,MAAA,MAOA,IAYAsM,GAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAC,EAfAC,EAAA,SAAAC,EAAAC,EAAAC,GACA,WAAAF,EAAA,IAAAC,EAAA,IAAAC,GAAA,KAIAC,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAC,MAAAC,IAAAP,EAAAG,GAAAG,KAAAE,IAAAR,EAAAG,IACAG,KAAAC,IAAAN,EAAAG,GAAAE,KAAAE,IAAAP,EAAAG,KACAE,KAAAC,IAAAL,EAAAG,GAAAC,KAAAE,IAAAN,EAAAG,KAOAI,GAAA,EACAC,EAAA,CACA,IAQA,IANA1B,EAAAsB,KAAAK,MAAA,SAAAL,KAAAM,UACA3B,GAAA,SAAAD,IAAA,GACAE,GAAA,MAAAF,IAAA,EACAG,EAAA,IAAAH,EACAQ,EAAAG,EAAAV,EAAAC,EAAAC,GACAsB,GAAA,EACA3B,EAAA,EAAmBA,EAAAD,EAAAzM,OAAmB0M,IAStC,GARAM,EAAAP,EAAAC,GACAO,GAAA,SAAAD,IAAA,GACAE,GAAA,MAAAF,IAAA,EACAG,EAAA,IAAAH,EACAK,EAAAE,EAAAN,EAAAC,EAAAC,GACAG,EAAAK,EAAAd,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,GAGAe,KAAAO,IAAArB,EAAAC,GAAA,IACA,IAAAC,EAAA,CACAe,GAAA,CACA,OAIAC,WACMD,GAAA,IAAAC,EAGN,qBAAA1B,GAAA8B,SAAA,IAAAC,OAAA,KAGA,QACAjD,YACAK,cACAE,sBACAO,qBAGC9T,KAAA9E,EAAAC,EAAAD,EAAAD,KAAAyD,SAAArD,IAAAJ,EAAAC,QAAAG,MRs+D6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAIlF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GAA0D,SAASC,GSpnEtGF,GACAD,EAAA,IACAA,EAAA,GACAA,EAAA,IACAE,EAAA,SAAA6a,EAAAC,EAAAC,GAIAF,KAAAtY,OAAAyY,YAEA,IAAAC,GAAA,WAMAC,EAAAjb,EAAAiB,MAAAN,OAAAka,EAAAK,eAAAva,QACAwa,cAAAH,EAEAna,WAAA,WACA,GAAAua,GAAAra,KAAAU,IAAA,WACA4Z,EAAAT,EAAAQ,GAAAE,QAAA,EACAva,MAAAsa,QACAta,KAAAwa,UACA,IAAAC,GAAAH,EAAAI,MACA,QAAAC,KAAAF,GAAA,CACA,GAAAha,GAAAga,EAAAE,GACAC,EAAAD,EAAAE,aACA7a,MAAAwa,QAAAI,GAAAna,IAGAqa,UAAA,WACA,MAAA9a,MAAAsa,MAAAS,WAEAC,OAAA,WACA,MAAAhb,MAAAwa,WAOAS,EAAAhc,EAAAgK,WAAArJ,OAAAka,EAAAK,eAAAva,QACAwa,cAAAH,EAGApS,QAAAC,OAAAC,KAAA,MACAmT,SAAA,EACAjb,MAAAia,IAGAiB,EAAAF,EAAArb,QAEAiP,IAAA,WACA,MAAA7O,MAAA6H,QAAA,cAAA7H,KAAAob,WAAA,gBAIAC,EAAAJ,EAAArb,QAEAiP,IAAA,WACA,MAAA7O,MAAA6H,QAAA,UAAA7H,KAAAsb,QAAA,cAEAJ,SAAA,GAKA,QACAhB,WACAiB,4BACAE,2BAGC3X,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MTqnE6B2E,KAAK9E,EAASC,EAAoB,KAI1D,SAASF,EAAQC,EAASC,GUnsEhC,GAAAC,GAAAC,CAGAD,IAAAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,KAAAE,EACA,SAAAG,EAAAoc,EAAAC,EAAAC,GACA,GAAA9b,GAAA6b,EAAA5b,QACAE,WAAA,SAAAC,GACA,GAAA0B,GAAAzB,IACAwb,GAAAvT,UAAAnI,WAAA6D,KAAA3D,KAAAb,EAAAyE,OACA8X,UAAA,SAAA3b,GAEAA,EAAAgE,SACA4X,QAAAC,YAAA,GAAAL,GAAAtY,QACAa,KAAA,WACAoM,QAAA,YAAAnQ,EAAAkF,KAAA,KAAAlF,EAAA8b,QAAA,IACAvb,MAAA,UACAY,IAAA,kBACA6O,SAAA,QACAE,QAAA,WACA2L,YAAAzL,OACA1O,EAAAqa,QAAAtV,UACA/E,EAAAsa,OAAAhc,EAAA,WACA6b,YAAAxL,SACA3O,EAAAqa,QAAArV,eAMA1G,EAAAic,QAAAjc,EAAAkc,YACAlc,EAAAmc,OAAA,oBACAC,MAAA,oCACAlX,KAAA,qBACApD,KAAA,SACAua,QAAA,QACAC,OAAA,aACA5b,MAAA,aACAV,UAAA,MAAAA,EAAAic,SAAA,oBACAM,KAAA,uLAIavc,KAObgc,OAAA,SAAAhc,EAAAqG,GACA,GAAA3E,GAAAzB,KACAuc,GACAjB,QAAAvb,EAAAwC,GACAia,aAAAzc,EAAA8b,QACAK,OAAAlc,KAAAyc,KAAAC,SAGA,OADA1c,MAAAuG,QAAA,SACA9E,EAAAkb,SAAAJ,IAKAzU,OAAA8U,KAAAC,MAAA,6CAAAN,OACApd,GAAA2d,SACAjb,KAAA,OACAgN,IAAA/G,OAAAC,KAAA,YACA0U,KAAAF,EACA3T,QAAA,SAAAmU,GACA3W,OACA3E,EAAAd,IAAAgF,QAAA/C,OAAA6Y,EAAA7S,QAAAmU,IACAlQ,OAAA/E,QAAA+E,OAAA/E,OAAAkV,kBAAAnQ,OAAA/E,OAAAkV,iBAAAC,mBAEAjO,MAAA,SAAA+N,GAGA,GAFA3W,OACA0B,OAAA8U,KAAAC,MAAA,yCAAAE,GACAA,KAAAG,SAAA,CACA,GAAAC,GAAA1b,EAAAgb,KAAAW,cAAAL,EAAAG,SACA,QAAAG,KAAAF,GAAA,CACA1b,EAAA6b,UAAAD,EAAAF,EAAAE,GACA,YAGA5b,GAAAqL,MAAA/J,MACAzC,MAAA,wBACA0D,KAAA+Y,KAAAQ,SAAA9B,EAAAzM,MAAAuN,GACAxY,SACAyZ,MAAA,WACA/b,EAAAqL,MAAA9J,gBA7BA8E,OAAA8U,KAAAC,MAAA,sEACAzW,UAwCAuW,SAAA,SAAAJ,GACA,GAAAkB,GAAAlB,EAAAL,OACAwB,EAAA,GACAC,EAAA,IACA,QAAAC,KAAAH,GAAA,CACA,GAAAI,GAAAJ,EAAAG,GACAP,EAAArd,KAAAyc,KAAA7P,MAAAgR,GACAE,EAAA9d,KAAA+d,WAAAV,GACAW,EAAAhe,KAAAie,WAAAZ,EACA,IAAAA,GAAAW,GAAAF,EAAA,CAIA,IAAAE,EAAAE,UAAA,MAAAL,EAEA,MADA7d,MAAAsd,UAAAD,IACA,CAEA,IAAAQ,KAAAM,MAAA,CACA,GAAAzQ,GAAAmQ,EAAAO,OAAAnT,OACAoT,EAAA3Q,EAAA,GAAAmQ,EAAAO,OAAA,IAAAP,EAAAO,OAAA,GAAAC,GACA,IAAAA,EACA,UAAAV,EACAA,EAAAU,MACyB,IAAAV,IAAAU,EAEzB,MADAre,MAAAsd,UAAAD,EAAA,mFACA,CAGA,SAAAK,EACAA,EAAAhQ,MACqB,IAAAgQ,IAAAhQ,EAErB,MADA1N,MAAAsd,UAAAD,EAAA,gHAAA3P,EAAA,wDAAAgQ,EAAA,UACA,OAtBA5V,QAAA8U,KAAAC,MAAA,4DA0BA,WAIA,QACAld,SAEC+D,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,KVwsEK,SAASJ,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GWx1EnC,SAAAE,GACAH,KAAAC,EAAA,WAGA,OACAsd,KAAA,SAAAvc,GACA,GAAAue,GAAApf,EAAA,UAAA2B,SAAA,gBAAA+B,OAAA7C,EAAAuc,KAEA,OADAgC,GAAAvY,KAAA,KAAAzD,KAAA,mBACAgc,GAGA1V,QAAA,SAAAmU,GAEA,IAAAA,EAAAwB,OAAAxB,EAAAwB,KAAAtT,OACA,MAAAjL,MAAAgP,MAAA+N,EAIA,IAAAyB,GAAAzB,EAAAwB,KAAAtT,OAGAwT,EAAA,EAEAA,GADA,GAAAD,EACA,YAEAA,EAAA,YAIA,IAAA9X,GAAA,oCACA+X,EAAA,kFACA,QAAA9G,KAAAoF,GAAA2B,QACAhY,GAAA,qCAAsDqW,EAAA2B,QAAA/G,GAAAgH,IAAA,KAAA5B,EAAA2B,QAAA/G,GAAA1S,KAAA,UAMtD,OAJAyB,IAAA,qQAOAsI,MAAA,SAAA+N,GACA,6MAKA6B,KAAAC,UAAA9B,EAAA1a,OAAA,GACA,qBAIAyc,aAAA,SAAA/e,GACA,GAAAgf,GAAA,qBACA,QAAApH,KAAA5X,GAAA+e,aAAA,CACA,GAAAE,GAAAjf,EAAA+e,aAAAnH,EACAoH,IAAAC,EAAA/Z,KACA+Z,EAAAnD,UACAkD,GAAA,aAAAC,EAAAnD,QAAA,KAEAlE,EAAA5X,EAAA+e,aAAA7T,OAAA,IACA8T,GAAA,MAEApH,GAAA5X,EAAA+e,aAAA7T,OAAA,IACA8T,GAAA,SAGA,MAAAA,GAAA,wHAICrb,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MXy1E6B2E,KAAK9E,EAASC,EAAoB,KAI1D,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,GYt6EnC,SAAAC,EAAAC,GACAH,GAAAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAE,EAAA,SAAAG,EAAA8f,EAAA1D,GAGA,GAAA5b,GAAAV,EAAAU,KAAAC,QAEAE,WAAA,SAAAC,GAEA,GAAA0B,GAAAzB,IAGAA,MAAAD,UACAC,KAAAiF,KAAAlF,EAAAkF,MAAA,UACAjF,KAAAkf,SAAAnf,EAAAmf,WAAA,EAGAlf,KAAAgB,QAAA,GAAAua,GAAAxa,QAGAf,KAAA8b,QAAA,GAAAmD,GAAAtf,MAAyCuB,IAAA,uBAGzClB,KAAA0W,OAAA,GAAA6E,GAAAnc,OAAAO,MAA0Cue,SAAAne,EAAAme,WAG1Cle,KAAAyU,OAAA,GAAA8G,GAAApY,YACAW,KAAA,gBACAiM,SAAA,OACAG,QAAA,cAAAlQ,KAAAiF,KACAgL,QAAA,WACAxO,EAAA6N,KACA/M,GAAAd,EAAAiV,OAAAjW,QACAwE,KAAAxD,EAAAiV,OAAA3L,YAMA/K,KAAAG,WAAAH,KAAAwE,UAAAzE,IACAC,KAAAd,EAAA,oBAAA0D,OAAA5C,KAAAgB,QAAAL,KACAX,KAAAd,EAAA,oBAAA0D,OAAA5C,KAAA8b,QAAAnb,KACAX,KAAAd,EAAA,mBAAA0D,OAAA5C,KAAAyU,OAAA9T,KACAX,KAAAd,EAAA,mBAAA0D,OAAA5C,KAAA0W,OAAA/V,MAIAF,MAAA,SAAA+B,GAEA,GAAAH,SAAAG,EAAA,CAEA,GADAxC,KAAA8b,QAAAnW,QACAzG,EAAAigB,QAAA3c,GACA,OAAAmV,KAAAnV,GAAA,CACA,GAAA4c,GAAA5c,EAAAmV,GACA0H,EAAA,KACAC,EAAA,IACA,WAAApgB,EAAA2C,KAAAud,IACAC,EAAAD,EAAA7c,GACA+c,EAAAF,EAAAna,MAEAoa,EAAAC,EAAAF,EAEA,MAAAC,GACArf,KAAAsP,KACA/M,GAAA8c,EACApa,KAAAqa,IAKAtf,KAAA+S,WAGA,GAAAwM,KAOA,OANAvf,MAAAd,EAAA,eAAA8F,KAAA,WACAua,EAAAC,MACAjd,GAAArD,EAAAc,MAAAmF,KAAA,MACAF,KAAA/F,EAAAc,MAAA+F,KAAA,iBAAAjF,WAGA,GAAAye,EAAAtU,OACA,KAEAsU,GAIAjQ,IAAA,SAAAvP,GACA,GAAA0B,GAAAzB,IACA,QAAAA,KAAAd,EAAA,QAAAa,EAAAwC,GAAA,MAAA0I,OACA,GAAA9L,EAAAwd,SAAA5c,EAAAwC,IAAA,CACA,GAAA5B,GAAAzB,EAAAc,KAAAyf,cACAld,GAAAxC,EAAAwC,GACA0C,KAAAlF,EAAAkF,OAEAtE,GAAA6E,GAAA,mBACA7E,EAAAyE,SACA3D,EAAAsR,aAEApS,EAAA6E,GAAA,uBACA7E,EAAAE,SAAA,uBAEAF,EAAA6E,GAAA;AACA7E,EAAAC,YAAA,uBAEAZ,KAAA8b,QAAAlZ,OAAAjC,GACAX,KAAA+S,eAEA/S,MAAAgB,QAAAI,QAAqCJ,QAAA,yBAAAhB,KAAAiF,KAAA,IAAAhE,OAAA,eAGrCjB,MAAAgB,QAAAI,QAAiCJ,QAAA,QAAAhB,KAAAiF,KAAA,8BAKjC7D,OAAA,SAAArB,GACAC,KAAA0W,OAAAtV,OAAArB,IAIAgT,SAAA,WACA/S,KAAAd,EAAA,eAAA+L,OAAA,IACAjL,KAAAkf,UAAAlf,KAAAyU,OAAAjO,UACAxG,KAAAd,EAAA,oBAAA6D,SAEA/C,KAAAyU,OAAAhO,SACAzG,KAAAd,EAAA,oBAAA8D,QAEAhD,KAAAD,QAAA2Q,UAAA1Q,KAAAD,QAAA2Q,YAIAlM,UAAA,SAAAzE,GACA,8LAWA0f,aAAA,SAAA1f,GACA,kBAAAA,EAAAwC,GAAA,6FAEAxC,EAAAkF,KAAA,kBAKA,QACAtF,SAGC+D,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,MZw6E6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAIlF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,Ga1kFnC,SAAAC,EAAAC,GACAH,GAAAD,EAAA,GAAAA,EAAA,KAAAE,EAAA,SAAAG,EAAAK,GAGA,GAAAkgB,GAAAzgB,EAAAU,KAAAC,QAEAE,WAAA,SAAAC,GAEA,GAAA0B,GAAAzB,IAGAA,MAAAD,QAAAZ,EAAAyE,MAAA7D,GACAiC,SAAA,EACAya,QACAla,GAAApD,EAAA0E,MACA8b,WAAA,wBACAC,UAAA,iBACAV,UAAA,IAIAlf,KAAAG,WAAA,6BAGAH,KAAA6f,SAAA3gB,EAAA,UACAc,KAAA8f,SAAA5gB,EAAAc,KAAAwE,UAAAzE,IACAC,KAAA+Q,MAAA7R,EAAA,kCAGAc,KAAAW,IAAAiC,OAAA5C,KAAA6f,UACA7f,KAAAW,IAAAiC,OAAA5C,KAAA+Q,OACA/Q,KAAAW,IAAAiC,OAAA5C,KAAA8f,UAGA9f,KAAAD,QAAAmf,WACAlf,KAAA+f,WAAA,GAAAvgB,GAAA4D,aACA6M,QAAA,WACAxO,EAAAvC,EAAA,SAAAiG,KAAA,cAAA1D,EAAAse,WAAAtf,SACAgB,EAAA8E,QAAA,aAGAvG,KAAA+Q,MAAAnO,OAAA5C,KAAA+f,WAAApf,MAIAX,KAAAD,QAAAiC,SACAhC,KAAAW,IAAAqC,OAIAhD,KAAAoB,OAAApB,KAAAD,QAAA0c,MAGApa,SAAArC,KAAAD,QAAAU,OACAT,KAAAS,MAAAT,KAAAD,QAAAU,OAIAT,KAAAwF,GAAA,oBACAxF,KAAAD,QAAA2Q,UAAA1Q,KAAAD,QAAA2Q,SAAA1Q,KAAAS,YAMAW,OAAA,SAAArB,GAEA,GAAAyQ,GAAAxQ,KAAAggB,WAMA,IAHAhgB,KAAA8f,SAAAna,QAGA3F,KAAAigB,iBAEAjgB,KAAA8f,SAAAld,OAAA5C,KAAAigB,iBAAAlgB,QAGA,QAAA4a,KAAA5a,GAAA,CACA,GAAAmgB,GAAAhhB,EAAAc,KAAAmgB,gBAAApgB,EAAA4a,IACAuF,GAAArf,SAAA,aACAqf,EAAAhQ,SAAiC5P,MAAAP,EAAA4a,GAAAzK,QAAA9L,UAAA,WACjCpE,KAAA8f,SAAAld,OAAAsd,GAKA,GAAAze,GAAAzB,IACAA,MAAAd,EAAA,SAAAsG,GAAA,oBACA/D,EAAAhB,MAAAgB,EAAAue,aACAve,EAAA8E,QAAA,YAIAvG,KAAAS,MAAA+P,GAGAxQ,KAAAoQ,UAKA3P,MAAA,SAAAwS,GAEA,GAAA5Q,SAAA4Q,IAEAjT,KAAAd,EAAA,SAAAiG,KAAA,cAEA,OAAA8N,GAAA,CAEAA,YAAAmN,SACAnN,MAGA,QAAA0E,KAAA1E,GACAjT,KAAAd,EAAA,gBAAA+T,EAAA0E,GAAA,MAAA0I,QAAAlb,KAAA,cAKA,GAAAqL,GAAAxQ,KAAAggB,WACA,IAAAhgB,KAAA+f,WAAA,CACA,GAAAtf,GAAA+P,CAIA/P,GAHAA,YAAA2f,OAGA3f,EAAAwK,OAFA,EAIAjL,KAAA+f,WAAAtf,QAAAT,KAAAsgB,SAEA,MAAA9P,IAKA+P,OAAA,SAAA9f,GACA,GAAA4B,SAAA5B,EAAA,CACAA,YAAA2f,SACA3f,MAEA,QAAAkX,KAAAlX,GACA,GAAAT,KAAAd,EAAA,gBAAAuB,EAAAkX,GAAA,MAAA1M,OAAA,EACA,SAIA,UAKAoV,MAAA,WACA,GAAAtgB,GAAAC,KAAAd,EAAA,SAAAmhB,OACA,OAAAtgB,GAAAkL,OAAA,EACAlL,EAAAyC,MAEA,MAMA2N,KAAA,WACA,GAAAnQ,KAAAsgB,UACAtgB,KAAAwgB,aAAAxgB,KAAAD,QAAA6f,UAAA,QACA5f,KAAA8f,SAAA9c,OACAhD,KAAA+Q,MAAA/N,SAMAoN,OAAA,WACA,GAAAK,GAAAzQ,KAAAsgB,OACA,IAAA7P,GACAzQ,KAAAwgB,aAAAxgB,KAAAD,QAAA4f,WAAA,UACA3f,KAAA8f,SAAA9c,OACAhD,KAAA+Q,MAAA/N,SAEAhD,KAAAygB,eACAzgB,KAAA8f,SAAAhb,IAAA,0BACA9E,KAAA+Q,MAAAhO,SAMAid,UAAA,WAEA,GAAAU,KAMA,OALA1gB,MAAAd,EAAA,YAAA8F,KAAA,WACA0b,EAAAlB,KAAAtgB,EAAAc,MAAAwC,SAIArD,EAAAwd,SAAA+D,GAKA1gB,KAAAD,QAAAmf,SACAwB,EAEAA,EAAA,GAPA,MAaAJ,MAAA,WACA,MAAAtgB,MAAAd,EAAA,cAAA+L,QAKAuV,aAAA,SAAAzV,EAAA9J,GACAjB,KAAA6f,SAAA9c,OACA/C,KAAA6f,SAAAjf,cACAZ,KAAA6f,SAAAhf,SAAA,0BAAAI,GACAjB,KAAA6f,SAAA/e,KAAAiK,IAKA0V,aAAA,WACAzgB,KAAA6f,SAAA7c,QAKAwB,UAAA,WACA,0CAKAmc,EAAAjB,EAAA9f,QACAugB,gBAAA,SAAAS,GACA,GAAAre,GAAApD,EAAA0E,KACA,4CACAtB,EAAA,WAAAvC,KAAAD,QAAA8B,KAAA,WAAA7B,KAAAD,QAAAwC,GAAA,YAAAqe,EAAAngB,MAAA,2CACA8B,EAAA,KAAAqe,EAAAzE,MAAA,oBAMA1Y,IACAA,GAAA9D,KAAAghB,EAAA/gB,QACAE,WAAA,SAAAC,GACAA,EAAA8B,KAAA,QACA8e,EAAA1Y,UAAAnI,WAAA6D,KAAA3D,KAAAD,KAKA,IAAAyD,KACAA,GAAA7D,KAAAghB,EAAA/gB,QACAE,WAAA,SAAAC,GACAA,EAAAmf,UAAA,EACAnf,EAAA8B,KAAA,WACA8e,EAAA1Y,UAAAnI,WAAA6D,KAAA3D,KAAAD,KAKA,IAAAwD,KA+CA,OA9CAA,GAAA5D,KAAA+f,EAAA9f,QAEAE,WAAA,SAAAC,GACA2f,EAAAzX,UAAAnI,WAAA6D,KAAA3D,KAAAD,IAKAU,MAAA,SAAAwS,GASA,MAPA5Q,UAAA4Q,IACAjT,KAAAd,EAAA,SAAAiG,KAAA,cACAnF,KAAAd,EAAA,SAAA0B,YAAA,UACAZ,KAAAd,EAAA,WAAA+T,EAAA,MAAA9N,KAAA,cAAAoO,QAAA,SAAA1S,SAAA,WAIAb,KAAAggB,aAKAG,gBAAA,SAAAS,GACA,GAAA1f,GAAA,MAAA0f,EAAA9c,IACA8c,GAAAzE,QACAjb,GAAA,cAEA,IAAAwF,GAAA,iCASA,OARAka,GAAA9c,OACA4C,GAAA,aAAAxF,EAAA,OAEAwF,GAAA,6BAAA1G,KAAAD,QAAAwC,GAAA,YAAAqe,EAAAngB,MAAA,MACAmgB,EAAAzE,QACAzV,GAAAka,EAAAzE,OAEAzV,GAAA,YAMAlC,UAAA,WACA,0EAKAkb,OACAiB,YACAld,QACAF,cACAC,aAGCE,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,Mb4kF6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,KAGhF,CACA,CACA,CACA,CAEF,SAASF,EAAQC,EAASC,GAE/B,GAAIC,GAA8BC,Gcv5FnC,SAAAC,EAAAC,EAAAyH,GACA5H,GAAAD,EAAA,IAAAE,EAAA,SAAAG,GAGA,GAAAQ,GAAAV,EAAAU,KAAAC,QAEAkS,gBACA+O,UAAA,GACA1c,WAAA,KACA2c,MAAA,KACA1H,IAAA,KACA1I,SAAA,MAIA5Q,WAAA,SAAAC,GAEAC,KAAAgC,SAAA,EACAhC,KAAA+gB,KAAA,KACA/gB,KAAA4E,SAAA,KACA5E,KAAAghB,UAAA,KACAhhB,KAAAihB,WAAA,KAGAjhB,KAAAD,QAAAZ,EAAAyE,MAAA7D,EAAAC,KAAA8R,eAGA,IAAAoP,GAAAhiB,EAAAc,KAAAwE,UAAAxE,KAAAD,SAGAC,MAAA+gB,KAAAG,EAAAnb,KAAA,mBACA/F,KAAA4E,SAAAsc,EAAAnb,KAAA,gBAGA/F,KAAAG,WAAA+gB,GAGAlhB,KAAAmhB,OAGA,IAAA1f,GAAAzB,IAWA,IARAA,KAAAD,QAAAoE,YACAjF,EAAA8F,KAAAhF,KAAAD,QAAAoE,WAAA,SAAAc,EAAAC,GACAA,EAAAvE,IAAAwE,KAAA,KAAAF,GACAxD,EAAAsf,KAAAhb,KAAA,eAAAnD,OAAAsC,EAAAvE,OAKAX,KAAAD,QAAA+gB,MAAA,CAEA,GAAAM,GAAAliB,EAAAc,KAAAqhB,kBAAArhB,KAAAD,SAGAC,MAAA+gB,KAAAne,OAAAwe,GAGAA,EAAAlR,SAA8B5P,MAAA,gBAAA8D,UAAA,SAAAwR,UAAAnU,EAAAd,MAG9BygB,EAAA5b,GAAA,iBAAAgI,GACA4T,EAAAlR,QAAA,QACAzO,EAAA1B,QAAA+gB,YAMA1N,KAAA,WACA,MAAAzM,GAAAyM,KAAApT,KAAAmhB,OAIA3Q,QAAA,WACA,MAAAxQ,MAAAW,IAAAoF,KAAA,oBAAAzD,KAAA,OAIAgN,IAAA,SAAAvP,GAEA,GAAA0B,GAAAzB,KAGAuC,EAAAxC,EAAAwC,GAGA+e,EAAApiB,EAAAc,KAAAuhB,cAAAxhB,IACAyhB,EAAAtiB,EAAAc,KAAAyhB,sBAAA1hB,GA6BA,IA1BAC,KAAAmhB,KAAA5e,KAAAxC,EAAA2hB,MAGA1hB,KAAAD,QAAA+gB,MACA9gB,KAAA+gB,KAAAhb,KAAA,YAAAmN,OAAAoO,GAEAthB,KAAA+gB,KAAAne,OAAA0e,GAIAE,EAAA5e,OAAA7C,EAAAY,KACAX,KAAA4E,SAAAhC,OAAA4e,GAGA,GAAAxhB,KAAAoT,SACAkO,EAAAzgB,SAAA,UACA2gB,EAAA3gB,SAAA,UACAb,KAAAghB,UAAAze,GAIAvC,KAAAD,QAAAqZ,KAAApZ,KAAAoT,QAAApT,KAAAD,QAAAqZ,KACApZ,KAAAW,IAAAoF,KAAA,YAAA/C,OAIAjD,EAAA2hB,MAAA,CACA,GAAAC,GAAAL,EAAAvb,KAAA,UACA4b,GAAAzR,SAA+B5P,MAAA,kBAAA8D,UAAA,SAAAwR,UAAAnU,EAAAd,MAC/BghB,EAAAnc,GAAA,mBAIA,MAHAmc,GAAAzR,QAAA,WACAzO,EAAAd,IAAAoF,KAAA,YAAAX,SACArF,EAAA2hB,SACA,IAKAJ,EAAA9b,GAAA,iBAAAgI,GAEAA,EAAA4D,iBAGArR,EAAAkQ,QACAlQ,EAAAkQ,UAEAxO,EAAAsB,KAAAR,KAKAvC,KAAAihB,aACAjhB,KAAAihB,WAAA1e,IAKAuQ,IAAA,SAAAvQ,GAEAvC,KAAAW,IAAAoF,KAAA,QAAAxD,GAAA6C,SACApF,KAAAW,IAAAoF,KAAA,IAAAxD,GAAA6C,SAGApF,KAAAghB,WAAAze,IACAvC,KAAAghB,UAAA,MAIA,MAAAhhB,KAAAghB,WACAhhB,KAAA+C,KAAA/C,KAAAghB,WAIAhhB,KAAAmhB,KAAA5e,UACAvC,MAAAmhB,KAAA5e,GAIAvC,KAAAoT,OAAApT,KAAAD,QAAAqZ,KACApZ,KAAAW,IAAAoF,KAAA,YAAAhD,QAKA6e,aAAA,WACA,OAAArf,KAAAvC,MAAAmhB,KACAnhB,KAAA8S,IAAAvQ,IAKAQ,KAAA,SAAAR,GAEAvC,KAAAW,IAAAU,OAAA,QACArB,KAAAgC,SAAA,EAGAO,IAEAvC,KAAAW,IAAAoF,KAAA,QAAA/F,KAAAihB,YAAArgB,YAAA,UACAZ,KAAAW,IAAAoF,KAAA,IAAA/F,KAAAihB,YAAArgB,YAAA,UACAZ,KAAAW,IAAAoF,KAAA,QAAAxD,GAAA1B,SAAA,UACAb,KAAAW,IAAAoF,KAAA,IAAAxD,GAAA1B,SAAA,UAGAb,KAAAihB,WAAA1e,GAIAvC,KAAAD,QAAA2Q,UACA1Q,KAAAD,QAAA2Q,SAAAnO,IAKAS,KAAA,WACAhD,KAAAW,IAAAgB,QAAA,QACA3B,KAAAgC,SAAA,GAIAiE,cAAA,SAAA1D,GACAvC,KAAA+gB,KAAAhb,KAAA,IAAAxD,GAAAS,QAIAkD,cAAA,SAAA3D,GACAvC,KAAA+gB,KAAAhb,KAAA,IAAAxD,GAAAQ,QAIAoD,aAAA,SAAA5D,EAAA6D,GACA,GAAAzF,GAAAX,KAAA+gB,KAAAhb,KAAA,IAAAxD,EACA5B,GAAA0F,IAAA,SACA1F,EAAA6E,GAAA,QAAAY,IAIA9F,MAAA,SAAAiC,EAAAhC,GACA,GAAAI,GAAAX,KAAAW,IAAAoF,KAAA,mBAAAxD,EAIA,OAHAhC,IACAI,EAAAG,KAAAP,GAEAI,EAAAG,QAIA+gB,QAAA,SAAAthB,GACA,GAAAqK,GAAA,CACA,QAAArI,KAAAvC,MAAAmhB,KACAnhB,KAAAM,MAAAiC,IAAAqI,EAAA,KAAArK,IAKAiE,UAAA,SAAAzE,GACA,4OASAshB,kBAAA,SAAAthB,GACA,kGAGAA,EAAA8gB,UACA,aAKAU,cAAA,SAAAxhB,GACA,GAAA2G,GAAA,eAAA3G,EAAAwC,GAAA,+CACAxC,EAAAwC,GAAA,qBAAAxC,EAAAwC,GAAA,qDACAxC,EAAAwC,GAAA,4BAAAxC,EAAAO,MAAA,SASA,OAPAP,GAAA2hB,QACAhb,GAAA,8DAGAA,GAAA,aAOA+a,sBAAA,SAAA1hB,GACA,kBAAAA,EAAAwC,GAAA,yBAIA,QACA5C,SAGC+D,MAAA7E,EAAAE,KAAAsD,SAAArD,IAAAJ,EAAAC,QAAAG,Mdy5F6B2E,KAAK9E,EAASC,EAAoB,GAAIA,EAAoB,GAAIA,EAAoB,KAI1G,SAASF,EAAQC,Ge9pGvB,QAAAmb,GAAA8H,GAMA,QAAAC,GAAAzH,GACAC,EAAAiF,KAAAlF,GALA,mBAAAwH,GAAA,CAEA,GAAAE,MACAzH,KAIA0H,EAAAjI,EAAArW,KAAAqe,EAAAD,EAEA,OADAE,GAAAC,MAAAJ,IAEAvH,UACA4H,OAAAF,EAAAG,aAGA,qBAAAN,GACA,mCAixDA,OA7wDA9hB,MAAAqiB,SACAC,cAAA,EACAC,YAAA,EACAC,UAAA,EACAC,OAAA,EACAC,OAAA,EACAC,SAAA,GAEA3iB,KAAA4iB,SACA5iB,KAAA6iB,UAAAf,EACA9hB,KAAA8iB,MAAA,EACA9iB,KAAA+iB,MAAA,EACA/iB,KAAAgjB,cAAA,EACAhjB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAmjB,aACAnjB,KAAAojB,cAAA,EACApjB,KAAAqjB,WAAA,KACArjB,KAAAsjB,WAAA,KACAtjB,KAAAujB,YAAA,EACAvjB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,cACAtiB,KAAAyjB,WACAzjB,KAAA0jB,cACAC,cAAA,EACAC,YAAA,EACAC,QAAA,EACAC,WAAA,EACAC,KAAA,EACAC,cAAA,EACAC,KAAA,EACAC,UAAA,EACAC,aAAA,EACAC,YAAA,GACAC,OAAA,GACAC,OAAA,GACAC,WAAA,GACAC,QAAA,GACAC,aAAA,GACAC,WAAA,GACAC,OAAA,IACAlI,KAAA,KAEAzc,KAAA4kB,SACAC,IAAA,UACAC,IAAA,WACAC,IAAA,QACAC,IAAA,QACAC,IAAA,MACAC,IAAA,OACAC,IAAA,OACAC,IAAA,SACAC,IAAA,YACAC,IAAA,UACAC,IAAA,WACAC,IAAA,WACAC,IAAA,UACAC,IAAA,WACAC,IAAA,QACAC,IAAA,QACAC,IAAA,MACAC,IAAA,OACAC,IAAA,OACAC,IAAA,SACAC,IAAA,YACAC,IAAA,UACAC,IAAA,WACAC,IAAA,YAWApmB,KAAAoiB,UAAA,WACA,MAAApiB,MAAAyjB,SAOAzjB,KAAAkiB,MAAA,SAAAvZ,GACA,OAAAgP,GAAA,EAAmBA,EAAAhP,EAAAsC,OAAkB0M,IACrC3X,KAAAqmB,kBAAA1d,EAAAgP,KAQA3X,KAAAsmB,OAAA,SAAAvb,GACA/K,KAAAyjB,QAAAjE,MAAAxf,KAAA+iB,MACA/iB,KAAAgjB,cACAhjB,KAAA8iB,MACA/X,KAQA/K,KAAAumB,cAAA,WACA,GAAA9J,GAAAzc,KAAA4iB,KACA,IAAAnG,EAAA/B,OACA,OAAA8L,KAAA/J,GAAA/B,OAAA,CAIA,OAHA+L,GAAAhK,EAAA/B,OAAA8L,GAGA7O,EAAA,EAAuBA,EAAA3X,KAAA0mB,UAAAzb,OAA2B0M,IAAA,CAClD,GAAAgP,GAAA3mB,KAAA0mB,UAAA/O,GAAA,GACAiP,EAAA5mB,KAAA0mB,UAAA/O,GAAA,EACA8O,KAAA1P,QAAA4P,EAAAC,GAIAH,IAAA1P,QAAA,iBACAA,QAAA,cACAA,QAAA,gBAKA,QAFA8P,GAAAJ,EAAAxb,OACA6b,EAAA,GACAnP,EAAA,EAAuBkP,EAAAlP,EAASA,IAAA,CAChC,GAAAoP,GAAAN,EAAA9O,GACAqP,GAAA,CACA,OAAAD,GAAAF,EAAA,EAAAlP,EACAoP,EAAAN,IAAA9O,GAEA,KAAAoP,GAAuB,KAAAA,IACvBC,GAAA,GAEAA,IACAF,GAAAC,GAEAtK,EAAA/B,OAAA8L,GAAAM,EAGA,aAAArK,EAAAwK,WACA,OAAAT,KAAA/J,GAAA/B,OACA1a,KAAA4kB,QAAA4B,GAAA/J,EAAA/B,OAAA8L,OAIAxmB,MAAA6iB,UAAApG,IAYAzc,KAAAqmB,kBAAA,SAAAU,GAUA,GARA/mB,KAAA8iB,QACA9iB,KAAAgjB,gBACA,MAAA+D,IACA/mB,KAAA+iB,QACA/iB,KAAAgjB,cAAA,GAIAhjB,KAAAojB,aAGA,YAFA,MAAA2D,IACA/mB,KAAAojB,cAAA,GAGA,IAAApjB,KAAAkjB,cAAA,KAAA6D,EAEA,YADA/mB,KAAAojB,cAAA,EAGA,KAAApjB,KAAAijB,UAAA,KAAAnM,KAAAiQ,GAAA,CAEA/mB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAojB,cAAA,CAIA,KADA,GAAA8D,IAAA,EACAA,GAGA,OADAA,GAAA,EACAlnB,KAAAwjB,QAGA,IAAAxjB,MAAAqiB,QAAAC,cACA,KAAAyE,IAGA/mB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAE,YACAviB,KAAA4iB,OACAqE,WAAA,KAGAjnB,KAAAsjB,WAAA,KACAtjB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,CACA,MAKA,KAAAljB,MAAAqiB,QAAAE,YACA,cAAAzL,KAAAiQ,GACA/mB,KAAA4iB,MAAAqE,YAAAF,EAAAlM,cACA7a,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,MACW,CAEX,GAAAiE,GAAAnnB,KAAA4iB,MAAAqE,UACA,YAAAE,EACAnnB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,cAEA,UAAA6E,GACAnnB,KAAA4iB,MAAAqE,WAAAE,EACAnnB,KAAA4iB,MAAAlI,UACA1a,KAAAsjB,WAAAyD,EACA/mB,KAAAujB,YAAA,EACAvjB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAI,OACAziB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAmjB,WACAiE,IAAA,KAGA,YAAAD,EACAnnB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,cAEA6E,IAAAnnB,MAAA0jB,cAGA1jB,KAAA4iB,MAAAqE,WAAA,QACAjnB,KAAA4iB,MAAA7H,UAAAoM,EACAnnB,KAAA4iB,MAAAyE,SAAA,GACArnB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAG,UACA0E,GAAA,IAIAlnB,KAAAsmB,OAAA,8BACAtmB,KAAA4iB,MAAAqE,WAAA,KACAjnB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,eAMA,KAIA,KAAAtiB,MAAAqiB,QAAAG,UACA,UAAAuE,GAAyB,MAAAA,IAAA,MAAA/mB,KAAAsjB,WAAA,CACzBtjB,KAAAsjB,WAAAyD,EACA/mB,KAAAujB,YAAA,EACAvjB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,CACA,OAEA,SAAApM,KAAAiQ,GACA/mB,KAAA4iB,MAAAyE,SAAApc,OAAA,GAEAjL,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,GAEA,MAAAljB,KAAAsjB,YAGAtjB,KAAAsmB,OAAA,gCACAtmB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,gBAIAtiB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAgE,GAAA,EACAlnB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAI,OACAziB,KAAAmjB,UAAAiE,IAAA,GACApnB,KAAA4iB,MAAAlI,YAIA1a,KAAA4iB,MAAAyE,UAAAN,EACA/mB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EAEA,MAIA,KAAAljB,MAAAqiB,QAAAI,OAEA,QAAAsE,GAAwB,KAAA/mB,KAAAsjB,YACxB,KAAAyD,GAAA,KAAA/mB,KAAAsjB,WAAA,CAGAtjB,KAAAumB,gBACAvmB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,aACA,OAEA,cAAAxL,KAAAiQ,IAEA/mB,KAAAmjB,UAAAiE,KAAAL,EACA/mB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,GAGAljB,KAAAmjB,UAAAiE,IAAAnc,OAAA,GAEAjL,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,IAIAljB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAK,OACAwE,GAAA,EAGA,MAGA,KAAAlnB,MAAAqiB,QAAAK,OACA,QAAAqE,GAAwB,KAAA/mB,KAAAsjB,YACxB,KAAAyD,GAAA,KAAA/mB,KAAAsjB,WAAA,CAGAtjB,KAAAsmB,OAAA,2BACAtmB,KAAAmjB,UAAAiE,IAAA,oBACApnB,KAAAumB,gBACAvmB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAC,aACA,OAEA,KAAAyE,IAGA/mB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAM,SACA3iB,KAAAmjB,UAAAmE,MAAA,GACAtnB,KAAAqjB,YAAuCkE,OAAAC,QAEvC,MAIA,KAAAxnB,MAAAqiB,QAAAM,SACA,GAAA8E,GAAAznB,KAAAqjB,WACA7gB,EAAAxC,KAAAmjB,UAAAmE,MACAI,GAAA,CAGA,SAAAX,GAAA,KAAAA,GAAmC,KAAAA,GAAY,KAAAA,EAAA,CAC/C,QAAAA,GAIA,IAAAU,EAAA,KAAAxc,OAAAwc,EAAA,KAAsDxc,OAAA,CAEtD,GAAA0c,GAAA3nB,KAAAmjB,UAAAmE,MAAAlR,MACAuR,KAAA3nB,MAAA4kB,QAEA5kB,KAAAmjB,UAAAmE,MAAAtnB,KAAA4kB,QAAA+C,GAGA3nB,KAAAsmB,OAAA,oCAAAqB,GAEAD,GAAA,EAGA,QAAAX,EAAA,CAKA,OAAAU,EAAA,KAAAxc,OAAAwc,EAAA,KAAsDxc,OAAA,CAEtDwc,EAAA,KAAAjI,KAAAxf,KAAA8iB,OACA9iB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,CACA,OAEA,GAAAuE,EAAA,KAAAxc,QAAsD,GAAtDwc,EAAA,KAAsDxc,QACtD,GAAAzI,EAAAyI,QAAA,MAAAzI,IAAAyI,OAAA,KAEAyc,GAAA,GAiBA,GAZA,KAAAX,IAIA,GAAAvkB,EAAAyI,QAAA,MAAAzI,IAAAyI,OAAA,KACAwc,EAAA,KAA0BjI,KAAAxf,KAAA8iB,OAC1B9iB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,IAKA,KAAA6D,EAKA,OAAAU,EAAA,KAAAxc,OAAAwc,EAAA,KAAsDxc,OAAA,CAEtD,GAAA0c,GAAA3nB,KAAAmjB,UAAAmE,MAAAlR,MACAuR,KAAA3nB,MAAA4kB,QAEA5kB,KAAAmjB,UAAAmE,MAAAtnB,KAAA4kB,QAAA+C,GAGA3nB,KAAAsmB,OAAA,oCAAAqB,GAEAT,GAAA,EACAQ,GAAA,MAEA,IAAAllB,EAAAyI,QAAA,MAAAzI,IAAAyI,OAAA,IACAwc,EAAA,KAAgCxc,OAAA,IAEhCwc,EAAA,KAA8BG,OAAAH,EAAA,KAAkBxc,OAAA,KAChD,GAAAwc,EAAA,KAAuCxc,OAAAwc,EAAA,KAAAxc,SAEvCyc,GAAA,IAcAA,GAGA1nB,KAAAijB,SAAA,EACAjjB,KAAAkjB,cAAA,EACAljB,KAAAwjB,OAAAxjB,KAAAqiB,QAAAI,OACAziB,KAAA4iB,MAAAlI,OAAA1a,KAAAmjB,UAAAiE,KAAApnB,KAAAmjB,UAAAmE,MACAtnB,KAAAmjB,WAAqCiE,IAAA,IACrCpnB,KAAAqjB,WAAA,MAEArjB,KAAAmjB,UAAAmE,OAAAP,KAOA/mB,KAAA0mB,YACA,kBACA,uBACA,4BACA,gBACA,2BACA,YAAe,MACf,2BACA,mBACA,iBACA,mBACA,2BACA,2BACA,qBACA,yBACA,yBACA,oBACA,0BACA,wBACA,8BACA,0BACA,4BACA,0BACA,iBACA,2BACA,4BACA,uBACA,eACA,2BACA,oBAAuB,MACvB,0BACA,iBACA,WAAc,MACd,6BACA,2BACA,2BACA,wBACA,8BACA,6BACA,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,sBACA,cACA,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,cAAiB,MACjB,cAAiB,MACjB,eAAkB,MAClB,cAAiB,MACjB,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,gBACA,cACA,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,aAAgB,MAChB,kBACA,YAAe,MACf,cAAiB,MACjB,YAAe,MACf,cAAiB,MACjB,YAAe,MACf,cAAiB,MACjB,YAAe,MACf,YAAe,MACf,YAAe,MACf,cACA,aAAgB,MAChB,eAAkB,MAClB,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,cACA,cACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,eACA,eACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,aAAgB,MAChB,aAAgB,MAChB,aAAgB,MAChB,aAAgB,MAChB,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,YAAe,MACf,sBACA,sBACA,gBACA,2BACA,YAAe,MACf,oBACA,qBACA,qBACA,oBACA,qBACA,uBACA,sBACA,qBACA,oBACA,oBACA,oBACA,oBACA,sBACA,qBACA,oBACA,oBACA,sBACA,oBACA,oBACA,qBACA,sBACA,kBACA,oBACA,mBACA,oBACA,mBACA,oBACA,oBACA,sBACA,qBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,sBACA,sBACA,sBACA,qBACA,oBACA,2BACA,qBACA,qBACA,oBACA,qBACA,qBACA,qBACA,oBACA,mBACA,2BACA,+BACA,WAAc,MACd,WAAc,MACd,yBACA,WAAc,MACd,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,sBACA,oBACA,kBACA,qBACA,kBACA,mBACA,YAAe,MACf,YAAe,MACf,YAAe,MACf,gBAAmB,MACnB,YAAc,MACd,kBAAqB,MACrB,wBAA2B,MAC3B,+BAAkC,MAClC,kBACA,iBACA,kBACA,kBACA,oBACA,iBACA,gBACA,kBACA,iBACA,kBACA,mBACA,eACA,eACA,gBACA,kBACA,gBACA,oBACA,gBACA,gBACA,gBACA,kBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,sBAAyB,MACzB,wBAA2B,MAC3B,oBAAuB,MACvB,qBAAwB,MACxB,kCAAqC,MACrC,kBACA,iBACA,kBACA,kBACA,oBACA,iBACA,gBACA,sBACA,iBACA,kBACA,mBACA,eACA,eACA,eACA,eACA,gBACA,qBACA,kBACA,gBACA,oBACA,mBACA,gBACA,gBACA,kBACA,oBAAuB,MACvB,uBAA0B,MAC1B,YAAe,MACf,wBAA2B,MAC3B,sBAAyB,MACzB,8BAAiC,MACjC,yBACA,oBACA,gBACA,kBACA,mBACA,oBACA,oBACA,kBACA,kBACA,qBACA,mBACA,sBACA,wBACA,2BACA,4BACA,0BAA6B,MAC7B,2BACA,4BACA,2BACA,2BACA,2BACA,4BACA,4BACA,6BACA,0BAA6B,MAC7B,8BACA,6BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,0BACA,8BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,6BACA,8BACA,4BACA,8BACA,6BACA,2BACA,2BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,0BACA,8BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,6BACA,8BACA,4BACA,8BACA,6BACA,2BACA,2BACA,2BACA,4BACA,0BAA6B,MAC7B,2BACA,4BACA,2BACA,2BACA,2BACA,4BACA,4BACA,6BACA,0BAA6B,MAC7B,8BACA,6BACA,8BACA,8BACA,4BACA,6BACA,6BACA,6BACA,6BACA,gCACA,gCACA,6BACA,gCACA,gCACA,4BACA,4BACA,4BACA,4BACA,6BACA,4BACA,2BACA,2BACA,iCACA,iCACA,mCACA,mCACA,2BACA,2BACA,8BACA,8BACA,kCACA,yCACA,iCACA,kCACA,kCACA,8BACA,8BACA,4BACA,4BACA,8BACA,8BACA,4BACA,4BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,2BACA,2BACA,4BACA,4BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,0BACA,0BACA,8BACA,8BACA,6BACA,6BACA,8BACA,8BACA,+BACA,+BACA,+BACA,+BACA,6BACA,6BACA,8BACA,8BACA,iCACA,iCACA,iCACA,4BACA,4BACA,4BACA,4BACA,+BACA,+BACA,2BACA,2BACA,8BACA,8BACA,+BACA,+BACA,6BACA,6BACA,qBAAwB,MACxB,mBAAsB,MACtB,sBAAyB,MACzB,sBAAyB,MACzB,uBAA0B,MAC1B,mBAAsB,MACtB,mBAAsB,MACtB,uBAA0B,MAC1B,qBACA,uBACA,uBACA,wBAA2B,MAC3B,iBACA,sBACA,6BACA,8BACA,uBACA,0BACA,uBACA,kBACA,4BACA,+BACA,sBACA,0BACA,2BACA,qBACA,wBACA,4BAA+B,MAC/B,yBAA2B,MAC3B,kBACA,mBACA,iBAAoB,MACpB,kBAAqB,MACrB,kBAAqB,MACrB,mBAAsB,MACtB,iBAAoB,MACpB,mBACA,kBAAqB,MACrB,mBAAsB,MACtB,kBAAqB,MACrB,kBAAqB,MACrB,iBAAoB,MACpB,gCACA,eACA,iBAAoB,MACpB,iBAAoB,MACpB,kBAAqB,MACrB,mBAAsB,MACtB,iBAAoB,MACpB,oBACA,0BACA,iBAAoB,MACpB,kBACA,gBACA,mBAAsB,MACtB,2BAA8B,MAC9B,eACA,kBAAqB,MACrB,mBAAsB,MACtB,kBAAqB,MACrB,kBAAqB,MACrB,kBAAqB,MACrB,kBAAqB,MACrB,kBAAqB,MACrB,kBACA,iBACA,kBACA,mBACA,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,wBAA2B,MAC3B,sBACA,oBACA,uBACA,sBACA,2BACA,wBACA,oBACA,oBACA,oBACA,oBACA,uBACA,wBACA,2BACA,2BACA,6BACA,8BACA,0BACA,2BACA,mBACA,0BACA,2BACA,0BACA,2BACA,gCACA,4BACA,gBACA,gBACA,2BAA8B,MAC9B,2BACA,4BACA,4BACA,6BACA,0BACA,4BACA,2BACA,0BACA,2BACA,6BACA,6BACA,4BACA,4BACA,2BACA,4BACA,2BACA,uBACA,6BACA,2BACA,8BACA,8BACA,uBACA,4BACA,wBACA,sBACA,oBACA,uBACA,sBACA,2BACA,wBACA,uBACA,wBACA,4BACA,6BACA,mBACA,uBACA,oBACA,mBACA,oBACA,uBACA,kBACA,eACA,oBACA,eACA,oBACA,iBACA,mBACA,gBACA,eACA,oBACA,qBACA,iBACA,mBACA,iBACA,mBACA,kBACA,uBACA,kBACA,0BACA,2BACA,gBACA,iBACA,qBACA,sBACA,kBACA,gBACA,gBACA,gBACA,gBACA,wBACA,gCACA,iBACA,yBACA,wBACA,wBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,sBACA,oBACA,kBACA,2BAA8B,MAC9B,6CAAgD,MAChD,uBACA,gBACA,oBACA,qBACA,eACA,qBACA,2BAA8B,MAC9B,gCACA,kBACA,uBACA,iBACA,2BACA,sBACA,mBACA,wBACA,qBACA,sBACA,4BACA,qBACA,kBACA,mBACA,kCACA,mBACA,+BACA,kBACA,4BACA,qBACA,0BACA,yBACA,mBACA,mBACA,sBACA,2BAA8B,MAC9B,sBACA,sBACA,2BAA8B,MAC9B,iBACA,kBACA,uBACA,gBACA,gBACA,iBACA,iBACA,kBACA,4BACA,kBACA,4BACA,eACA,8BACA,eACA,oCACA,oBACA,oCACA,gBACA,gBACA,qBACA,qBACA,yBACA,4BACA,2BAA8B,MAC9B,2BAA8B,MAC9B,oBACA,oBACA,2BACA,2BACA,iBACA,iBACA,wBACA,wBACA,uBACA,mCACA,uBACA,mCACA,sBACA,sBACA,mBACA,mBACA,wBACA,wBACA,qBACA,qBACA,0BACA,0BACA,sBACA,gCACA,sBACA,+BACA,kBACA,qBACA,kCACA,qBACA,oCACA,uBACA,uBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,iBACA,wBACA,uBACA,wBACA,oBACA,qBACA,qBACA,mBACA,kBACA,kBACA,gBACA,iBACA,sBACA,wBACA,kBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,4BACA,6BACA,2BACA,4BACA,qBACA,kBACA,qBACA,6BACA,qBACA,mBACA,0BACA,2BAA8B,MAC9B,2BAA8B,MAC9B,mBACA,mBACA,oBACA,iBACA,iBACA,0BACA,mBACA,mBACA,mBACA,2BACA,4BACA,sBACA,qBACA,uBACA,mBACA,mBACA,gBACA,gBACA,sBACA,oBACA,mBACA,yBACA,4BACA,sBACA,sBACA,wBACA,wBACA,4BACA,4BACA,sBACA,kBACA,kBACA,+BACA,qBACA,0BACA,2BACA,4BACA,6BACA,kBACA,kBACA,4BACA,8BACA,qBACA,4BACA,kBACA,kBACA,mBACA,mBACA,qBACA,yBACA,qBACA,qBACA,qBACA,qBACA,kBACA,kBACA,mBACA,mBACA,2BAA8B,MAC9B,sBACA,uBACA,uBACA,6BACA,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,qBACA,sBACA,qBACA,mBACA,iBAAoB,MACpB,mBACA,wBACA,gBAAmB,MACnB,sBACA,2BAA8B,MAC9B,iBAAoB,MACpB,0BACA,0BACA,wBACA,+BACA,0BACA,iBAAoB,MACpB,4BACA,8BACA,yBACA,8BACA,yBACA,iBAAoB,MACpB,oBACA,oBACA,iBAAoB,MACpB,qBACA,qBACA,qBACA,iBAAoB,MACpB,sBACA,oBACA,oBACA,qBACA,oBACA,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,sBACA,oBACA,kBACA,iBACA,oBACA,mBACA,mBACA,oBACA,kBACA,kBACA,mBACA,mBACA,mBACA,gBACA,kBACA,kBACA,oBACA,wBACA,wBACA,qBACA,mBACA,iBAAoB,MACpB,oBACA,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,wBACA,uBACA,iBACA,oBACA,kBACA,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,gBAAmB,MACnB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,iBAAoB,MACpB,0BACA,2BACA,+BACA,0BACA,2BACA,+BACA,uBACA,iCACA,2BAA8B,MAC9B,uBACA,yBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,YAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,oBACA,oBACA,qBACA,qBACA,qBACA,4BACA,8BACA,gCACA,6BACA,0BACA,2BACA,6BACA,+BACA,8BACA,+BACA,4BACA,8BACA,0BACA,2BACA,6BACA,+BACA,8BACA,+BACA,4BACA,8BACA,0BACA,iCACA,yBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,oBACA,2BAA8B,MAC9B,oBACA,2BAA8B,MAC9B,qBACA,kBACA,sBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,mBACA,qBACA,4BACA,qCACA,6BACA,sCACA,2BAA8B,MAC9B,yBACA,wBACA,qBACA,mBACA,qBACA,mBACA,mBACA,oBACA,sBACA,2BAA8B,MAC9B,mBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,qBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,kBACA,mBACA,kBACA,2BAA8B,MAC9B,iBACA,4BACA,sBACA,2BAA8B,MAC9B,wBAA2B,MAC3B,kBACA,qBACA,4BACA,qBACA,4BACA,uBACA,sBACA,iBACA,iBACA,qBACA,qBACA,uBACA,uBACA,wBACA,uBACA,+BAAkC,MAClC,+BAAkC,MAClC,2BACA,oCACA,iCACA,0CACA,mBACA,8BACA,mBACA,8BACA,qBACA,qBACA,uBACA,uBACA,wBACA,wBACA,sBACA,6BACA,sBACA,4BACA,uBACA,uBACA,2BAA8B,MAC9B,qBACA,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,2BAA8B,MAC9B,4BACA;AAGA1mB,KAGA,mBAAApB,MAAAC,UACAD,EAAAC,QAAAmb,IfysGM,SAASpb,EAAQC,EAASC,GAE/B,GAAIC,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","file":"0.0.bundled.js","sourcesContent":["webpackJsonp([0,1],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/**\n\t *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4),\n\t    __webpack_require__(51),\n\t    __webpack_require__(54),\n\t    __webpack_require__(22),\n\t    __webpack_require__(50),\n\t    __webpack_require__(13),\n\t    __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\t\n\t    /** Label wrapper */\n\t    var Label = Backbone.View.extend({\n\t        tagName: 'label',\n\t        initialize: function( options ) {\n\t            this.model = options && options.model || new Backbone.Model( options );\n\t            this.tagName = options.tagName || this.tagName;\n\t            this.setElement( $( '<' + this.tagName + '/>' ) );\n\t            this.listenTo( this.model, 'change', this.render, this );\n\t            this.render();\n\t        },\n\t        title: function( new_title ) {\n\t            this.model.set( 'title', new_title );\n\t        },\n\t        value: function() {\n\t            return this.model.get( 'title' );\n\t        },\n\t        render: function() {\n\t            this.$el.removeClass()\n\t                    .addClass( 'ui-label' )\n\t                    .addClass( this.model.get( 'cls' ) )\n\t                    .html( this.model.get( 'title' ) );\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Displays messages used e.g. in the tool form */\n\t    var Message = Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                message     : null,\n\t                status      : 'info',\n\t                cls         : '',\n\t                persistent  : false\n\t            }).set( options );\n\t            this.listenTo( this.model, 'change', this.render, this );\n\t            this.render();\n\t        },\n\t        update: function( options ) {\n\t            this.model.set( options );\n\t        },\n\t        render: function() {\n\t            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n\t            var status = this.model.get( 'status' );\n\t            if ( this.model.get( 'large' ) ) {\n\t                this.$el.addClass((( status == 'success' && 'done' ) ||\n\t                                   ( status == 'danger' && 'error' ) ||\n\t                                     status ) + 'messagelarge' );\n\t            } else {\n\t                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n\t            }\n\t            if ( this.model.get( 'message' ) ) {\n\t                this.$el.html( this.model.get( 'message' ) );\n\t                this.$el.fadeIn();\n\t                this.timeout && window.clearTimeout( this.timeout );\n\t                if ( !this.model.get( 'persistent' ) ) {\n\t                    var self = this;\n\t                    this.timeout = window.setTimeout( function() {\n\t                        self.$el.fadeOut();\n\t                    }, 3000 );\n\t                }\n\t            } else {\n\t                this.$el.fadeOut();\n\t            }\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Renders an input element used e.g. in the tool form */\n\t    var Input = Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                type            : 'text',\n\t                placeholder     : '',\n\t                disabled        : false,\n\t                visible         : true,\n\t                cls             : '',\n\t                area            : false\n\t            }).set( options );\n\t            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n\t            this.setElement( $( '<' + this.tagName + '/>' ) );\n\t            this.listenTo( this.model, 'change', this.render, this );\n\t            this.render();\n\t        },\n\t        events: {\n\t            'input': '_onchange'\n\t        },\n\t        value: function( new_val ) {\n\t            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n\t            return this.model.get( 'value' );\n\t        },\n\t        render: function() {\n\t            this.$el.removeClass()\n\t                    .addClass( 'ui-' + this.tagName )\n\t                    .addClass( this.model.get( 'cls' ) )\n\t                    .attr( 'id', this.model.id )\n\t                    .attr( 'type', this.model.get( 'type' ) )\n\t                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n\t                    .val( this.model.get( 'value' ) );\n\t            this.model.get( 'disabled' ) ? this.$el.attr( 'disabled', true ) : this.$el.removeAttr( 'disabled' );\n\t            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n\t            return this;\n\t        },\n\t        _onchange: function() {\n\t            this.value( this.$el.val() );\n\t            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n\t        }\n\t    });\n\t\n\t    /** Creates a hidden element input field used e.g. in the tool form */\n\t    var Hidden = Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            this.model = options && options.model || new Backbone.Model( options );\n\t            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n\t                                           .append( this.$hidden = $( '<div/>' ) ) );\n\t            this.listenTo( this.model, 'change', this.render, this );\n\t            this.render();\n\t        },\n\t        value: function( new_val ) {\n\t            new_val !== undefined && this.model.set( 'value', new_val );\n\t            return this.model.get( 'value' );\n\t        },\n\t        render: function() {\n\t            this.$el.attr( 'id', this.model.id );\n\t            this.$hidden.val( this.model.get( 'value' ) );\n\t            this.model.get( 'info' ) ? this.$info.show().html( this.model.get( 'info' ) ) : this.$info.hide();\n\t            return this;\n\t        }\n\t    });\n\t\n\t    return {\n\t        Button      : Buttons.ButtonDefault,\n\t        ButtonIcon  : Buttons.ButtonIcon,\n\t        ButtonCheck : Buttons.ButtonCheck,\n\t        ButtonMenu  : Buttons.ButtonMenu,\n\t        ButtonLink  : Buttons.ButtonLink,\n\t        Input       : Input,\n\t        Label       : Label,\n\t        Message     : Message,\n\t        Modal       : Modal,\n\t        RadioButton : Options.RadioButton,\n\t        Checkbox    : Options.Checkbox,\n\t        Radio       : Options.Radio,\n\t        Select      : Select,\n\t        Hidden      : Hidden,\n\t        Slider      : Slider,\n\t        Drilldown   : Drilldown\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 8 */,\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\tvar View = Backbone.View.extend({\n\t    visible     : false,\n\t    initialize  : function( options ) {\n\t        var self = this;\n\t        this.options = Utils.merge( options, {\n\t            id              : Utils.uid(),\n\t            title           : '',\n\t            icon            : '',\n\t            buttons         : null,\n\t            body            : null,\n\t            scrollable      : true,\n\t            nopadding       : false,\n\t            operations      : null,\n\t            placement       : 'bottom',\n\t            cls             : 'ui-portlet',\n\t            operations_flt  : 'right',\n\t            collapsible     : false,\n\t            collapsed       : false\n\t        });\n\t        this.setElement( this._template( this.options ) );\n\t\n\t        // link content\n\t        this.$body = this.$( '.portlet-body' );\n\t        this.$title = this.$( '.portlet-title-text' );\n\t        this.$header = this.$( '.portlet-header' );\n\t        this.$content = this.$( '.portlet-content' );\n\t        this.$footer = this.$( '.portlet-footer' );\n\t\n\t        // set content padding\n\t        if ( this.options.nopadding ) {\n\t            this.$content.css( 'padding', '0px' );\n\t            this.$body.css( 'padding', '0px' );\n\t        }\n\t\n\t        // append buttons\n\t        this.$buttons = this.$( '.portlet-buttons' );\n\t        if ( this.options.buttons ) {\n\t            $.each( this.options.buttons, function( name, item ) {\n\t                item.$el.prop( 'id', name );\n\t                self.$buttons.append( item.$el );\n\t            });\n\t        } else {\n\t            this.$buttons.remove();\n\t        }\n\t\n\t        // append operations\n\t        this.$operations = this.$( '.portlet-operations' );\n\t        if ( this.options.operations ) {\n\t            $.each( this.options.operations, function( name, item ) {\n\t                item.$el.prop( 'id', name );\n\t                self.$operations.append( item.$el );\n\t            });\n\t        }\n\t\n\t        // add body\n\t        this.options.body && this.append( this.options.body );\n\t\n\t        // make portlet collapsible\n\t        this.collapsed = false;\n\t        if ( this.options.collapsible ) {\n\t            this.$title.addClass( 'no-highlight' ).css({\n\t                'cursor'            : 'pointer',\n\t                'text-decoration'   : 'underline'\n\t            });\n\t            this.$title.on( 'click', function() {\n\t                if ( self.collapsed ) { self.expand(); } else { self.collapse(); }\n\t            });\n\t            this.options.collapsed && this.collapse();\n\t        }\n\t    },\n\t\n\t    // append\n\t    append: function( $el ) {\n\t        this.$body.append( $el );\n\t    },\n\t\n\t    // remove all content\n\t    empty: function() {\n\t        this.$body.empty();\n\t    },\n\t\n\t    // header\n\t    header: function() {\n\t        return this.$header;\n\t    },\n\t\n\t    // body\n\t    body: function() {\n\t        return this.$body;\n\t    },\n\t\n\t    // footer\n\t    footer: function() {\n\t        return this.$footer;\n\t    },\n\t\n\t    // show\n\t    show: function(){\n\t        this.visible = true;\n\t        this.$el.fadeIn( 'fast' );\n\t    },\n\t\n\t    // hide\n\t    hide: function(){\n\t        this.visible = false;\n\t        this.$el.fadeOut( 'fast' );\n\t    },\n\t\n\t    // enable buttons\n\t    enableButton: function( id ) {\n\t        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n\t    },\n\t\n\t    // disable buttons\n\t    disableButton: function( id ) {\n\t        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n\t    },\n\t\n\t    // hide operation\n\t    hideOperation: function( id ) {\n\t        this.$operations.find( '#' + id ).hide();\n\t    },\n\t\n\t    // show operation\n\t    showOperation: function( id ) {\n\t        this.$operations.find( '#' + id ).show();\n\t    },\n\t\n\t    // set operation\n\t    setOperation: function( id, callback ) {\n\t        var $el = this.$operations.find( '#' + id );\n\t        $el.off( 'click' );\n\t        $el.on( 'click', callback );\n\t    },\n\t\n\t    // title\n\t    title: function( new_title ) {\n\t        var $el = this.$title;\n\t        if ( new_title ) {\n\t            $el.html( new_title );\n\t        }\n\t        return $el.html();\n\t    },\n\t\n\t    // collapse portlet\n\t    collapse: function() {\n\t        this.collapsed = true;\n\t        this.$content.height( '0%' );\n\t        this.$body.hide();\n\t        this.$footer.hide();\n\t        this.trigger( 'collapsed' );\n\t    },\n\t\n\t    // expand portlet\n\t    expand: function() {\n\t        this.collapsed = false;\n\t        this.$content.height( '100%' );\n\t        this.$body.fadeIn( 'fast' );\n\t        this.$footer.fadeIn( 'fast' );\n\t        this.trigger( 'expanded' );\n\t    },\n\t\n\t    // disable content access\n\t    disable: function() {\n\t        this.$( '.portlet-backdrop' ).show();\n\t    },\n\t\n\t    // enable content access\n\t    enable: function() {\n\t        this.$( '.portlet-backdrop' ).hide();\n\t    },\n\t\n\t    // fill regular modal template\n\t    _template: function( options ) {\n\t        var tmpl =  '<div id=\"' + options.id + '\" class=\"' + options.cls + '\">';\n\t        if ( options.title ) {\n\t            tmpl +=     '<div class=\"portlet-header\">' +\n\t                            '<div class=\"portlet-operations\" style=\"float: ' + options.operations_flt + ';\"/>' +\n\t                            '<div class=\"portlet-title\">';\n\t            if ( options.icon ) {\n\t                tmpl +=         '<i class=\"icon fa ' + options.icon + '\">&nbsp;</i>';\n\t            }\n\t            tmpl +=             '<span class=\"portlet-title-text\">' + options.title + '</span>' +\n\t                            '</div>' +\n\t                        '</div>';\n\t        }\n\t        tmpl +=         '<div class=\"portlet-content\">';\n\t        if ( options.placement == 'top' ) {\n\t            tmpl +=         '<div class=\"portlet-buttons\"/>';\n\t        }\n\t        tmpl +=             '<div class=\"portlet-body\"/>';\n\t        if ( options.placement == 'bottom' ) {\n\t            tmpl +=         '<div class=\"portlet-buttons\"/>';\n\t        }\n\t        tmpl +=         '</div>' +\n\t                        '<div class=\"portlet-footer\"/>' +\n\t                        '<div class=\"portlet-backdrop\"/>' +\n\t                    '</div>';\n\t        return tmpl;\n\t    }\n\t});\n\treturn {\n\t    View : View\n\t}\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 10 */,\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {// Additional dependencies: jQuery, underscore.\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(24), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Modal, Frames, mod_icon_btn) {\n\t\n\t/**\n\t * Dataset metedata.\n\t */\n\tvar DatasetMetadata = Backbone.Model.extend({});\n\t\n\t/**\n\t * A dataset. In Galaxy, datasets are associated with a history, so\n\t * this object is also known as a HistoryDatasetAssociation.\n\t */\n\tvar Dataset = Backbone.Model.extend({\n\t    defaults: {\n\t        id: '',\n\t        type: '',\n\t        name: '',\n\t        hda_ldda: 'hda',\n\t        metadata: null\n\t    },\n\t\n\t    initialize: function() {\n\t        // Metadata can be passed in as a model or a set of attributes; if it's\n\t        // already a model, there's no need to set metadata.\n\t        if (!this.get('metadata')) {\n\t            this._set_metadata();\n\t        }\n\t\n\t        // Update metadata on change.\n\t        this.on('change', this._set_metadata, this);\n\t    },\n\t\n\t    _set_metadata: function() {\n\t        var metadata = new DatasetMetadata();\n\t\n\t        // Move metadata from dataset attributes to metadata object.\n\t        _.each(_.keys(this.attributes), function(k) {\n\t            if (k.indexOf('metadata_') === 0) {\n\t                // Found metadata.\n\t                var new_key = k.split('metadata_')[1];\n\t                metadata.set(new_key, this.attributes[k]);\n\t                delete this.attributes[k];\n\t            }\n\t        }, this);\n\t\n\t        // Because this is an internal change, silence it.\n\t        this.set('metadata', metadata, { 'silent': true });\n\t    },\n\t\n\t    /**\n\t     * Returns dataset metadata for a given attribute.\n\t     */\n\t    get_metadata: function(attribute) {\n\t        return this.attributes.metadata.get(attribute);\n\t    },\n\t\n\t    urlRoot: Galaxy.root + \"api/datasets\"\n\t});\n\t\n\t/**\n\t * A tabular dataset. This object extends dataset to provide incremental chunked data.\n\t */\n\tvar TabularDataset = Dataset.extend({\n\t    defaults: _.extend({}, Dataset.prototype.defaults, {\n\t        chunk_url: null,\n\t        first_data_chunk: null,\n\t        chunk_index: -1,\n\t        at_eof: false\n\t    }),\n\t\n\t    initialize: function(options) {\n\t        Dataset.prototype.initialize.call(this);\n\t\n\t        // If first data chunk is available, next chunk is 1.\n\t        this.attributes.chunk_index = (this.attributes.first_data_chunk ? 1 : 0);\n\t        this.attributes.chunk_url = Galaxy.root + 'dataset/display?dataset_id=' + this.id;\n\t        this.attributes.url_viz = Galaxy.root + 'visualization';\n\t    },\n\t\n\t    /**\n\t     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n\t     */\n\t    get_next_chunk: function() {\n\t        // If already at end of file, do nothing.\n\t        if (this.attributes.at_eof) {\n\t            return null;\n\t        }\n\t\n\t        // Get next chunk.\n\t        var self = this,\n\t            next_chunk = $.Deferred();\n\t        $.getJSON(this.attributes.chunk_url, {\n\t            chunk: self.attributes.chunk_index++\n\t        }).success(function(chunk) {\n\t            var rval;\n\t            if (chunk.ck_data !== '') {\n\t                // Found chunk.\n\t                rval = chunk;\n\t            }\n\t            else {\n\t                // At EOF.\n\t                self.attributes.at_eof = true;\n\t                rval = null;\n\t            }\n\t            next_chunk.resolve(rval);\n\t        });\n\t\n\t        return next_chunk;\n\t    }\n\t});\n\t\n\tvar DatasetCollection = Backbone.Collection.extend({\n\t    model: Dataset\n\t});\n\t\n\t/**\n\t * Provides a base for table-based, dynamic view of a tabular dataset.\n\t * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n\t * or EmbeddedTabularDatasetChunkedView.\n\t */\n\tvar TabularDatasetChunkedView = Backbone.View.extend({\n\t\n\t    /**\n\t     * Initialize view and, importantly, set a scroll element.\n\t     */\n\t    initialize: function(options) {\n\t        // Row count for rendering.\n\t        this.row_count = 0;\n\t        this.loading_chunk = false;\n\t\n\t        // load trackster button\n\t        new TabularButtonTracksterView({\n\t            model   : options.model,\n\t            $el     : this.$el\n\t        });\n\t    },\n\t\n\t    expand_to_container: function(){\n\t        if (this.$el.height() < this.scroll_elt.height()){\n\t            this.attempt_to_fetch();\n\t        }\n\t    },\n\t\n\t    attempt_to_fetch: function( func ){\n\t        var self = this;\n\t        if ( !this.loading_chunk && this.scrolled_to_bottom() ) {\n\t            this.loading_chunk = true;\n\t            this.loading_indicator.show();\n\t            $.when(self.model.get_next_chunk()).then(function(result) {\n\t                if (result) {\n\t                    self._renderChunk(result);\n\t                    self.loading_chunk = false;\n\t                }\n\t                self.loading_indicator.hide();\n\t                self.expand_to_container();\n\t            });\n\t        }\n\t    },\n\t\n\t    render: function() {\n\t        // Add loading indicator.\n\t        this.loading_indicator = $('<div/>').attr('id', 'loading_indicator');\n\t        this.$el.append(this.loading_indicator);\n\t\n\t        // Add data table and header.\n\t        var data_table = $('<table/>').attr({\n\t            id: 'content_table',\n\t            cellpadding: 0\n\t        });\n\t        this.$el.append(data_table);\n\t        var column_names = this.model.get_metadata('column_names'),\n\t            header_container = $('<thead/>').appendTo(data_table),\n\t            header_row = $('<tr/>').appendTo(header_container);\n\t        if (column_names) {\n\t            header_row.append('<th>' + column_names.join('</th><th>') + '</th>');\n\t        } else {\n\t            for (var j = 1; j <= this.model.get_metadata('columns'); j++) {\n\t                header_row.append('<th>' + j + '</th>');\n\t            }\n\t        }\n\t\n\t        // Render first chunk.\n\t        var self = this,\n\t            first_chunk = this.model.get('first_data_chunk');\n\t        if (first_chunk) {\n\t            // First chunk is bootstrapped, so render now.\n\t            this._renderChunk(first_chunk);\n\t        }\n\t        else {\n\t            // No bootstrapping, so get first chunk and then render.\n\t            $.when(self.model.get_next_chunk()).then(function(result) {\n\t                self._renderChunk(result);\n\t            });\n\t        }\n\t\n\t        // -- Show new chunks during scrolling. --\n\t\n\t        // Set up chunk loading when scrolling using the scrolling element.\n\t        this.scroll_elt.scroll(function(){\n\t            self.attempt_to_fetch();\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns true if user has scrolled to the bottom of the view.\n\t     */\n\t    scrolled_to_bottom: function() {\n\t        return false;\n\t    },\n\t\n\t    // -- Helper functions. --\n\t\n\t    _renderCell: function(cell_contents, index, colspan) {\n\t        var $cell = $('<td>').text(cell_contents);\n\t        var column_types = this.model.get_metadata('column_types');\n\t        if (colspan !== undefined) {\n\t            $cell.attr('colspan', colspan).addClass('stringalign');\n\t        } else if (column_types) {\n\t            if (index < column_types.length) {\n\t                if (column_types[index] === 'str' || column_types[index] === 'list') {\n\t                    /* Left align all str columns, right align the rest */\n\t                    $cell.addClass('stringalign');\n\t                }\n\t            }\n\t        }\n\t        return $cell;\n\t    },\n\t\n\t    _renderRow: function(line) {\n\t        // Check length of cells to ensure this is a complete row.\n\t        var cells = line.split('\\t'),\n\t            row = $('<tr>'),\n\t            num_columns = this.model.get_metadata('columns');\n\t\n\t        if (this.row_count % 2 !== 0) {\n\t            row.addClass('dark_row');\n\t        }\n\t\n\t        if (cells.length === num_columns) {\n\t            _.each(cells, function(cell_contents, index) {\n\t                row.append(this._renderCell(cell_contents, index));\n\t            }, this);\n\t        }\n\t        else if (cells.length > num_columns) {\n\t            // SAM file or like format with optional metadata included.\n\t            _.each(cells.slice(0, num_columns - 1), function(cell_contents, index) {\n\t                row.append(this._renderCell(cell_contents, index));\n\t            }, this);\n\t            row.append(this._renderCell(cells.slice(num_columns - 1).join('\\t'), num_columns - 1));\n\t        }\n\t        else if (num_columns > 5 && cells.length === num_columns - 1 ) {\n\t            // SAM file or like format with optional metadata missing.\n\t            _.each(cells, function(cell_contents, index) {\n\t                row.append(this._renderCell(cell_contents, index));\n\t            }, this);\n\t            row.append($('<td>'));\n\t        }\n\t        else {\n\t            // Comment line, just return the one cell.\n\t            row.append(this._renderCell(line, 0, num_columns));\n\t        }\n\t\n\t        this.row_count++;\n\t        return row;\n\t    },\n\t\n\t    _renderChunk: function(chunk) {\n\t        var data_table = this.$el.find('table');\n\t        _.each(chunk.ck_data.split('\\n'), function(line, index) {\n\t            if (line !== ''){\n\t                data_table.append(this._renderRow(line));\n\t            }\n\t        }, this);\n\t    }\n\t});\n\t\n\t/**\n\t * Tabular view that is placed at the top level of page. Scrolling occurs\n\t * view top-level elements outside of view.\n\t */\n\tvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\t\n\t    initialize: function(options) {\n\t        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\t\n\t        // Scrolling happens in top-level elements.\n\t        scroll_elt = _.find(this.$el.parents(), function(p) {\n\t            return $(p).css('overflow') === 'auto';\n\t        });\n\t\n\t        // If no scrolling element found, use window.\n\t        if (!scroll_elt) { scroll_elt = window; }\n\t\n\t        // Wrap scrolling element for easy access.\n\t        this.scroll_elt = $(scroll_elt);\n\t    },\n\t\n\t    /**\n\t     * Returns true if user has scrolled to the bottom of the view.\n\t     */\n\t    scrolled_to_bottom: function() {\n\t        return (this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0);\n\t    }\n\t\n\t});\n\t\n\t/**\n\t * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n\t */\n\tvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\t\n\t    initialize: function(options) {\n\t        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\t\n\t        // Because view is embedded, set up div to do scrolling.\n\t        this.scroll_elt = this.$el.css({\n\t            position: 'relative',\n\t            overflow: 'scroll',\n\t            height: options.height || '500px'\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns true if user has scrolled to the bottom of the view.\n\t     */\n\t    scrolled_to_bottom: function() {\n\t        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n\t    }\n\t\n\t});\n\t\n\t// button for trackster visualization\n\tvar TabularButtonTracksterView = Backbone.View.extend({\n\t\n\t    // gene region columns\n\t    col: {\n\t        chrom   : null,\n\t        start   : null,\n\t        end     : null\n\t    },\n\t\n\t    // url for trackster\n\t    url_viz     : null,\n\t\n\t    // dataset id\n\t    dataset_id  : null,\n\t\n\t    // database key\n\t    genome_build: null,\n\t\n\t    // data type\n\t    file_ext   : null,\n\t\n\t    // backbone initialize\n\t    initialize: function (options) {\n\t        // check if environment is available\n\t        var Galaxy = parent.Galaxy;\n\t\n\t        // link galaxy modal or create one\n\t        if (Galaxy && Galaxy.modal) {\n\t            this.modal = Galaxy.modal;\n\t        }\n\t\n\t        // link galaxy frames\n\t        if (Galaxy && Galaxy.frame) {\n\t            this.frame = Galaxy.frame;\n\t        }\n\t\n\t        // check\n\t        if (!this.modal || !this.frame) {\n\t            return;\n\t        }\n\t\n\t        // model/metadata\n\t        var model       = options.model;\n\t        var metadata    = model.get('metadata');\n\t\n\t        // check for datatype\n\t        if (!model.get('file_ext')) {\n\t            return;\n\t        }\n\t\n\t        // get data type\n\t        this.file_ext = model.get('file_ext');\n\t\n\t        // check for bed-file format\n\t        if (this.file_ext == 'bed')\n\t        {\n\t            // verify that metadata exists\n\t            if (metadata.get('chromCol') && metadata.get('startCol') && metadata.get('endCol'))\n\t            {\n\t                // read in columns\n\t                this.col.chrom   = metadata.get('chromCol') - 1;\n\t                this.col.start   = metadata.get('startCol') - 1;\n\t                this.col.end     = metadata.get('endCol') - 1;\n\t            } else {\n\t                console.log('TabularButtonTrackster : Bed-file metadata incomplete.');\n\t                return;\n\t            }\n\t        }\n\t\n\t        // check for vcf-file format\n\t        if (this.file_ext == 'vcf')\n\t        {\n\t            // search array\n\t            function search (str, array) {\n\t                for (var j = 0; j < array.length; j++)\n\t                    if (array[j].match(str)) return j;\n\t                return -1;\n\t            };\n\t\n\t            // load\n\t            this.col.chrom = search('Chrom', metadata.get('column_names'));\n\t            this.col.start = search('Pos', metadata.get('column_names'));\n\t            this.col.end   = null;\n\t\n\t            // verify that metadata exists\n\t            if (this.col.chrom == -1 || this.col.start == -1) {\n\t                console.log('TabularButtonTrackster : VCF-file metadata incomplete.');\n\t                return;\n\t            }\n\t        }\n\t\n\t        // check\n\t        if(this.col.chrom === undefined) {\n\t            return;\n\t        }\n\t\n\t        // get dataset id\n\t        if (model.id) {\n\t            this.dataset_id = model.id;\n\t        } else {\n\t            console.log('TabularButtonTrackster : Dataset identification is missing.');\n\t            return;\n\t        }\n\t\n\t        // get url\n\t        if (model.get('url_viz')) {\n\t            this.url_viz = model.get('url_viz');\n\t        } else {\n\t            console.log('TabularButtonTrackster : Url for visualization controller is missing.');\n\t            return;\n\t        }\n\t\n\t        // get genome_build / database key\n\t        if (model.get('genome_build')) {\n\t            this.genome_build = model.get('genome_build');\n\t        }\n\t\n\t        // create the icon\n\t        var btn_viz = new mod_icon_btn.IconButtonView({\n\t            model : new mod_icon_btn.IconButton({\n\t                title       : 'Visualize',\n\t                icon_class  : 'chart_curve',\n\t                id          : 'btn_viz'\n\t            })\n\t        });\n\t\n\t        // set element\n\t        this.setElement(options.$el);\n\t\n\t        // add to element\n\t        this.$el.append(btn_viz.render().$el);\n\t\n\t        // hide the button\n\t        this.hide();\n\t    },\n\t\n\t    // backbone events\n\t    events:\n\t    {\n\t        'mouseover tr'  : 'show',\n\t        'mouseleave'    : 'hide'\n\t    },\n\t\n\t    // show button\n\t    show: function (e) {\n\t        // is numeric\n\t        function is_numeric(n) {\n\t            return !isNaN(parseFloat(n)) && isFinite(n);\n\t        };\n\t\n\t        // check\n\t        if(this.col.chrom === null)\n\t            return;\n\t\n\t        // get selected data line\n\t        var row = $(e.target).parent();\n\t\n\t        // verify that location has been found\n\t        var chrom = row.children().eq(this.col.chrom).html();\n\t        var start = row.children().eq(this.col.start).html();\n\t\n\t        // end is optional\n\t        var end = this.col.end ? row.children().eq(this.col.end).html() : start;\n\t\n\t        // double check location\n\t        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n\t\n\t            // get target gene region\n\t            var btn_viz_pars = {\n\t                dataset_id  : this.dataset_id,\n\t                gene_region : chrom + \":\" + start + \"-\" + end\n\t            };\n\t\n\t            // get button position\n\t            var offset  = row.offset();\n\t            var left    = offset.left - 10;\n\t            var top     = offset.top - $(window).scrollTop() + 3;\n\t\n\t            // update css\n\t            $('#btn_viz').css({'position': 'fixed', 'top': top + 'px', 'left': left + 'px'});\n\t            $('#btn_viz').off('click');\n\t            $('#btn_viz').click(this.create_trackster_action(this.url_viz, btn_viz_pars, this.genome_build));\n\t\n\t            // show the button\n\t            $('#btn_viz').show();\n\t        } else {\n\t            // hide the button\n\t            $('#btn_viz').hide();\n\t        }\n\t    },\n\t\n\t    // hide button\n\t    hide: function () {\n\t        this.$el.find('#btn_viz').hide();\n\t    },\n\t\n\t    // create action\n\t    create_trackster_action : function (vis_url, dataset_params, dbkey) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // create function\n\t        return function() {\n\t            var listTracksParams = {};\n\t            if (dbkey) {\n\t                listTracksParams[ 'f-dbkey' ] = dbkey;\n\t            }\n\t            $.ajax({\n\t                url: vis_url + '/list_tracks?' + $.param( listTracksParams ),\n\t                dataType: 'html',\n\t                error: function() {\n\t                    // show error message\n\t                    self.modal.show({\n\t                        title   : 'Something went wrong!',\n\t                        body    : 'Unfortunately we could not add this dataset to the track browser. Please try again or contact us.',\n\t                        buttons : {\n\t                            'Cancel': function(){\n\t                                self.modal.hide();\n\t                            }\n\t                        }\n\t                    });\n\t                },\n\t                success: function(table_html) {\n\t                    self.modal.show({\n\t                        title   : 'View Data in a New or Saved Visualization',\n\t                        buttons :{\n\t                            'Cancel': function(){\n\t                                self.modal.hide();\n\t                            },\n\t                            'View in saved visualization': function(){\n\t                                // show modal with saved visualizations\n\t                                self.modal.show(\n\t                                {\n\t                                    title   : 'Add Data to Saved Visualization',\n\t                                    body    : table_html,\n\t                                    buttons : {\n\t                                        'Cancel': function(){\n\t                                            self.modal.hide();\n\t                                        },\n\t                                        'Add to visualization': function(){\n\t                                            // hide\n\t                                            self.modal.hide();\n\t\n\t                                            // search selected fields\n\t                                            self.modal.$el.find('input[name=id]:checked').each(function(){\n\t                                                // get visualization id\n\t                                                var vis_id = $(this).val();\n\t                                                dataset_params.id = vis_id;\n\t\n\t                                                // add widget\n\t                                                self.frame.add({\n\t                                                    title    : 'Trackster',\n\t                                                    type     : 'url',\n\t                                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n\t                                                });\n\t                                            });\n\t                                        }\n\t                                    }\n\t                                });\n\t                            },\n\t                            'View in new visualization': function(){\n\t                                // hide\n\t                                self.modal.hide();\n\t\n\t                                // add widget\n\t                                self.frame.add({\n\t                                    title    : 'Trackster',\n\t                                    type     : 'url',\n\t                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n\t                                });\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t            return false;\n\t        };\n\t    }\n\t});\n\t\n\t// -- Utility functions. --\n\t\n\t/**\n\t * Create a model, attach it to a view, render view, and attach it to a parent element.\n\t */\n\tvar createModelAndView = function(model, view, model_config, parent_elt) {\n\t    // Create model, view.\n\t    var a_view = new view({\n\t        model: new model(model_config)\n\t    });\n\t\n\t    // Render view and add to parent element.\n\t    a_view.render();\n\t    if (parent_elt) {\n\t        parent_elt.append(a_view.$el);\n\t    }\n\t\n\t    return a_view;\n\t};\n\t\n\t/**\n\t * Create a tabular dataset chunked view (and requisite tabular dataset model)\n\t * and appends to parent_elt.\n\t */\n\tvar createTabularDatasetChunkedView = function(options) {\n\t    // If no model, create and set model from dataset config.\n\t    if (!options.model) {\n\t        options.model = new TabularDataset(options.dataset_config);\n\t    }\n\t\n\t    var parent_elt = options.parent_elt;\n\t    var embedded = options.embedded;\n\t\n\t    // Clean up options so that only needed options are passed to view.\n\t    delete options.embedded;\n\t    delete options.parent_elt;\n\t    delete options.dataset_config;\n\t\n\t    // Create and set up view.\n\t    var view = (embedded ? new EmbeddedTabularDatasetChunkedView(options) :\n\t                           new TopLevelTabularDatasetChunkedView(options));\n\t    view.render();\n\t\n\t    if (parent_elt) {\n\t        parent_elt.append(view.$el);\n\t        // If we're sticking this in another element, once it's appended check\n\t        // to make sure we've filled enough space.\n\t        // Without this, the scroll elements don't work.\n\t        view.expand_to_container();\n\t    }\n\t\n\t    return view;\n\t};\n\t\n\treturn {\n\t    Dataset: Dataset,\n\t    TabularDataset: TabularDataset,\n\t    DatasetCollection: DatasetCollection,\n\t    TabularDatasetChunkedView: TabularDatasetChunkedView,\n\t    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 12 */,\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This class contains all button views.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    /** This renders the default button which is used e.g. at the bottom of the upload modal.\n\t    */\n\t    var ButtonBase = Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            this.options = Utils.merge( options, {\n\t                id          : Utils.uid(),\n\t                title       : '',\n\t                floating    : 'right',\n\t                icon        : '',\n\t                cls         : 'ui-button btn btn-default',\n\t                cls_wait    : 'btn btn-info'\n\t            } );\n\t            this.setElement( this._template( this.options ) );\n\t            var self = this;\n\t            $( this.el ).on( 'click' , function() {\n\t                $( '.tooltip' ).hide();\n\t                if ( options.onclick && !self.disabled ) {\n\t                    options.onclick();\n\t                }\n\t            } );\n\t            $( this.el ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n\t        },\n\t\n\t        // disable\n\t        disable: function() {\n\t            this.$el.addClass( 'disabled' );\n\t            this.disabled = true;\n\t        },\n\t\n\t        // enable\n\t        enable: function() {\n\t            this.$el.removeClass( 'disabled' );\n\t            this.disabled = false;\n\t        },\n\t\n\t        // show spinner\n\t        wait: function() {\n\t            this.$el.removeClass( this.options.cls ).addClass( this.options.cls_wait ).prop( 'disabled', true );\n\t            this.$( '.icon' ).removeClass( this.options.icon ).addClass( 'fa-spinner fa-spin' );\n\t            this.$( '.title' ).html( 'Sending...' );\n\t        },\n\t\n\t        // hide spinner\n\t        unwait: function() {\n\t            this.$el.removeClass( this.options.cls_wait ).addClass( this.options.cls ).prop( 'disabled', false );\n\t            this.$( '.icon' ).removeClass( 'fa-spinner fa-spin' ).addClass( this.options.icon );\n\t            this.$( '.title' ).html( this.options.title );\n\t        },\n\t\n\t        // template\n\t        _template: function( options ) {\n\t            var str =   '<button id=\"' + options.id + '\" type=\"submit\" style=\"float: ' + options.floating + ';\" type=\"button\" class=\"' + options.cls + '\">';\n\t            if (options.icon) {\n\t                str +=      '<i class=\"icon fa ' + options.icon + '\"/>&nbsp;';\n\t            }\n\t            str +=          '<span class=\"title\">' + options.title + '</span>' +\n\t                        '</button>';\n\t            return str;\n\t        }\n\t    });\n\t\n\t    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons.\n\t    */\n\t    var ButtonLink = ButtonBase.extend({\n\t        initialize: function( options ) {\n\t            ButtonBase.prototype.initialize.call( this, options );\n\t        },\n\t        _template: function( options ) {\n\t            return  '<a id=\"' + options.id + '\" class=\"' + options.cls + '\" href=\"' + ( options.href || 'javascript:void(0)' ) + '\"' +\n\t                        ' title=\"' + options.title + '\" target=\"' + ( options.target || '_top' ) + '\">' + '<span class=\"' + options.icon + '\"/>' +\n\t                    '</a>';\n\t        }\n\t    });\n\t\n\t    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected.\n\t    */\n\t    var ButtonCheck = Backbone.View.extend({\n\t        initialize: function( options ) {\n\t            // configure options\n\t            this.options = Utils.merge(options, {\n\t                title : 'Select/Unselect all',\n\t                icons : ['fa fa-square-o', 'fa fa-minus-square-o', 'fa fa-check-square-o'],\n\t                value : 0\n\t            });\n\t\n\t            // create new element\n\t            this.setElement( this._template() );\n\t            this.$title = this.$( '.title' );\n\t            this.$icon  = this.$( '.icon' );\n\t\n\t            // set initial value\n\t            this.value( this.options.value );\n\t\n\t            // set title\n\t            this.$title.html( this.options.title );\n\t\n\t            // add event handler\n\t            var self = this;\n\t            this.$el.on('click', function() {\n\t                self.current = ( self.current === 0 && 2 ) || 0;\n\t                self.value( self.current );\n\t                self.options.onclick && self.options.onclick();\n\t            });\n\t        },\n\t\n\t        /* Sets a new value and/or returns the current value.\n\t        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n\t        * OR:\n\t        * @param{Integer}   new_val - Number of selected options.\n\t        * @param{Integer}   total   - Total number of available options.\n\t        */\n\t        value: function ( new_val, total ) {\n\t            if ( new_val !== undefined ) {\n\t                if ( total ) {\n\t                    if ( new_val !== 0 ) {\n\t                        new_val = ( new_val !== total ) && 1 || 2;\n\t                    }\n\t                }\n\t                this.current = new_val;\n\t                this.$icon.removeClass()\n\t                          .addClass( 'icon' )\n\t                          .addClass( this.options.icons[ new_val ] );\n\t                this.options.onchange && this.options.onchange( new_val );\n\t            }\n\t            return this.current;\n\t        },\n\t\n\t        /** Template containing the check button and the title\n\t        */\n\t        _template: function() {\n\t            return  '<div class=\"ui-button-check\" >' +\n\t                        '<span class=\"icon\"/>' +\n\t                        '<span class=\"title\"/>' +\n\t                    '</div>';\n\t        }\n\t    });\n\t\n\t    /** This renders a differently styled, more compact button version.\n\t        TODO: Consolidate with icon-button.js and/or button-default.js.\n\t    */\n\t    var ButtonIcon = Backbone.View.extend({\n\t        initialize : function( options ) {\n\t            // get options\n\t            this.options = Utils.merge( options, {\n\t                id          : Utils.uid(),\n\t                title       : '',\n\t                floating    : 'right',\n\t                cls         : 'ui-button-icon',\n\t                icon        : '',\n\t                tooltip     : '',\n\t                onclick     : null\n\t            });\n\t\n\t            // create new element\n\t            this.setElement( this._template( this.options ) );\n\t\n\t            // link button element\n\t            this.$button = this.$el.find( '.button' );\n\t\n\t            // add event\n\t            var self = this;\n\t            $(this.el).on('click', function() {\n\t                // hide all tooltips\n\t                $( '.tooltip' ).hide();\n\t\n\t                // execute onclick callback\n\t                if ( options.onclick && !self.disabled ) {\n\t                    options.onclick();\n\t                }\n\t            });\n\t\n\t            // add tooltip\n\t            this.$button.tooltip( { title: options.tooltip, placement: 'bottom' } );\n\t        },\n\t\n\t        // disable\n\t        disable: function() {\n\t            this.$button.addClass( 'disabled' );\n\t            this.disabled = true;\n\t        },\n\t\n\t        // enable\n\t        enable: function() {\n\t            this.$button.removeClass( 'disabled' );\n\t            this.disabled = false;\n\t        },\n\t\n\t        // change icon\n\t        setIcon: function(icon_cls) {\n\t            this.$('i').removeClass( this.options.icon ).addClass( icon_cls );\n\t            this.options.icon = icon_cls;\n\t        },\n\t\n\t        // template\n\t        _template: function( options ) {\n\t            // width\n\t            var width = '';\n\t            if ( options.title ) {\n\t                width = 'width: auto;';\n\t            }\n\t\n\t            // string\n\t            var str =   '<div id=\"' + options.id + '\" style=\"float: ' + options.floating + '; ' + width + '\" class=\"' + options.cls + '\">' +\n\t                            '<div class=\"button\">';\n\t            if (options.title) {\n\t                str +=          '<i class=\"icon fa ' + options.icon + '\"/>&nbsp;' +\n\t                                '<span class=\"title\">' + options.title + '</span>';\n\t            } else {\n\t                str +=          '<i class=\"icon fa ' + options.icon + '\"/>';\n\t            }\n\t            str +=          '</div>' +\n\t                        '</div>';\n\t            return str;\n\t        }\n\t    });\n\t\n\t    /** This class creates a button with dropdown menu. It extends the functionality of the Ui.ButtonIcon class.\n\t        TODO: Consolidate class, use common base class\n\t    */\n\t    var ButtonMenu = Backbone.View.extend({\n\t        // optional sub menu\n\t        $menu: null,\n\t\n\t        // initialize\n\t        initialize: function ( options ) {\n\t            // get options\n\t            this.options = Utils.merge( options, {\n\t                // same as Ui.ButtonIcon\n\t                id              : '',\n\t                title           : '',\n\t                floating        : 'right',\n\t                pull            : 'right',\n\t                icon            : null,\n\t                onclick         : null,\n\t                cls             : 'ui-button-icon ui-button-menu',\n\t                tooltip         : '',\n\t                \n\t                // additional options\n\t                target          : '',\n\t                href            : '',\n\t                onunload        : null,\n\t                visible         : true,\n\t                tag             : ''\n\t            } );\n\t\n\t            // add template for tab\n\t            this.setElement( $( this._template( this.options ) ) );\n\t\n\t            // find root\n\t            var $root = $( this.el ).find( '.root' );\n\t\n\t            // link head\n\t            var self = this;\n\t            $root.on( 'click', function( e ) {\n\t                // hide all tooltips\n\t                $( '.tooltip' ).hide();\n\t\n\t                // prevent default\n\t                e.preventDefault();\n\t\n\t                // add click event\n\t                if( self.options.onclick ) {\n\t                    self.options.onclick();\n\t                }\n\t            });\n\t\n\t            // visiblity\n\t            if ( !this.options.visible )\n\t                this.hide();\n\t\n\t            // add tooltip\n\t            $root.tooltip( { title: options.tooltip, placement: 'bottom' } );\n\t        },\n\t\n\t        // show\n\t        show: function() {\n\t            $( this.el ).show();\n\t        },\n\t\n\t        // hide\n\t        hide: function() {\n\t            $( this.el ).hide();\n\t        },\n\t\n\t        // add menu item\n\t        addMenu: function ( options ) {\n\t            // menu option defaults\n\t            var menuOptions = {\n\t                title       : '',\n\t                target      : '',\n\t                href        : '',\n\t                onclick     : null,\n\t                divider     : false,\n\t                icon        : null,\n\t                cls         : 'button-menu btn-group'\n\t            }\n\t\n\t            // get options\n\t            menuOptions = Utils.merge( options, menuOptions );\n\t\n\t            // check if submenu element is available\n\t            if ( !this.$menu ) {\n\t                // insert submenu element into root\n\t                $( this.el ).append( this._templateMenu() );\n\t\n\t                // update element link\n\t                this.$menu = $( this.el ).find( '.menu' );\n\t            }\n\t\n\t            // create\n\t            var $item = $( this._templateMenuItem( menuOptions ) );\n\t\n\t            // add events\n\t            $item.on( 'click', function( e ) {\n\t                if( menuOptions.onclick ) {\n\t                    e.preventDefault();\n\t                    menuOptions.onclick();\n\t                }\n\t            });\n\t\n\t            // append menu\n\t            this.$menu.append( $item );\n\t\n\t            // append divider\n\t            if ( menuOptions.divider ) {\n\t                this.$menu.append( $( this._templateDivider() ) );\n\t            }\n\t        },\n\t\n\t        // fill template header\n\t        _templateMenuItem: function ( options ) {\n\t            var tmpl =  '<li>' +\n\t                            '<a class=\"dropdown-item\" href=\"' + options.href + '\" target=\"' + options.target + '\" ';\n\t            if ( options.download ) {\n\t                tmpl +=         'download=\"' + options.download + '\"';\n\t            }\n\t            tmpl +=         '>';\n\t            if ( options.icon ) {\n\t                tmpl +=         '<i class=\"fa ' + options.icon + '\"/>';\n\t            }\n\t            tmpl +=             ' ' + options.title +\n\t                            '</a>' +\n\t                        '</li>';\n\t            return tmpl;\n\t        },\n\t\n\t        // fill template header\n\t        _templateMenu: function () {\n\t            return '<ul class=\"menu dropdown-menu pull-' + this.options.pull + '\" role=\"menu\"/>';\n\t        },\n\t\n\t        _templateDivider: function() {\n\t            return '<li class=\"divider\"/>';\n\t        },\n\t\n\t        // element\n\t        _template: function(options) {\n\t            // TODO: width/margin should be set in css\n\t            var width = '';\n\t            var margin = '';\n\t            if ( options.title ) {\n\t                width = 'width: auto;';\n\t            } else {\n\t                margin = 'margin: 0px;';\n\t            }\n\t            var str =   '<div id=\"' + options.id + '\" style=\"float: ' + options.floating + '; ' + width + '\" class=\"dropdown ' + options.cls + '\">' +\n\t                            '<div class=\"root button dropdown-toggle\" data-toggle=\"dropdown\" style=\"' + margin + '\">' +\n\t                                '<i class=\"icon fa ' + options.icon + '\"/>';\n\t            if ( options.title ) {\n\t                str +=          '&nbsp;<span class=\"title\">' + options.title + '</span>';\n\t            }\n\t            str +=          '</div>' +\n\t                        '</div>';\n\t            return str;\n\t        }\n\t    });\n\t\n\t    return {\n\t        ButtonDefault   : ButtonBase,\n\t        ButtonLink      : ButtonLink,\n\t        ButtonIcon      : ButtonIcon,\n\t        ButtonCheck     : ButtonCheck,\n\t        ButtonMenu      : ButtonMenu\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils) {\n\t\n\t/**\n\t *  This class creates a ui table element.\n\t */\n\tvar View = Backbone.View.extend({\n\t    // current row\n\t    row: null,\n\t    \n\t    // count rows\n\t    row_count: 0,\n\t    \n\t    // defaults options\n\t    optionsDefault: {\n\t        content     : 'No content available.',\n\t        onchange    : null,\n\t        ondblclick  : null,\n\t        onconfirm   : null,\n\t        cls         : 'ui-table',\n\t        cls_tr      : ''\n\t    },\n\t    \n\t    // events\n\t    events : {\n\t        'click'     : '_onclick',\n\t        'dblclick'  : '_ondblclick'\n\t    },\n\t    \n\t    // initialize\n\t    initialize : function(options) {\n\t        // configure options\n\t        this.options = Utils.merge(options, this.optionsDefault);\n\t        \n\t        // create new element\n\t        var $el = $(this._template(this.options));\n\t        \n\t        // link sub-elements\n\t        this.$thead = $el.find('thead');\n\t        this.$tbody = $el.find('tbody');\n\t        this.$tmessage = $el.find('tmessage');\n\t        \n\t        // set element\n\t        this.setElement($el);\n\t                \n\t        // initialize row\n\t        this.row = this._row();\n\t    },\n\t    \n\t    // add header cell\n\t    addHeader: function($el) {\n\t        var wrapper = $('<th></th>');\n\t        wrapper.append($el);\n\t        this.row.append(wrapper);\n\t    },\n\t    \n\t    // header\n\t    appendHeader: function() {\n\t        // append header row\n\t        this.$thead.append(this.row);\n\t\n\t        // row\n\t        this.row = $('<tr></tr>');\n\t    },\n\t    \n\t    // add row cell\n\t    add: function($el, width, align) {\n\t        var wrapper = $('<td></td>');\n\t        if (width) {\n\t            wrapper.css('width', width);\n\t        }\n\t        if (align) {\n\t            wrapper.css('text-align', align);\n\t        }\n\t        wrapper.append($el);\n\t        this.row.append(wrapper);\n\t    },\n\t    \n\t    // append\n\t    append: function(id, fade) {\n\t        this._commit(id, fade, false);\n\t    },\n\t    \n\t    // prepend\n\t    prepend: function(id, fade) {\n\t        this._commit(id, fade, true);\n\t    },\n\t    \n\t    // get element\n\t    get: function(id) {\n\t        return this.$el.find('#' + id);\n\t    },\n\t    \n\t    // delete\n\t    del: function(id) {\n\t        var item = this.$tbody.find('#' + id);\n\t        if (item.length > 0) {\n\t            item.remove();\n\t            this.row_count--;\n\t            this._refresh();\n\t        }\n\t    },\n\t\n\t    // delete all\n\t    delAll: function() {\n\t        this.$tbody.empty();\n\t        this.row_count = 0;\n\t        this._refresh();\n\t    },\n\t        \n\t    // value\n\t    value: function(new_value) {\n\t        // get current id/value\n\t        this.before = this.$tbody.find('.current').attr('id');\n\t        \n\t        // check if new_value is defined\n\t        if (new_value !== undefined) {\n\t            this.$tbody.find('tr').removeClass('current');\n\t            if (new_value) {\n\t                this.$tbody.find('#' + new_value).addClass('current');\n\t            }\n\t        }\n\t        \n\t        // get current id/value\n\t        var after = this.$tbody.find('.current').attr('id');\n\t        if(after === undefined) {\n\t            return null;\n\t        } else {\n\t            // fire onchange\n\t            if (after != this.before && this.options.onchange) {\n\t                this.options.onchange(new_value);\n\t            }\n\t            \n\t            // return current value\n\t            return after;\n\t        }\n\t    },\n\t    \n\t    // size\n\t    size: function() {\n\t        return this.$tbody.find('tr').length;\n\t    },\n\t    \n\t    // commit\n\t    _commit: function(id, fade, prepend) {\n\t        // remove previous item with same id\n\t        this.del(id);\n\t        \n\t        // add\n\t        this.row.attr('id', id);\n\t        \n\t        // add row\n\t        if (prepend) {\n\t            this.$tbody.prepend(this.row);\n\t        } else {\n\t            this.$tbody.append(this.row);\n\t        }\n\t        \n\t        // fade mode\n\t        if (fade) {\n\t            this.row.hide();\n\t            this.row.fadeIn();\n\t        }\n\t        \n\t        // row\n\t        this.row = this._row();\n\t        \n\t        // row count\n\t        this.row_count++;\n\t        this._refresh();\n\t    },\n\t    \n\t    // create new row\n\t    _row: function() {\n\t        return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n\t    },\n\t    \n\t    // onclick\n\t    _onclick: function(e) {\n\t        // get values\n\t        var old_value = this.value();\n\t        var new_value = $(e.target).closest('tr').attr('id');\n\t        if (new_value != ''){\n\t            // check equality\n\t            if (new_value && old_value != new_value) {\n\t                if (this.options.onconfirm) {\n\t                    this.options.onconfirm(new_value);\n\t                } else {\n\t                    this.value(new_value);\n\t                }\n\t            }\n\t        }\n\t    },\n\t\n\t    // ondblclick\n\t    _ondblclick: function(e) {\n\t        var value = this.value();\n\t        if (value && this.options.ondblclick) {\n\t            this.options.ondblclick(value);\n\t        }\n\t    },\n\t        \n\t    // refresh\n\t    _refresh: function() {\n\t        if (this.row_count == 0) {\n\t            this.$tmessage.show();\n\t        } else {\n\t            this.$tmessage.hide();\n\t        }\n\t    },\n\t        \n\t    // load html template\n\t    _template: function(options) {\n\t        return  '<div>' +\n\t                    '<table class=\"' + options.cls + '\">' +\n\t                        '<thead></thead>' +\n\t                        '<tbody></tbody>' +\n\t                    '</table>' +\n\t                    '<tmessage>' + options.content + '</tmessage>' +\n\t                '<div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    //jquery\n\t    //backbone\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\t//=============================================================================\n\t/**\n\t * backbone model for icon buttons\n\t */\n\tvar IconButton = Backbone.Model.extend({\n\t    defaults: {\n\t        title           : \"\",\n\t        icon_class      : \"\",\n\t        on_click        : null,\n\t        menu_options    : null,\n\t        is_menu_button  : true,\n\t        id              : null,\n\t        href            : null,\n\t        target          : null,\n\t        enabled         : true,\n\t        visible         : true,\n\t        tooltip_config  : {}\n\t    }\n\t});\n\t\n\t/**\n\t *  backbone view for icon buttons\n\t */\n\tvar IconButtonView = Backbone.View.extend({\n\t\n\t    initialize : function(){\n\t        // better rendering this way\n\t        this.model.attributes.tooltip_config = { placement : 'bottom' };\n\t        this.model.bind( 'change', this.render, this );\n\t    },\n\t\n\t    render : function( ){\n\t        // hide tooltip\n\t        this.$el.tooltip( 'hide' );\n\t\n\t        var new_elem = this.template( this.model.toJSON() );\n\t        // configure tooltip\n\t        new_elem.tooltip( this.model.get( 'tooltip_config' ));\n\t        this.$el.replaceWith( new_elem );\n\t        this.setElement( new_elem );\n\t        return this;\n\t    },\n\t\n\t    events : {\n\t        'click' : 'click'\n\t    },\n\t\n\t    click : function( event ){\n\t        // if on_click pass to that function\n\t        if( _.isFunction( this.model.get( 'on_click' ) ) ){\n\t            this.model.get( 'on_click' )( event );\n\t            return false;\n\t        }\n\t        // otherwise, bubble up ( to href or whatever )\n\t        return true;\n\t    },\n\t\n\t    // generate html element\n\t    template: function( options ){\n\t        var buffer = 'title=\"' + options.title + '\" class=\"icon-button';\n\t\n\t        if( options.is_menu_button ){\n\t            buffer += ' menu-button';\n\t        }\n\t\n\t        buffer += ' ' + options.icon_class;\n\t\n\t        if( !options.enabled ){\n\t            buffer += '_disabled';\n\t        }\n\t\n\t        // close class tag\n\t        buffer += '\"';\n\t\n\t        if( options.id ){\n\t            buffer += ' id=\"' + options.id + '\"';\n\t        }\n\t\n\t        buffer += ' href=\"' + options.href + '\"';\n\t        // add target for href\n\t        if( options.target ){\n\t            buffer += ' target=\"' + options.target + '\"';\n\t        }\n\t        // set visibility\n\t        if( !options.visible ){\n\t            buffer += ' style=\"display: none;\"';\n\t        }\n\t\n\t        // enabled/disabled\n\t        if ( options.enabled ){\n\t            buffer = '<a ' + buffer + '/>';\n\t        } else {\n\t            buffer = '<span ' + buffer + '/>';\n\t        }\n\t\n\t        // return element\n\t        return $( buffer );\n\t    }\n\t} );\n\t\n\t// define collection\n\tvar IconButtonCollection = Backbone.Collection.extend({\n\t    model: IconButton\n\t});\n\t\n\t/**\n\t * menu with multiple icon buttons\n\t * views are not needed nor used for individual buttons\n\t */\n\tvar IconButtonMenuView = Backbone.View.extend({\n\t\n\t    tagName: 'div',\n\t\n\t    initialize: function(){\n\t        this.render();\n\t    },\n\t\n\t    render: function(){\n\t        // initialize icon buttons\n\t        var self = this;\n\t        this.collection.each(function(button){\n\t            // create and add icon button to menu\n\t            var elt = $('<a/>')\n\t                .attr('href', 'javascript:void(0)')\n\t                .attr('title', button.attributes.title)\n\t                .addClass('icon-button menu-button')\n\t                .addClass(button.attributes.icon_class)\n\t                .appendTo(self.$el)\n\t                .click(button.attributes.on_click);\n\t\n\t            // configure tooltip\n\t            if (button.attributes.tooltip_config){\n\t                elt.tooltip(button.attributes.tooltip_config);\n\t            }\n\t\n\t            // add popup menu to icon\n\t            var menu_options = button.get('options');\n\t            if (menu_options){\n\t                make_popupmenu(elt, menu_options);\n\t            }\n\t        });\n\t\n\t        // return\n\t        return this;\n\t    }\n\t});\n\t\n\t/**\n\t * Returns an IconButtonMenuView for the provided configuration.\n\t * Configuration is a list of dictionaries where each dictionary\n\t * defines an icon button. Each dictionary must have the following\n\t * elements: icon_class, title, and on_click.\n\t */\n\tvar create_icon_buttons_menu = function(config, global_config)\n\t{\n\t    // initialize global configuration\n\t    if (!global_config) global_config = {};\n\t\n\t    // create and initialize menu\n\t    var buttons = new IconButtonCollection(\n\t        _.map(config, function(button_config){\n\t            return new IconButton(_.extend(button_config, global_config));\n\t        })\n\t    );\n\t\n\t    // return menu\n\t    return new IconButtonMenuView( {collection: buttons} );\n\t};\n\t\n\t\n\t//=============================================================================\n\t    return {\n\t        IconButton              : IconButton,\n\t        IconButtonView          : IconButtonView,\n\t        IconButtonCollection    : IconButtonCollection,\n\t        IconButtonMenuView      : IconButtonMenuView,\n\t        create_icon_buttons_menu: create_icon_buttons_menu\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n\t// Uses AMD or browser globals to create a jQuery plugin.\n\t(function (factory) {\n\t    if (true) {\n\t        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n\t        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n\t        //  relying on jquery being loaded globally* in order to preserve plugins.\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else {\n\t        // Browser globals\n\t        factory(jQuery);\n\t    }\n\t\n\t}(function ( jQuery ) {\n\t'use_strict';\n\t\n\tvar $ = jQuery;\n\t\n\t// ============================================================================\n\t/**\n\t * Make an element with text editable: (a) when user clicks on text, a textbox/area\n\t * is provided for editing; (b) when enter key pressed, element's text is set and on_finish\n\t * is called.\n\t */\n\t$.fn.make_text_editable = function(config_dict) {\n\t    // Get config options.\n\t    var num_cols = (\"num_cols\" in config_dict ? config_dict.num_cols : 30),\n\t        num_rows = (\"num_rows\" in config_dict ? config_dict.num_rows : 4),\n\t        use_textarea = (\"use_textarea\" in config_dict ? config_dict.use_textarea : false),\n\t        on_finish = (\"on_finish\" in config_dict ? config_dict.on_finish : null),\n\t        help_text = (\"help_text\" in config_dict ? config_dict.help_text : null);\n\t\n\t    // Add element behavior.\n\t    var container = $(this);\n\t    container.addClass(\"editable-text\").click(function(e) {\n\t        // If there's already an input element, editing is active, so do nothing.\n\t        if ($(this).children(\":input\").length > 0) {\n\t            return;\n\t        }\n\t\n\t        container.removeClass(\"editable-text\");\n\t\n\t        // Handler for setting element text.\n\t        var set_text = function(new_text) {\n\t            container.find(\":input\").remove();\n\t\n\t            if (new_text !== \"\") {\n\t                container.text(new_text);\n\t            } else {\n\t                // No text; need a line so that there is a click target.\n\t                container.html(\"<br>\");\n\t            }\n\t            container.addClass(\"editable-text\");\n\t\n\t            if (on_finish) {\n\t                on_finish(new_text);\n\t            }\n\t        };\n\t\n\t        // Create input element(s) for editing.\n\t        var cur_text = (\"cur_text\" in config_dict ? config_dict.cur_text : container.text() ),\n\t            input_elt, button_elt;\n\t\n\t        if (use_textarea) {\n\t            input_elt = $(\"<textarea/>\")\n\t                .attr({ rows: num_rows, cols: num_cols }).text($.trim(cur_text))\n\t                .keyup(function(e) {\n\t                    if (e.keyCode === 27) {\n\t                        // Escape key.\n\t                        set_text(cur_text);\n\t                    }\n\t                });\n\t            button_elt = $(\"<button/>\").text(\"Done\").click(function() {\n\t                set_text(input_elt.val());\n\t                // Return false so that click does not propogate to container.\n\t                return false;\n\t            });\n\t        }\n\t        else {\n\t            input_elt = $(\"<input type='text'/>\").attr({ value: $.trim(cur_text), size: num_cols })\n\t            .blur(function() {\n\t                set_text(cur_text);\n\t            }).keyup(function(e) {\n\t                if (e.keyCode === 27) {\n\t                    // Escape key.\n\t                    $(this).trigger(\"blur\");\n\t                } else if (e.keyCode === 13) {\n\t                    // Enter key.\n\t                    set_text($(this).val());\n\t                }\n\t\n\t                // Do not propogate event to avoid unwanted side effects.\n\t                e.stopPropagation();\n\t            });\n\t        }\n\t\n\t        // Replace text with input object(s) and focus & select.\n\t        container.text(\"\");\n\t        container.append(input_elt);\n\t        if (button_elt) {\n\t            container.append(button_elt);\n\t        }\n\t        input_elt.focus();\n\t        input_elt.select();\n\t\n\t        // Do not propogate to elements below b/c that blurs input and prevents it from being used.\n\t        e.stopPropagation();\n\t    });\n\t\n\t    // Add help text if there some.\n\t    if (help_text) {\n\t        container.attr(\"title\", help_text).tooltip();\n\t    }\n\t\n\t    return container;\n\t};\n\t\n\t// ============================================================================\n\t}));\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\t\n\t/**\n\t * Stringifies a number adding commas for digit grouping as per North America.\n\t */\n\tfunction commatize( number ) {\n\t    number += ''; // Convert to string\n\t    var rgx = /(\\d+)(\\d{3})/;\n\t    while (rgx.test(number)) {\n\t        number = number.replace(rgx, '$1' + ',' + '$2');\n\t    }\n\t    return number;\n\t}\n\t\n\t/**\n\t * Helper to determine if object is jQuery deferred.\n\t */\n\tvar is_deferred = function ( d ) {\n\t    return ('promise' in d);\n\t};\n\t\n\t/**\n\t * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n\t * condition is met, deferred is resolved.\n\t */\n\tvar ServerStateDeferred = Backbone.Model.extend({\n\t    defaults: {\n\t        ajax_settings: {},\n\t        interval: 1000,\n\t        success_fn: function(result) { return true; }\n\t    },\n\t\n\t    /**\n\t     * Returns a deferred that resolves when success function returns true.\n\t     */\n\t    go: function() {\n\t        var deferred = $.Deferred(),\n\t            self = this,\n\t            ajax_settings = self.get('ajax_settings'),\n\t            success_fn = self.get('success_fn'),\n\t            interval = self.get('interval'),\n\t             _go = function() {\n\t                 $.ajax(ajax_settings).success(function(result) {\n\t                     if (success_fn(result)) {\n\t                         // Result is good, so resolve.\n\t                         deferred.resolve(result);\n\t                     }\n\t                     else {\n\t                         // Result not good, try again.\n\t                         setTimeout(_go, interval);\n\t                     }\n\t                 });\n\t             };\n\t         _go();\n\t         return deferred;\n\t    }\n\t});\n\t\n\t/**\n\t * Returns a random color in hexadecimal format that is sufficiently different from a single color\n\t * or set of colors.\n\t * @param colors a color or list of colors in the format '#RRGGBB'\n\t */\n\tvar get_random_color = function(colors) {\n\t    // Default for colors is white.\n\t    if (!colors) { colors = \"#ffffff\"; }\n\t\n\t    // If needed, create list of colors.\n\t    if ( typeof(colors) === \"string\" ) {\n\t        colors = [ colors ];\n\t    }\n\t\n\t    // Convert colors to numbers.\n\t    for (var i = 0; i < colors.length; i++) {\n\t        colors[i] = parseInt( colors[i].slice(1), 16 );\n\t    }\n\t\n\t    // -- Perceived brightness and difference formulas are from\n\t    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\t\n\t    // Compute perceived color brightness (based on RGB-YIQ transformation):\n\t    var brightness = function(r, g, b) {\n\t        return ( (r * 299) + (g * 587) + (b * 114) ) / 1000;\n\t    };\n\t\n\t    // Compute color difference:\n\t    var difference = function(r1, g1, b1, r2, g2, b2) {\n\t        return ( Math.max(r1, r2) - Math.min(r1, r2) ) +\n\t               ( Math.max(g1, g2) - Math.min(g1, g2) ) +\n\t               ( Math.max(b1, b2) - Math.min(b1, b2) );\n\t    };\n\t\n\t    // Create new random color.\n\t    var new_color, nr, ng, nb,\n\t        other_color, or, og, ob,\n\t        n_brightness, o_brightness,\n\t        diff, ok = false,\n\t        num_tries = 0;\n\t    do {\n\t        // New color is never white b/c random in [0,1)\n\t        new_color = Math.round( Math.random() * 0xffffff );\n\t        nr = ( new_color & 0xff0000 ) >> 16;\n\t        ng = ( new_color & 0x00ff00 ) >> 8;\n\t        nb = new_color & 0x0000ff;\n\t        n_brightness = brightness(nr, ng, nb);\n\t        ok = true;\n\t        for (i = 0; i < colors.length; i++) {\n\t            other_color = colors[i];\n\t            or = ( other_color & 0xff0000 ) >> 16;\n\t            og = ( other_color & 0x00ff00 ) >> 8;\n\t            ob = other_color & 0x0000ff;\n\t            o_brightness = brightness(or, og, ob);\n\t            diff = difference(nr, ng, nb, or, og, ob);\n\t            // These thresholds may need to be adjusted. Brightness difference range is 125;\n\t            // color difference range is 500.\n\t            if ( ( Math.abs(n_brightness - o_brightness) < 40 ) ||\n\t                 ( diff < 200 ) ) {\n\t                ok = false;\n\t                break;\n\t            }\n\t        }\n\t\n\t        num_tries++\n\t;    } while (!ok && num_tries <= 10 );\n\t\n\t    // Add 0x1000000 to left pad number with 0s.\n\t    return '#' + ( 0x1000000 + new_color ).toString(16).substr(1,6);\n\t};\n\t\n\treturn {\n\t    commatize: commatize,\n\t    is_deferred: is_deferred,\n\t    ServerStateDeferred : ServerStateDeferred,\n\t    get_random_color    : get_random_color\n\t};\n\t\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(28),\n\t    __webpack_require__(6),\n\t    __webpack_require__(5)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( parseBibtex, baseMVC, _l ){\n\t/* global Backbone */\n\t// we use amd here to require, but bibtex uses a global or commonjs pattern.\n\t// webpack will load via commonjs and plain requirejs will load as global. Check both\n\tparseBibtex = parseBibtex || window.BibtexParser;\n\t\n\tvar logNamespace = 'citation';\n\t//==============================================================================\n\t/** @class model for tool citations.\n\t *  @name Citation\n\t *  @augments Backbone.Model\n\t */\n\tvar Citation = Backbone.Model.extend( baseMVC.LoggableMixin ).extend( {\n\t    _logNamespace : logNamespace,\n\t\n\t    initialize: function() {\n\t        var bibtex = this.get( 'content' );\n\t        var entry = parseBibtex(bibtex).entries[0];\n\t        this.entry = entry;\n\t        this._fields = {};\n\t        var rawFields = entry.Fields;\n\t        for(var key in rawFields) {\n\t            var value = rawFields[ key ];\n\t            var lowerKey = key.toLowerCase();\n\t            this._fields[ lowerKey ] = value;\n\t        }\n\t    },\n\t    entryType: function() {\n\t        return this.entry.EntryType;\n\t    },\n\t    fields: function() {\n\t        return this._fields;\n\t    }\n\t} );\n\t\n\t//==============================================================================\n\t/** @class Backbone collection of citations.\n\t */\n\tvar BaseCitationCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend( {\n\t    _logNamespace : logNamespace,\n\t\n\t    /** root api url */\n\t    urlRoot : Galaxy.root + 'api',\n\t    partial : true, // Assume some tools in history/workflow may not be properly annotated yet.\n\t    model : Citation,\n\t} );\n\t\n\tvar HistoryCitationCollection = BaseCitationCollection.extend( {\n\t    /** complete api url */\n\t    url : function() {\n\t        return this.urlRoot + '/histories/' + this.history_id + '/citations';\n\t    }\n\t} );\n\t\n\tvar ToolCitationCollection = BaseCitationCollection.extend( {\n\t    /** complete api url */\n\t    url : function() {\n\t        return this.urlRoot + '/tools/' + this.tool_id + '/citations';\n\t    },\n\t    partial : false, // If a tool has citations, assume they are complete.\n\t} );\n\t\n\t\n\t//==============================================================================\n\treturn {\n\t    Citation : Citation,\n\t    HistoryCitationCollection  : HistoryCitationCollection,\n\t    ToolCitationCollection: ToolCitationCollection\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t    This is the regular tool form.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(7), __webpack_require__(45), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Ui, ToolFormBase, ToolTemplate ) {\n\t    var View = ToolFormBase.extend({\n\t        initialize: function( options ) {\n\t            var self = this;\n\t            ToolFormBase.prototype.initialize.call( this, Utils.merge({\n\t                customize       : function( options ) {\n\t                    // build execute button\n\t                    options.buttons = {\n\t                        execute : execute_btn = new Ui.Button({\n\t                            icon     : 'fa-check',\n\t                            tooltip  : 'Execute: ' + options.name + ' (' + options.version + ')',\n\t                            title    : 'Execute',\n\t                            cls      : 'btn btn-primary',\n\t                            floating : 'clear',\n\t                            onclick  : function() {\n\t                                execute_btn.wait();\n\t                                self.portlet.disable();\n\t                                self.submit( options, function() {\n\t                                    execute_btn.unwait();\n\t                                    self.portlet.enable();\n\t                                } );\n\t                            }\n\t                        })\n\t                    };\n\t                    // remap feature\n\t                    if ( options.job_id && options.job_remap ) {\n\t                        options.inputs[ 'rerun_remap_job_id' ] = {\n\t                            label       : 'Resume dependencies from this job',\n\t                            name        : 'rerun_remap_job_id',\n\t                            type        : 'select',\n\t                            display     : 'radio',\n\t                            ignore      : '__ignore__',\n\t                            value       : '__ignore__',\n\t                            options     : [ [ 'Yes', options.job_id ], [ 'No', '__ignore__' ] ],\n\t                            help        : 'The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.'\n\t                        }\n\t                    }\n\t                }\n\t            }, options ) );\n\t        },\n\t\n\t        /** Submit a regular job.\n\t         * @param{dict}     options   - Specifies tool id and version\n\t         * @param{function} callback  - Called when request has completed\n\t         */\n\t        submit: function( options, callback ) {\n\t            var self = this;\n\t            var job_def = {\n\t                tool_id         : options.id,\n\t                tool_version    : options.version,\n\t                inputs          : this.data.create()\n\t            }\n\t            this.trigger( 'reset' );\n\t            if ( !self.validate( job_def ) ) {\n\t                Galaxy.emit.debug( 'tool-form::submit()', 'Submission canceled. Validation failed.' );\n\t                callback && callback();\n\t                return;\n\t            }\n\t            Galaxy.emit.debug( 'tool-form::submit()', 'Validation complete.', job_def );\n\t            Utils.request({\n\t                type    : 'POST',\n\t                url     : Galaxy.root + 'api/tools',\n\t                data    : job_def,\n\t                success : function( response ) {\n\t                    callback && callback();\n\t                    self.$el.empty().append( ToolTemplate.success( response ) );\n\t                    parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n\t                },\n\t                error   : function( response ) {\n\t                    callback && callback();\n\t                    Galaxy.emit.debug( 'tool-form::submit', 'Submission failed.', response );\n\t                    if ( response && response.err_data ) {\n\t                        var error_messages = self.data.matchResponse( response.err_data );\n\t                        for (var input_id in error_messages) {\n\t                            self.highlight( input_id, error_messages[ input_id ]);\n\t                            break;\n\t                        }\n\t                    } else {\n\t                        self.modal.show({\n\t                            title   : 'Job submission failed',\n\t                            body    : ( response && response.err_msg ) || ToolTemplate.error( job_def ),\n\t                            buttons : {\n\t                                'Close' : function() {\n\t                                    self.modal.hide();\n\t                                }\n\t                            }\n\t                        });\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Validate job dictionary.\n\t         * @param{dict}     job_def   - Job execution dictionary\n\t        */\n\t        validate: function( job_def ) {\n\t            var job_inputs  = job_def.inputs;\n\t            var batch_n     = -1;\n\t            var batch_src   = null;\n\t            for ( var job_input_id in job_inputs ) {\n\t                var input_value = job_inputs[ job_input_id ];\n\t                var input_id    = this.data.match( job_input_id );\n\t                var input_field = this.field_list[ input_id ];\n\t                var input_def   = this.input_list[ input_id ];\n\t                if ( !input_id || !input_def || !input_field ) {\n\t                    Galaxy.emit.debug('tool-form::validate()', 'Retrieving input objects failed.');\n\t                    continue;\n\t                }\n\t                if ( !input_def.optional && input_value == null ) {\n\t                    this.highlight( input_id );\n\t                    return false;\n\t                }\n\t                if ( input_value && input_value.batch ) {\n\t                    var n = input_value.values.length;\n\t                    var src = n > 0 && input_value.values[ 0 ] && input_value.values[ 0 ].src;\n\t                    if ( src ) {\n\t                        if ( batch_src === null ) {\n\t                            batch_src = src;\n\t                        } else if ( batch_src !== src ) {\n\t                            this.highlight( input_id, 'Please select either dataset or dataset list fields for all batch mode fields.' );\n\t                            return false;\n\t                        }\n\t                    }\n\t                    if ( batch_n === -1 ) {\n\t                        batch_n = n;\n\t                    } else if ( batch_n !== n ) {\n\t                        this.highlight( input_id, 'Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>' + n + '</b> selection(s) while a previous field contains <b>' + batch_n + '</b>.' );\n\t                        return false;\n\t                    }\n\t                }\n\t            }\n\t            return true;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\n\t// tool form templates\n\treturn {\n\t    help: function( options ) {\n\t        var $tmpl = $( '<div/>' ).addClass( 'ui-form-help' ).append( options.help );\n\t        $tmpl.find( 'a' ).attr( 'target', '_blank' );\n\t        return $tmpl;\n\t    },\n\t\n\t    success: function(response) {\n\t        // check\n\t        if (!response.jobs || !response.jobs.length) {\n\t            return this.error(response);\n\t        }\n\t\n\t        // number of jobs\n\t        var njobs = response.jobs.length;\n\t\n\t        // job count info text\n\t        var njobs_text = '';\n\t        if (njobs == 1) {\n\t            njobs_text = '1 job has';\n\t        } else {\n\t            njobs_text = njobs + ' jobs have';\n\t        }\n\t\n\t        // create template string\n\t        var tmpl =  '<div class=\"donemessagelarge\">' +\n\t                        '<p>' + njobs_text + ' been successfully added to the queue - resulting in the following datasets:</p>';\n\t        for (var i in response.outputs) {\n\t            tmpl +=     '<p style=\"padding: 10px 20px;\"><b>' + response.outputs[i].hid + ': ' + response.outputs[i].name + '</b></p>';\n\t        }\n\t        tmpl +=         '<p>You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.</p>' +\n\t                    '</div>';\n\t\n\t        // return success message element\n\t        return tmpl;\n\t    },\n\t\n\t    error: function(response) {\n\t        return  '<div>' +\n\t                    '<p>' +\n\t                        'The server could not complete the request. Please contact the Galaxy Team if this error persists.' +\n\t                    '</p>' +\n\t                    '<textarea class=\"ui-textarea\" disabled style=\"color: black; height: 300px !important;\">' +\n\t                        JSON.stringify(response, undefined, 4) +\n\t                    '</textarea>' +\n\t                '</div>';\n\t    },\n\t\n\t    requirements: function(options) {\n\t        var requirements_message = 'This tool requires ';\n\t        for (var i in options.requirements) {\n\t            var req = options.requirements[i];\n\t            requirements_message += req.name;\n\t            if (req.version) {\n\t                requirements_message += ' (Version ' + req.version + ')';\n\t            }\n\t            if (i < options.requirements.length - 2) {\n\t                requirements_message += ', ';\n\t            }\n\t            if (i == options.requirements.length - 2) {\n\t                requirements_message += ' and ';\n\t            }\n\t        }\n\t        return requirements_message + '. Click <a target=\"_blank\" href=\"https://wiki.galaxyproject.org/Tools/Requirements\">here</a> for more information.';\n\t    }\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Portlet, Ui) {\n\t\n\t// ui list element\n\tvar View = Backbone.View.extend({\n\t    // create portlet to keep track of selected list elements\n\t    initialize : function(options) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // initialize options\n\t        this.options = options;\n\t        this.name = options.name || 'element';\n\t        this.multiple = options.multiple || false;\n\t\n\t        // create message handler\n\t        this.message = new Ui.Message();\n\t\n\t        // create portlet\n\t        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\t\n\t        // create select field containing the options which can be inserted into the list\n\t        this.select = new Ui.Select.View({ optional : options.optional });\n\t\n\t        // create insert new list element button\n\t        this.button = new Ui.ButtonIcon({\n\t            icon        : 'fa fa-sign-in',\n\t            floating    : 'left',\n\t            tooltip     : 'Insert new ' + this.name,\n\t            onclick     : function() {\n\t                self.add({\n\t                    id      : self.select.value(),\n\t                    name    : self.select.text()\n\t                });\n\t            }\n\t        });\n\t\n\t        // build main element\n\t        this.setElement(this._template(options));\n\t        this.$('.ui-list-message').append(this.message.$el);\n\t        this.$('.ui-list-portlet').append(this.portlet.$el);\n\t        this.$('.ui-list-button').append(this.button.$el);\n\t        this.$('.ui-list-select').append(this.select.$el);\n\t    },\n\t\n\t    /** Return/Set currently selected list elements */\n\t    value: function(val) {\n\t        // set new value\n\t        if (val !== undefined) {\n\t            this.portlet.empty();\n\t            if ($.isArray(val)) {\n\t                for (var i in val) {\n\t                    var v = val[i];\n\t                    var v_id = null;\n\t                    var v_name = null;\n\t                    if ($.type(v) != 'string') {\n\t                        v_id = v.id;\n\t                        v_name = v.name;\n\t                    } else {\n\t                        v_id = v_name = v;\n\t                    }\n\t                    if (v_id != null) {\n\t                        this.add({\n\t                            id      : v_id,\n\t                            name    : v_name\n\t                        });\n\t                    }\n\t                }\n\t            }\n\t            this._refresh();\n\t        }\n\t        // get current value\n\t        var lst = [];\n\t        this.$('.ui-list-id').each(function() {\n\t            lst.push({\n\t                id      : $(this).prop('id'),\n\t                name    : $(this).find('.ui-list-name').html()\n\t            });\n\t        });\n\t        if (lst.length == 0) {\n\t            return null;\n\t        }\n\t        return lst;\n\t    },\n\t\n\t    /** Add row */\n\t    add: function(options) {\n\t        var self = this;\n\t        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n\t            if (Utils.validate(options.id)) {\n\t                var $el = $(this._templateRow({\n\t                    id      : options.id,\n\t                    name    : options.name\n\t                }));\n\t                $el.on('click', function() {\n\t                    $el.remove();\n\t                    self._refresh();\n\t                });\n\t                $el.on('mouseover', function() {\n\t                    $el.addClass('portlet-highlight');\n\t                });\n\t                $el.on('mouseout', function() {\n\t                    $el.removeClass('portlet-highlight');\n\t                });\n\t                this.portlet.append($el);\n\t                this._refresh();\n\t            } else {\n\t                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n\t            }\n\t        } else {\n\t            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n\t        }\n\t    },\n\t\n\t    /** Update available options */\n\t    update: function(options) {\n\t        this.select.update(options);\n\t    },\n\t\n\t    /** Refresh view */\n\t    _refresh: function() {\n\t        if (this.$('.ui-list-id').length > 0) {\n\t            !this.multiple && this.button.disable();\n\t            this.$('.ui-list-portlet').show();\n\t        } else {\n\t            this.button.enable();\n\t            this.$('.ui-list-portlet').hide();\n\t        }\n\t        this.options.onchange && this.options.onchange();\n\t    },\n\t\n\t    /** Main Template */\n\t    _template: function(options) {\n\t        return  '<div class=\"ui-list\">' +\n\t                    '<div class=\"ui-margin-top\">' +\n\t                        '<span class=\"ui-list-button\"/>' +\n\t                        '<span class=\"ui-list-select\"/>' +\n\t                    '</div>' +\n\t                    '<div class=\"ui-list-message\"/>' +\n\t                    '<div class=\"ui-list-portlet\"/>' +\n\t                '</div>';\n\t    },\n\t\n\t    /** Row Template */\n\t    _templateRow: function(options) {\n\t        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n\t                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n\t                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Buttons) {\n\t\n\t/** Base class for options based ui elements **/\n\tvar Base = Backbone.View.extend({\n\t    // initialize\n\t    initialize: function(options) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // configure options\n\t        this.options = Utils.merge(options, {\n\t            visible     : true,\n\t            data        : [],\n\t            id          : Utils.uid(),\n\t            error_text  : 'No options available.',\n\t            wait_text   : 'Please wait...',\n\t            multiple    : false\n\t        });\n\t\n\t        // create new element\n\t        this.setElement('<div class=\"ui-options\"/>');\n\t\n\t        // create elements\n\t        this.$message   = $('<div/>');\n\t        this.$options   = $(this._template(options));\n\t        this.$menu      = $('<div class=\"ui-options-menu\"/>');\n\t\n\t        // append\n\t        this.$el.append(this.$message);\n\t        this.$el.append(this.$menu);\n\t        this.$el.append(this.$options);\n\t\n\t        // add select/unselect all button\n\t        if (this.options.multiple) {\n\t            this.all_button = new Buttons.ButtonCheck({\n\t                onclick: function() {\n\t                    self.$('input').prop('checked', self.all_button.value() !== 0);\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t            this.$menu.append(this.all_button.$el);\n\t        }\n\t\n\t        // hide input field\n\t        if (!this.options.visible) {\n\t            this.$el.hide();\n\t        }\n\t\n\t        // initialize data\n\t        this.update(this.options.data);\n\t\n\t        // set initial value\n\t        if (this.options.value !== undefined) {\n\t            this.value(this.options.value);\n\t        }\n\t\n\t        // add change event. fires on trigger\n\t        this.on('change', function() {\n\t            this.options.onchange && this.options.onchange(this.value());\n\t        });\n\t    },\n\t\n\t    /** Update options\n\t    */\n\t    update: function(options) {\n\t        // backup current value\n\t        var current = this._getValue();\n\t\n\t        // remove all options\n\t        this.$options.empty();\n\t\n\t        // add new options using single option templates or full template\n\t        if (this._templateOptions) {\n\t            // rebuild options using full template\n\t            this.$options.append(this._templateOptions(options));\n\t        } else {\n\t            // rebuild options using single option templates\n\t            for (var key in options) {\n\t                var $option = $(this._templateOption(options[key]));\n\t                $option.addClass('ui-option');\n\t                $option.tooltip({title: options[key].tooltip, placement: 'bottom'});\n\t                this.$options.append($option);\n\t            }\n\t        }\n\t\n\t        // add change events\n\t        var self = this;\n\t        this.$('input').on('change', function() {\n\t            self.value(self._getValue());\n\t            self.trigger('change');\n\t        });\n\t\n\t        // set previous value\n\t        this.value(current);\n\t\n\t        // data initialization has been completed\n\t        this.unwait();\n\t    },\n\t\n\t    /** Return/Set current value\n\t    */\n\t    value: function (new_value) {\n\t        // set new value if available\n\t        if (new_value !== undefined) {\n\t            // reset selection\n\t            this.$('input').prop('checked', false);\n\t            // set value\n\t            if (new_value !== null) {\n\t                // check if its an array\n\t                if (!(new_value instanceof Array)) {\n\t                    new_value = [new_value];\n\t                }\n\t                // update to new selection\n\t                for (var i in new_value) {\n\t                    this.$('input[value=\"' + new_value[i] + '\"]').first().prop('checked', true);\n\t                }\n\t            };\n\t        }\n\t        // get current value\n\t        var current = this._getValue();\n\t        if (this.all_button) {\n\t            var value = current;\n\t            if (!(value instanceof Array)) {\n\t                value = 0;\n\t            } else {\n\t                value = value.length;\n\t            }\n\t            this.all_button.value(value, this._size());\n\t        }\n\t        return current;\n\t    },\n\t\n\t    /** Check if selected value exists (or any if multiple)\n\t    */\n\t    exists: function(value) {\n\t        if (value !== undefined) {\n\t            if (!(value instanceof Array)) {\n\t                value = [value];\n\t            }\n\t            for (var i in value) {\n\t                if (this.$('input[value=\"' + value[i] + '\"]').length > 0) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /** Return first available option\n\t    */\n\t    first: function() {\n\t        var options = this.$('input').first();\n\t        if (options.length > 0) {\n\t            return options.val();\n\t        } else {\n\t            return null;\n\t        }\n\t    },\n\t\n\t    /** Wait message during request processing\n\t    */\n\t    wait: function() {\n\t        if (this._size() == 0) {\n\t            this._messageShow(this.options.wait_text, 'info');\n\t            this.$options.hide();\n\t            this.$menu.hide();\n\t        }\n\t    },\n\t\n\t    /** Hide wait message\n\t    */\n\t    unwait: function() {\n\t        var total = this._size();\n\t        if (total == 0) {\n\t            this._messageShow(this.options.error_text, 'danger');\n\t            this.$options.hide();\n\t            this.$menu.hide();\n\t        } else {\n\t            this._messageHide();\n\t            this.$options.css('display', 'inline-block');\n\t            this.$menu.show();\n\t        }\n\t    },\n\t\n\t    /** Return current selection\n\t    */\n\t    _getValue: function() {\n\t        // track values in array\n\t        var selected = [];\n\t        this.$(':checked').each(function() {\n\t            selected.push($(this).val());\n\t        });\n\t\n\t        // get selected elements\n\t        if (!Utils.validate(selected)) {\n\t            return null;\n\t        }\n\t\n\t        // return multiple or single value\n\t        if (this.options.multiple) {\n\t            return selected;\n\t        } else {\n\t            return selected[0];\n\t        }\n\t    },\n\t\n\t    /** Returns the number of options\n\t    */\n\t    _size: function() {\n\t        return this.$('.ui-option').length;\n\t    },\n\t\n\t    /** Show message instead if options\n\t    */\n\t    _messageShow: function(text, status) {\n\t        this.$message.show();\n\t        this.$message.removeClass();\n\t        this.$message.addClass('ui-message alert alert-' + status);\n\t        this.$message.html(text);\n\t    },\n\t\n\t    /** Hide message\n\t    */\n\t    _messageHide: function() {\n\t        this.$message.hide();\n\t    },\n\t\n\t    /** Main template function\n\t    */\n\t    _template: function() {\n\t        return '<div class=\"ui-options-list\"/>';\n\t    }\n\t});\n\t\n\t/** Iconized **/\n\tvar BaseIcons = Base.extend({\n\t    _templateOption: function(pair) {\n\t        var id = Utils.uid();\n\t        return  '<div class=\"ui-option\">' +\n\t                    '<input id=\"' + id + '\" type=\"' + this.options.type + '\" name=\"' + this.options.id + '\" value=\"' + pair.value + '\"/>' +\n\t                    '<label class=\"ui-options-label\" for=\"' + id + '\">' + pair.label + '</label>' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\t/** Radio button field **/\n\tvar Radio = {};\n\tRadio.View = BaseIcons.extend({\n\t    initialize: function(options) {\n\t        options.type = 'radio';\n\t        BaseIcons.prototype.initialize.call(this, options);\n\t    }\n\t});\n\t\n\t/** Checkbox options field **/\n\tvar Checkbox = {};\n\tCheckbox.View = BaseIcons.extend({\n\t    initialize: function(options) {\n\t        options.multiple = true;\n\t        options.type = 'checkbox';\n\t        BaseIcons.prototype.initialize.call(this, options);\n\t    }\n\t});\n\t\n\t/** Radio button options field styled as classic buttons **/\n\tvar RadioButton = {};\n\tRadioButton.View = Base.extend({\n\t    // initialize\n\t    initialize: function(options) {\n\t        Base.prototype.initialize.call(this, options);\n\t    },\n\t\n\t    /** Return/Set current value\n\t    */\n\t    value: function (new_value) {\n\t        // set new value\n\t        if (new_value !== undefined) {\n\t            this.$('input').prop('checked', false);\n\t            this.$('label').removeClass('active');\n\t            this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n\t        }\n\t\n\t        // get and return value\n\t        return this._getValue();\n\t    },\n\t\n\t    /** Template for a single option\n\t    */\n\t    _templateOption: function(pair) {\n\t        var cls = 'fa ' + pair.icon;\n\t        if (!pair.label) {\n\t            cls += ' no-padding';\n\t        }\n\t        var tmpl =  '<label class=\"btn btn-default\">';\n\t        if (pair.icon) {\n\t            tmpl +=     '<i class=\"' + cls + '\"/>';\n\t        }\n\t        tmpl +=         '<input type=\"radio\" name=\"' + this.options.id + '\" value=\"' + pair.value + '\"/>';\n\t        if (pair.label) {\n\t            tmpl +=         pair.label;\n\t        }\n\t        tmpl +=     '</label>';\n\t        return tmpl;\n\t    },\n\t\n\t    /** Main template function\n\t    */\n\t    _template: function() {\n\t        return '<div class=\"btn-group ui-radiobutton\" data-toggle=\"buttons\"/>';\n\t    }\n\t});\n\t\n\treturn {\n\t    Base        : Base,\n\t    BaseIcons   : BaseIcons,\n\t    Radio       : Radio,\n\t    RadioButton : RadioButton,\n\t    Checkbox    : Checkbox\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 23 */,\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils) {\n\t\n\t// return\n\tvar View = Backbone.View.extend({\n\t    // defaults options\n\t    optionsDefault: {\n\t        title_new       : '',\n\t        operations      : null,\n\t        onnew           : null,\n\t        max             : null,\n\t        onchange        : null\n\t    },\n\t    \n\t    // initialize\n\t    initialize : function(options) {\n\t        // configure\n\t        this.visible    = false;\n\t        this.$nav       = null;\n\t        this.$content   = null;\n\t        this.first_tab  = null;\n\t        this.current_id = null;\n\t            \n\t        // configure options\n\t        this.options = Utils.merge(options, this.optionsDefault);\n\t        \n\t        // create tabs\n\t        var $tabs = $(this._template(this.options));\n\t        \n\t        // link elements\n\t        this.$nav       = $tabs.find('.tab-navigation');\n\t        this.$content   = $tabs.find('.tab-content');\n\t        \n\t        // create new element\n\t        this.setElement($tabs);\n\t        \n\t        // clear list\n\t        this.list = {};\n\t        \n\t        // link this\n\t        var self = this;\n\t            \n\t        // append operations\n\t        if (this.options.operations) {\n\t            $.each(this.options.operations, function(name, item) {\n\t                item.$el.prop('id', name);\n\t                self.$nav.find('.operations').append(item.$el);\n\t            });\n\t        }\n\t        \n\t        // add built-in add-new-tab tab\n\t        if (this.options.onnew) {\n\t            // create tab object\n\t            var $tab_new = $(this._template_tab_new(this.options));\n\t            \n\t            // append to navbar\n\t            this.$nav.append($tab_new);\n\t            \n\t            // add tooltip\n\t            $tab_new.tooltip({title: 'Add a new tab', placement: 'bottom', container: self.$el});\n\t            \n\t            // link click event\n\t            $tab_new.on('click', function(e) {\n\t                $tab_new.tooltip('hide');\n\t                self.options.onnew();\n\t            });\n\t        }\n\t    },\n\t    \n\t    // size\n\t    size: function() {\n\t        return _.size(this.list);\n\t    },\n\t    \n\t    // front\n\t    current: function() {\n\t        return this.$el.find('.tab-pane.active').attr('id');\n\t    },\n\t    \n\t    // append\n\t    add: function(options) {\n\t        // self\n\t        var self = this;\n\t            \n\t        // get tab id\n\t        var id = options.id;\n\t\n\t        // create tab object\n\t        var $tab_title      = $(this._template_tab(options));\n\t        var $tab_content    = $(this._template_tab_content(options));\n\t        \n\t        // add to list\n\t        this.list[id] = options.ondel ? true : false;\n\t            \n\t        // add a new tab either before the add-new-tab tab or behind the last tab\n\t        if (this.options.onnew) {\n\t            this.$nav.find('#new-tab').before($tab_title);\n\t        } else {\n\t            this.$nav.append($tab_title);\n\t        }\n\t        \n\t        // add content\n\t        $tab_content.append(options.$el);\n\t        this.$content.append($tab_content);\n\t        \n\t        // activate this tab if this is the first tab\n\t        if (this.size() == 1) {\n\t            $tab_title.addClass('active');\n\t            $tab_content.addClass('active');\n\t            this.first_tab = id;\n\t        }\n\t        \n\t        // hide add tab\n\t        if (this.options.max && this.size() >= this.options.max) {\n\t            this.$el.find('#new-tab').hide();\n\t        }\n\t        \n\t        // add click event to remove tab\n\t        if (options.ondel) {\n\t            var $del_icon = $tab_title.find('#delete');\n\t            $del_icon.tooltip({title: 'Delete this tab', placement: 'bottom', container: self.$el});\n\t            $del_icon.on('click', function() {\n\t                $del_icon.tooltip('destroy');\n\t                self.$el.find('.tooltip').remove();\n\t                options.ondel();\n\t                return false;\n\t            });\n\t        }\n\t        \n\t        // add custom click event handler\n\t        $tab_title.on('click', function(e) {\n\t            // prevent default\n\t            e.preventDefault();\n\t            \n\t            // click\n\t            if (options.onclick) {\n\t                options.onclick();\n\t            } else {\n\t                self.show(id);\n\t            }\n\t        });\n\t        \n\t        // initialize current id\n\t        if (!this.current_id) {\n\t            this.current_id = id;\n\t        }\n\t    },\n\t    \n\t    // delete tab\n\t    del: function(id) {\n\t        // delete tab from dom\n\t        this.$el.find('#tab-' + id).remove();\n\t        this.$el.find('#' + id).remove();\n\t        \n\t        // check if first tab has been deleted\n\t        if (this.first_tab == id) {\n\t            this.first_tab = null;\n\t        }\n\t        \n\t        // show first tab\n\t        if (this.first_tab != null) {\n\t            this.show(this.first_tab);\n\t        }\n\t        \n\t        // delete from list\n\t        if (this.list[id]) {\n\t            delete this.list[id];\n\t        }\n\t        \n\t        // show add tab\n\t        if (this.size() < this.options.max) {\n\t            this.$el.find('#new-tab').show();\n\t        }\n\t    },\n\t    \n\t    // delete tab\n\t    delRemovable: function() {\n\t        for (var id in this.list) {\n\t            this.del(id);\n\t        }\n\t    },\n\t    \n\t    // show\n\t    show: function(id){\n\t        // show tab view\n\t        this.$el.fadeIn('fast');\n\t        this.visible = true;\n\t        \n\t        // show selected tab\n\t        if (id) {\n\t            // reassign active class\n\t            this.$el.find('#tab-' + this.current_id).removeClass('active');\n\t            this.$el.find('#' + this.current_id).removeClass('active');\n\t            this.$el.find('#tab-' + id).addClass('active');\n\t            this.$el.find('#' + id).addClass('active');\n\t            \n\t            // update current id\n\t            this.current_id = id;\n\t        }\n\t        \n\t        // change\n\t        if (this.options.onchange) {\n\t            this.options.onchange(id);\n\t        }\n\t    },\n\t    \n\t    // hide\n\t    hide: function(){\n\t        this.$el.fadeOut('fast');\n\t        this.visible = false;\n\t    },\n\t\n\t    // hide operation\n\t    hideOperation: function(id) {\n\t        this.$nav.find('#' + id).hide();\n\t    },\n\t\n\t    // show operation\n\t    showOperation: function(id) {\n\t        this.$nav.find('#' + id).show();\n\t    },\n\t    \n\t    // set operation\n\t    setOperation: function(id, callback) {\n\t        var $el = this.$nav.find('#' + id);\n\t        $el.off('click');\n\t        $el.on('click', callback);\n\t    },\n\t    \n\t    // title\n\t    title: function(id, new_title) {\n\t        var $el = this.$el.find('#tab-title-text-' + id);\n\t        if (new_title) {\n\t            $el.html(new_title);\n\t        }\n\t        return $el.html();\n\t    },\n\t    \n\t    // retitle\n\t    retitle: function(new_title) {\n\t        var index = 0;\n\t        for (var id in this.list) {\n\t            this.title(id, ++index + ': ' + new_title);\n\t        }\n\t    },\n\t    \n\t    // fill template\n\t    _template: function(options) {\n\t        return  '<div class=\"ui-tabs tabbable tabs-left\">' +\n\t                    '<ul id=\"tab-navigation\" class=\"tab-navigation nav nav-tabs\">' +\n\t                        '<div class=\"operations\" style=\"float: right; margin-bottom: 4px;\"></div>' +\n\t                    '</ul>'+\n\t                    '<div id=\"tab-content\" class=\"tab-content\"/>' +\n\t                '</div>';\n\t    },\n\t    \n\t    // fill template tab\n\t    _template_tab_new: function(options) {\n\t        return  '<li id=\"new-tab\">' +\n\t                    '<a href=\"javascript:void(0);\">' +\n\t                        '<i class=\"ui-tabs-add fa fa-plus-circle\"/>' +\n\t                            options.title_new +\n\t                    '</a>' +\n\t                '</li>';\n\t    },\n\t    \n\t    // fill template tab\n\t    _template_tab: function(options) {\n\t        var tmpl =  '<li id=\"tab-' + options.id + '\" class=\"tab-element\">' +\n\t                        '<a id=\"tab-title-link-' + options.id + '\" title=\"\" href=\"#' + options.id + '\" data-original-title=\"\">' +\n\t                            '<span id=\"tab-title-text-' + options.id + '\" class=\"tab-title-text\">' + options.title + '</span>';\n\t        \n\t        if (options.ondel) {\n\t            tmpl +=         '<i id=\"delete\" class=\"ui-tabs-delete fa fa-minus-circle\"/>';\n\t        }\n\t        \n\t        tmpl +=         '</a>' +\n\t                    '</li>';\n\t        \n\t        return tmpl;\n\t    },\n\t    \n\t    // fill template tab content\n\t    _template_tab_content: function(options) {\n\t        return  '<div id=\"' + options.id + '\" class=\"tab-pane\"/>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View : View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Parser.js\n\t * Copyright 2012-13 Mayank Lahiri\n\t * mlahiri@gmail.com\n\t * Released under the BSD License.\n\t *\n\t * A forgiving Bibtex parser that can:\n\t * \n\t * (1) operate in streaming or block mode, extracting entries as dictionaries. \n\t * (2) convert Latex special characters to UTF-8.\n\t * (3) best-effort parse malformed entries.\n\t * (4) run in a CommonJS environment or a browser, without any dependencies.\n\t * (5) be advanced-compiled by Google Closure Compiler.\n\t * \n\t * Handwritten as a labor of love, not auto-generated from a grammar. \n\t *\n\t * Modes of usage:\n\t *\n\t * (1) Synchronous, string\n\t *\n\t *   var entries = BibtexParser(text);\n\t *   console.log(entries);\n\t *\n\t * (2) Asynchronous, stream\n\t *\n\t *   var entryCallback = function(entry) { console.log(entry); }\n\t *   var parser = new BibtexParser(entryCallback);\n\t *   parser.parse(chunk1);\n\t *   parser.parse(chunk2);\n\t *   ...\n\t * \n\t * @param {text|function(Object)} arg Either a Bibtex string or callback \n\t *                                    function for processing parsed entries.\n\t * @constructor\n\t */\n\tfunction BibtexParser(arg0) {\n\t  // Determine how this function is to be used\n\t  if (typeof arg0 == 'string') {\n\t    // Passed a string, synchronous call without 'new'\n\t    var tempStorage = {};\n\t    var entries = [];\n\t    function accumulator(entry) {\n\t      entries.push(entry);\n\t    }\n\t    var parser = BibtexParser.call(tempStorage, accumulator);\n\t    parser.parse(arg0);\n\t    return {\n\t      'entries':    entries,\n\t      'errors':     parser.getErrors()\n\t    }\n\t  }\n\t  if (typeof arg0 != 'function') {\n\t    throw 'Invalid parser construction.';\n\t  }\n\t\n\t  /** @enum {number} */\n\t  this.STATES_ = {\n\t    ENTRY_OR_JUNK:    0,\n\t    OBJECT_TYPE:      1,\n\t    ENTRY_KEY:        2, \n\t    KV_KEY:           3, \n\t    EQUALS:           4,\n\t    KV_VALUE:         5 \n\t  }\n\t  /** @private */ this.DATA_          = {};\n\t  /** @private */ this.CALLBACK_      = arg0;\n\t  /** @private */ this.CHAR_          = 0;\n\t  /** @private */ this.LINE_          = 1;\n\t  /** @private */ this.CHAR_IN_LINE_  = 0;\n\t  /** @private */ this.SKIPWS_        = true;\n\t  /** @private */ this.SKIPCOMMENT_   = true;\n\t  /** @private */ this.PARSETMP_      = {};\n\t  /** @private */ this.SKIPTILLEOL_   = false;\n\t  /** @private */ this.VALBRACES_     = null;\n\t  /** @private */ this.BRACETYPE_     = null;\n\t  /** @private */ this.BRACECOUNT_    = 0;\n\t  /** @private */ this.STATE_         = this.STATES_.ENTRY_OR_JUNK;\n\t  /** @private */ this.ERRORS_        = [];\n\t  /** @private */ this.ENTRY_TYPES_   = {\n\t    'inproceedings'     : 1,\n\t    'proceedings'       : 2,\n\t    'article'           : 3,\n\t    'techreport'        : 4,\n\t    'misc'              : 5,\n\t    'mastersthesis'     : 6,\n\t    'book'              : 7,\n\t    'phdthesis'         : 8,\n\t    'incollection'      : 9,\n\t    'unpublished'       : 10,\n\t    'inbook'            : 11,\n\t    'manual'            : 12,\n\t    'periodical'        : 13,\n\t    'booklet'           : 14,\n\t    'masterthesis'      : 15,\n\t    'conference'        : 16\n\t    ,'online'           : 998 // Galaxy MOD: Handle @online entries for preprints.\n\t    ,'data'             : 999 // Galaxy MOD: Handle @data citations coming from figshare.\n\t  }\n\t  /** @private */ this.MACROS_        = {\n\t    'jan'               : 'January',\n\t    'feb'               : 'February',\n\t    'mar'               : 'March',\n\t    'apr'               : 'April',\n\t    'may'               : 'May',\n\t    'jun'               : 'June',\n\t    'jul'               : 'July',\n\t    'aug'               : 'August',\n\t    'sep'               : 'September',\n\t    'oct'               : 'October',\n\t    'nov'               : 'November',\n\t    'dec'               : 'December',\n\t    'Jan'               : 'January',\n\t    'Feb'               : 'February',\n\t    'Mar'               : 'March',\n\t    'Apr'               : 'April',\n\t    'May'               : 'May',\n\t    'Jun'               : 'June',\n\t    'Jul'               : 'July',\n\t    'Aug'               : 'August',\n\t    'Sep'               : 'September',\n\t    'Oct'               : 'October',\n\t    'Nov'               : 'November',\n\t    'Dec'               : 'December'\n\t  }\n\t\n\t  /**\n\t   * Gets an array of all errors encountered during parsing.\n\t   * Array entries are of the format:\n\t   *  [ line number, character in line, character in stream, error text ]\n\t   *\n\t   * @returns Array<Array>\n\t   * @public\n\t   */\n\t  this.getErrors = function() {\n\t    return this.ERRORS_;\n\t  }\n\t\n\t  /**\n\t   * Processes a chunk of data\n\t   * @public\n\t   */\n\t  this.parse = function(chunk) {\n\t    for (var i = 0; i < chunk.length; i++)\n\t      this.processCharacter_(chunk[i]);\n\t  }\n\t\n\t  /**\n\t   * Logs error at current stream position.\n\t   *\n\t   * @private\n\t   */\n\t  this.error_ = function(text) {\n\t    this.ERRORS_.push([ this.LINE_, \n\t                        this.CHAR_IN_LINE_,\n\t                        this.CHAR_,\n\t                        text ])\n\t  }\n\t\n\t  /**\n\t   * Called after an entire entry has been parsed from the stream.\n\t   * Performs post-processing and invokes the entry callback pointed to by\n\t   * this.CALLBACK_. Parsed (but unprocessed) entry data is in this.DATA_.\n\t   */\n\t  this.processEntry_ = function() {\n\t    var data = this.DATA_;\n\t    if (data.Fields) \n\t      for (var f in data.Fields) {\n\t        var raw = data.Fields[f];\n\t\n\t        // Convert Latex/Bibtex special characters to UTF-8 equivalents\n\t        for (var i = 0; i < this.CHARCONV_.length; i++) {\n\t          var re = this.CHARCONV_[i][0];\n\t          var rep = this.CHARCONV_[i][1];\n\t          raw = raw.replace(re, rep);\n\t        }\n\t\n\t        // Basic substitutions\n\t        raw = raw.replace(/[\\n\\r\\t]/g, ' ')\n\t                 .replace(/\\s\\s+/g, ' ')\n\t                 .replace(/^\\s+|\\s+$/g, '')\n\t\n\t        // Remove braces and backslashes\n\t        var len = raw.length;\n\t        var processed = '';\n\t        for (var i = 0; i < len; i++) {\n\t          var c = raw[i];\n\t          var skip = false;\n\t          if (c == '\\\\' && i < len-1) \n\t            c = raw[++i];\n\t          else {\n\t            if (c == '{' || c == '}')\n\t              skip = true;\n\t          }\n\t          if (!skip)\n\t            processed += c;\n\t        }\n\t        data.Fields[f] = processed\n\t      }\n\t\n\t    if (data.ObjectType == 'string') {\n\t      for (var f in data.Fields) {  \n\t        this.MACROS_[f] = data.Fields[f];\n\t      }\n\t    } else {\n\t      // Parsed a new Bibtex entry\n\t      this.CALLBACK_(data);\n\t    }\n\t  }\n\t\n\t\n\t  /**\n\t   * Processes next character in the stream, invoking the callback after \n\t   * each entry has been found and processed.\n\t   * \n\t   * @private\n\t   * @param {string} c Next character in input stream\n\t   */\n\t  this.processCharacter_ = function(c) {\n\t    // Housekeeping\n\t    this.CHAR_++;\n\t    this.CHAR_IN_LINE_++;\n\t    if (c == '\\n') {\n\t      this.LINE_++;\n\t      this.CHAR_IN_LINE_ = 1;\n\t    }\n\t\n\t    // Convenience states for skipping whitespace when needed\n\t    if (this.SKIPTILLEOL_) {\n\t      if (c == '\\n')\n\t        this.SKIPTILLEOL_ = false;\n\t      return;\n\t    }\n\t    if (this.SKIPCOMMENT_ && c == '%') {\n\t      this.SKIPTILLEOL_ = true;\n\t      return;\n\t    }\n\t    if (this.SKIPWS_ && /\\s/.test(c))\n\t      return;\n\t    this.SKIPWS_ = false;\n\t    this.SKIPCOMMENT_ = false;\n\t    this.SKIPTILLEOL_ = false;\n\t\n\t    // Main state machine\n\t    var AnotherIteration = true;\n\t    while (AnotherIteration) {\n\t      //console.log(this.LINE_, this.CHAR_IN_LINE_, this.STATE_, c)\n\t      AnotherIteration = false;\n\t      switch(this.STATE_) {\n\t        // -- Scan for an object marker ('@')\n\t        // -- Reset temporary data structure in case previous entry was garbled\n\t        case this.STATES_.ENTRY_OR_JUNK:\n\t          if (c == '@') {\n\t            // SUCCESS:     Parsed a valid start-of-object marker.\n\t            // NEXT_STATE:  OBJECT_TYPE\n\t            this.STATE_ = this.STATES_.OBJECT_TYPE;\n\t            this.DATA_ = {\n\t              ObjectType    : ''\n\t            };\n\t          }\n\t          this.BRACETYPE_   = null;\n\t          this.SKIPWS_      = true;\n\t          this.SKIPCOMMENT_ = true;\n\t          break;\n\t\n\t        // Start at first non-whitespace character after start-of-object '@'\n\t        // -- Accept [A-Za-z], break on non-matching character\n\t        // -- Populate this.DATA_.EntryType and this.DATA_.ObjectType\n\t        case this.STATES_.OBJECT_TYPE:\n\t          if (/[A-Za-z]/.test(c)) {\n\t            this.DATA_.ObjectType += c.toLowerCase();\n\t            this.SKIPWS_      = true;\n\t            this.SKIPCOMMENT_ = true;\n\t          } else {\n\t            // Break from state and validate object type\n\t            var ot = this.DATA_.ObjectType;\n\t            if (ot == 'comment') {\n\t              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t            } else {\n\t              if (ot == 'string') {\n\t                this.DATA_.ObjectType = ot;\n\t                this.DATA_.Fields = {};\n\t                this.BRACETYPE_ = c;\n\t                this.BRACECOUNT_ = 1;\n\t                this.STATE_ = this.STATES_.KV_KEY;\n\t                this.SKIPWS_      = true;\n\t                this.SKIPCOMMENT_ = true;\n\t                this.PARSETMP_ = {\n\t                  Key:    ''\n\t                }\n\t              } else {\n\t                if (ot == 'preamble') {\n\t                  this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t                } else {\n\t                  if (ot in this.ENTRY_TYPES_) {\n\t                    // SUCCESS:     Parsed a valid object type.\n\t                    // NEXT_STATE:  ENTRY_KEY\n\t                    this.DATA_.ObjectType = 'entry';\n\t                    this.DATA_.EntryType  = ot;\n\t                    this.DATA_.EntryKey   = '';\n\t                    this.STATE_           = this.STATES_.ENTRY_KEY;\n\t                    AnotherIteration      = true;\n\t                  } else {\n\t                    // ERROR:       Unrecognized object type.\n\t                    // NEXT_STATE:  ENTRY_OR_JUNK\n\t                    this.error_('Unrecognized object type: \"' +\n\t                                this.DATA_.ObjectType + '\"')\n\t                    this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t          break;\n\t\n\t          // Start at first non-alphabetic character after an entry type\n\t          // -- Populate this.DATA_.EntryKey\n\t          case this.STATES_.ENTRY_KEY:\n\t            if ((c === '{' || c === '(') && this.BRACETYPE_ == null) {\n\t              this.BRACETYPE_   = c;\n\t              this.BRACECOUNT_  = 1;\n\t              this.SKIPWS_      = true;\n\t              this.SKIPCOMMENT_ = true;\n\t              break;\n\t            }\n\t            if (/[,%\\s]/.test(c)) {\n\t              if (this.DATA_.EntryKey.length < 1) { \n\t                // Skip comments and whitespace before entry key\n\t                this.SKIPWS_      = true;\n\t                this.SKIPCOMMENT_ = true;\n\t              } else {\n\t                if (this.BRACETYPE_ == null) {\n\t                  // ERROR:       No opening brace for object\n\t                  // NEXT_STATE:  ENTRY_OR_JUNK\n\t                  this.error_('No opening brace for object.');\n\t                  this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t                } else {\n\t                  // SUCCESS:     Parsed an entry key\n\t                  // NEXT_STATE:  KV_KEY\n\t                  this.SKIPWS_      = true;\n\t                  this.SKIPCOMMENT_ = true;\n\t                  AnotherIteration  = true;\n\t                  this.STATE_       = this.STATES_.KV_KEY;\n\t                  this.PARSETMP_.Key= '';\n\t                  this.DATA_.Fields = {};\n\t                }\n\t              }\n\t            } else {\n\t              this.DATA_.EntryKey += c;\n\t              this.SKIPWS_        = false;\n\t              this.SKIPCOMMENT_   = false;\n\t            }\n\t            break;\n\t\n\t          // Start at first non-whitespace/comment character after entry key.\n\t          // -- Populate this.PARSETMP_.Key\n\t          case this.STATES_.KV_KEY:\n\t            // Test for end of entry\n\t            if ((c == '}' && this.BRACETYPE_ == '{') ||\n\t                (c == ')' && this.BRACETYPE_ == '(')) {\n\t              // SUCCESS:       Parsed an entry, possible incomplete\n\t              // NEXT_STATE:    ENTRY_OR_JUNK\n\t              this.processEntry_();\n\t              this.SKIPWS_      = true;\n\t              this.SKIPCOMMENT_ = true;\n\t              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t              break;\n\t            }\n\t            if (/[\\-A-Za-z:]/.test(c)) {\n\t              // Add to key\n\t              this.PARSETMP_.Key  += c;\n\t              this.SKIPWS_        = false;\n\t              this.SKIPCOMMENT_   = false;\n\t            } else {\n\t              // Either end of key or we haven't encountered start of key\n\t              if (this.PARSETMP_.Key.length < 1) {\n\t                // Keep going till we see a key\n\t                this.SKIPWS_      = true;\n\t                this.SKIPCOMMENT_ = true;\n\t              } else {\n\t                // SUCCESS:       Found full key in K/V pair\n\t                // NEXT_STATE:    EQUALS\n\t                this.SKIPWS_      = true;\n\t                this.SKIPCOMMENT_ = true;\n\t                this.STATE_       = this.STATES_.EQUALS;\n\t                AnotherIteration  = true;\n\t              }\n\t            }\n\t            break;\n\t\n\t          // Start at first non-alphabetic character after K/V pair key.\n\t          case this.STATES_.EQUALS:\n\t            if ((c == '}' && this.BRACETYPE_ == '{') ||\n\t                (c == ')' && this.BRACETYPE_ == '(')) {\n\t              // ERROR:         K/V pair with key but no value\n\t              // NEXT_STATE:    ENTRY_OR_JUNK\n\t              this.error_('Key-value pair has key \"' +\n\t                          this.PARSETMP_.Key + '\", but no value.');\n\t              this.processEntry_();\n\t              this.SKIPWS_      = true;\n\t              this.SKIPCOMMENT_ = true;\n\t              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n\t              break;\n\t            }\n\t            if (c == '=') {\n\t              // SUCCESS:       found an equal signs separating key and value\n\t              // NEXT_STATE:    KV_VALUE\n\t              this.SKIPWS_          = true;\n\t              this.SKIPCOMMENT_     = true;\n\t              this.STATE_           = this.STATES_.KV_VALUE;\n\t              this.PARSETMP_.Value  = '';\n\t              this.VALBRACES_       = { '\"' : [], '{' : [] };\n\t            }\n\t            break;\n\t\n\t          // Start at first non-whitespace/comment character after '=' \n\t          // -- Populate this.PARSETMP_.Value\n\t          case this.STATES_.KV_VALUE:\n\t            var delim             = this.VALBRACES_;\n\t            var val               = this.PARSETMP_.Value;\n\t            var doneParsingValue  = false;\n\t\n\t            // Test for special characters\n\t            if (c == '\"' || c == '{' || c == '}' || c == ',') {\n\t              if (c == ',') {\n\t                // This comma can mean:\n\t                // (1) just another comma literal\n\t                // (2) end of a macro reference\n\t                if (0 === delim['\"'].length + delim['{'].length) {\n\t                  // end of a macro reference\n\t                  var macro = this.PARSETMP_.Value.trim();\n\t                  if (macro in this.MACROS_) {\n\t                    // Successful macro reference\n\t                    this.PARSETMP_.Value = this.MACROS_[macro];\n\t                  } else {\n\t                    // Reference to an undefined macro\n\t                    this.error_('Reference to an undefined macro: '+macro);\n\t                  }\n\t                  doneParsingValue = true;\n\t                }\n\t              }\n\t              if (c == '\"') {\n\t                // This quote can mean:\n\t                // (1) opening delimiter\n\t                // (2) closing delimiter\n\t                // (3) literal, if we have a '{' on the stack\n\t                if (0 === delim['\"'].length + delim['{'].length) {\n\t                  // opening delimiter\n\t                  delim['\"'].push(this.CHAR_)\n\t                  this.SKIPWS_        = false;\n\t                  this.SKIPCOMMENT_   = false;\n\t                  break;\n\t                }\n\t                if (delim['\"'].length == 1 && delim['{'].length == 0 &&\n\t                    (val.length==0 || val[val.length-1] != '\\\\')) {\n\t                  // closing delimiter\n\t                  doneParsingValue = true;\n\t                } else {\n\t                  // literal, add to value\n\t                }\n\t              }\n\t              if (c == '{') {\n\t                // This brace can mean:\n\t                // (1) opening delimiter\n\t                // (2) stacked verbatim delimiter\n\t                if (val.length == 0 || val[val.length-1] != '\\\\') {\n\t                  delim['{'].push(this.CHAR_)\n\t                  this.SKIPWS_        = false;\n\t                  this.SKIPCOMMENT_   = false;\n\t                } else {\n\t                  // literal, add to value\n\t                }\n\t              }\n\t              if (c == '}') {\n\t                // This brace can mean:\n\t                // (1) closing delimiter\n\t                // (2) closing stacked verbatim delimiter\n\t                // (3) end of object definition if value was a macro\n\t                if (0 === delim['\"'].length + delim['{'].length) {\n\t                  // end of object definition, after macro\n\t                  var macro = this.PARSETMP_.Value.trim();\n\t                  if (macro in this.MACROS_) {\n\t                    // Successful macro reference\n\t                    this.PARSETMP_.Value = this.MACROS_[macro];\n\t                  } else {\n\t                    // Reference to an undefined macro\n\t                    this.error_('Reference to an undefined macro: '+macro);\n\t                  }\n\t                  AnotherIteration = true;\n\t                  doneParsingValue = true;\n\t                } else {\n\t                  if (val.length == 0 || val[val.length-1] != '\\\\') {\n\t                    if (delim['{'].length > 0) {\n\t                      // pop stack for stacked verbatim delimiter\n\t                      delim['{'].splice(delim['{'].length-1, 1)\n\t                      if (0 == delim['{'].length + delim['\"'].length) {\n\t                        // closing delimiter\n\t                        doneParsingValue = true;\n\t                      } else {\n\t                        // end verbatim block\n\t                      }\n\t                    }\n\t                  } else {\n\t                    // literal, add to value\n\t                  }\n\t                }\n\t              }\n\t            }\n\t\n\t            // If here, then we are either done parsing the value or \n\t            // have a literal that should be added to the value.\n\t            if (doneParsingValue) {\n\t              // SUCCESS:     value parsed\n\t              // NEXT_STATE:  KV_KEY\n\t              this.SKIPWS_        = true;\n\t              this.SKIPCOMMENT_   = true;\n\t              this.STATE_         = this.STATES_.KV_KEY;\n\t              this.DATA_.Fields[this.PARSETMP_.Key] = this.PARSETMP_.Value;\n\t              this.PARSETMP_      = { Key: '' };\n\t              this.VALBRACES_     = null;\n\t            } else {\n\t              this.PARSETMP_.Value += c;\n\t            }\n\t            break;\n\t      } // end switch (this.STATE_)\n\t    } // end while(AnotherIteration)\n\t  } // end function processCharacter \n\t\n\t  /** @private */ this.CHARCONV_ = [\n\t    [ /\\\\space /g, '\\u0020' ],\n\t    [ /\\\\textdollar /g, '\\u0024' ],\n\t    [ /\\\\textquotesingle /g, '\\u0027' ],\n\t    [ /\\\\ast /g, '\\u002A' ],\n\t    [ /\\\\textbackslash /g, '\\u005C' ],\n\t    [ /\\\\\\^\\{\\}/g, '\\u005E' ],\n\t    [ /\\\\textasciigrave /g, '\\u0060' ],\n\t    [ /\\\\lbrace /g, '\\u007B' ],\n\t    [ /\\\\vert /g, '\\u007C' ],\n\t    [ /\\\\rbrace /g, '\\u007D' ],\n\t    [ /\\\\textasciitilde /g, '\\u007E' ],\n\t    [ /\\\\textexclamdown /g, '\\u00A1' ],\n\t    [ /\\\\textcent /g, '\\u00A2' ],\n\t    [ /\\\\textsterling /g, '\\u00A3' ],\n\t    [ /\\\\textcurrency /g, '\\u00A4' ],\n\t    [ /\\\\textyen /g, '\\u00A5' ],\n\t    [ /\\\\textbrokenbar /g, '\\u00A6' ],\n\t    [ /\\\\textsection /g, '\\u00A7' ],\n\t    [ /\\\\textasciidieresis /g, '\\u00A8' ],\n\t    [ /\\\\textcopyright /g, '\\u00A9' ],\n\t    [ /\\\\textordfeminine /g, '\\u00AA' ],\n\t    [ /\\\\guillemotleft /g, '\\u00AB' ],\n\t    [ /\\\\lnot /g, '\\u00AC' ],\n\t    [ /\\\\textregistered /g, '\\u00AE' ],\n\t    [ /\\\\textasciimacron /g, '\\u00AF' ],\n\t    [ /\\\\textdegree /g, '\\u00B0' ],\n\t    [ /\\\\pm /g, '\\u00B1' ],\n\t    [ /\\\\textasciiacute /g, '\\u00B4' ],\n\t    [ /\\\\mathrm\\{\\\\mu\\}/g, '\\u00B5' ],\n\t    [ /\\\\textparagraph /g, '\\u00B6' ],\n\t    [ /\\\\cdot /g, '\\u00B7' ],\n\t    [ /\\\\c\\{\\}/g, '\\u00B8' ],\n\t    [ /\\\\textordmasculine /g, '\\u00BA' ],\n\t    [ /\\\\guillemotright /g, '\\u00BB' ],\n\t    [ /\\\\textonequarter /g, '\\u00BC' ],\n\t    [ /\\\\textonehalf /g, '\\u00BD' ],\n\t    [ /\\\\textthreequarters /g, '\\u00BE' ],\n\t    [ /\\\\textquestiondown /g, '\\u00BF' ],\n\t    [ /\\\\`\\{A\\}/g, '\\u00C0' ],\n\t    [ /\\\\'\\{A\\}/g, '\\u00C1' ],\n\t    [ /\\\\\\^\\{A\\}/g, '\\u00C2' ],\n\t    [ /\\\\~\\{A\\}/g, '\\u00C3' ],\n\t    [ /\\\\\"\\{A\\}/g, '\\u00C4' ],\n\t    [ /\\\\AA /g, '\\u00C5' ],\n\t    [ /\\\\AE /g, '\\u00C6' ],\n\t    [ /\\\\c\\{C\\}/g, '\\u00C7' ],\n\t    [ /\\\\`\\{E\\}/g, '\\u00C8' ],\n\t    [ /\\\\'\\{E\\}/g, '\\u00C9' ],\n\t    [ /\\\\\\^\\{E\\}/g, '\\u00CA' ],\n\t    [ /\\\\\"\\{E\\}/g, '\\u00CB' ],\n\t    [ /\\\\`\\{I\\}/g, '\\u00CC' ],\n\t    [ /\\\\'\\{I\\}/g, '\\u00CD' ],\n\t    [ /\\\\\\^\\{I\\}/g, '\\u00CE' ],\n\t    [ /\\\\\"\\{I\\}/g, '\\u00CF' ],\n\t    [ /\\\\DH /g, '\\u00D0' ],\n\t    [ /\\\\~\\{N\\}/g, '\\u00D1' ],\n\t    [ /\\\\`\\{O\\}/g, '\\u00D2' ],\n\t    [ /\\\\'\\{O\\}/g, '\\u00D3' ],\n\t    [ /\\\\\\^\\{O\\}/g, '\\u00D4' ],\n\t    [ /\\\\~\\{O\\}/g, '\\u00D5' ],\n\t    [ /\\\\\"\\{O\\}/g, '\\u00D6' ],\n\t    [ /\\\\texttimes /g, '\\u00D7' ],\n\t    [ /\\\\O /g, '\\u00D8' ],\n\t    [ /\\\\`\\{U\\}/g, '\\u00D9' ],\n\t    [ /\\\\'\\{U\\}/g, '\\u00DA' ],\n\t    [ /\\\\\\^\\{U\\}/g, '\\u00DB' ],\n\t    [ /\\\\\"\\{U\\}/g, '\\u00DC' ],\n\t    [ /\\\\'\\{Y\\}/g, '\\u00DD' ],\n\t    [ /\\\\TH /g, '\\u00DE' ],\n\t    [ /\\\\ss /g, '\\u00DF' ],\n\t    [ /\\\\`\\{a\\}/g, '\\u00E0' ],\n\t    [ /\\\\'\\{a\\}/g, '\\u00E1' ],\n\t    [ /\\\\\\^\\{a\\}/g, '\\u00E2' ],\n\t    [ /\\\\~\\{a\\}/g, '\\u00E3' ],\n\t    [ /\\\\\"\\{a\\}/g, '\\u00E4' ],\n\t    [ /\\\\aa /g, '\\u00E5' ],\n\t    [ /\\\\ae /g, '\\u00E6' ],\n\t    [ /\\\\c\\{c\\}/g, '\\u00E7' ],\n\t    [ /\\\\`\\{e\\}/g, '\\u00E8' ],\n\t    [ /\\\\'\\{e\\}/g, '\\u00E9' ],\n\t    [ /\\\\\\^\\{e\\}/g, '\\u00EA' ],\n\t    [ /\\\\\"\\{e\\}/g, '\\u00EB' ],\n\t    [ /\\\\`\\{\\\\i\\}/g, '\\u00EC' ],\n\t    [ /\\\\'\\{\\\\i\\}/g, '\\u00ED' ],\n\t    [ /\\\\\\^\\{\\\\i\\}/g, '\\u00EE' ],\n\t    [ /\\\\\"\\{\\\\i\\}/g, '\\u00EF' ],\n\t    [ /\\\\dh /g, '\\u00F0' ],\n\t    [ /\\\\~\\{n\\}/g, '\\u00F1' ],\n\t    [ /\\\\`\\{o\\}/g, '\\u00F2' ],\n\t    [ /\\\\'\\{o\\}/g, '\\u00F3' ],\n\t    [ /\\\\\\^\\{o\\}/g, '\\u00F4' ],\n\t    [ /\\\\~\\{o\\}/g, '\\u00F5' ],\n\t    [ /\\\\\"\\{o\\}/g, '\\u00F6' ],\n\t    [ /\\\\div /g, '\\u00F7' ],\n\t    [ /\\\\o /g, '\\u00F8' ],\n\t    [ /\\\\`\\{u\\}/g, '\\u00F9' ],\n\t    [ /\\\\'\\{u\\}/g, '\\u00FA' ],\n\t    [ /\\\\\\^\\{u\\}/g, '\\u00FB' ],\n\t    [ /\\\\\"\\{u\\}/g, '\\u00FC' ],\n\t    [ /\\\\'\\{y\\}/g, '\\u00FD' ],\n\t    [ /\\\\th /g, '\\u00FE' ],\n\t    [ /\\\\\"\\{y\\}/g, '\\u00FF' ],\n\t    [ /\\\\=\\{A\\}/g, '\\u0100' ],\n\t    [ /\\\\=\\{a\\}/g, '\\u0101' ],\n\t    [ /\\\\u\\{A\\}/g, '\\u0102' ],\n\t    [ /\\\\u\\{a\\}/g, '\\u0103' ],\n\t    [ /\\\\k\\{A\\}/g, '\\u0104' ],\n\t    [ /\\\\k\\{a\\}/g, '\\u0105' ],\n\t    [ /\\\\'\\{C\\}/g, '\\u0106' ],\n\t    [ /\\\\'\\{c\\}/g, '\\u0107' ],\n\t    [ /\\\\\\^\\{C\\}/g, '\\u0108' ],\n\t    [ /\\\\\\^\\{c\\}/g, '\\u0109' ],\n\t    [ /\\\\.\\{C\\}/g, '\\u010A' ],\n\t    [ /\\\\.\\{c\\}/g, '\\u010B' ],\n\t    [ /\\\\v\\{C\\}/g, '\\u010C' ],\n\t    [ /\\\\v\\{c\\}/g, '\\u010D' ],\n\t    [ /\\\\v\\{D\\}/g, '\\u010E' ],\n\t    [ /\\\\v\\{d\\}/g, '\\u010F' ],\n\t    [ /\\\\DJ /g, '\\u0110' ],\n\t    [ /\\\\dj /g, '\\u0111' ],\n\t    [ /\\\\=\\{E\\}/g, '\\u0112' ],\n\t    [ /\\\\=\\{e\\}/g, '\\u0113' ],\n\t    [ /\\\\u\\{E\\}/g, '\\u0114' ],\n\t    [ /\\\\u\\{e\\}/g, '\\u0115' ],\n\t    [ /\\\\.\\{E\\}/g, '\\u0116' ],\n\t    [ /\\\\.\\{e\\}/g, '\\u0117' ],\n\t    [ /\\\\k\\{E\\}/g, '\\u0118' ],\n\t    [ /\\\\k\\{e\\}/g, '\\u0119' ],\n\t    [ /\\\\v\\{E\\}/g, '\\u011A' ],\n\t    [ /\\\\v\\{e\\}/g, '\\u011B' ],\n\t    [ /\\\\\\^\\{G\\}/g, '\\u011C' ],\n\t    [ /\\\\\\^\\{g\\}/g, '\\u011D' ],\n\t    [ /\\\\u\\{G\\}/g, '\\u011E' ],\n\t    [ /\\\\u\\{g\\}/g, '\\u011F' ],\n\t    [ /\\\\.\\{G\\}/g, '\\u0120' ],\n\t    [ /\\\\.\\{g\\}/g, '\\u0121' ],\n\t    [ /\\\\c\\{G\\}/g, '\\u0122' ],\n\t    [ /\\\\c\\{g\\}/g, '\\u0123' ],\n\t    [ /\\\\\\^\\{H\\}/g, '\\u0124' ],\n\t    [ /\\\\\\^\\{h\\}/g, '\\u0125' ],\n\t    [ /\\\\Elzxh /g, '\\u0127' ],\n\t    [ /\\\\~\\{I\\}/g, '\\u0128' ],\n\t    [ /\\\\~\\{\\\\i\\}/g, '\\u0129' ],\n\t    [ /\\\\=\\{I\\}/g, '\\u012A' ],\n\t    [ /\\\\=\\{\\\\i\\}/g, '\\u012B' ],\n\t    [ /\\\\u\\{I\\}/g, '\\u012C' ],\n\t    [ /\\\\u\\{\\\\i\\}/g, '\\u012D' ],\n\t    [ /\\\\k\\{I\\}/g, '\\u012E' ],\n\t    [ /\\\\k\\{i\\}/g, '\\u012F' ],\n\t    [ /\\\\.\\{I\\}/g, '\\u0130' ],\n\t    [ /\\\\i /g, '\\u0131' ],\n\t    [ /\\\\\\^\\{J\\}/g, '\\u0134' ],\n\t    [ /\\\\\\^\\{\\\\j\\}/g, '\\u0135' ],\n\t    [ /\\\\c\\{K\\}/g, '\\u0136' ],\n\t    [ /\\\\c\\{k\\}/g, '\\u0137' ],\n\t    [ /\\\\'\\{L\\}/g, '\\u0139' ],\n\t    [ /\\\\'\\{l\\}/g, '\\u013A' ],\n\t    [ /\\\\c\\{L\\}/g, '\\u013B' ],\n\t    [ /\\\\c\\{l\\}/g, '\\u013C' ],\n\t    [ /\\\\v\\{L\\}/g, '\\u013D' ],\n\t    [ /\\\\v\\{l\\}/g, '\\u013E' ],\n\t    [ /\\\\L /g, '\\u0141' ],\n\t    [ /\\\\l /g, '\\u0142' ],\n\t    [ /\\\\'\\{N\\}/g, '\\u0143' ],\n\t    [ /\\\\'\\{n\\}/g, '\\u0144' ],\n\t    [ /\\\\c\\{N\\}/g, '\\u0145' ],\n\t    [ /\\\\c\\{n\\}/g, '\\u0146' ],\n\t    [ /\\\\v\\{N\\}/g, '\\u0147' ],\n\t    [ /\\\\v\\{n\\}/g, '\\u0148' ],\n\t    [ /\\\\NG /g, '\\u014A' ],\n\t    [ /\\\\ng /g, '\\u014B' ],\n\t    [ /\\\\=\\{O\\}/g, '\\u014C' ],\n\t    [ /\\\\=\\{o\\}/g, '\\u014D' ],\n\t    [ /\\\\u\\{O\\}/g, '\\u014E' ],\n\t    [ /\\\\u\\{o\\}/g, '\\u014F' ],\n\t    [ /\\\\H\\{O\\}/g, '\\u0150' ],\n\t    [ /\\\\H\\{o\\}/g, '\\u0151' ],\n\t    [ /\\\\OE /g, '\\u0152' ],\n\t    [ /\\\\oe /g, '\\u0153' ],\n\t    [ /\\\\'\\{R\\}/g, '\\u0154' ],\n\t    [ /\\\\'\\{r\\}/g, '\\u0155' ],\n\t    [ /\\\\c\\{R\\}/g, '\\u0156' ],\n\t    [ /\\\\c\\{r\\}/g, '\\u0157' ],\n\t    [ /\\\\v\\{R\\}/g, '\\u0158' ],\n\t    [ /\\\\v\\{r\\}/g, '\\u0159' ],\n\t    [ /\\\\'\\{S\\}/g, '\\u015A' ],\n\t    [ /\\\\'\\{s\\}/g, '\\u015B' ],\n\t    [ /\\\\\\^\\{S\\}/g, '\\u015C' ],\n\t    [ /\\\\\\^\\{s\\}/g, '\\u015D' ],\n\t    [ /\\\\c\\{S\\}/g, '\\u015E' ],\n\t    [ /\\\\c\\{s\\}/g, '\\u015F' ],\n\t    [ /\\\\v\\{S\\}/g, '\\u0160' ],\n\t    [ /\\\\v\\{s\\}/g, '\\u0161' ],\n\t    [ /\\\\c\\{T\\}/g, '\\u0162' ],\n\t    [ /\\\\c\\{t\\}/g, '\\u0163' ],\n\t    [ /\\\\v\\{T\\}/g, '\\u0164' ],\n\t    [ /\\\\v\\{t\\}/g, '\\u0165' ],\n\t    [ /\\\\~\\{U\\}/g, '\\u0168' ],\n\t    [ /\\\\~\\{u\\}/g, '\\u0169' ],\n\t    [ /\\\\=\\{U\\}/g, '\\u016A' ],\n\t    [ /\\\\=\\{u\\}/g, '\\u016B' ],\n\t    [ /\\\\u\\{U\\}/g, '\\u016C' ],\n\t    [ /\\\\u\\{u\\}/g, '\\u016D' ],\n\t    [ /\\\\r\\{U\\}/g, '\\u016E' ],\n\t    [ /\\\\r\\{u\\}/g, '\\u016F' ],\n\t    [ /\\\\H\\{U\\}/g, '\\u0170' ],\n\t    [ /\\\\H\\{u\\}/g, '\\u0171' ],\n\t    [ /\\\\k\\{U\\}/g, '\\u0172' ],\n\t    [ /\\\\k\\{u\\}/g, '\\u0173' ],\n\t    [ /\\\\\\^\\{W\\}/g, '\\u0174' ],\n\t    [ /\\\\\\^\\{w\\}/g, '\\u0175' ],\n\t    [ /\\\\\\^\\{Y\\}/g, '\\u0176' ],\n\t    [ /\\\\\\^\\{y\\}/g, '\\u0177' ],\n\t    [ /\\\\\"\\{Y\\}/g, '\\u0178' ],\n\t    [ /\\\\'\\{Z\\}/g, '\\u0179' ],\n\t    [ /\\\\'\\{z\\}/g, '\\u017A' ],\n\t    [ /\\\\.\\{Z\\}/g, '\\u017B' ],\n\t    [ /\\\\.\\{z\\}/g, '\\u017C' ],\n\t    [ /\\\\v\\{Z\\}/g, '\\u017D' ],\n\t    [ /\\\\v\\{z\\}/g, '\\u017E' ],\n\t    [ /\\\\texthvlig /g, '\\u0195' ],\n\t    [ /\\\\textnrleg /g, '\\u019E' ],\n\t    [ /\\\\eth /g, '\\u01AA' ],\n\t    [ /\\\\textdoublepipe /g, '\\u01C2' ],\n\t    [ /\\\\'\\{g\\}/g, '\\u01F5' ],\n\t    [ /\\\\Elztrna /g, '\\u0250' ],\n\t    [ /\\\\Elztrnsa /g, '\\u0252' ],\n\t    [ /\\\\Elzopeno /g, '\\u0254' ],\n\t    [ /\\\\Elzrtld /g, '\\u0256' ],\n\t    [ /\\\\Elzschwa /g, '\\u0259' ],\n\t    [ /\\\\varepsilon /g, '\\u025B' ],\n\t    [ /\\\\Elzpgamma /g, '\\u0263' ],\n\t    [ /\\\\Elzpbgam /g, '\\u0264' ],\n\t    [ /\\\\Elztrnh /g, '\\u0265' ],\n\t    [ /\\\\Elzbtdl /g, '\\u026C' ],\n\t    [ /\\\\Elzrtll /g, '\\u026D' ],\n\t    [ /\\\\Elztrnm /g, '\\u026F' ],\n\t    [ /\\\\Elztrnmlr /g, '\\u0270' ],\n\t    [ /\\\\Elzltlmr /g, '\\u0271' ],\n\t    [ /\\\\Elzltln /g, '\\u0272' ],\n\t    [ /\\\\Elzrtln /g, '\\u0273' ],\n\t    [ /\\\\Elzclomeg /g, '\\u0277' ],\n\t    [ /\\\\textphi /g, '\\u0278' ],\n\t    [ /\\\\Elztrnr /g, '\\u0279' ],\n\t    [ /\\\\Elztrnrl /g, '\\u027A' ],\n\t    [ /\\\\Elzrttrnr /g, '\\u027B' ],\n\t    [ /\\\\Elzrl /g, '\\u027C' ],\n\t    [ /\\\\Elzrtlr /g, '\\u027D' ],\n\t    [ /\\\\Elzfhr /g, '\\u027E' ],\n\t    [ /\\\\Elzrtls /g, '\\u0282' ],\n\t    [ /\\\\Elzesh /g, '\\u0283' ],\n\t    [ /\\\\Elztrnt /g, '\\u0287' ],\n\t    [ /\\\\Elzrtlt /g, '\\u0288' ],\n\t    [ /\\\\Elzpupsil /g, '\\u028A' ],\n\t    [ /\\\\Elzpscrv /g, '\\u028B' ],\n\t    [ /\\\\Elzinvv /g, '\\u028C' ],\n\t    [ /\\\\Elzinvw /g, '\\u028D' ],\n\t    [ /\\\\Elztrny /g, '\\u028E' ],\n\t    [ /\\\\Elzrtlz /g, '\\u0290' ],\n\t    [ /\\\\Elzyogh /g, '\\u0292' ],\n\t    [ /\\\\Elzglst /g, '\\u0294' ],\n\t    [ /\\\\Elzreglst /g, '\\u0295' ],\n\t    [ /\\\\Elzinglst /g, '\\u0296' ],\n\t    [ /\\\\textturnk /g, '\\u029E' ],\n\t    [ /\\\\Elzdyogh /g, '\\u02A4' ],\n\t    [ /\\\\Elztesh /g, '\\u02A7' ],\n\t    [ /\\\\textasciicaron /g, '\\u02C7' ],\n\t    [ /\\\\Elzverts /g, '\\u02C8' ],\n\t    [ /\\\\Elzverti /g, '\\u02CC' ],\n\t    [ /\\\\Elzlmrk /g, '\\u02D0' ],\n\t    [ /\\\\Elzhlmrk /g, '\\u02D1' ],\n\t    [ /\\\\Elzsbrhr /g, '\\u02D2' ],\n\t    [ /\\\\Elzsblhr /g, '\\u02D3' ],\n\t    [ /\\\\Elzrais /g, '\\u02D4' ],\n\t    [ /\\\\Elzlow /g, '\\u02D5' ],\n\t    [ /\\\\textasciibreve /g, '\\u02D8' ],\n\t    [ /\\\\textperiodcentered /g, '\\u02D9' ],\n\t    [ /\\\\r\\{\\}/g, '\\u02DA' ],\n\t    [ /\\\\k\\{\\}/g, '\\u02DB' ],\n\t    [ /\\\\texttildelow /g, '\\u02DC' ],\n\t    [ /\\\\H\\{\\}/g, '\\u02DD' ],\n\t    [ /\\\\tone\\{55\\}/g, '\\u02E5' ],\n\t    [ /\\\\tone\\{44\\}/g, '\\u02E6' ],\n\t    [ /\\\\tone\\{33\\}/g, '\\u02E7' ],\n\t    [ /\\\\tone\\{22\\}/g, '\\u02E8' ],\n\t    [ /\\\\tone\\{11\\}/g, '\\u02E9' ],\n\t    [ /\\\\cyrchar\\\\C/g, '\\u030F' ],\n\t    [ /\\\\Elzpalh /g, '\\u0321' ],\n\t    [ /\\\\Elzrh /g, '\\u0322' ],\n\t    [ /\\\\Elzsbbrg /g, '\\u032A' ],\n\t    [ /\\\\Elzxl /g, '\\u0335' ],\n\t    [ /\\\\Elzbar /g, '\\u0336' ],\n\t    [ /\\\\'\\{A\\}/g, '\\u0386' ],\n\t    [ /\\\\'\\{E\\}/g, '\\u0388' ],\n\t    [ /\\\\'\\{H\\}/g, '\\u0389' ],\n\t    [ /\\\\'\\{\\}\\{I\\}/g, '\\u038A' ],\n\t    [ /\\\\'\\{\\}O/g, '\\u038C' ],\n\t    [ /\\\\mathrm\\{'Y\\}/g, '\\u038E' ],\n\t    [ /\\\\mathrm\\{'\\\\Omega\\}/g, '\\u038F' ],\n\t    [ /\\\\acute\\{\\\\ddot\\{\\\\iota\\}\\}/g, '\\u0390' ],\n\t    [ /\\\\Alpha /g, '\\u0391' ],\n\t    [ /\\\\Beta /g, '\\u0392' ],\n\t    [ /\\\\Gamma /g, '\\u0393' ],\n\t    [ /\\\\Delta /g, '\\u0394' ],\n\t    [ /\\\\Epsilon /g, '\\u0395' ],\n\t    [ /\\\\Zeta /g, '\\u0396' ],\n\t    [ /\\\\Eta /g, '\\u0397' ],\n\t    [ /\\\\Theta /g, '\\u0398' ],\n\t    [ /\\\\Iota /g, '\\u0399' ],\n\t    [ /\\\\Kappa /g, '\\u039A' ],\n\t    [ /\\\\Lambda /g, '\\u039B' ],\n\t    [ /\\\\Xi /g, '\\u039E' ],\n\t    [ /\\\\Pi /g, '\\u03A0' ],\n\t    [ /\\\\Rho /g, '\\u03A1' ],\n\t    [ /\\\\Sigma /g, '\\u03A3' ],\n\t    [ /\\\\Tau /g, '\\u03A4' ],\n\t    [ /\\\\Upsilon /g, '\\u03A5' ],\n\t    [ /\\\\Phi /g, '\\u03A6' ],\n\t    [ /\\\\Chi /g, '\\u03A7' ],\n\t    [ /\\\\Psi /g, '\\u03A8' ],\n\t    [ /\\\\Omega /g, '\\u03A9' ],\n\t    [ /\\\\mathrm\\{\\\\ddot\\{I\\}\\}/g, '\\u03AA' ],\n\t    [ /\\\\mathrm\\{\\\\ddot\\{Y\\}\\}/g, '\\u03AB' ],\n\t    [ /\\\\'\\{\\$\\\\alpha\\$\\}/g, '\\u03AC' ],\n\t    [ /\\\\acute\\{\\\\epsilon\\}/g, '\\u03AD' ],\n\t    [ /\\\\acute\\{\\\\eta\\}/g, '\\u03AE' ],\n\t    [ /\\\\acute\\{\\\\iota\\}/g, '\\u03AF' ],\n\t    [ /\\\\acute\\{\\\\ddot\\{\\\\upsilon\\}\\}/g, '\\u03B0' ],\n\t    [ /\\\\alpha /g, '\\u03B1' ],\n\t    [ /\\\\beta /g, '\\u03B2' ],\n\t    [ /\\\\gamma /g, '\\u03B3' ],\n\t    [ /\\\\delta /g, '\\u03B4' ],\n\t    [ /\\\\epsilon /g, '\\u03B5' ],\n\t    [ /\\\\zeta /g, '\\u03B6' ],\n\t    [ /\\\\eta /g, '\\u03B7' ],\n\t    [ /\\\\texttheta /g, '\\u03B8' ],\n\t    [ /\\\\iota /g, '\\u03B9' ],\n\t    [ /\\\\kappa /g, '\\u03BA' ],\n\t    [ /\\\\lambda /g, '\\u03BB' ],\n\t    [ /\\\\mu /g, '\\u03BC' ],\n\t    [ /\\\\nu /g, '\\u03BD' ],\n\t    [ /\\\\xi /g, '\\u03BE' ],\n\t    [ /\\\\pi /g, '\\u03C0' ],\n\t    [ /\\\\rho /g, '\\u03C1' ],\n\t    [ /\\\\varsigma /g, '\\u03C2' ],\n\t    [ /\\\\sigma /g, '\\u03C3' ],\n\t    [ /\\\\tau /g, '\\u03C4' ],\n\t    [ /\\\\upsilon /g, '\\u03C5' ],\n\t    [ /\\\\varphi /g, '\\u03C6' ],\n\t    [ /\\\\chi /g, '\\u03C7' ],\n\t    [ /\\\\psi /g, '\\u03C8' ],\n\t    [ /\\\\omega /g, '\\u03C9' ],\n\t    [ /\\\\ddot\\{\\\\iota\\}/g, '\\u03CA' ],\n\t    [ /\\\\ddot\\{\\\\upsilon\\}/g, '\\u03CB' ],\n\t    [ /\\\\'\\{o\\}/g, '\\u03CC' ],\n\t    [ /\\\\acute\\{\\\\upsilon\\}/g, '\\u03CD' ],\n\t    [ /\\\\acute\\{\\\\omega\\}/g, '\\u03CE' ],\n\t    [ /\\\\Pisymbol\\{ppi022\\}\\{87\\}/g, '\\u03D0' ],\n\t    [ /\\\\textvartheta /g, '\\u03D1' ],\n\t    [ /\\\\Upsilon /g, '\\u03D2' ],\n\t    [ /\\\\phi /g, '\\u03D5' ],\n\t    [ /\\\\varpi /g, '\\u03D6' ],\n\t    [ /\\\\Stigma /g, '\\u03DA' ],\n\t    [ /\\\\Digamma /g, '\\u03DC' ],\n\t    [ /\\\\digamma /g, '\\u03DD' ],\n\t    [ /\\\\Koppa /g, '\\u03DE' ],\n\t    [ /\\\\Sampi /g, '\\u03E0' ],\n\t    [ /\\\\varkappa /g, '\\u03F0' ],\n\t    [ /\\\\varrho /g, '\\u03F1' ],\n\t    [ /\\\\textTheta /g, '\\u03F4' ],\n\t    [ /\\\\backepsilon /g, '\\u03F6' ],\n\t    [ /\\\\cyrchar\\\\CYRYO /g, '\\u0401' ],\n\t    [ /\\\\cyrchar\\\\CYRDJE /g, '\\u0402' ],\n\t    [ /\\\\cyrchar\\{\\\\'\\\\CYRG\\}/g, '\\u0403' ],\n\t    [ /\\\\cyrchar\\\\CYRIE /g, '\\u0404' ],\n\t    [ /\\\\cyrchar\\\\CYRDZE /g, '\\u0405' ],\n\t    [ /\\\\cyrchar\\\\CYRII /g, '\\u0406' ],\n\t    [ /\\\\cyrchar\\\\CYRYI /g, '\\u0407' ],\n\t    [ /\\\\cyrchar\\\\CYRJE /g, '\\u0408' ],\n\t    [ /\\\\cyrchar\\\\CYRLJE /g, '\\u0409' ],\n\t    [ /\\\\cyrchar\\\\CYRNJE /g, '\\u040A' ],\n\t    [ /\\\\cyrchar\\\\CYRTSHE /g, '\\u040B' ],\n\t    [ /\\\\cyrchar\\{\\\\'\\\\CYRK\\}/g, '\\u040C' ],\n\t    [ /\\\\cyrchar\\\\CYRUSHRT /g, '\\u040E' ],\n\t    [ /\\\\cyrchar\\\\CYRDZHE /g, '\\u040F' ],\n\t    [ /\\\\cyrchar\\\\CYRA /g, '\\u0410' ],\n\t    [ /\\\\cyrchar\\\\CYRB /g, '\\u0411' ],\n\t    [ /\\\\cyrchar\\\\CYRV /g, '\\u0412' ],\n\t    [ /\\\\cyrchar\\\\CYRG /g, '\\u0413' ],\n\t    [ /\\\\cyrchar\\\\CYRD /g, '\\u0414' ],\n\t    [ /\\\\cyrchar\\\\CYRE /g, '\\u0415' ],\n\t    [ /\\\\cyrchar\\\\CYRZH /g, '\\u0416' ],\n\t    [ /\\\\cyrchar\\\\CYRZ /g, '\\u0417' ],\n\t    [ /\\\\cyrchar\\\\CYRI /g, '\\u0418' ],\n\t    [ /\\\\cyrchar\\\\CYRISHRT /g, '\\u0419' ],\n\t    [ /\\\\cyrchar\\\\CYRK /g, '\\u041A' ],\n\t    [ /\\\\cyrchar\\\\CYRL /g, '\\u041B' ],\n\t    [ /\\\\cyrchar\\\\CYRM /g, '\\u041C' ],\n\t    [ /\\\\cyrchar\\\\CYRN /g, '\\u041D' ],\n\t    [ /\\\\cyrchar\\\\CYRO /g, '\\u041E' ],\n\t    [ /\\\\cyrchar\\\\CYRP /g, '\\u041F' ],\n\t    [ /\\\\cyrchar\\\\CYRR /g, '\\u0420' ],\n\t    [ /\\\\cyrchar\\\\CYRS /g, '\\u0421' ],\n\t    [ /\\\\cyrchar\\\\CYRT /g, '\\u0422' ],\n\t    [ /\\\\cyrchar\\\\CYRU /g, '\\u0423' ],\n\t    [ /\\\\cyrchar\\\\CYRF /g, '\\u0424' ],\n\t    [ /\\\\cyrchar\\\\CYRH /g, '\\u0425' ],\n\t    [ /\\\\cyrchar\\\\CYRC /g, '\\u0426' ],\n\t    [ /\\\\cyrchar\\\\CYRCH /g, '\\u0427' ],\n\t    [ /\\\\cyrchar\\\\CYRSH /g, '\\u0428' ],\n\t    [ /\\\\cyrchar\\\\CYRSHCH /g, '\\u0429' ],\n\t    [ /\\\\cyrchar\\\\CYRHRDSN /g, '\\u042A' ],\n\t    [ /\\\\cyrchar\\\\CYRERY /g, '\\u042B' ],\n\t    [ /\\\\cyrchar\\\\CYRSFTSN /g, '\\u042C' ],\n\t    [ /\\\\cyrchar\\\\CYREREV /g, '\\u042D' ],\n\t    [ /\\\\cyrchar\\\\CYRYU /g, '\\u042E' ],\n\t    [ /\\\\cyrchar\\\\CYRYA /g, '\\u042F' ],\n\t    [ /\\\\cyrchar\\\\cyra /g, '\\u0430' ],\n\t    [ /\\\\cyrchar\\\\cyrb /g, '\\u0431' ],\n\t    [ /\\\\cyrchar\\\\cyrv /g, '\\u0432' ],\n\t    [ /\\\\cyrchar\\\\cyrg /g, '\\u0433' ],\n\t    [ /\\\\cyrchar\\\\cyrd /g, '\\u0434' ],\n\t    [ /\\\\cyrchar\\\\cyre /g, '\\u0435' ],\n\t    [ /\\\\cyrchar\\\\cyrzh /g, '\\u0436' ],\n\t    [ /\\\\cyrchar\\\\cyrz /g, '\\u0437' ],\n\t    [ /\\\\cyrchar\\\\cyri /g, '\\u0438' ],\n\t    [ /\\\\cyrchar\\\\cyrishrt /g, '\\u0439' ],\n\t    [ /\\\\cyrchar\\\\cyrk /g, '\\u043A' ],\n\t    [ /\\\\cyrchar\\\\cyrl /g, '\\u043B' ],\n\t    [ /\\\\cyrchar\\\\cyrm /g, '\\u043C' ],\n\t    [ /\\\\cyrchar\\\\cyrn /g, '\\u043D' ],\n\t    [ /\\\\cyrchar\\\\cyro /g, '\\u043E' ],\n\t    [ /\\\\cyrchar\\\\cyrp /g, '\\u043F' ],\n\t    [ /\\\\cyrchar\\\\cyrr /g, '\\u0440' ],\n\t    [ /\\\\cyrchar\\\\cyrs /g, '\\u0441' ],\n\t    [ /\\\\cyrchar\\\\cyrt /g, '\\u0442' ],\n\t    [ /\\\\cyrchar\\\\cyru /g, '\\u0443' ],\n\t    [ /\\\\cyrchar\\\\cyrf /g, '\\u0444' ],\n\t    [ /\\\\cyrchar\\\\cyrh /g, '\\u0445' ],\n\t    [ /\\\\cyrchar\\\\cyrc /g, '\\u0446' ],\n\t    [ /\\\\cyrchar\\\\cyrch /g, '\\u0447' ],\n\t    [ /\\\\cyrchar\\\\cyrsh /g, '\\u0448' ],\n\t    [ /\\\\cyrchar\\\\cyrshch /g, '\\u0449' ],\n\t    [ /\\\\cyrchar\\\\cyrhrdsn /g, '\\u044A' ],\n\t    [ /\\\\cyrchar\\\\cyrery /g, '\\u044B' ],\n\t    [ /\\\\cyrchar\\\\cyrsftsn /g, '\\u044C' ],\n\t    [ /\\\\cyrchar\\\\cyrerev /g, '\\u044D' ],\n\t    [ /\\\\cyrchar\\\\cyryu /g, '\\u044E' ],\n\t    [ /\\\\cyrchar\\\\cyrya /g, '\\u044F' ],\n\t    [ /\\\\cyrchar\\\\cyryo /g, '\\u0451' ],\n\t    [ /\\\\cyrchar\\\\cyrdje /g, '\\u0452' ],\n\t    [ /\\\\cyrchar\\{\\\\'\\\\cyrg\\}/g, '\\u0453' ],\n\t    [ /\\\\cyrchar\\\\cyrie /g, '\\u0454' ],\n\t    [ /\\\\cyrchar\\\\cyrdze /g, '\\u0455' ],\n\t    [ /\\\\cyrchar\\\\cyrii /g, '\\u0456' ],\n\t    [ /\\\\cyrchar\\\\cyryi /g, '\\u0457' ],\n\t    [ /\\\\cyrchar\\\\cyrje /g, '\\u0458' ],\n\t    [ /\\\\cyrchar\\\\cyrlje /g, '\\u0459' ],\n\t    [ /\\\\cyrchar\\\\cyrnje /g, '\\u045A' ],\n\t    [ /\\\\cyrchar\\\\cyrtshe /g, '\\u045B' ],\n\t    [ /\\\\cyrchar\\{\\\\'\\\\cyrk\\}/g, '\\u045C' ],\n\t    [ /\\\\cyrchar\\\\cyrushrt /g, '\\u045E' ],\n\t    [ /\\\\cyrchar\\\\cyrdzhe /g, '\\u045F' ],\n\t    [ /\\\\cyrchar\\\\CYROMEGA /g, '\\u0460' ],\n\t    [ /\\\\cyrchar\\\\cyromega /g, '\\u0461' ],\n\t    [ /\\\\cyrchar\\\\CYRYAT /g, '\\u0462' ],\n\t    [ /\\\\cyrchar\\\\CYRIOTE /g, '\\u0464' ],\n\t    [ /\\\\cyrchar\\\\cyriote /g, '\\u0465' ],\n\t    [ /\\\\cyrchar\\\\CYRLYUS /g, '\\u0466' ],\n\t    [ /\\\\cyrchar\\\\cyrlyus /g, '\\u0467' ],\n\t    [ /\\\\cyrchar\\\\CYRIOTLYUS /g, '\\u0468' ],\n\t    [ /\\\\cyrchar\\\\cyriotlyus /g, '\\u0469' ],\n\t    [ /\\\\cyrchar\\\\CYRBYUS /g, '\\u046A' ],\n\t    [ /\\\\cyrchar\\\\CYRIOTBYUS /g, '\\u046C' ],\n\t    [ /\\\\cyrchar\\\\cyriotbyus /g, '\\u046D' ],\n\t    [ /\\\\cyrchar\\\\CYRKSI /g, '\\u046E' ],\n\t    [ /\\\\cyrchar\\\\cyrksi /g, '\\u046F' ],\n\t    [ /\\\\cyrchar\\\\CYRPSI /g, '\\u0470' ],\n\t    [ /\\\\cyrchar\\\\cyrpsi /g, '\\u0471' ],\n\t    [ /\\\\cyrchar\\\\CYRFITA /g, '\\u0472' ],\n\t    [ /\\\\cyrchar\\\\CYRIZH /g, '\\u0474' ],\n\t    [ /\\\\cyrchar\\\\CYRUK /g, '\\u0478' ],\n\t    [ /\\\\cyrchar\\\\cyruk /g, '\\u0479' ],\n\t    [ /\\\\cyrchar\\\\CYROMEGARND /g, '\\u047A' ],\n\t    [ /\\\\cyrchar\\\\cyromegarnd /g, '\\u047B' ],\n\t    [ /\\\\cyrchar\\\\CYROMEGATITLO /g, '\\u047C' ],\n\t    [ /\\\\cyrchar\\\\cyromegatitlo /g, '\\u047D' ],\n\t    [ /\\\\cyrchar\\\\CYROT /g, '\\u047E' ],\n\t    [ /\\\\cyrchar\\\\cyrot /g, '\\u047F' ],\n\t    [ /\\\\cyrchar\\\\CYRKOPPA /g, '\\u0480' ],\n\t    [ /\\\\cyrchar\\\\cyrkoppa /g, '\\u0481' ],\n\t    [ /\\\\cyrchar\\\\cyrthousands /g, '\\u0482' ],\n\t    [ /\\\\cyrchar\\\\cyrhundredthousands /g, '\\u0488' ],\n\t    [ /\\\\cyrchar\\\\cyrmillions /g, '\\u0489' ],\n\t    [ /\\\\cyrchar\\\\CYRSEMISFTSN /g, '\\u048C' ],\n\t    [ /\\\\cyrchar\\\\cyrsemisftsn /g, '\\u048D' ],\n\t    [ /\\\\cyrchar\\\\CYRRTICK /g, '\\u048E' ],\n\t    [ /\\\\cyrchar\\\\cyrrtick /g, '\\u048F' ],\n\t    [ /\\\\cyrchar\\\\CYRGUP /g, '\\u0490' ],\n\t    [ /\\\\cyrchar\\\\cyrgup /g, '\\u0491' ],\n\t    [ /\\\\cyrchar\\\\CYRGHCRS /g, '\\u0492' ],\n\t    [ /\\\\cyrchar\\\\cyrghcrs /g, '\\u0493' ],\n\t    [ /\\\\cyrchar\\\\CYRGHK /g, '\\u0494' ],\n\t    [ /\\\\cyrchar\\\\cyrghk /g, '\\u0495' ],\n\t    [ /\\\\cyrchar\\\\CYRZHDSC /g, '\\u0496' ],\n\t    [ /\\\\cyrchar\\\\cyrzhdsc /g, '\\u0497' ],\n\t    [ /\\\\cyrchar\\\\CYRZDSC /g, '\\u0498' ],\n\t    [ /\\\\cyrchar\\\\cyrzdsc /g, '\\u0499' ],\n\t    [ /\\\\cyrchar\\\\CYRKDSC /g, '\\u049A' ],\n\t    [ /\\\\cyrchar\\\\cyrkdsc /g, '\\u049B' ],\n\t    [ /\\\\cyrchar\\\\CYRKVCRS /g, '\\u049C' ],\n\t    [ /\\\\cyrchar\\\\cyrkvcrs /g, '\\u049D' ],\n\t    [ /\\\\cyrchar\\\\CYRKHCRS /g, '\\u049E' ],\n\t    [ /\\\\cyrchar\\\\cyrkhcrs /g, '\\u049F' ],\n\t    [ /\\\\cyrchar\\\\CYRKBEAK /g, '\\u04A0' ],\n\t    [ /\\\\cyrchar\\\\cyrkbeak /g, '\\u04A1' ],\n\t    [ /\\\\cyrchar\\\\CYRNDSC /g, '\\u04A2' ],\n\t    [ /\\\\cyrchar\\\\cyrndsc /g, '\\u04A3' ],\n\t    [ /\\\\cyrchar\\\\CYRNG /g, '\\u04A4' ],\n\t    [ /\\\\cyrchar\\\\cyrng /g, '\\u04A5' ],\n\t    [ /\\\\cyrchar\\\\CYRPHK /g, '\\u04A6' ],\n\t    [ /\\\\cyrchar\\\\cyrphk /g, '\\u04A7' ],\n\t    [ /\\\\cyrchar\\\\CYRABHHA /g, '\\u04A8' ],\n\t    [ /\\\\cyrchar\\\\cyrabhha /g, '\\u04A9' ],\n\t    [ /\\\\cyrchar\\\\CYRSDSC /g, '\\u04AA' ],\n\t    [ /\\\\cyrchar\\\\cyrsdsc /g, '\\u04AB' ],\n\t    [ /\\\\cyrchar\\\\CYRTDSC /g, '\\u04AC' ],\n\t    [ /\\\\cyrchar\\\\cyrtdsc /g, '\\u04AD' ],\n\t    [ /\\\\cyrchar\\\\CYRY /g, '\\u04AE' ],\n\t    [ /\\\\cyrchar\\\\cyry /g, '\\u04AF' ],\n\t    [ /\\\\cyrchar\\\\CYRYHCRS /g, '\\u04B0' ],\n\t    [ /\\\\cyrchar\\\\cyryhcrs /g, '\\u04B1' ],\n\t    [ /\\\\cyrchar\\\\CYRHDSC /g, '\\u04B2' ],\n\t    [ /\\\\cyrchar\\\\cyrhdsc /g, '\\u04B3' ],\n\t    [ /\\\\cyrchar\\\\CYRTETSE /g, '\\u04B4' ],\n\t    [ /\\\\cyrchar\\\\cyrtetse /g, '\\u04B5' ],\n\t    [ /\\\\cyrchar\\\\CYRCHRDSC /g, '\\u04B6' ],\n\t    [ /\\\\cyrchar\\\\cyrchrdsc /g, '\\u04B7' ],\n\t    [ /\\\\cyrchar\\\\CYRCHVCRS /g, '\\u04B8' ],\n\t    [ /\\\\cyrchar\\\\cyrchvcrs /g, '\\u04B9' ],\n\t    [ /\\\\cyrchar\\\\CYRSHHA /g, '\\u04BA' ],\n\t    [ /\\\\cyrchar\\\\cyrshha /g, '\\u04BB' ],\n\t    [ /\\\\cyrchar\\\\CYRABHCH /g, '\\u04BC' ],\n\t    [ /\\\\cyrchar\\\\cyrabhch /g, '\\u04BD' ],\n\t    [ /\\\\cyrchar\\\\CYRABHCHDSC /g, '\\u04BE' ],\n\t    [ /\\\\cyrchar\\\\cyrabhchdsc /g, '\\u04BF' ],\n\t    [ /\\\\cyrchar\\\\CYRpalochka /g, '\\u04C0' ],\n\t    [ /\\\\cyrchar\\\\CYRKHK /g, '\\u04C3' ],\n\t    [ /\\\\cyrchar\\\\cyrkhk /g, '\\u04C4' ],\n\t    [ /\\\\cyrchar\\\\CYRNHK /g, '\\u04C7' ],\n\t    [ /\\\\cyrchar\\\\cyrnhk /g, '\\u04C8' ],\n\t    [ /\\\\cyrchar\\\\CYRCHLDSC /g, '\\u04CB' ],\n\t    [ /\\\\cyrchar\\\\cyrchldsc /g, '\\u04CC' ],\n\t    [ /\\\\cyrchar\\\\CYRAE /g, '\\u04D4' ],\n\t    [ /\\\\cyrchar\\\\cyrae /g, '\\u04D5' ],\n\t    [ /\\\\cyrchar\\\\CYRSCHWA /g, '\\u04D8' ],\n\t    [ /\\\\cyrchar\\\\cyrschwa /g, '\\u04D9' ],\n\t    [ /\\\\cyrchar\\\\CYRABHDZE /g, '\\u04E0' ],\n\t    [ /\\\\cyrchar\\\\cyrabhdze /g, '\\u04E1' ],\n\t    [ /\\\\cyrchar\\\\CYROTLD /g, '\\u04E8' ],\n\t    [ /\\\\cyrchar\\\\cyrotld /g, '\\u04E9' ],\n\t    [ /\\\\hspace\\{0.6em\\}/g, '\\u2002' ],\n\t    [ /\\\\hspace\\{1em\\}/g, '\\u2003' ],\n\t    [ /\\\\hspace\\{0.33em\\}/g, '\\u2004' ],\n\t    [ /\\\\hspace\\{0.25em\\}/g, '\\u2005' ],\n\t    [ /\\\\hspace\\{0.166em\\}/g, '\\u2006' ],\n\t    [ /\\\\hphantom\\{0\\}/g, '\\u2007' ],\n\t    [ /\\\\hphantom\\{,\\}/g, '\\u2008' ],\n\t    [ /\\\\hspace\\{0.167em\\}/g, '\\u2009' ],\n\t    [ /\\\\mkern1mu /g, '\\u200A' ],\n\t    [ /\\\\textendash /g, '\\u2013' ],\n\t    [ /\\\\textemdash /g, '\\u2014' ],\n\t    [ /\\\\rule\\{1em\\}\\{1pt\\}/g, '\\u2015' ],\n\t    [ /\\\\Vert /g, '\\u2016' ],\n\t    [ /\\\\Elzreapos /g, '\\u201B' ],\n\t    [ /\\\\textquotedblleft /g, '\\u201C' ],\n\t    [ /\\\\textquotedblright /g, '\\u201D' ],\n\t    [ /\\\\textdagger /g, '\\u2020' ],\n\t    [ /\\\\textdaggerdbl /g, '\\u2021' ],\n\t    [ /\\\\textbullet /g, '\\u2022' ],\n\t    [ /\\\\ldots /g, '\\u2026' ],\n\t    [ /\\\\textperthousand /g, '\\u2030' ],\n\t    [ /\\\\textpertenthousand /g, '\\u2031' ],\n\t    [ /\\\\backprime /g, '\\u2035' ],\n\t    [ /\\\\guilsinglleft /g, '\\u2039' ],\n\t    [ /\\\\guilsinglright /g, '\\u203A' ],\n\t    [ /\\\\mkern4mu /g, '\\u205F' ],\n\t    [ /\\\\nolinebreak /g, '\\u2060' ],\n\t    [ /\\\\ensuremath\\{\\\\Elzpes\\}/g, '\\u20A7' ],\n\t    [ /\\\\mbox\\{\\\\texteuro\\} /g, '\\u20AC' ],\n\t    [ /\\\\dddot /g, '\\u20DB' ],\n\t    [ /\\\\ddddot /g, '\\u20DC' ],\n\t    [ /\\\\mathbb\\{C\\}/g, '\\u2102' ],\n\t    [ /\\\\mathscr\\{g\\}/g, '\\u210A' ],\n\t    [ /\\\\mathscr\\{H\\}/g, '\\u210B' ],\n\t    [ /\\\\mathfrak\\{H\\}/g, '\\u210C' ],\n\t    [ /\\\\mathbb\\{H\\}/g, '\\u210D' ],\n\t    [ /\\\\hslash /g, '\\u210F' ],\n\t    [ /\\\\mathscr\\{I\\}/g, '\\u2110' ],\n\t    [ /\\\\mathfrak\\{I\\}/g, '\\u2111' ],\n\t    [ /\\\\mathscr\\{L\\}/g, '\\u2112' ],\n\t    [ /\\\\mathscr\\{l\\}/g, '\\u2113' ],\n\t    [ /\\\\mathbb\\{N\\}/g, '\\u2115' ],\n\t    [ /\\\\cyrchar\\\\textnumero /g, '\\u2116' ],\n\t    [ /\\\\wp /g, '\\u2118' ],\n\t    [ /\\\\mathbb\\{P\\}/g, '\\u2119' ],\n\t    [ /\\\\mathbb\\{Q\\}/g, '\\u211A' ],\n\t    [ /\\\\mathscr\\{R\\}/g, '\\u211B' ],\n\t    [ /\\\\mathfrak\\{R\\}/g, '\\u211C' ],\n\t    [ /\\\\mathbb\\{R\\}/g, '\\u211D' ],\n\t    [ /\\\\Elzxrat /g, '\\u211E' ],\n\t    [ /\\\\texttrademark /g, '\\u2122' ],\n\t    [ /\\\\mathbb\\{Z\\}/g, '\\u2124' ],\n\t    [ /\\\\Omega /g, '\\u2126' ],\n\t    [ /\\\\mho /g, '\\u2127' ],\n\t    [ /\\\\mathfrak\\{Z\\}/g, '\\u2128' ],\n\t    [ /\\\\ElsevierGlyph\\{2129\\}/g, '\\u2129' ],\n\t    [ /\\\\AA /g, '\\u212B' ],\n\t    [ /\\\\mathscr\\{B\\}/g, '\\u212C' ],\n\t    [ /\\\\mathfrak\\{C\\}/g, '\\u212D' ],\n\t    [ /\\\\mathscr\\{e\\}/g, '\\u212F' ],\n\t    [ /\\\\mathscr\\{E\\}/g, '\\u2130' ],\n\t    [ /\\\\mathscr\\{F\\}/g, '\\u2131' ],\n\t    [ /\\\\mathscr\\{M\\}/g, '\\u2133' ],\n\t    [ /\\\\mathscr\\{o\\}/g, '\\u2134' ],\n\t    [ /\\\\aleph /g, '\\u2135' ],\n\t    [ /\\\\beth /g, '\\u2136' ],\n\t    [ /\\\\gimel /g, '\\u2137' ],\n\t    [ /\\\\daleth /g, '\\u2138' ],\n\t    [ /\\\\textfrac\\{1\\}\\{3\\}/g, '\\u2153' ],\n\t    [ /\\\\textfrac\\{2\\}\\{3\\}/g, '\\u2154' ],\n\t    [ /\\\\textfrac\\{1\\}\\{5\\}/g, '\\u2155' ],\n\t    [ /\\\\textfrac\\{2\\}\\{5\\}/g, '\\u2156' ],\n\t    [ /\\\\textfrac\\{3\\}\\{5\\}/g, '\\u2157' ],\n\t    [ /\\\\textfrac\\{4\\}\\{5\\}/g, '\\u2158' ],\n\t    [ /\\\\textfrac\\{1\\}\\{6\\}/g, '\\u2159' ],\n\t    [ /\\\\textfrac\\{5\\}\\{6\\}/g, '\\u215A' ],\n\t    [ /\\\\textfrac\\{1\\}\\{8\\}/g, '\\u215B' ],\n\t    [ /\\\\textfrac\\{3\\}\\{8\\}/g, '\\u215C' ],\n\t    [ /\\\\textfrac\\{5\\}\\{8\\}/g, '\\u215D' ],\n\t    [ /\\\\textfrac\\{7\\}\\{8\\}/g, '\\u215E' ],\n\t    [ /\\\\leftarrow /g, '\\u2190' ],\n\t    [ /\\\\uparrow /g, '\\u2191' ],\n\t    [ /\\\\rightarrow /g, '\\u2192' ],\n\t    [ /\\\\downarrow /g, '\\u2193' ],\n\t    [ /\\\\leftrightarrow /g, '\\u2194' ],\n\t    [ /\\\\updownarrow /g, '\\u2195' ],\n\t    [ /\\\\nwarrow /g, '\\u2196' ],\n\t    [ /\\\\nearrow /g, '\\u2197' ],\n\t    [ /\\\\searrow /g, '\\u2198' ],\n\t    [ /\\\\swarrow /g, '\\u2199' ],\n\t    [ /\\\\nleftarrow /g, '\\u219A' ],\n\t    [ /\\\\nrightarrow /g, '\\u219B' ],\n\t    [ /\\\\arrowwaveright /g, '\\u219C' ],\n\t    [ /\\\\arrowwaveright /g, '\\u219D' ],\n\t    [ /\\\\twoheadleftarrow /g, '\\u219E' ],\n\t    [ /\\\\twoheadrightarrow /g, '\\u21A0' ],\n\t    [ /\\\\leftarrowtail /g, '\\u21A2' ],\n\t    [ /\\\\rightarrowtail /g, '\\u21A3' ],\n\t    [ /\\\\mapsto /g, '\\u21A6' ],\n\t    [ /\\\\hookleftarrow /g, '\\u21A9' ],\n\t    [ /\\\\hookrightarrow /g, '\\u21AA' ],\n\t    [ /\\\\looparrowleft /g, '\\u21AB' ],\n\t    [ /\\\\looparrowright /g, '\\u21AC' ],\n\t    [ /\\\\leftrightsquigarrow /g, '\\u21AD' ],\n\t    [ /\\\\nleftrightarrow /g, '\\u21AE' ],\n\t    [ /\\\\Lsh /g, '\\u21B0' ],\n\t    [ /\\\\Rsh /g, '\\u21B1' ],\n\t    [ /\\\\ElsevierGlyph\\{21B3\\}/g, '\\u21B3' ],\n\t    [ /\\\\curvearrowleft /g, '\\u21B6' ],\n\t    [ /\\\\curvearrowright /g, '\\u21B7' ],\n\t    [ /\\\\circlearrowleft /g, '\\u21BA' ],\n\t    [ /\\\\circlearrowright /g, '\\u21BB' ],\n\t    [ /\\\\leftharpoonup /g, '\\u21BC' ],\n\t    [ /\\\\leftharpoondown /g, '\\u21BD' ],\n\t    [ /\\\\upharpoonright /g, '\\u21BE' ],\n\t    [ /\\\\upharpoonleft /g, '\\u21BF' ],\n\t    [ /\\\\rightharpoonup /g, '\\u21C0' ],\n\t    [ /\\\\rightharpoondown /g, '\\u21C1' ],\n\t    [ /\\\\downharpoonright /g, '\\u21C2' ],\n\t    [ /\\\\downharpoonleft /g, '\\u21C3' ],\n\t    [ /\\\\rightleftarrows /g, '\\u21C4' ],\n\t    [ /\\\\dblarrowupdown /g, '\\u21C5' ],\n\t    [ /\\\\leftrightarrows /g, '\\u21C6' ],\n\t    [ /\\\\leftleftarrows /g, '\\u21C7' ],\n\t    [ /\\\\upuparrows /g, '\\u21C8' ],\n\t    [ /\\\\rightrightarrows /g, '\\u21C9' ],\n\t    [ /\\\\downdownarrows /g, '\\u21CA' ],\n\t    [ /\\\\leftrightharpoons /g, '\\u21CB' ],\n\t    [ /\\\\rightleftharpoons /g, '\\u21CC' ],\n\t    [ /\\\\nLeftarrow /g, '\\u21CD' ],\n\t    [ /\\\\nLeftrightarrow /g, '\\u21CE' ],\n\t    [ /\\\\nRightarrow /g, '\\u21CF' ],\n\t    [ /\\\\Leftarrow /g, '\\u21D0' ],\n\t    [ /\\\\Uparrow /g, '\\u21D1' ],\n\t    [ /\\\\Rightarrow /g, '\\u21D2' ],\n\t    [ /\\\\Downarrow /g, '\\u21D3' ],\n\t    [ /\\\\Leftrightarrow /g, '\\u21D4' ],\n\t    [ /\\\\Updownarrow /g, '\\u21D5' ],\n\t    [ /\\\\Lleftarrow /g, '\\u21DA' ],\n\t    [ /\\\\Rrightarrow /g, '\\u21DB' ],\n\t    [ /\\\\rightsquigarrow /g, '\\u21DD' ],\n\t    [ /\\\\DownArrowUpArrow /g, '\\u21F5' ],\n\t    [ /\\\\forall /g, '\\u2200' ],\n\t    [ /\\\\complement /g, '\\u2201' ],\n\t    [ /\\\\partial /g, '\\u2202' ],\n\t    [ /\\\\exists /g, '\\u2203' ],\n\t    [ /\\\\nexists /g, '\\u2204' ],\n\t    [ /\\\\varnothing /g, '\\u2205' ],\n\t    [ /\\\\nabla /g, '\\u2207' ],\n\t    [ /\\\\in /g, '\\u2208' ],\n\t    [ /\\\\not\\\\in /g, '\\u2209' ],\n\t    [ /\\\\ni /g, '\\u220B' ],\n\t    [ /\\\\not\\\\ni /g, '\\u220C' ],\n\t    [ /\\\\prod /g, '\\u220F' ],\n\t    [ /\\\\coprod /g, '\\u2210' ],\n\t    [ /\\\\sum /g, '\\u2211' ],\n\t    [ /\\\\mp /g, '\\u2213' ],\n\t    [ /\\\\dotplus /g, '\\u2214' ],\n\t    [ /\\\\setminus /g, '\\u2216' ],\n\t    [ /\\\\circ /g, '\\u2218' ],\n\t    [ /\\\\bullet /g, '\\u2219' ],\n\t    [ /\\\\surd /g, '\\u221A' ],\n\t    [ /\\\\propto /g, '\\u221D' ],\n\t    [ /\\\\infty /g, '\\u221E' ],\n\t    [ /\\\\rightangle /g, '\\u221F' ],\n\t    [ /\\\\angle /g, '\\u2220' ],\n\t    [ /\\\\measuredangle /g, '\\u2221' ],\n\t    [ /\\\\sphericalangle /g, '\\u2222' ],\n\t    [ /\\\\mid /g, '\\u2223' ],\n\t    [ /\\\\nmid /g, '\\u2224' ],\n\t    [ /\\\\parallel /g, '\\u2225' ],\n\t    [ /\\\\nparallel /g, '\\u2226' ],\n\t    [ /\\\\wedge /g, '\\u2227' ],\n\t    [ /\\\\vee /g, '\\u2228' ],\n\t    [ /\\\\cap /g, '\\u2229' ],\n\t    [ /\\\\cup /g, '\\u222A' ],\n\t    [ /\\\\int /g, '\\u222B' ],\n\t    [ /\\\\int\\\\!\\\\int /g, '\\u222C' ],\n\t    [ /\\\\int\\\\!\\\\int\\\\!\\\\int /g, '\\u222D' ],\n\t    [ /\\\\oint /g, '\\u222E' ],\n\t    [ /\\\\surfintegral /g, '\\u222F' ],\n\t    [ /\\\\volintegral /g, '\\u2230' ],\n\t    [ /\\\\clwintegral /g, '\\u2231' ],\n\t    [ /\\\\ElsevierGlyph\\{2232\\}/g, '\\u2232' ],\n\t    [ /\\\\ElsevierGlyph\\{2233\\}/g, '\\u2233' ],\n\t    [ /\\\\therefore /g, '\\u2234' ],\n\t    [ /\\\\because /g, '\\u2235' ],\n\t    [ /\\\\Colon /g, '\\u2237' ],\n\t    [ /\\\\ElsevierGlyph\\{2238\\}/g, '\\u2238' ],\n\t    [ /\\\\mathbin\\{\\{:\\}\\\\!\\\\!\\{\\-\\}\\\\!\\\\!\\{:\\}\\}/g, '\\u223A' ],\n\t    [ /\\\\homothetic /g, '\\u223B' ],\n\t    [ /\\\\sim /g, '\\u223C' ],\n\t    [ /\\\\backsim /g, '\\u223D' ],\n\t    [ /\\\\lazysinv /g, '\\u223E' ],\n\t    [ /\\\\wr /g, '\\u2240' ],\n\t    [ /\\\\not\\\\sim /g, '\\u2241' ],\n\t    [ /\\\\ElsevierGlyph\\{2242\\}/g, '\\u2242' ],\n\t    [ /\\\\NotEqualTilde /g, '\\u2242-00338' ],\n\t    [ /\\\\simeq /g, '\\u2243' ],\n\t    [ /\\\\not\\\\simeq /g, '\\u2244' ],\n\t    [ /\\\\cong /g, '\\u2245' ],\n\t    [ /\\\\approxnotequal /g, '\\u2246' ],\n\t    [ /\\\\not\\\\cong /g, '\\u2247' ],\n\t    [ /\\\\approx /g, '\\u2248' ],\n\t    [ /\\\\not\\\\approx /g, '\\u2249' ],\n\t    [ /\\\\approxeq /g, '\\u224A' ],\n\t    [ /\\\\tildetrpl /g, '\\u224B' ],\n\t    [ /\\\\not\\\\apid /g, '\\u224B-00338' ],\n\t    [ /\\\\allequal /g, '\\u224C' ],\n\t    [ /\\\\asymp /g, '\\u224D' ],\n\t    [ /\\\\Bumpeq /g, '\\u224E' ],\n\t    [ /\\\\NotHumpDownHump /g, '\\u224E-00338' ],\n\t    [ /\\\\bumpeq /g, '\\u224F' ],\n\t    [ /\\\\NotHumpEqual /g, '\\u224F-00338' ],\n\t    [ /\\\\doteq /g, '\\u2250' ],\n\t    [ /\\\\not\\\\doteq/g, '\\u2250-00338' ],\n\t    [ /\\\\doteqdot /g, '\\u2251' ],\n\t    [ /\\\\fallingdotseq /g, '\\u2252' ],\n\t    [ /\\\\risingdotseq /g, '\\u2253' ],\n\t    [ /\\\\eqcirc /g, '\\u2256' ],\n\t    [ /\\\\circeq /g, '\\u2257' ],\n\t    [ /\\\\estimates /g, '\\u2259' ],\n\t    [ /\\\\ElsevierGlyph\\{225A\\}/g, '\\u225A' ],\n\t    [ /\\\\starequal /g, '\\u225B' ],\n\t    [ /\\\\triangleq /g, '\\u225C' ],\n\t    [ /\\\\ElsevierGlyph\\{225F\\}/g, '\\u225F' ],\n\t    [ /\\\\not =/g, '\\u2260' ],\n\t    [ /\\\\equiv /g, '\\u2261' ],\n\t    [ /\\\\not\\\\equiv /g, '\\u2262' ],\n\t    [ /\\\\leq /g, '\\u2264' ],\n\t    [ /\\\\geq /g, '\\u2265' ],\n\t    [ /\\\\leqq /g, '\\u2266' ],\n\t    [ /\\\\geqq /g, '\\u2267' ],\n\t    [ /\\\\lneqq /g, '\\u2268' ],\n\t    [ /\\\\lvertneqq /g, '\\u2268-0FE00' ],\n\t    [ /\\\\gneqq /g, '\\u2269' ],\n\t    [ /\\\\gvertneqq /g, '\\u2269-0FE00' ],\n\t    [ /\\\\ll /g, '\\u226A' ],\n\t    [ /\\\\NotLessLess /g, '\\u226A-00338' ],\n\t    [ /\\\\gg /g, '\\u226B' ],\n\t    [ /\\\\NotGreaterGreater /g, '\\u226B-00338' ],\n\t    [ /\\\\between /g, '\\u226C' ],\n\t    [ /\\\\not\\\\kern\\-0.3em\\\\times /g, '\\u226D' ],\n\t    [ /\\\\not</g, '\\u226E' ],\n\t    [ /\\\\not>/g, '\\u226F' ],\n\t    [ /\\\\not\\\\leq /g, '\\u2270' ],\n\t    [ /\\\\not\\\\geq /g, '\\u2271' ],\n\t    [ /\\\\lessequivlnt /g, '\\u2272' ],\n\t    [ /\\\\greaterequivlnt /g, '\\u2273' ],\n\t    [ /\\\\ElsevierGlyph\\{2274\\}/g, '\\u2274' ],\n\t    [ /\\\\ElsevierGlyph\\{2275\\}/g, '\\u2275' ],\n\t    [ /\\\\lessgtr /g, '\\u2276' ],\n\t    [ /\\\\gtrless /g, '\\u2277' ],\n\t    [ /\\\\notlessgreater /g, '\\u2278' ],\n\t    [ /\\\\notgreaterless /g, '\\u2279' ],\n\t    [ /\\\\prec /g, '\\u227A' ],\n\t    [ /\\\\succ /g, '\\u227B' ],\n\t    [ /\\\\preccurlyeq /g, '\\u227C' ],\n\t    [ /\\\\succcurlyeq /g, '\\u227D' ],\n\t    [ /\\\\precapprox /g, '\\u227E' ],\n\t    [ /\\\\NotPrecedesTilde /g, '\\u227E-00338' ],\n\t    [ /\\\\succapprox /g, '\\u227F' ],\n\t    [ /\\\\NotSucceedsTilde /g, '\\u227F-00338' ],\n\t    [ /\\\\not\\\\prec /g, '\\u2280' ],\n\t    [ /\\\\not\\\\succ /g, '\\u2281' ],\n\t    [ /\\\\subset /g, '\\u2282' ],\n\t    [ /\\\\supset /g, '\\u2283' ],\n\t    [ /\\\\not\\\\subset /g, '\\u2284' ],\n\t    [ /\\\\not\\\\supset /g, '\\u2285' ],\n\t    [ /\\\\subseteq /g, '\\u2286' ],\n\t    [ /\\\\supseteq /g, '\\u2287' ],\n\t    [ /\\\\not\\\\subseteq /g, '\\u2288' ],\n\t    [ /\\\\not\\\\supseteq /g, '\\u2289' ],\n\t    [ /\\\\subsetneq /g, '\\u228A' ],\n\t    [ /\\\\varsubsetneqq /g, '\\u228A-0FE00' ],\n\t    [ /\\\\supsetneq /g, '\\u228B' ],\n\t    [ /\\\\varsupsetneq /g, '\\u228B-0FE00' ],\n\t    [ /\\\\uplus /g, '\\u228E' ],\n\t    [ /\\\\sqsubset /g, '\\u228F' ],\n\t    [ /\\\\NotSquareSubset /g, '\\u228F-00338' ],\n\t    [ /\\\\sqsupset /g, '\\u2290' ],\n\t    [ /\\\\NotSquareSuperset /g, '\\u2290-00338' ],\n\t    [ /\\\\sqsubseteq /g, '\\u2291' ],\n\t    [ /\\\\sqsupseteq /g, '\\u2292' ],\n\t    [ /\\\\sqcap /g, '\\u2293' ],\n\t    [ /\\\\sqcup /g, '\\u2294' ],\n\t    [ /\\\\oplus /g, '\\u2295' ],\n\t    [ /\\\\ominus /g, '\\u2296' ],\n\t    [ /\\\\otimes /g, '\\u2297' ],\n\t    [ /\\\\oslash /g, '\\u2298' ],\n\t    [ /\\\\odot /g, '\\u2299' ],\n\t    [ /\\\\circledcirc /g, '\\u229A' ],\n\t    [ /\\\\circledast /g, '\\u229B' ],\n\t    [ /\\\\circleddash /g, '\\u229D' ],\n\t    [ /\\\\boxplus /g, '\\u229E' ],\n\t    [ /\\\\boxminus /g, '\\u229F' ],\n\t    [ /\\\\boxtimes /g, '\\u22A0' ],\n\t    [ /\\\\boxdot /g, '\\u22A1' ],\n\t    [ /\\\\vdash /g, '\\u22A2' ],\n\t    [ /\\\\dashv /g, '\\u22A3' ],\n\t    [ /\\\\top /g, '\\u22A4' ],\n\t    [ /\\\\perp /g, '\\u22A5' ],\n\t    [ /\\\\truestate /g, '\\u22A7' ],\n\t    [ /\\\\forcesextra /g, '\\u22A8' ],\n\t    [ /\\\\Vdash /g, '\\u22A9' ],\n\t    [ /\\\\Vvdash /g, '\\u22AA' ],\n\t    [ /\\\\VDash /g, '\\u22AB' ],\n\t    [ /\\\\nvdash /g, '\\u22AC' ],\n\t    [ /\\\\nvDash /g, '\\u22AD' ],\n\t    [ /\\\\nVdash /g, '\\u22AE' ],\n\t    [ /\\\\nVDash /g, '\\u22AF' ],\n\t    [ /\\\\vartriangleleft /g, '\\u22B2' ],\n\t    [ /\\\\vartriangleright /g, '\\u22B3' ],\n\t    [ /\\\\trianglelefteq /g, '\\u22B4' ],\n\t    [ /\\\\trianglerighteq /g, '\\u22B5' ],\n\t    [ /\\\\original /g, '\\u22B6' ],\n\t    [ /\\\\image /g, '\\u22B7' ],\n\t    [ /\\\\multimap /g, '\\u22B8' ],\n\t    [ /\\\\hermitconjmatrix /g, '\\u22B9' ],\n\t    [ /\\\\intercal /g, '\\u22BA' ],\n\t    [ /\\\\veebar /g, '\\u22BB' ],\n\t    [ /\\\\rightanglearc /g, '\\u22BE' ],\n\t    [ /\\\\ElsevierGlyph\\{22C0\\}/g, '\\u22C0' ],\n\t    [ /\\\\ElsevierGlyph\\{22C1\\}/g, '\\u22C1' ],\n\t    [ /\\\\bigcap /g, '\\u22C2' ],\n\t    [ /\\\\bigcup /g, '\\u22C3' ],\n\t    [ /\\\\diamond /g, '\\u22C4' ],\n\t    [ /\\\\cdot /g, '\\u22C5' ],\n\t    [ /\\\\star /g, '\\u22C6' ],\n\t    [ /\\\\divideontimes /g, '\\u22C7' ],\n\t    [ /\\\\bowtie /g, '\\u22C8' ],\n\t    [ /\\\\ltimes /g, '\\u22C9' ],\n\t    [ /\\\\rtimes /g, '\\u22CA' ],\n\t    [ /\\\\leftthreetimes /g, '\\u22CB' ],\n\t    [ /\\\\rightthreetimes /g, '\\u22CC' ],\n\t    [ /\\\\backsimeq /g, '\\u22CD' ],\n\t    [ /\\\\curlyvee /g, '\\u22CE' ],\n\t    [ /\\\\curlywedge /g, '\\u22CF' ],\n\t    [ /\\\\Subset /g, '\\u22D0' ],\n\t    [ /\\\\Supset /g, '\\u22D1' ],\n\t    [ /\\\\Cap /g, '\\u22D2' ],\n\t    [ /\\\\Cup /g, '\\u22D3' ],\n\t    [ /\\\\pitchfork /g, '\\u22D4' ],\n\t    [ /\\\\lessdot /g, '\\u22D6' ],\n\t    [ /\\\\gtrdot /g, '\\u22D7' ],\n\t    [ /\\\\verymuchless /g, '\\u22D8' ],\n\t    [ /\\\\verymuchgreater /g, '\\u22D9' ],\n\t    [ /\\\\lesseqgtr /g, '\\u22DA' ],\n\t    [ /\\\\gtreqless /g, '\\u22DB' ],\n\t    [ /\\\\curlyeqprec /g, '\\u22DE' ],\n\t    [ /\\\\curlyeqsucc /g, '\\u22DF' ],\n\t    [ /\\\\not\\\\sqsubseteq /g, '\\u22E2' ],\n\t    [ /\\\\not\\\\sqsupseteq /g, '\\u22E3' ],\n\t    [ /\\\\Elzsqspne /g, '\\u22E5' ],\n\t    [ /\\\\lnsim /g, '\\u22E6' ],\n\t    [ /\\\\gnsim /g, '\\u22E7' ],\n\t    [ /\\\\precedesnotsimilar /g, '\\u22E8' ],\n\t    [ /\\\\succnsim /g, '\\u22E9' ],\n\t    [ /\\\\ntriangleleft /g, '\\u22EA' ],\n\t    [ /\\\\ntriangleright /g, '\\u22EB' ],\n\t    [ /\\\\ntrianglelefteq /g, '\\u22EC' ],\n\t    [ /\\\\ntrianglerighteq /g, '\\u22ED' ],\n\t    [ /\\\\vdots /g, '\\u22EE' ],\n\t    [ /\\\\cdots /g, '\\u22EF' ],\n\t    [ /\\\\upslopeellipsis /g, '\\u22F0' ],\n\t    [ /\\\\downslopeellipsis /g, '\\u22F1' ],\n\t    [ /\\\\barwedge /g, '\\u2305' ],\n\t    [ /\\\\perspcorrespond /g, '\\u2306' ],\n\t    [ /\\\\lceil /g, '\\u2308' ],\n\t    [ /\\\\rceil /g, '\\u2309' ],\n\t    [ /\\\\lfloor /g, '\\u230A' ],\n\t    [ /\\\\rfloor /g, '\\u230B' ],\n\t    [ /\\\\recorder /g, '\\u2315' ],\n\t    [ /\\\\mathchar\"2208/g, '\\u2316' ],\n\t    [ /\\\\ulcorner /g, '\\u231C' ],\n\t    [ /\\\\urcorner /g, '\\u231D' ],\n\t    [ /\\\\llcorner /g, '\\u231E' ],\n\t    [ /\\\\lrcorner /g, '\\u231F' ],\n\t    [ /\\\\frown /g, '\\u2322' ],\n\t    [ /\\\\smile /g, '\\u2323' ],\n\t    [ /\\\\langle /g, '\\u2329' ],\n\t    [ /\\\\rangle /g, '\\u232A' ],\n\t    [ /\\\\ElsevierGlyph\\{E838\\}/g, '\\u233D' ],\n\t    [ /\\\\Elzdlcorn /g, '\\u23A3' ],\n\t    [ /\\\\lmoustache /g, '\\u23B0' ],\n\t    [ /\\\\rmoustache /g, '\\u23B1' ],\n\t    [ /\\\\textvisiblespace /g, '\\u2423' ],\n\t    [ /\\\\ding\\{172\\}/g, '\\u2460' ],\n\t    [ /\\\\ding\\{173\\}/g, '\\u2461' ],\n\t    [ /\\\\ding\\{174\\}/g, '\\u2462' ],\n\t    [ /\\\\ding\\{175\\}/g, '\\u2463' ],\n\t    [ /\\\\ding\\{176\\}/g, '\\u2464' ],\n\t    [ /\\\\ding\\{177\\}/g, '\\u2465' ],\n\t    [ /\\\\ding\\{178\\}/g, '\\u2466' ],\n\t    [ /\\\\ding\\{179\\}/g, '\\u2467' ],\n\t    [ /\\\\ding\\{180\\}/g, '\\u2468' ],\n\t    [ /\\\\ding\\{181\\}/g, '\\u2469' ],\n\t    [ /\\\\circledS /g, '\\u24C8' ],\n\t    [ /\\\\Elzdshfnc /g, '\\u2506' ],\n\t    [ /\\\\Elzsqfnw /g, '\\u2519' ],\n\t    [ /\\\\diagup /g, '\\u2571' ],\n\t    [ /\\\\ding\\{110\\}/g, '\\u25A0' ],\n\t    [ /\\\\square /g, '\\u25A1' ],\n\t    [ /\\\\blacksquare /g, '\\u25AA' ],\n\t    [ /\\\\fbox\\{~~\\}/g, '\\u25AD' ],\n\t    [ /\\\\Elzvrecto /g, '\\u25AF' ],\n\t    [ /\\\\ElsevierGlyph\\{E381\\}/g, '\\u25B1' ],\n\t    [ /\\\\ding\\{115\\}/g, '\\u25B2' ],\n\t    [ /\\\\bigtriangleup /g, '\\u25B3' ],\n\t    [ /\\\\blacktriangle /g, '\\u25B4' ],\n\t    [ /\\\\vartriangle /g, '\\u25B5' ],\n\t    [ /\\\\blacktriangleright /g, '\\u25B8' ],\n\t    [ /\\\\triangleright /g, '\\u25B9' ],\n\t    [ /\\\\ding\\{116\\}/g, '\\u25BC' ],\n\t    [ /\\\\bigtriangledown /g, '\\u25BD' ],\n\t    [ /\\\\blacktriangledown /g, '\\u25BE' ],\n\t    [ /\\\\triangledown /g, '\\u25BF' ],\n\t    [ /\\\\blacktriangleleft /g, '\\u25C2' ],\n\t    [ /\\\\triangleleft /g, '\\u25C3' ],\n\t    [ /\\\\ding\\{117\\}/g, '\\u25C6' ],\n\t    [ /\\\\lozenge /g, '\\u25CA' ],\n\t    [ /\\\\bigcirc /g, '\\u25CB' ],\n\t    [ /\\\\ding\\{108\\}/g, '\\u25CF' ],\n\t    [ /\\\\Elzcirfl /g, '\\u25D0' ],\n\t    [ /\\\\Elzcirfr /g, '\\u25D1' ],\n\t    [ /\\\\Elzcirfb /g, '\\u25D2' ],\n\t    [ /\\\\ding\\{119\\}/g, '\\u25D7' ],\n\t    [ /\\\\Elzrvbull /g, '\\u25D8' ],\n\t    [ /\\\\Elzsqfl /g, '\\u25E7' ],\n\t    [ /\\\\Elzsqfr /g, '\\u25E8' ],\n\t    [ /\\\\Elzsqfse /g, '\\u25EA' ],\n\t    [ /\\\\bigcirc /g, '\\u25EF' ],\n\t    [ /\\\\ding\\{72\\}/g, '\\u2605' ],\n\t    [ /\\\\ding\\{73\\}/g, '\\u2606' ],\n\t    [ /\\\\ding\\{37\\}/g, '\\u260E' ],\n\t    [ /\\\\ding\\{42\\}/g, '\\u261B' ],\n\t    [ /\\\\ding\\{43\\}/g, '\\u261E' ],\n\t    [ /\\\\rightmoon /g, '\\u263E' ],\n\t    [ /\\\\mercury /g, '\\u263F' ],\n\t    [ /\\\\venus /g, '\\u2640' ],\n\t    [ /\\\\male /g, '\\u2642' ],\n\t    [ /\\\\jupiter /g, '\\u2643' ],\n\t    [ /\\\\saturn /g, '\\u2644' ],\n\t    [ /\\\\uranus /g, '\\u2645' ],\n\t    [ /\\\\neptune /g, '\\u2646' ],\n\t    [ /\\\\pluto /g, '\\u2647' ],\n\t    [ /\\\\aries /g, '\\u2648' ],\n\t    [ /\\\\taurus /g, '\\u2649' ],\n\t    [ /\\\\gemini /g, '\\u264A' ],\n\t    [ /\\\\cancer /g, '\\u264B' ],\n\t    [ /\\\\leo /g, '\\u264C' ],\n\t    [ /\\\\virgo /g, '\\u264D' ],\n\t    [ /\\\\libra /g, '\\u264E' ],\n\t    [ /\\\\scorpio /g, '\\u264F' ],\n\t    [ /\\\\sagittarius /g, '\\u2650' ],\n\t    [ /\\\\capricornus /g, '\\u2651' ],\n\t    [ /\\\\aquarius /g, '\\u2652' ],\n\t    [ /\\\\pisces /g, '\\u2653' ],\n\t    [ /\\\\ding\\{171\\}/g, '\\u2660' ],\n\t    [ /\\\\diamond /g, '\\u2662' ],\n\t    [ /\\\\ding\\{168\\}/g, '\\u2663' ],\n\t    [ /\\\\ding\\{170\\}/g, '\\u2665' ],\n\t    [ /\\\\ding\\{169\\}/g, '\\u2666' ],\n\t    [ /\\\\quarternote /g, '\\u2669' ],\n\t    [ /\\\\eighthnote /g, '\\u266A' ],\n\t    [ /\\\\flat /g, '\\u266D' ],\n\t    [ /\\\\natural /g, '\\u266E' ],\n\t    [ /\\\\sharp /g, '\\u266F' ],\n\t    [ /\\\\ding\\{33\\}/g, '\\u2701' ],\n\t    [ /\\\\ding\\{34\\}/g, '\\u2702' ],\n\t    [ /\\\\ding\\{35\\}/g, '\\u2703' ],\n\t    [ /\\\\ding\\{36\\}/g, '\\u2704' ],\n\t    [ /\\\\ding\\{38\\}/g, '\\u2706' ],\n\t    [ /\\\\ding\\{39\\}/g, '\\u2707' ],\n\t    [ /\\\\ding\\{40\\}/g, '\\u2708' ],\n\t    [ /\\\\ding\\{41\\}/g, '\\u2709' ],\n\t    [ /\\\\ding\\{44\\}/g, '\\u270C' ],\n\t    [ /\\\\ding\\{45\\}/g, '\\u270D' ],\n\t    [ /\\\\ding\\{46\\}/g, '\\u270E' ],\n\t    [ /\\\\ding\\{47\\}/g, '\\u270F' ],\n\t    [ /\\\\ding\\{48\\}/g, '\\u2710' ],\n\t    [ /\\\\ding\\{49\\}/g, '\\u2711' ],\n\t    [ /\\\\ding\\{50\\}/g, '\\u2712' ],\n\t    [ /\\\\ding\\{51\\}/g, '\\u2713' ],\n\t    [ /\\\\ding\\{52\\}/g, '\\u2714' ],\n\t    [ /\\\\ding\\{53\\}/g, '\\u2715' ],\n\t    [ /\\\\ding\\{54\\}/g, '\\u2716' ],\n\t    [ /\\\\ding\\{55\\}/g, '\\u2717' ],\n\t    [ /\\\\ding\\{56\\}/g, '\\u2718' ],\n\t    [ /\\\\ding\\{57\\}/g, '\\u2719' ],\n\t    [ /\\\\ding\\{58\\}/g, '\\u271A' ],\n\t    [ /\\\\ding\\{59\\}/g, '\\u271B' ],\n\t    [ /\\\\ding\\{60\\}/g, '\\u271C' ],\n\t    [ /\\\\ding\\{61\\}/g, '\\u271D' ],\n\t    [ /\\\\ding\\{62\\}/g, '\\u271E' ],\n\t    [ /\\\\ding\\{63\\}/g, '\\u271F' ],\n\t    [ /\\\\ding\\{64\\}/g, '\\u2720' ],\n\t    [ /\\\\ding\\{65\\}/g, '\\u2721' ],\n\t    [ /\\\\ding\\{66\\}/g, '\\u2722' ],\n\t    [ /\\\\ding\\{67\\}/g, '\\u2723' ],\n\t    [ /\\\\ding\\{68\\}/g, '\\u2724' ],\n\t    [ /\\\\ding\\{69\\}/g, '\\u2725' ],\n\t    [ /\\\\ding\\{70\\}/g, '\\u2726' ],\n\t    [ /\\\\ding\\{71\\}/g, '\\u2727' ],\n\t    [ /\\\\ding\\{73\\}/g, '\\u2729' ],\n\t    [ /\\\\ding\\{74\\}/g, '\\u272A' ],\n\t    [ /\\\\ding\\{75\\}/g, '\\u272B' ],\n\t    [ /\\\\ding\\{76\\}/g, '\\u272C' ],\n\t    [ /\\\\ding\\{77\\}/g, '\\u272D' ],\n\t    [ /\\\\ding\\{78\\}/g, '\\u272E' ],\n\t    [ /\\\\ding\\{79\\}/g, '\\u272F' ],\n\t    [ /\\\\ding\\{80\\}/g, '\\u2730' ],\n\t    [ /\\\\ding\\{81\\}/g, '\\u2731' ],\n\t    [ /\\\\ding\\{82\\}/g, '\\u2732' ],\n\t    [ /\\\\ding\\{83\\}/g, '\\u2733' ],\n\t    [ /\\\\ding\\{84\\}/g, '\\u2734' ],\n\t    [ /\\\\ding\\{85\\}/g, '\\u2735' ],\n\t    [ /\\\\ding\\{86\\}/g, '\\u2736' ],\n\t    [ /\\\\ding\\{87\\}/g, '\\u2737' ],\n\t    [ /\\\\ding\\{88\\}/g, '\\u2738' ],\n\t    [ /\\\\ding\\{89\\}/g, '\\u2739' ],\n\t    [ /\\\\ding\\{90\\}/g, '\\u273A' ],\n\t    [ /\\\\ding\\{91\\}/g, '\\u273B' ],\n\t    [ /\\\\ding\\{92\\}/g, '\\u273C' ],\n\t    [ /\\\\ding\\{93\\}/g, '\\u273D' ],\n\t    [ /\\\\ding\\{94\\}/g, '\\u273E' ],\n\t    [ /\\\\ding\\{95\\}/g, '\\u273F' ],\n\t    [ /\\\\ding\\{96\\}/g, '\\u2740' ],\n\t    [ /\\\\ding\\{97\\}/g, '\\u2741' ],\n\t    [ /\\\\ding\\{98\\}/g, '\\u2742' ],\n\t    [ /\\\\ding\\{99\\}/g, '\\u2743' ],\n\t    [ /\\\\ding\\{100\\}/g, '\\u2744' ],\n\t    [ /\\\\ding\\{101\\}/g, '\\u2745' ],\n\t    [ /\\\\ding\\{102\\}/g, '\\u2746' ],\n\t    [ /\\\\ding\\{103\\}/g, '\\u2747' ],\n\t    [ /\\\\ding\\{104\\}/g, '\\u2748' ],\n\t    [ /\\\\ding\\{105\\}/g, '\\u2749' ],\n\t    [ /\\\\ding\\{106\\}/g, '\\u274A' ],\n\t    [ /\\\\ding\\{107\\}/g, '\\u274B' ],\n\t    [ /\\\\ding\\{109\\}/g, '\\u274D' ],\n\t    [ /\\\\ding\\{111\\}/g, '\\u274F' ],\n\t    [ /\\\\ding\\{112\\}/g, '\\u2750' ],\n\t    [ /\\\\ding\\{113\\}/g, '\\u2751' ],\n\t    [ /\\\\ding\\{114\\}/g, '\\u2752' ],\n\t    [ /\\\\ding\\{118\\}/g, '\\u2756' ],\n\t    [ /\\\\ding\\{120\\}/g, '\\u2758' ],\n\t    [ /\\\\ding\\{121\\}/g, '\\u2759' ],\n\t    [ /\\\\ding\\{122\\}/g, '\\u275A' ],\n\t    [ /\\\\ding\\{123\\}/g, '\\u275B' ],\n\t    [ /\\\\ding\\{124\\}/g, '\\u275C' ],\n\t    [ /\\\\ding\\{125\\}/g, '\\u275D' ],\n\t    [ /\\\\ding\\{126\\}/g, '\\u275E' ],\n\t    [ /\\\\ding\\{161\\}/g, '\\u2761' ],\n\t    [ /\\\\ding\\{162\\}/g, '\\u2762' ],\n\t    [ /\\\\ding\\{163\\}/g, '\\u2763' ],\n\t    [ /\\\\ding\\{164\\}/g, '\\u2764' ],\n\t    [ /\\\\ding\\{165\\}/g, '\\u2765' ],\n\t    [ /\\\\ding\\{166\\}/g, '\\u2766' ],\n\t    [ /\\\\ding\\{167\\}/g, '\\u2767' ],\n\t    [ /\\\\ding\\{182\\}/g, '\\u2776' ],\n\t    [ /\\\\ding\\{183\\}/g, '\\u2777' ],\n\t    [ /\\\\ding\\{184\\}/g, '\\u2778' ],\n\t    [ /\\\\ding\\{185\\}/g, '\\u2779' ],\n\t    [ /\\\\ding\\{186\\}/g, '\\u277A' ],\n\t    [ /\\\\ding\\{187\\}/g, '\\u277B' ],\n\t    [ /\\\\ding\\{188\\}/g, '\\u277C' ],\n\t    [ /\\\\ding\\{189\\}/g, '\\u277D' ],\n\t    [ /\\\\ding\\{190\\}/g, '\\u277E' ],\n\t    [ /\\\\ding\\{191\\}/g, '\\u277F' ],\n\t    [ /\\\\ding\\{192\\}/g, '\\u2780' ],\n\t    [ /\\\\ding\\{193\\}/g, '\\u2781' ],\n\t    [ /\\\\ding\\{194\\}/g, '\\u2782' ],\n\t    [ /\\\\ding\\{195\\}/g, '\\u2783' ],\n\t    [ /\\\\ding\\{196\\}/g, '\\u2784' ],\n\t    [ /\\\\ding\\{197\\}/g, '\\u2785' ],\n\t    [ /\\\\ding\\{198\\}/g, '\\u2786' ],\n\t    [ /\\\\ding\\{199\\}/g, '\\u2787' ],\n\t    [ /\\\\ding\\{200\\}/g, '\\u2788' ],\n\t    [ /\\\\ding\\{201\\}/g, '\\u2789' ],\n\t    [ /\\\\ding\\{202\\}/g, '\\u278A' ],\n\t    [ /\\\\ding\\{203\\}/g, '\\u278B' ],\n\t    [ /\\\\ding\\{204\\}/g, '\\u278C' ],\n\t    [ /\\\\ding\\{205\\}/g, '\\u278D' ],\n\t    [ /\\\\ding\\{206\\}/g, '\\u278E' ],\n\t    [ /\\\\ding\\{207\\}/g, '\\u278F' ],\n\t    [ /\\\\ding\\{208\\}/g, '\\u2790' ],\n\t    [ /\\\\ding\\{209\\}/g, '\\u2791' ],\n\t    [ /\\\\ding\\{210\\}/g, '\\u2792' ],\n\t    [ /\\\\ding\\{211\\}/g, '\\u2793' ],\n\t    [ /\\\\ding\\{212\\}/g, '\\u2794' ],\n\t    [ /\\\\ding\\{216\\}/g, '\\u2798' ],\n\t    [ /\\\\ding\\{217\\}/g, '\\u2799' ],\n\t    [ /\\\\ding\\{218\\}/g, '\\u279A' ],\n\t    [ /\\\\ding\\{219\\}/g, '\\u279B' ],\n\t    [ /\\\\ding\\{220\\}/g, '\\u279C' ],\n\t    [ /\\\\ding\\{221\\}/g, '\\u279D' ],\n\t    [ /\\\\ding\\{222\\}/g, '\\u279E' ],\n\t    [ /\\\\ding\\{223\\}/g, '\\u279F' ],\n\t    [ /\\\\ding\\{224\\}/g, '\\u27A0' ],\n\t    [ /\\\\ding\\{225\\}/g, '\\u27A1' ],\n\t    [ /\\\\ding\\{226\\}/g, '\\u27A2' ],\n\t    [ /\\\\ding\\{227\\}/g, '\\u27A3' ],\n\t    [ /\\\\ding\\{228\\}/g, '\\u27A4' ],\n\t    [ /\\\\ding\\{229\\}/g, '\\u27A5' ],\n\t    [ /\\\\ding\\{230\\}/g, '\\u27A6' ],\n\t    [ /\\\\ding\\{231\\}/g, '\\u27A7' ],\n\t    [ /\\\\ding\\{232\\}/g, '\\u27A8' ],\n\t    [ /\\\\ding\\{233\\}/g, '\\u27A9' ],\n\t    [ /\\\\ding\\{234\\}/g, '\\u27AA' ],\n\t    [ /\\\\ding\\{235\\}/g, '\\u27AB' ],\n\t    [ /\\\\ding\\{236\\}/g, '\\u27AC' ],\n\t    [ /\\\\ding\\{237\\}/g, '\\u27AD' ],\n\t    [ /\\\\ding\\{238\\}/g, '\\u27AE' ],\n\t    [ /\\\\ding\\{239\\}/g, '\\u27AF' ],\n\t    [ /\\\\ding\\{241\\}/g, '\\u27B1' ],\n\t    [ /\\\\ding\\{242\\}/g, '\\u27B2' ],\n\t    [ /\\\\ding\\{243\\}/g, '\\u27B3' ],\n\t    [ /\\\\ding\\{244\\}/g, '\\u27B4' ],\n\t    [ /\\\\ding\\{245\\}/g, '\\u27B5' ],\n\t    [ /\\\\ding\\{246\\}/g, '\\u27B6' ],\n\t    [ /\\\\ding\\{247\\}/g, '\\u27B7' ],\n\t    [ /\\\\ding\\{248\\}/g, '\\u27B8' ],\n\t    [ /\\\\ding\\{249\\}/g, '\\u27B9' ],\n\t    [ /\\\\ding\\{250\\}/g, '\\u27BA' ],\n\t    [ /\\\\ding\\{251\\}/g, '\\u27BB' ],\n\t    [ /\\\\ding\\{252\\}/g, '\\u27BC' ],\n\t    [ /\\\\ding\\{253\\}/g, '\\u27BD' ],\n\t    [ /\\\\ding\\{254\\}/g, '\\u27BE' ],\n\t    [ /\\\\longleftarrow /g, '\\u27F5' ],\n\t    [ /\\\\longrightarrow /g, '\\u27F6' ],\n\t    [ /\\\\longleftrightarrow /g, '\\u27F7' ],\n\t    [ /\\\\Longleftarrow /g, '\\u27F8' ],\n\t    [ /\\\\Longrightarrow /g, '\\u27F9' ],\n\t    [ /\\\\Longleftrightarrow /g, '\\u27FA' ],\n\t    [ /\\\\longmapsto /g, '\\u27FC' ],\n\t    [ /\\\\sim\\\\joinrel\\\\leadsto/g, '\\u27FF' ],\n\t    [ /\\\\ElsevierGlyph\\{E212\\}/g, '\\u2905' ],\n\t    [ /\\\\UpArrowBar /g, '\\u2912' ],\n\t    [ /\\\\DownArrowBar /g, '\\u2913' ],\n\t    [ /\\\\ElsevierGlyph\\{E20C\\}/g, '\\u2923' ],\n\t    [ /\\\\ElsevierGlyph\\{E20D\\}/g, '\\u2924' ],\n\t    [ /\\\\ElsevierGlyph\\{E20B\\}/g, '\\u2925' ],\n\t    [ /\\\\ElsevierGlyph\\{E20A\\}/g, '\\u2926' ],\n\t    [ /\\\\ElsevierGlyph\\{E211\\}/g, '\\u2927' ],\n\t    [ /\\\\ElsevierGlyph\\{E20E\\}/g, '\\u2928' ],\n\t    [ /\\\\ElsevierGlyph\\{E20F\\}/g, '\\u2929' ],\n\t    [ /\\\\ElsevierGlyph\\{E210\\}/g, '\\u292A' ],\n\t    [ /\\\\ElsevierGlyph\\{E21C\\}/g, '\\u2933' ],\n\t    [ /\\\\ElsevierGlyph\\{E21D\\}/g, '\\u2933-00338' ],\n\t    [ /\\\\ElsevierGlyph\\{E21A\\}/g, '\\u2936' ],\n\t    [ /\\\\ElsevierGlyph\\{E219\\}/g, '\\u2937' ],\n\t    [ /\\\\Elolarr /g, '\\u2940' ],\n\t    [ /\\\\Elorarr /g, '\\u2941' ],\n\t    [ /\\\\ElzRlarr /g, '\\u2942' ],\n\t    [ /\\\\ElzrLarr /g, '\\u2944' ],\n\t    [ /\\\\Elzrarrx /g, '\\u2947' ],\n\t    [ /\\\\LeftRightVector /g, '\\u294E' ],\n\t    [ /\\\\RightUpDownVector /g, '\\u294F' ],\n\t    [ /\\\\DownLeftRightVector /g, '\\u2950' ],\n\t    [ /\\\\LeftUpDownVector /g, '\\u2951' ],\n\t    [ /\\\\LeftVectorBar /g, '\\u2952' ],\n\t    [ /\\\\RightVectorBar /g, '\\u2953' ],\n\t    [ /\\\\RightUpVectorBar /g, '\\u2954' ],\n\t    [ /\\\\RightDownVectorBar /g, '\\u2955' ],\n\t    [ /\\\\DownLeftVectorBar /g, '\\u2956' ],\n\t    [ /\\\\DownRightVectorBar /g, '\\u2957' ],\n\t    [ /\\\\LeftUpVectorBar /g, '\\u2958' ],\n\t    [ /\\\\LeftDownVectorBar /g, '\\u2959' ],\n\t    [ /\\\\LeftTeeVector /g, '\\u295A' ],\n\t    [ /\\\\RightTeeVector /g, '\\u295B' ],\n\t    [ /\\\\RightUpTeeVector /g, '\\u295C' ],\n\t    [ /\\\\RightDownTeeVector /g, '\\u295D' ],\n\t    [ /\\\\DownLeftTeeVector /g, '\\u295E' ],\n\t    [ /\\\\DownRightTeeVector /g, '\\u295F' ],\n\t    [ /\\\\LeftUpTeeVector /g, '\\u2960' ],\n\t    [ /\\\\LeftDownTeeVector /g, '\\u2961' ],\n\t    [ /\\\\UpEquilibrium /g, '\\u296E' ],\n\t    [ /\\\\ReverseUpEquilibrium /g, '\\u296F' ],\n\t    [ /\\\\RoundImplies /g, '\\u2970' ],\n\t    [ /\\\\ElsevierGlyph\\{E214\\}/g, '\\u297C' ],\n\t    [ /\\\\ElsevierGlyph\\{E215\\}/g, '\\u297D' ],\n\t    [ /\\\\Elztfnc /g, '\\u2980' ],\n\t    [ /\\\\ElsevierGlyph\\{3018\\}/g, '\\u2985' ],\n\t    [ /\\\\Elroang /g, '\\u2986' ],\n\t    [ /\\\\ElsevierGlyph\\{E291\\}/g, '\\u2994' ],\n\t    [ /\\\\Elzddfnc /g, '\\u2999' ],\n\t    [ /\\\\Angle /g, '\\u299C' ],\n\t    [ /\\\\Elzlpargt /g, '\\u29A0' ],\n\t    [ /\\\\ElsevierGlyph\\{E260\\}/g, '\\u29B5' ],\n\t    [ /\\\\ElsevierGlyph\\{E61B\\}/g, '\\u29B6' ],\n\t    [ /\\\\ElzLap /g, '\\u29CA' ],\n\t    [ /\\\\Elzdefas /g, '\\u29CB' ],\n\t    [ /\\\\LeftTriangleBar /g, '\\u29CF' ],\n\t    [ /\\\\NotLeftTriangleBar /g, '\\u29CF-00338' ],\n\t    [ /\\\\RightTriangleBar /g, '\\u29D0' ],\n\t    [ /\\\\NotRightTriangleBar /g, '\\u29D0-00338' ],\n\t    [ /\\\\ElsevierGlyph\\{E372\\}/g, '\\u29DC' ],\n\t    [ /\\\\blacklozenge /g, '\\u29EB' ],\n\t    [ /\\\\RuleDelayed /g, '\\u29F4' ],\n\t    [ /\\\\Elxuplus /g, '\\u2A04' ],\n\t    [ /\\\\ElzThr /g, '\\u2A05' ],\n\t    [ /\\\\Elxsqcup /g, '\\u2A06' ],\n\t    [ /\\\\ElzInf /g, '\\u2A07' ],\n\t    [ /\\\\ElzSup /g, '\\u2A08' ],\n\t    [ /\\\\ElzCint /g, '\\u2A0D' ],\n\t    [ /\\\\clockoint /g, '\\u2A0F' ],\n\t    [ /\\\\ElsevierGlyph\\{E395\\}/g, '\\u2A10' ],\n\t    [ /\\\\sqrint /g, '\\u2A16' ],\n\t    [ /\\\\ElsevierGlyph\\{E25A\\}/g, '\\u2A25' ],\n\t    [ /\\\\ElsevierGlyph\\{E25B\\}/g, '\\u2A2A' ],\n\t    [ /\\\\ElsevierGlyph\\{E25C\\}/g, '\\u2A2D' ],\n\t    [ /\\\\ElsevierGlyph\\{E25D\\}/g, '\\u2A2E' ],\n\t    [ /\\\\ElzTimes /g, '\\u2A2F' ],\n\t    [ /\\\\ElsevierGlyph\\{E25E\\}/g, '\\u2A34' ],\n\t    [ /\\\\ElsevierGlyph\\{E25E\\}/g, '\\u2A35' ],\n\t    [ /\\\\ElsevierGlyph\\{E259\\}/g, '\\u2A3C' ],\n\t    [ /\\\\amalg /g, '\\u2A3F' ],\n\t    [ /\\\\ElzAnd /g, '\\u2A53' ],\n\t    [ /\\\\ElzOr /g, '\\u2A54' ],\n\t    [ /\\\\ElsevierGlyph\\{E36E\\}/g, '\\u2A55' ],\n\t    [ /\\\\ElOr /g, '\\u2A56' ],\n\t    [ /\\\\perspcorrespond /g, '\\u2A5E' ],\n\t    [ /\\\\Elzminhat /g, '\\u2A5F' ],\n\t    [ /\\\\ElsevierGlyph\\{225A\\}/g, '\\u2A63' ],\n\t    [ /\\\\stackrel\\{*\\}\\{=\\}/g, '\\u2A6E' ],\n\t    [ /\\\\Equal /g, '\\u2A75' ],\n\t    [ /\\\\leqslant /g, '\\u2A7D' ],\n\t    [ /\\\\nleqslant /g, '\\u2A7D-00338' ],\n\t    [ /\\\\geqslant /g, '\\u2A7E' ],\n\t    [ /\\\\ngeqslant /g, '\\u2A7E-00338' ],\n\t    [ /\\\\lessapprox /g, '\\u2A85' ],\n\t    [ /\\\\gtrapprox /g, '\\u2A86' ],\n\t    [ /\\\\lneq /g, '\\u2A87' ],\n\t    [ /\\\\gneq /g, '\\u2A88' ],\n\t    [ /\\\\lnapprox /g, '\\u2A89' ],\n\t    [ /\\\\gnapprox /g, '\\u2A8A' ],\n\t    [ /\\\\lesseqqgtr /g, '\\u2A8B' ],\n\t    [ /\\\\gtreqqless /g, '\\u2A8C' ],\n\t    [ /\\\\eqslantless /g, '\\u2A95' ],\n\t    [ /\\\\eqslantgtr /g, '\\u2A96' ],\n\t    [ /\\\\Pisymbol\\{ppi020\\}\\{117\\}/g, '\\u2A9D' ],\n\t    [ /\\\\Pisymbol\\{ppi020\\}\\{105\\}/g, '\\u2A9E' ],\n\t    [ /\\\\NestedLessLess /g, '\\u2AA1' ],\n\t    [ /\\\\NotNestedLessLess /g, '\\u2AA1-00338' ],\n\t    [ /\\\\NestedGreaterGreater /g, '\\u2AA2' ],\n\t    [ /\\\\NotNestedGreaterGreater /g, '\\u2AA2-00338' ],\n\t    [ /\\\\preceq /g, '\\u2AAF' ],\n\t    [ /\\\\not\\\\preceq /g, '\\u2AAF-00338' ],\n\t    [ /\\\\succeq /g, '\\u2AB0' ],\n\t    [ /\\\\not\\\\succeq /g, '\\u2AB0-00338' ],\n\t    [ /\\\\precneqq /g, '\\u2AB5' ],\n\t    [ /\\\\succneqq /g, '\\u2AB6' ],\n\t    [ /\\\\precapprox /g, '\\u2AB7' ],\n\t    [ /\\\\succapprox /g, '\\u2AB8' ],\n\t    [ /\\\\precnapprox /g, '\\u2AB9' ],\n\t    [ /\\\\succnapprox /g, '\\u2ABA' ],\n\t    [ /\\\\subseteqq /g, '\\u2AC5' ],\n\t    [ /\\\\nsubseteqq /g, '\\u2AC5-00338' ],\n\t    [ /\\\\supseteqq /g, '\\u2AC6' ],\n\t    [ /\\\\nsupseteqq/g, '\\u2AC6-00338' ],\n\t    [ /\\\\subsetneqq /g, '\\u2ACB' ],\n\t    [ /\\\\supsetneqq /g, '\\u2ACC' ],\n\t    [ /\\\\ElsevierGlyph\\{E30D\\}/g, '\\u2AEB' ],\n\t    [ /\\\\Elztdcol /g, '\\u2AF6' ],\n\t    [ /\\\\ElsevierGlyph\\{300A\\}/g, '\\u300A' ],\n\t    [ /\\\\ElsevierGlyph\\{300B\\}/g, '\\u300B' ],\n\t    [ /\\\\ElsevierGlyph\\{3018\\}/g, '\\u3018' ],\n\t    [ /\\\\ElsevierGlyph\\{3019\\}/g, '\\u3019' ],\n\t    [ /\\\\openbracketleft /g, '\\u301A' ],\n\t    [ /\\\\openbracketright /g, '\\u301B' ]\n\t  ]\n\t\n\t  return this;\n\t} // end function BibtexParser\n\t\n\tif (typeof module !== 'undefined' && module.exports) {\n\t  module.exports = BibtexParser;\n\t}\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(6),\n\t    __webpack_require__(18),\n\t    __webpack_require__(5)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function( baseMVC, citationModel, _l ){\n\t\n\tvar CitationView = Backbone.View.extend({\n\t    tagName: 'div',\n\t    className: 'citations',\n\t    render: function() {\n\t        this.$el.append( \"<p>\" + this.formattedReference() + \"</p>\" );\n\t        return this;\n\t    },\n\t    formattedReference: function() {\n\t        var model = this.model;\n\t        var entryType = model.entryType();\n\t        var fields = model.fields();\n\t\n\t        var ref = \"\";\n\t        // Code inspired by...\n\t        // https://github.com/vkaravir/bib-publication-list/blob/master/src/bib-publication-list.js\n\t        var authorsAndYear = this._asSentence( (fields.author ? fields.author : \"\") + (fields.year ? (\" (\" + fields.year + \")\") : \"\") ) + \" \";\n\t        var title = fields.title || \"\";\n\t        var pages = fields.pages ? (\"pp. \" + fields.pages) : \"\";\n\t        var address = fields.address;\n\t        if( entryType == \"article\" ) {\n\t            var volume = (fields.volume ? fields.volume : \"\") +\n\t                         (fields.number ? ( \" (\" + fields.number + \")\" ) : \"\") +\n\t                         (pages ? \", \" + pages : \"\");\n\t            ref = authorsAndYear + this._asSentence(title) +\n\t                    (fields.journal ? (\"In <em>\" + fields.journal + \", \") : \"\") +\n\t                    this._asSentence(volume) + \n\t                    this._asSentence(fields.address) +\n\t                    \"<\\/em>\";\n\t        } else if( entryType == \"inproceedings\" || entryType == \"proceedings\" ) {\n\t            ref = authorsAndYear + \n\t                    this._asSentence(title) + \n\t                    (fields.booktitle ? (\"In <em>\" + fields.booktitle + \", \") : \"\") +\n\t                    (pages ? pages : \"\") +\n\t                    (address ? \", \" + address : \"\") + \n\t                    \".<\\/em>\";\n\t        } else if( entryType == \"mastersthesis\" || entryType == \"phdthesis\" ) {\n\t            ref = authorsAndYear + this._asSentence(title) +\n\t                    (fields.howpublished ? fields.howpublished + \". \" : \"\") +\n\t                    (fields.note ? fields.note + \".\" : \"\");\n\t        } else if( entryType == \"techreport\" ) {\n\t            ref = authorsAndYear + this._asSentence(title) +\n\t                    this._asSentence(fields.institution) +\n\t                    this._asSentence(fields.number) +\n\t                    this._asSentence(fields.type);\n\t        } else if( entryType == \"book\" || entryType == \"inbook\" || entryType == \"incollection\" ) {\n\t            ref = authorsAndYear + \" \" + this._formatBookInfo(fields);\n\t        } else {\n\t            ref = authorsAndYear + \" \" + this._asSentence(title) +\n\t                    this._asSentence(fields.howpublished) +\n\t                    this._asSentence(fields.note);\n\t        }\n\t        var doiUrl = \"\";\n\t        if( fields.doi ) {\n\t            doiUrl = 'http://dx.doi.org/' + fields.doi;\n\t            ref += '[<a href=\"' + doiUrl + '\" target=\"_blank\">doi:' + fields.doi + \"</a>]\";\n\t        }\n\t        var url = fields.url || doiUrl;\n\t        if( url ) {\n\t            ref += '[<a href=\"' + url + '\" target=\"_blank\">Link</a>]';\n\t        }\n\t        return ref;\n\t    },\n\t    _formatBookInfo: function(fields) {\n\t        var info = \"\";\n\t        if( fields.chapter ) {\n\t            info += fields.chapter + \" in \";\n\t        }\n\t        if( fields.title ) {\n\t            info += \"<em>\" + fields.title + \"<\\/em>\";\n\t        }\n\t        if( fields.editor ) {\n\t            info += \", Edited by \" + fields.editor + \", \";\n\t        }\n\t        if( fields.publisher) {\n\t            info += \", \" + fields.publisher;\n\t        }\n\t        if( fields.pages ) {\n\t            info += \", pp. \" + fields.pages + \"\";\n\t        }\n\t        if( fields.series ) {\n\t            info += \", <em>\" + fields.series + \"<\\/em>\";\n\t        }\n\t        if( fields.volume ) {\n\t            info += \", Vol.\" + fields.volume;\n\t        }\n\t        if( fields.issn ) {\n\t            info += \", ISBN: \" + fields.issn;\n\t        }\n\t        return info + \".\";\n\t    },\n\t    _asSentence: function(str) {\n\t        return (str && str.trim()) ? str + \". \" : \"\";\n\t    }\n\t});\n\t\n\tvar CitationListView = Backbone.View.extend({\n\t    el: '#citations',\n\t    /**\n\t     * Set up view.\n\t     */\n\t    initialize: function() {\n\t        this.listenTo( this.collection, 'add', this.renderCitation );\n\t    },\n\t\n\t    events: {\n\t        'click .citations-to-bibtex': 'showBibtex',\n\t        'click .citations-to-formatted': 'showFormatted'\n\t    },\n\t\n\t    renderCitation: function( citation ) {\n\t        var citationView = new CitationView( { model: citation } );\n\t        this.$(\".citations-formatted\").append( citationView.render().el );\n\t        var rawTextarea = this.$(\".citations-bibtex-text\");\n\t        rawTextarea.val( rawTextarea.val() + \"\\n\\r\" + citation.attributes.content );\n\t    },\n\t\n\t    render: function() {\n\t        this.$el.html(this.citationsElement());\n\t        this.collection.each(function( item ){\n\t            this.renderCitation( item );\n\t        }, this);\n\t        this.showFormatted();\n\t    },\n\t\n\t    showBibtex: function() {\n\t        this.$(\".citations-to-formatted\").show();\n\t        this.$(\".citations-to-bibtex\").hide();\n\t        this.$(\".citations-bibtex\").show();\n\t        this.$(\".citations-formatted\").hide();\n\t        this.$(\".citations-bibtex-text\").select();\n\t    },\n\t\n\t    showFormatted: function() {\n\t        this.$(\".citations-to-formatted\").hide();\n\t        this.$(\".citations-to-bibtex\").show();\n\t        this.$(\".citations-bibtex\").hide();\n\t        this.$(\".citations-formatted\").show();\n\t    },\n\t\n\t    partialWarningElement: function() {\n\t        if( this.collection.partial ) {\n\t            return [\n\t                '<div style=\"padding:5px 10px\">',\n\t                '<b>Warning: This is a experimental feature.</b> Most Galaxy tools will not annotate',\n\t                ' citations explicitly at this time. When writing up your analysis, please manually',\n\t                ' review your histories and find all references',\n\t                ' that should be cited in order to completely describe your work. Also, please remember to',\n\t                ' <a href=\"https://wiki.galaxyproject.org/CitingGalaxy\">cite Galaxy</a>.',\n\t                '</div>',\n\t            ].join('');\n\t        } else {\n\t            return '';\n\t        }\n\t    },\n\t\n\t    citationsElement: function() {\n\t        return [\n\t            '<div class=\"toolForm\">',\n\t                '<div class=\"toolFormTitle\">',\n\t                    _l(\"Citations\"),\n\t                    ' <button type=\"button\" class=\"btn btn-xs citations-to-bibtex\" title=\"Show all in BibTeX format.\"><i class=\"fa fa-pencil-square-o\"></i> Show BibTeX</button>',\n\t                    ' <button type=\"button\" class=\"btn btn-xs citations-to-formatted\" title=\"Return to formatted citation list.\"><i class=\"fa fa-times\"></i> Hide BibTeX</button>',\n\t                '</div>',\n\t                '<div class=\"toolFormBody\" style=\"padding:5px 10px\">',\n\t                this.partialWarningElement(),\n\t                '<span class=\"citations-formatted\" style=\"word-wrap: break-word;\"></span>',\n\t                '</div>',\n\t                '<div class=\"citations-bibtex toolFormBody\" style=\"padding:5px 10px\">',\n\t                '<textarea style=\"width: 100%; height: 500px;\" class=\"citations-bibtex-text\"></textarea>',\n\t                '</div>',\n\t            '</div>'\n\t        ].join( '' );\n\t    }\n\t});\n\t\n\t//==============================================================================\n\treturn {\n\t    CitationView : CitationView,\n\t    CitationListView  : CitationListView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/*\n\t    This class maps the form dom to an api compatible javascript dictionary.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    var Manager = Backbone.Model.extend({\n\t        initialize: function( app ) {\n\t            this.app = app;\n\t        },\n\t\n\t        /** Creates a checksum.\n\t        */\n\t        checksum: function() {\n\t            var sum = '';\n\t            var self = this;\n\t            this.app.section.$el.find( '.section-row' ).each( function() {\n\t                var id = $(this).attr( 'id' );\n\t                var field = self.app.field_list[ id ];\n\t                if ( field ) {\n\t                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n\t                }\n\t            });\n\t            return sum;\n\t        },\n\t\n\t        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission.\n\t        */\n\t        create: function() {\n\t            var self = this;\n\t\n\t            // get raw dictionary from dom\n\t            var dict = {};\n\t            this._iterate( this.app.section.$el, dict );\n\t\n\t            // add to result dictionary, label elements\n\t            var result_dict = {};\n\t            this.flat_dict = {};\n\t            function add( flat_id, input_id, input_value ) {\n\t                self.flat_dict[ flat_id ] = input_id;\n\t                result_dict[ flat_id ] = input_value;\n\t                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n\t            }\n\t            // converter between raw dictionary and job dictionary\n\t            function convert( identifier, head ) {\n\t                for ( var index in head ) {\n\t                    var node = head[ index ];\n\t                    if ( node.input ) {\n\t                        var input = node.input;\n\t                        var flat_id = identifier;\n\t                        if ( identifier != '' ) {\n\t                            flat_id += '|';\n\t                        }\n\t                        flat_id += input.name;\n\t                        switch ( input.type ) {\n\t                            case 'repeat':\n\t                                var section_label = 'section-';\n\t                                var block_indices = [];\n\t                                var block_prefix = null;\n\t                                for ( var block_label in node ) {\n\t                                    var pos = block_label.indexOf( section_label );\n\t                                    if ( pos != -1 ) {\n\t                                        pos += section_label.length;\n\t                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n\t                                        if ( !block_prefix ) {\n\t                                            block_prefix = block_label.substr( 0, pos );\n\t                                        }\n\t                                    }\n\t                                }\n\t                                block_indices.sort( function( a, b ) { return a - b; });\n\t                                var index = 0;\n\t                                for ( var i in block_indices ) {\n\t                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n\t                                }\n\t                                break;\n\t                            case 'conditional':\n\t                                var value = self.app.field_list[ input.id ].value();\n\t                                add( flat_id + '|' + input.test_param.name, input.id, value );\n\t                                var selectedCase = matchCase( input, value );\n\t                                if ( selectedCase != -1 ) {\n\t                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n\t                                }\n\t                                break;\n\t                            case 'section':\n\t                                convert( !input.flat && flat_id || '', node );\n\t                                break;\n\t                            default:\n\t                                var field = self.app.field_list[ input.id ];\n\t                                if ( field && field.value ) {\n\t                                    var value = field.value();\n\t                                    if ( input.ignore === undefined || input.ignore != value ) {\n\t                                        if ( field.collapsed && input.collapsible_value ) {\n\t                                            value = input.collapsible_value;\n\t                                        }\n\t                                        add( flat_id, input.id, value );\n\t                                        if ( input.payload ) {\n\t                                            for ( var p_id in input.payload ) {\n\t                                                add( p_id, input.id, input.payload[ p_id ] );\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            convert( '', dict );\n\t            return result_dict;\n\t        },\n\t\n\t        /** Matches flat ids to corresponding input element\n\t         * @param{string} flat_id - Flat input id to be looked up.\n\t         */\n\t        match: function ( flat_id ) {\n\t            return this.flat_dict && this.flat_dict[ flat_id ];\n\t        },\n\t\n\t        /** Match conditional values to selected cases\n\t        */\n\t        matchCase: function( input, value ) {\n\t            return matchCase( input, value );\n\t        },\n\t\n\t        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n\t        */\n\t        matchModel: function( model, callback ) {\n\t            return matchIds( model.inputs, this.flat_dict, callback );\n\t        },\n\t\n\t        /** Matches identifier from api response to input elements e.g. used to display validation errors\n\t        */\n\t        matchResponse: function( response ) {\n\t            var result = {};\n\t            var self = this;\n\t            function search ( id, head ) {\n\t                if ( typeof head === 'string' ) {\n\t                    var input_id = self.flat_dict[ id ];\n\t                    input_id && ( result[ input_id ] = head );\n\t                } else {\n\t                    for ( var i in head ) {\n\t                        var new_id = i;\n\t                        if ( id !== '' ) {\n\t                            var separator = '|';\n\t                            if ( head instanceof Array ) {\n\t                                separator = '_';\n\t                            }\n\t                            new_id = id + separator + new_id;\n\t                        }\n\t                        search ( new_id, head[ i ] );\n\t                    }\n\t                }\n\t            }\n\t            search( '', response );\n\t            return result;\n\t        },\n\t\n\t        /** Map dom tree to dictionary tree with input elements.\n\t        */\n\t        _iterate: function( parent, dict ) {\n\t            var self = this;\n\t            var children = $( parent ).children();\n\t            children.each( function() {\n\t                var child = this;\n\t                var id = $( child ).attr( 'id' );\n\t                if ( $( child ).hasClass( 'section-row' ) ) {\n\t                    var input = self.app.input_list[ id ];\n\t                    dict[ id ] = ( input && { input : input } ) || {};\n\t                    self._iterate( child, dict[ id ] );\n\t                } else {\n\t                    self._iterate( child, dict );\n\t                }\n\t            });\n\t        }\n\t    });\n\t\n\t    /** Match conditional values to selected cases\n\t     * @param{dict}   input     - Definition of conditional input parameter\n\t     * @param{dict}   value     - Current value\n\t     */\n\t    var matchCase = function( input, value ) {\n\t        if ( input.test_param.type == 'boolean' ) {\n\t            if ( value == 'true' ) {\n\t                value = input.test_param.truevalue || 'true';\n\t            } else {\n\t                value = input.test_param.falsevalue || 'false';\n\t            }\n\t        }\n\t        for ( var i in input.cases ) {\n\t            if ( input.cases[ i ].value == value ) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    /** Match context\n\t     * @param{dict}   inputs    - Dictionary of input elements\n\t     * @param{dict}   key       - Reference key which is matched to an input name e.g. data_ref\n\t     * @param{dict}   callback  - Called with matched context i.e. callback( input, referenced_input )\n\t     */\n\t    var matchContext = function( inputs, key, callback, context ) {\n\t        context = $.extend( true, {}, context );\n\t        _.each( inputs, function ( input ) {\n\t            input && input.type && ( context[ input.name ] = input );\n\t        });\n\t        _.each( inputs, function ( input ) {\n\t            if ( _.isObject( input ) ) {\n\t                if ( input.type && context[ input[ key ] ] ) {\n\t                    callback ( input, context[ input[ key ] ] );\n\t                } else {\n\t                    matchContext( input, key, callback, context );\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    /** Matches a tool model to a dictionary, indexed with flat ids\n\t     * @param{dict}   inputs    - Dictionary of input elements\n\t     * @param{dict}   mapping   - Dictionary containing flat ids\n\t     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n\t     */\n\t    var matchIds = function( inputs, mapping, callback ) {\n\t        var result = {};\n\t        var self = this;\n\t        function search ( id, head ) {\n\t            for ( var i in head ) {\n\t                var node = head[ i ];\n\t                var index = node.name;\n\t                id != '' && ( index = id + '|' + index );\n\t                switch ( node.type ) {\n\t                    case 'repeat':\n\t                        for ( var j in node.cache ) {\n\t                            search ( index + '_' + j, node.cache[ j ] );\n\t                        }\n\t                        break;\n\t                    case 'conditional':\n\t                        var selectedCase = matchCase( node, node.test_param && node.test_param.value );\n\t                        selectedCase != -1 && search ( index, node.cases[ selectedCase ].inputs );\n\t                        break;\n\t                    case 'section':\n\t                        search ( index, node.inputs );\n\t                        break;\n\t                    default:\n\t                        var mapped = mapping[ index ];\n\t                        mapped && callback( mapped, node );\n\t                }\n\t            }\n\t        }\n\t        search( '', inputs );\n\t        return result;\n\t    };\n\t\n\t    return {\n\t        Manager         : Manager,\n\t        matchIds        : matchIds,\n\t        matchContext    : matchContext\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {/**\n\t    This class creates a form input element wrapper\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t    return Backbone.View.extend({\n\t        initialize: function(app, options) {\n\t            this.app = app;\n\t            this.field = options.field;\n\t\n\t            // set text labels and icons for collapsible button\n\t            this.text_enable    = app.options.text_enable || 'Enable';\n\t            this.text_disable   = app.options.text_disable || 'Disable';\n\t            this.cls_enable     = app.options.cls_enable || 'fa fa-caret-square-o-down';\n\t            this.cls_disable    = app.options.cls_disable || 'fa fa-caret-square-o-up';\n\t\n\t            // set element\n\t            this.setElement(this._template(options));\n\t\n\t            // link elements\n\t            this.$field = this.$('.ui-form-field');\n\t            this.$preview = this.$('.ui-form-preview');\n\t            this.$collapsible = this.$('.ui-form-collapsible');\n\t            this.$collapsible_icon = this.$('.ui-form-collapsible').find('.icon');\n\t            this.$error_text = this.$('.ui-form-error-text');\n\t            this.$error = this.$('.ui-form-error');\n\t            this.$backdrop = this.$('.ui-form-backdrop');\n\t\n\t            // add field element\n\t            this.$field.prepend(this.field.$el);\n\t\n\t            // decide wether to expand or collapse fields\n\t            this.field.collapsed = options.collapsible_value !== undefined && JSON.stringify( options.value ) == JSON.stringify( options.collapsible_value );\n\t\n\t            // refresh view\n\t            this._refresh();\n\t\n\t            // add collapsible hide/show\n\t            var self = this;\n\t            this.$collapsible.on('click', function() {\n\t                self.field.collapsed = !self.field.collapsed;\n\t                self._refresh();\n\t            });\n\t        },\n\t\n\t        /** Disable input element\n\t        */\n\t        disable: function( silent ) {\n\t            this.$backdrop.show();\n\t            silent && this.$backdrop.css({ 'opacity': 0, 'cursor': 'default' } );\n\t        },\n\t\n\t        /** Set error text\n\t        */\n\t        error: function(text) {\n\t            this.$error_text.html(text);\n\t            this.$error.show();\n\t            this.$el.addClass('ui-error');\n\t        },\n\t\n\t        /** Reset this view\n\t        */\n\t        reset: function() {\n\t            this.$error.hide();\n\t            this.$el.removeClass('ui-error');\n\t        },\n\t\n\t        /** Refresh element\n\t        */\n\t        _refresh: function() {\n\t            this.$collapsible_icon.removeClass().addClass('icon');\n\t            if (!this.field.collapsed) {\n\t                this.$field.fadeIn('fast');\n\t                this.$preview.hide();\n\t                this._tooltip(this.text_disable, this.cls_disable);\n\t            } else {\n\t                this.$field.hide();\n\t                this.$preview.show();\n\t                this._tooltip(this.text_enable, this.cls_enable);\n\t            }\n\t            this.app.trigger('change');\n\t        },\n\t\n\t        /** Set tooltip text\n\t        */\n\t        _tooltip: function(title, cls) {\n\t            this.$collapsible_icon.addClass(cls)\n\t                               .tooltip({ placement: 'bottom' })\n\t                               .attr('data-original-title', title)\n\t                               .tooltip('fixTitle').tooltip('hide');\n\t        },\n\t\n\t        /** Main Template\n\t        */\n\t        _template: function(options) {\n\t            var tmp =   '<div class=\"ui-form-element\">' +\n\t                            '<div class=\"ui-form-error ui-error\">' +\n\t                                '<span class=\"fa fa-arrow-down\"/><span class=\"ui-form-error-text\"/>' +\n\t                            '</div>' +\n\t                            '<div class=\"ui-form-title\">';\n\t            if ( !options.disabled && options.collapsible_value !== undefined ) {\n\t                tmp +=          '<div class=\"ui-form-collapsible\">' +\n\t                                    '<i class=\"icon\"/>' + options.label +\n\t                                '</div>';\n\t            } else {\n\t                tmp += options.label;\n\t            }\n\t            tmp +=          '</div>' +\n\t                            '<div class=\"ui-form-field\">';\n\t            tmp +=              '<div class=\"ui-form-info\">';\n\t            if (options.help) {\n\t                tmp +=              options.help;\n\t            }\n\t            if (options.argument && options.help.indexOf('(' + options.argument + ')') == -1) {\n\t                tmp +=              ' (' + options.argument + ')';\n\t            }\n\t            tmp +=              '</div>' +\n\t                                '<div class=\"ui-form-backdrop\"/>' +\n\t                            '</div>';\n\t            if ( options.collapsible_preview ) {\n\t                tmp +=      '<div class=\"ui-form-preview\">' + options.text_value + '</div>';\n\t            }\n\t            tmp += '</div>';\n\t            return tmp;\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This class creates input elements. New input parameter types should be added to the types dictionary.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4),\n\t        __webpack_require__(7),\n\t        __webpack_require__(39),\n\t        __webpack_require__(53),\n\t        __webpack_require__(52),\n\t        __webpack_require__(49)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker ) {\n\t\n\t    // create form view\n\t    return Backbone.Model.extend({\n\t        /** Available parameter types */\n\t        types: {\n\t            'text'              : '_fieldText',\n\t            'select'            : '_fieldSelect',\n\t            'data_column'       : '_fieldSelect',\n\t            'genomebuild'       : '_fieldSelect',\n\t            'data'              : '_fieldData',\n\t            'data_collection'   : '_fieldData',\n\t            'integer'           : '_fieldSlider',\n\t            'float'             : '_fieldSlider',\n\t            'boolean'           : '_fieldBoolean',\n\t            'drill_down'        : '_fieldDrilldown',\n\t            'color'             : '_fieldColor',\n\t            'hidden'            : '_fieldHidden',\n\t            'hidden_data'       : '_fieldHidden',\n\t            'baseurl'           : '_fieldHidden',\n\t            'library_data'      : '_fieldLibrary',\n\t            'ftpfile'           : '_fieldFtp'\n\t        },\n\t\n\t        initialize: function( app, options ) {\n\t            this.app = app;\n\t        },\n\t\n\t        /** Returns an input field for a given field type\n\t        */\n\t        create: function( input_def ) {\n\t            var fieldClass = this.types[ input_def.type ];\n\t            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n\t            if ( !field ) {\n\t                this.app.incompatible = true;\n\t                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n\t                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n\t            }\n\t            input_def.value === undefined && ( input_def.value = null );\n\t            field.value( input_def.value );\n\t            return field;\n\t        },\n\t\n\t        /** Data input field\n\t        */\n\t        _fieldData: function( input_def ) {\n\t            var self = this;\n\t            return new SelectContent.View( this.app, {\n\t                id          : 'field-' + input_def.id,\n\t                extensions  : input_def.extensions,\n\t                optional    : input_def.optional,\n\t                multiple    : input_def.multiple,\n\t                type        : input_def.type,\n\t                data        : input_def.options,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Select/Checkbox/Radio options field\n\t        */\n\t        _fieldSelect: function ( input_def ) {\n\t            // show text field e.g. in workflow editor\n\t            if( input_def.is_workflow ) {\n\t                return this._fieldText( input_def );\n\t            }\n\t\n\t            // customize properties\n\t            if ( input_def.type == 'data_column' ) {\n\t                input_def.error_text = 'Missing columns in referenced dataset.'\n\t            }\n\t\n\t            // configure options fields\n\t            var options = [];\n\t            _.each( input_def.options, function( option ) {\n\t                options.push( { label: option[ 0 ], value: option[ 1 ] } );\n\t            });\n\t\n\t            // identify display type\n\t            var SelectClass = Ui.Select;\n\t            switch ( input_def.display ) {\n\t                case 'checkboxes':\n\t                    SelectClass = Ui.Checkbox;\n\t                    break;\n\t                case 'radio':\n\t                    SelectClass = Ui.Radio;\n\t                    break;\n\t            }\n\t\n\t            // create select field\n\t            var self = this;\n\t            return new SelectClass.View({\n\t                id          : 'field-' + input_def.id,\n\t                data        : options,\n\t                error_text  : input_def.error_text || 'No options available',\n\t                multiple    : input_def.multiple,\n\t                optional    : input_def.optional,\n\t                searchable  : input_def.searchable,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Drill down options field\n\t        */\n\t        _fieldDrilldown: function ( input_def ) {\n\t            // show text field e.g. in workflow editor\n\t            if( input_def.is_workflow ) {\n\t                return this._fieldText( input_def );\n\t            }\n\t\n\t            // create drill down field\n\t            var self = this;\n\t            return new Ui.Drilldown.View({\n\t                id          : 'field-' + input_def.id,\n\t                data        : input_def.options,\n\t                display     : input_def.display,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Text input field\n\t        */\n\t        _fieldText: function( input_def ) {\n\t            // field replaces e.g. a select field\n\t            if ( input_def.options ) {\n\t                input_def.area = input_def.multiple;\n\t                if ( !Utils.validate( input_def.value ) ) {\n\t                    input_def.value = null;\n\t                } else {\n\t                    if ( $.isArray( input_def.value ) ) {\n\t                        var str_value = '';\n\t                        for ( var i in input_def.value ) {\n\t                            str_value += String( input_def.value[ i ] );\n\t                            if ( !input_def.multiple ) {\n\t                                break;\n\t                            }\n\t                            str_value += '\\n';\n\t                        }\n\t                        input_def.value = str_value;\n\t                    }\n\t                }\n\t            }\n\t            // create input element\n\t            var self = this;\n\t            return new Ui.Input({\n\t                id          : 'field-' + input_def.id,\n\t                area        : input_def.area,\n\t                onchange    : function( new_value ) {\n\t                    input_def.onchange ? input_def.onchange( new_value ) : self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Slider field\n\t        */\n\t        _fieldSlider: function( input_def ) {\n\t            var self = this;\n\t            return new Ui.Slider.View({\n\t                id          : 'field-' + input_def.id,\n\t                precise     : input_def.type == 'float',\n\t                is_workflow : input_def.is_workflow,\n\t                min         : input_def.min,\n\t                max         : input_def.max,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Hidden field\n\t        */\n\t        _fieldHidden: function( input_def ) {\n\t            return new Ui.Hidden({\n\t                id          : 'field-' + input_def.id,\n\t                info        : input_def.info\n\t            });\n\t        },\n\t\n\t        /** Boolean field\n\t        */\n\t        _fieldBoolean: function( input_def ) {\n\t            var self = this;\n\t            return new Ui.RadioButton.View({\n\t                id          : 'field-' + input_def.id,\n\t                data        : [ { label : 'Yes', value : 'true'  },\n\t                                { label : 'No',  value : 'false' }],\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Color picker field\n\t        */\n\t        _fieldColor: function( input_def ) {\n\t            var self = this;\n\t            return new ColorPicker({\n\t                id          : 'field-' + input_def.id,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Library dataset field\n\t        */\n\t        _fieldLibrary: function( input_def ) {\n\t            var self = this;\n\t            return new SelectLibrary.View({\n\t                id          : 'field-' + input_def.id,\n\t                optional    : input_def.optional,\n\t                multiple    : input_def.multiple,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        },\n\t\n\t        /** FTP file field\n\t        */\n\t        _fieldFtp: function( input_def ) {\n\t            var self = this;\n\t            return new SelectFtp.View({\n\t                id          : 'field-' + input_def.id,\n\t                optional    : input_def.optional,\n\t                multiple    : input_def.multiple,\n\t                onchange    : function() {\n\t                    self.app.trigger( 'change' );\n\t                }\n\t            });\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(14), __webpack_require__(9), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Table, Portlet, Ui) {\n\t\n\t/** This class creates a ui component which enables the dynamic creation of portlets\n\t*/\n\tvar View = Backbone.View.extend({\n\t    initialize : function(options) {\n\t        var self = this;\n\t        this.options = Utils.merge(options, {\n\t            title       : 'Section',\n\t            empty_text  : 'Not available.',\n\t            max         : null,\n\t            min         : null\n\t        });\n\t        this.setElement('<div/>');\n\t\n\t        // create button\n\t        this.button_new = new Ui.ButtonIcon({\n\t            icon    : 'fa-plus',\n\t            title   : 'Insert ' + this.options.title_new,\n\t            tooltip : 'Add new ' + this.options.title_new + ' block',\n\t            floating: 'clear',\n\t            onclick : function() {\n\t                if (options.onnew) {\n\t                    options.onnew();\n\t                }\n\t            }\n\t        });\n\t\n\t        // create table\n\t        this.table = new Table.View({\n\t            cls     : 'ui-table-plain',\n\t            content : ''\n\t        });\n\t        this.$el.append(this.table.$el);\n\t        this.$el.append($('<div/>').append(this.button_new.$el));\n\t\n\t        // reset list\n\t        this.list = {};\n\t        this.n = 0;\n\t    },\n\t\n\t    /** Number of repeat blocks\n\t    */\n\t    size: function() {\n\t        return this.n;\n\t    },\n\t\n\t    /** Add new repeat block\n\t    */\n\t    add: function(options) {\n\t        if (!options.id || this.list[options.id]) {\n\t            Galaxy.emit.debug('form-repeat::add()', 'Duplicate repeat block id.');\n\t            return;\n\t        }\n\t        this.n++;\n\t        var button_delete = new Ui.ButtonIcon({\n\t            icon    : 'fa-trash-o',\n\t            tooltip : 'Delete this repeat block',\n\t            cls     : 'ui-button-icon-plain',\n\t            onclick : function() {\n\t                if (options.ondel) {\n\t                    options.ondel();\n\t                }\n\t            }\n\t        });\n\t        var portlet = new Portlet.View({\n\t            id              : options.id,\n\t            title           : 'placeholder',\n\t            cls             : 'ui-portlet-repeat',\n\t            operations      : {\n\t                button_delete : button_delete\n\t            }\n\t        });\n\t        portlet.append(options.$el);\n\t        portlet.$el.addClass('section-row');\n\t        this.list[options.id] = portlet;\n\t        this.table.add(portlet.$el);\n\t        this.table.append('row_' + options.id, true);\n\t        if (this.options.max > 0 && this.n >= this.options.max) {\n\t            this.button_new.disable();\n\t        }\n\t        this._refresh();\n\t    },\n\t\n\t    /** Delete repeat block\n\t    */\n\t    del: function(id) {\n\t        if (!this.list[id]) {\n\t            Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n\t            return;\n\t        }\n\t        this.n--;\n\t        var table_row = this.table.get('row_' + id);\n\t        table_row.remove();\n\t        delete this.list[id];\n\t        this.button_new.enable();\n\t        this._refresh();\n\t    },\n\t\n\t    /** Hides add/del options\n\t    */\n\t    hideOptions: function() {\n\t        this.button_new.$el.hide();\n\t        _.each( this.list, function( portlet ) {\n\t            portlet.hideOperation('button_delete');\n\t        });\n\t        if( _.isEmpty( this.list ) ) {\n\t            this.$el.append( $('<div/>').addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n\t        }\n\t    },\n\t\n\t    /** Refresh view\n\t    */\n\t    _refresh: function() {\n\t        var index = 0;\n\t        for (var id in this.list) {\n\t            var portlet = this.list[id];\n\t            portlet.title(++index + ': ' + this.options.title);\n\t            if (this.n > this.options.min) {\n\t                portlet.showOperation('button_delete');\n\t            } else {\n\t                portlet.hideOperation('button_delete');\n\t            }\n\t        }\n\t    }\n\t});\n\t\n\treturn {\n\t    View : View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, jQuery, _, $) {/**\n\t    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4),\n\t        __webpack_require__(14),\n\t        __webpack_require__(7),\n\t        __webpack_require__(9),\n\t        __webpack_require__(37),\n\t        __webpack_require__(35),\n\t        __webpack_require__(36)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Table, Ui, Portlet, Repeat, InputElement, Parameters) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function(app, options) {\n\t            this.app = app;\n\t            this.inputs = options.inputs;\n\t\n\t            // fix table style\n\t            options.cls = 'ui-table-plain';\n\t\n\t            // add table class for tr tag\n\t            // this assist in transforming the form into a json structure\n\t            options.cls_tr = 'section-row';\n\t\n\t            // create/render views\n\t            this.table = new Table.View(options);\n\t            this.parameters = new Parameters(app, options);\n\t            this.setElement(this.table.$el);\n\t            this.render();\n\t        },\n\t\n\t        /** Render section view\n\t        */\n\t        render: function() {\n\t            this.table.delAll();\n\t            for (var i in this.inputs) {\n\t                this.add(this.inputs[i]);\n\t            }\n\t        },\n\t\n\t        /** Add a new input element\n\t        */\n\t        add: function(input) {\n\t            var self = this;\n\t            var input_def = jQuery.extend(true, {}, input);\n\t            input_def.id = input.id = Utils.uid();\n\t\n\t            // add to sequential list of inputs\n\t            this.app.input_list[input_def.id] = input_def;\n\t\n\t            // identify field type\n\t            var type = input_def.type;\n\t            switch(type) {\n\t                case 'conditional':\n\t                    this._addConditional(input_def);\n\t                    break;\n\t                case 'repeat':\n\t                    this._addRepeat(input_def);\n\t                    break;\n\t                case 'section':\n\t                    this._addSection(input_def);\n\t                    break;\n\t                default:\n\t                    this._addRow(input_def);\n\t            }\n\t        },\n\t\n\t        /** Add a conditional block\n\t        */\n\t        _addConditional: function(input_def) {\n\t            var self = this;\n\t            input_def.test_param.id = input_def.id;\n\t            this.app.options.sustain_conditionals && ( input_def.test_param.disabled = true );\n\t            var field = this._addRow( input_def.test_param );\n\t\n\t            // set onchange event for test parameter\n\t            field.options.onchange = function(value) {\n\t                var selectedCase = self.app.data.matchCase(input_def, value);\n\t                for (var i in input_def.cases) {\n\t                    var case_def = input_def.cases[i];\n\t                    var section_id = input_def.id + '-section-' + i;\n\t                    var section_row = self.table.get(section_id);\n\t                    var nonhidden = false;\n\t                    for (var j in case_def.inputs) {\n\t                        if (!case_def.inputs[j].hidden) {\n\t                            nonhidden = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (i == selectedCase && nonhidden) {\n\t                        section_row.fadeIn('fast');\n\t                    } else {\n\t                        section_row.hide();\n\t                    }\n\t                }\n\t                self.app.trigger('change');\n\t            };\n\t\n\t            // add conditional sub sections\n\t            for (var i in input_def.cases) {\n\t                var sub_section_id = input_def.id + '-section-' + i;\n\t                var sub_section = new View(this.app, {\n\t                    inputs  : input_def.cases[i].inputs\n\t                });\n\t                sub_section.$el.addClass('ui-table-section');\n\t                this.table.add(sub_section.$el);\n\t                this.table.append(sub_section_id);\n\t            }\n\t\n\t            // trigger refresh on conditional input field after all input elements have been created\n\t            field.trigger('change');\n\t        },\n\t\n\t        /** Add a repeat block\n\t        */\n\t        _addRepeat: function(input_def) {\n\t            var self = this;\n\t            var block_index = 0;\n\t\n\t            // create repeat block element\n\t            var repeat = new Repeat.View({\n\t                title           : input_def.title || 'Repeat',\n\t                title_new       : input_def.title || '',\n\t                min             : input_def.min,\n\t                max             : input_def.max,\n\t                onnew           : function() {\n\t                    create(input_def.inputs);\n\t                    self.app.trigger('change');\n\t                }\n\t            });\n\t\n\t            // helper function to create new repeat blocks\n\t            function create (inputs) {\n\t                var sub_section_id = input_def.id + '-section-' + (block_index++);\n\t                var sub_section = new View(self.app, {\n\t                    inputs  : inputs\n\t                });\n\t                repeat.add({\n\t                    id      : sub_section_id,\n\t                    $el     : sub_section.$el,\n\t                    ondel   : function() {\n\t                        repeat.del(sub_section_id);\n\t                        self.app.trigger('change');\n\t                    }\n\t                });\n\t            }\n\t\n\t            //\n\t            // add parsed/minimum number of repeat blocks\n\t            //\n\t            var n_cache = _.size( input_def.cache );\n\t            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min ), input_def.default ); i++ ) {\n\t                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n\t            }\n\t\n\t            // hide options\n\t            this.app.options.sustain_repeats && repeat.hideOptions();\n\t\n\t            // create input field wrapper\n\t            var input_element = new InputElement(this.app, {\n\t                label   : input_def.title || input_def.name,\n\t                help    : input_def.help,\n\t                field   : repeat\n\t            });\n\t            this.table.add(input_element.$el);\n\t            this.table.append(input_def.id);\n\t        },\n\t\n\t        /** Add a customized section\n\t        */\n\t        _addSection: function(input_def) {\n\t            var self = this;\n\t\n\t            // create sub section\n\t            var sub_section = new View(self.app, {\n\t                inputs  : input_def.inputs\n\t            });\n\t\n\t            // delete button\n\t            var button_visible = new Ui.ButtonIcon({\n\t                icon    : 'fa-eye-slash',\n\t                tooltip : 'Show/hide section',\n\t                cls     : 'ui-button-icon-plain'\n\t            });\n\t\n\t            // create portlet for sub section\n\t            var portlet = new Portlet.View({\n\t                title       : input_def.title || input_def.name,\n\t                cls         : 'ui-portlet-section',\n\t                collapsible : true,\n\t                collapsed   : true,\n\t                operations  : {\n\t                    button_visible: button_visible\n\t                }\n\t            });\n\t            portlet.append( sub_section.$el );\n\t            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n\t            portlet.setOperation( 'button_visible', function() {\n\t                if( portlet.collapsed ) {\n\t                    portlet.expand();\n\t                } else {\n\t                    portlet.collapse();\n\t                }\n\t            });\n\t\n\t            // add expansion event handler\n\t            portlet.on( 'expanded', function() {\n\t                button_visible.setIcon( 'fa-eye' );\n\t            });\n\t            portlet.on( 'collapsed', function() {\n\t                button_visible.setIcon( 'fa-eye-slash' );\n\t            });\n\t            this.app.on( 'expand', function( input_id ) {\n\t                ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand();\n\t            });\n\t\n\t            // show sub section if requested\n\t            input_def.expanded && portlet.expand();\n\t\n\t            // create table row\n\t            this.table.add(portlet.$el);\n\t            this.table.append(input_def.id);\n\t        },\n\t\n\t        /** Add a single input field element\n\t        */\n\t        _addRow: function(input_def) {\n\t            var id = input_def.id;\n\t            var field = this.parameters.create(input_def);\n\t            this.app.field_list[id] = field;\n\t            var input_element = new InputElement(this.app, {\n\t                name                : input_def.name,\n\t                label               : input_def.label || input_def.name,\n\t                value               : input_def.value,\n\t                text_value          : input_def.text_value || input_def.value,\n\t                collapsible_value   : input_def.collapsible_value,\n\t                collapsible_preview : input_def.collapsible_preview,\n\t                help                : input_def.help,\n\t                argument            : input_def.argument,\n\t                disabled            : input_def.disabled,\n\t                field               : field\n\t            });\n\t            this.app.element_list[id] = input_element;\n\t            this.table.add(input_element.$el);\n\t            this.table.append(id);\n\t            input_def.hidden && this.table.get(id).hide();\n\t            return field;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(7), __webpack_require__(27)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Ui, Tabs) {\n\t// hda/hdca content selector ui element\n\tvar View = Backbone.View.extend({\n\t    // initialize\n\t    initialize : function(app, options) {\n\t        // link app and options\n\t        this.app = app;\n\t        this.options = options;\n\t\n\t        // track current history elements\n\t        this.history = {};\n\t\n\t\n\t        // link this\n\t        var self = this;\n\t\n\t        // add element\n\t        this.setElement('<div class=\"ui-select-content\"/>');\n\t\n\t        // list of select fieldsFormSection\n\t        this.list = {};\n\t\n\t        // radio button options\n\t        var radio_buttons = [];\n\t\n\t        // identify selector type\n\t        if (options.type == 'data_collection') {\n\t            this.mode = 'collection';\n\t        } else {\n\t            if (options.multiple) {\n\t                this.mode = 'multiple';\n\t            } else {\n\t                this.mode = 'single';\n\t            }\n\t        }\n\t\n\t        // set initial state\n\t        this.current = this.mode;\n\t        this.list = {};\n\t\n\t        // error messages\n\t        var extensions = Utils.textify(options.extensions);\n\t        var hda_error = 'No dataset available.';\n\t        if (extensions) {\n\t            hda_error = 'No ' + extensions + ' dataset available.';\n\t        }\n\t        var hdca_error = 'No dataset list available.';\n\t        if (extensions) {\n\t            hdca_error = 'No ' + extensions + ' dataset collection available.';\n\t        }\n\t\n\t        // add single dataset selector\n\t        if (this.mode == 'single') {\n\t            radio_buttons.push({\n\t                icon    : 'fa-file-o',\n\t                value   : 'single',\n\t                tooltip : 'Single dataset'\n\t            });\n\t            this.select_single = new Ui.Select.View({\n\t                optional    : options.optional,\n\t                error_text  : hda_error,\n\t                onchange    : function() {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t            this.list['single'] = {\n\t                field: this.select_single,\n\t                type : 'hda'\n\t            };\n\t        }\n\t\n\t        // add multiple dataset selector\n\t        if (this.mode == 'single' || this.mode == 'multiple') {\n\t            radio_buttons.push({\n\t                icon    : 'fa-files-o',\n\t                value   : 'multiple',\n\t                tooltip : 'Multiple datasets'\n\t            });\n\t            this.select_multiple = new Ui.Select.View({\n\t                multiple    : true,\n\t                searchable  : false,\n\t                optional    : options.optional,\n\t                error_text  : hda_error,\n\t                onchange    : function() {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t            this.list['multiple'] = {\n\t                field: this.select_multiple,\n\t                type : 'hda'\n\t            };\n\t        }\n\t\n\t        // add collection selector\n\t        if (this.mode == 'single' || this.mode == 'multiple' || this.mode == 'collection') {\n\t            radio_buttons.push({\n\t                icon    : 'fa-folder-o',\n\t                value   : 'collection',\n\t                tooltip : 'Dataset collection'\n\t            });\n\t            var multiple = this.mode == 'multiple';\n\t            this.select_collection = new Ui.Select.View({\n\t                error_text  : hdca_error,\n\t                multiple    : multiple,\n\t                searchable  : false,\n\t                optional    : options.optional,\n\t                onchange    : function() {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t            this.list['collection'] = {\n\t                field: this.select_collection,\n\t                type : 'hdca'\n\t            };\n\t        }\n\t\n\t        // create button\n\t        this.button_type = new Ui.RadioButton.View({\n\t            value   : this.current,\n\t            data    : radio_buttons,\n\t            onchange: function(value) {\n\t                self.current = value;\n\t                self.refresh();\n\t                self.trigger('change');\n\t            }\n\t        });\n\t\n\t        // add batch mode information\n\t        this.$batch = $(this.template_batch());\n\t\n\t        // number of radio buttons\n\t        var n_buttons = _.size(this.list);\n\t\n\t        // add button to dom\n\t        var button_width = 0;\n\t        if (n_buttons > 1) {\n\t            this.$el.append(this.button_type.$el);\n\t            button_width = Math.max(0, _.size(this.list) * 35) + 'px';\n\t        }\n\t\n\t        // append field elements\n\t        for (var i in this.list) {\n\t            this.$el.append(this.list[i].field.$el.css({\n\t                'margin-left': button_width\n\t            }));\n\t        }\n\t\n\t        // append batch message\n\t        this.$el.append(this.$batch.css({\n\t            'margin-left': button_width\n\t        }));\n\t\n\t        // update options\n\t        this.update(options.data);\n\t\n\t        // set initial value\n\t        if (this.options.value !== undefined) {\n\t            this.value(this.options.value);\n\t        }\n\t\n\t        // refresh view\n\t        this.refresh();\n\t\n\t        // add change event. fires on trigger\n\t        this.on('change', function() {\n\t            if (options.onchange) {\n\t                options.onchange(self.value());\n\t            }\n\t        });\n\t    },\n\t\n\t    /** Indicate that select fields are being updated */\n\t    wait: function() {\n\t        for (var i in this.list) {\n\t            this.list[i].field.wait();\n\t        }\n\t    },\n\t\n\t    /** Indicate that the options update has been completed */\n\t    unwait: function() {\n\t        for (var i in this.list) {\n\t            this.list[i].field.unwait();\n\t        }\n\t    },\n\t\n\t    /** Update content selector */\n\t    update: function(options) {\n\t        // update a particular select field\n\t        var self = this;\n\t        function _update(field, options) {\n\t            if (field) {\n\t                // identify available options\n\t                var select_options = [];\n\t                for (var i in options) {\n\t                    var item = options[i];\n\t                    select_options.push({\n\t                        hid  : item.hid,\n\t                        label: item.hid + ': ' + item.name,\n\t                        value: item.id\n\t                    });\n\t                    // backup to local history\n\t                    self.history[item.id + '_' + item.src] = item;\n\t                }\n\t                // update field\n\t                field.add( select_options, function( a, b ) { return b.hid - a.hid } );\n\t            }\n\t        }\n\t\n\t        // update available options\n\t        _update(this.select_single, options.hda);\n\t        _update(this.select_multiple, options.hda);\n\t        _update(this.select_collection, options.hdca);\n\t    },\n\t\n\t    /** Return the currently selected dataset values */\n\t    value : function (new_value) {\n\t        // update current value\n\t        if (new_value !== undefined) {\n\t            if (new_value && new_value.values) {\n\t                try {\n\t                    // create list with values\n\t                    var list = [];\n\t                    for (var i in new_value.values) {\n\t                        list.push(new_value.values[i].id);\n\t                    }\n\t\n\t                    // identify suitable select field\n\t                    if (new_value && new_value.values.length > 0 && new_value.values[0].src == 'hdca') {\n\t                        this.current = 'collection';\n\t                        this.select_collection.value(list);\n\t                    } else {\n\t                        if (this.mode == 'multiple') {\n\t                            this.current = 'multiple';\n\t                            this.select_multiple.value(list);\n\t                        } else {\n\t                            this.current = 'single';\n\t                            this.select_single.value(list[0]);\n\t                        }\n\t                    }\n\t                } catch (err) {\n\t                    Galaxy.emit.debug('tools-select-content::value()', 'Skipped.');\n\t                }\n\t            } else {\n\t                for (var i in this.list) {\n\t                    this.list[i].field.value(null);\n\t                }\n\t            }\n\t        }\n\t\n\t        // refresh view\n\t        this.refresh();\n\t\n\t        // validate value\n\t        var id_list = this._select().value();\n\t        if (id_list === null) {\n\t            return null;\n\t        }\n\t\n\t        // transform into an array\n\t        if (!(id_list instanceof Array)) {\n\t            id_list = [id_list];\n\t        }\n\t\n\t        // check if value exists\n\t        if (id_list.length === 0) {\n\t            return null;\n\t        }\n\t\n\t        // prepare result dict\n\t        var result = {\n\t            batch   : this._batch(),\n\t            values  : []\n\t        }\n\t\n\t        // append to dataset ids\n\t        for (var i in id_list) {\n\t            var details = this.history[id_list[i] + '_' + this.list[this.current].type];\n\t            if (details) {\n\t                result.values.push(details);\n\t            } else {\n\t                return null;\n\t            }\n\t        }\n\t\n\t        // sort by history ids\n\t        result.values.sort(function(a, b){\n\t            return a.hid - b.hid;\n\t        });\n\t\n\t        // return\n\t        return result;\n\t    },\n\t\n\t    /** Refreshes data selection view */\n\t    refresh: function() {\n\t        this.button_type.value(this.current);\n\t        for (var i in this.list) {\n\t            var $el = this.list[i].field.$el;\n\t            if (this.current == i) {\n\t                $el.show();\n\t            } else {\n\t                $el.hide();\n\t            }\n\t        }\n\t        if (this._batch()) {\n\t            this.$batch.show();\n\t        } else {\n\t            this.$batch.hide();\n\t        }\n\t    },\n\t\n\t    /** Assists in selecting the current field */\n\t    _select: function() {\n\t        return this.list[this.current].field;\n\t    },\n\t\n\t    /** Assists in identifying the batch mode */\n\t    _batch: function() {\n\t        if (this.current == 'collection') {\n\t            var hdca = this.history[this._select().value() + '_hdca'];\n\t            if (hdca && hdca.map_over_type) {\n\t                return true;\n\t            }\n\t        }\n\t        if (this.current != 'single') {\n\t            if (this.mode == 'single') {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /** Batch message template */\n\t    template_batch: function() {\n\t        return  '<div class=\"ui-form-info\">' +\n\t                    '<i class=\"fa fa-sitemap\" style=\"font-size: 1.2em; padding: 2px 5px;\"/>' +\n\t                    'This is a batch mode input field. A separate job will be triggered for each dataset.' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This is the main class of the form plugin. It is referenced as 'app' in all lower level modules.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(7), __webpack_require__(38), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Portlet, Ui, FormSection, FormData) {\n\t    return Backbone.View.extend({\n\t        initialize: function(options) {\n\t            this.options = Utils.merge(options, {\n\t                initial_errors  : false,\n\t                cls             : 'ui-portlet-limited',\n\t                icon            : ''\n\t            });\n\t            this.modal = ( parent.Galaxy && parent.Galaxy.modal ) || new Ui.Modal.View();\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function(new_model){\n\t            var self = this;\n\t            this.data.matchModel(new_model, function(input_id, node) {\n\t                var input = self.input_list[input_id];\n\t                if (input && input.options) {\n\t                    if (!_.isEqual(input.options, node.options)) {\n\t                        // backup new options\n\t                        input.options = node.options;\n\t\n\t                        // get/update field\n\t                        var field = self.field_list[input_id];\n\t                        if (field.update) {\n\t                            var new_options = [];\n\t                            if ((['data', 'data_collection', 'drill_down']).indexOf(input.type) != -1) {\n\t                                new_options = input.options;\n\t                            } else {\n\t                                for (var i in node.options) {\n\t                                    var opt = node.options[i];\n\t                                    if (opt.length > 2) {\n\t                                        new_options.push({\n\t                                            'label': opt[0],\n\t                                            'value': opt[1]\n\t                                        });\n\t                                    }\n\t                                }\n\t                            }\n\t                            field.update(new_options);\n\t                            field.trigger('change');\n\t                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Set form into wait mode */\n\t        wait: function(active) {\n\t            for (var i in this.input_list) {\n\t                var field = this.field_list[i];\n\t                var input = this.input_list[i];\n\t                if (input.is_dynamic && field.wait && field.unwait) {\n\t                    if (active) {\n\t                        field.wait();\n\t                    } else {\n\t                        field.unwait();\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlight and scroll to input element (currently only used for error notifications)\n\t        */\n\t        highlight: function (input_id, message, silent) {\n\t            // get input field\n\t            var input_element = this.element_list[input_id];\n\t\n\t            // check input element\n\t            if (input_element) {\n\t                // mark error\n\t                input_element.error(message || 'Please verify this parameter.');\n\t\n\t                // trigger expand event for parent containers\n\t                this.trigger('expand', input_id);\n\t\n\t                // scroll to first input element\n\t                if (!silent) {\n\t                    if (self==top) {\n\t                        var $panel = this.$el.parents().filter(function() {\n\t                            return $(this).css('overflow') == 'auto';\n\t                        }).first();\n\t                        $panel.animate({ scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 50 }, 500);\n\t                    } else {\n\t                        $('html, body').animate({ scrollTop : input_element.$el.offset().top - 20 }, 500);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlights errors\n\t        */\n\t        errors: function(options) {\n\t            // hide previous error statements\n\t            this.trigger('reset');\n\t\n\t            // highlight all errors\n\t            if (options && options.errors) {\n\t                var error_messages = this.data.matchResponse(options.errors);\n\t                for (var input_id in this.element_list) {\n\t                    var input = this.element_list[input_id];\n\t                    if (error_messages[input_id]) {\n\t                        this.highlight(input_id, error_messages[input_id], true);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Render tool form\n\t        */\n\t        render: function() {\n\t            // link this\n\t            var self = this;\n\t\n\t            // reset events\n\t            this.off('change');\n\t            this.off('reset');\n\t\n\t            // reset field list, which contains the input field elements\n\t            this.field_list = {};\n\t\n\t            // reset sequential input definition list, which contains the input definitions as provided from the api\n\t            this.input_list = {};\n\t\n\t            // reset input element list, which contains the dom elements of each input element (includes also the input field)\n\t            this.element_list = {};\n\t\n\t            // creates a json data structure from the input form\n\t            this.data = new FormData.Manager(this);\n\t\n\t            // create ui elements\n\t            this._renderForm();\n\t\n\t            // refresh data\n\t            this.data.create();\n\t\n\t            // show errors on startup\n\t            if (this.options.initial_errors) {\n\t                this.errors(this.options);\n\t            }\n\t\n\t            // add listener which triggers on checksum change\n\t            var current_check = this.data.checksum();\n\t            this.on('change', function() {\n\t                var new_check = self.data.checksum();\n\t                if (new_check != current_check) {\n\t                    current_check = new_check;\n\t                    self.options.onchange && self.options.onchange();\n\t                }\n\t            });\n\t\n\t            // add reset listener\n\t            this.on('reset', function() {\n\t                for (var i in this.element_list) {\n\t                    this.element_list[i].reset();\n\t                }\n\t            });\n\t            return this;\n\t        },\n\t\n\t        /** Renders the UI elements required for the form\n\t        */\n\t        _renderForm: function() {\n\t            // create message view\n\t            this.message = new Ui.Message();\n\t\n\t            // create tool form section\n\t            this.section = new FormSection.View(this, {\n\t                inputs : this.options.inputs\n\t            });\n\t\n\t            // remove tooltips\n\t            $( '.tooltip' ).remove();\n\t\n\t            // create portlet\n\t            this.portlet = new Portlet.View({\n\t                icon        : this.options.icon,\n\t                title       : this.options.title,\n\t                cls         : this.options.cls,\n\t                operations  : this.options.operations,\n\t                buttons     : this.options.buttons,\n\t                collapsible : this.options.collapsible,\n\t                collapsed   : this.options.collapsed\n\t            });\n\t\n\t            // append message\n\t            this.portlet.append(this.message.$el);\n\t\n\t            // append tool section\n\t            this.portlet.append(this.section.$el);\n\t\n\t            // start form\n\t            this.$el.empty();\n\t            this.$el.append(this.portlet.$el);\n\t\n\t            // show message if available in model\n\t            if (this.options.message) {\n\t                this.message.update({\n\t                    persistent  : true,\n\t                    status      : 'warning',\n\t                    message     : this.options.message\n\t                });\n\t            }\n\t\n\t            // log\n\t            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {/**\n\t    This is the base class of the tool form plugin. This class is e.g. inherited by the regular and the workflow tool form.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(57), __webpack_require__(7), __webpack_require__(40),\n\t        __webpack_require__(20), __webpack_require__(18), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Deferred, Ui, FormBase, ToolTemplate, CitationModel, CitationView) {\n\t    return FormBase.extend({\n\t        initialize: function(options) {\n\t            var self = this;\n\t            FormBase.prototype.initialize.call(this, options);\n\t            this.deferred = new Deferred();\n\t            if (options.inputs) {\n\t                this._buildForm(options);\n\t                options.needs_update && this.deferred.execute( function( process ) {\n\t                    self._updateModel( process );\n\t                });\n\t            } else {\n\t                this.deferred.execute(function(process) {\n\t                    self._buildModel(process, options, true);\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Wait for deferred build processes before removal */\n\t        remove: function() {\n\t            var self = this;\n\t            this.$el.hide();\n\t            this.deferred.execute(function(){\n\t                FormBase.prototype.remove.call(self);\n\t                Galaxy.emit.debug('tool-form-base::remove()', 'Destroy view.');\n\t            });\n\t        },\n\t\n\t        /** Build form */\n\t        _buildForm: function(options) {\n\t            var self = this;\n\t            this.options = Utils.merge(options, this.options);\n\t            this.options = Utils.merge({\n\t                icon            : ( (options.icon === undefined) && 'fa-wrench' ) || '',\n\t                title           : '<b>' + options.name + '</b> ' + options.description + ' (Galaxy Version ' + options.version + ')',\n\t                operations      : this._operations(),\n\t                onchange        : function() {\n\t                    self.deferred.reset();\n\t                    self.deferred.execute(function(process) {\n\t                        self._updateModel(process);\n\t                    });\n\t                }\n\t            }, this.options);\n\t            this.options.customize && this.options.customize( this.options );\n\t            this.render();\n\t            if ( !this.options.collapsible ) {\n\t                this.$el.append( $( '<div/>' ).addClass( 'ui-margin-top-large' ).append( this._footer() ) );\n\t            }\n\t        },\n\t\n\t        /** Builds a new model through api call and recreates the entire form\n\t        */\n\t        _buildModel: function(process, options, hide_message) {\n\t            var self = this;\n\t            this.options.id = options.id;\n\t            this.options.version = options.version;\n\t\n\t            // build request url\n\t            var build_url = '';\n\t            var build_data = {};\n\t            if ( options.job_id ) {\n\t                build_url = Galaxy.root + 'api/jobs/' + options.job_id + '/build_for_rerun';\n\t            } else {\n\t                build_url = Galaxy.root + 'api/tools/' + options.id + '/build';\n\t                if ( Galaxy.params && Galaxy.params.tool_id == options.id ) {\n\t                    build_data = $.extend( {}, Galaxy.params );\n\t                    options.version && ( build_data[ 'tool_version' ] = options.version );\n\t                }\n\t            }\n\t\n\t            // get initial model\n\t            Utils.request({\n\t                type    : 'GET',\n\t                url     : build_url,\n\t                data    : build_data,\n\t                success : function(new_model) {\n\t                    self._buildForm(new_model['tool_model'] || new_model);\n\t                    !hide_message && self.message.update({\n\t                        status      : 'success',\n\t                        message     : 'Now you are using \\'' + self.options.name + '\\' version ' + self.options.version + ', id \\'' + self.options.id + '\\'.',\n\t                        persistent  : false\n\t                    });\n\t                    Galaxy.emit.debug('tool-form-base::initialize()', 'Initial tool model ready.', new_model);\n\t                    process.resolve();\n\t\n\t                },\n\t                error   : function(response) {\n\t                    var error_message = ( response && response.err_msg ) || 'Uncaught error.';\n\t                    if ( self.$el.is(':empty') ) {\n\t                        self.$el.prepend((new Ui.Message({\n\t                            message     : error_message,\n\t                            status      : 'danger',\n\t                            persistent  : true,\n\t                            large       : true\n\t                        })).$el);\n\t                    } else {\n\t                        Galaxy.modal.show({\n\t                            title   : 'Tool request failed',\n\t                            body    : error_message,\n\t                            buttons : {\n\t                                'Close' : function() {\n\t                                    Galaxy.modal.hide();\n\t                                }\n\t                            }\n\t                        });\n\t                    }\n\t                    Galaxy.emit.debug('tool-form::initialize()', 'Initial tool model request failed.', response);\n\t                    process.reject();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Request a new model for an already created tool form and updates the form inputs\n\t        */\n\t        _updateModel: function(process) {\n\t            // link this\n\t            var self = this;\n\t            var model_url = this.options.update_url || Galaxy.root + 'api/tools/' + this.options.id + '/build';\n\t            var current_state = {\n\t                tool_id         : this.options.id,\n\t                tool_version    : this.options.version,\n\t                inputs          : $.extend(true, {}, self.data.create())\n\t            }\n\t            this.wait(true);\n\t\n\t            // log tool state\n\t            Galaxy.emit.debug('tool-form-base::_updateModel()', 'Sending current state.', current_state);\n\t\n\t            // post job\n\t            Utils.request({\n\t                type    : 'POST',\n\t                url     : model_url,\n\t                data    : current_state,\n\t                success : function(new_model) {\n\t                    self.update(new_model['tool_model'] || new_model);\n\t                    self.options.update && self.options.update(new_model);\n\t                    self.wait(false);\n\t                    Galaxy.emit.debug('tool-form-base::_updateModel()', 'Received new model.', new_model);\n\t                    process.resolve();\n\t                },\n\t                error   : function(response) {\n\t                    Galaxy.emit.debug('tool-form-base::_updateModel()', 'Refresh request failed.', response);\n\t                    process.reject();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Create tool operation menu\n\t        */\n\t        _operations: function() {\n\t            var self = this;\n\t            var options = this.options;\n\t\n\t            // button for version selection\n\t            var versions_button = new Ui.ButtonMenu({\n\t                icon    : 'fa-cubes',\n\t                title   : (!options.narrow && 'Versions') || null,\n\t                tooltip : 'Select another tool version'\n\t            });\n\t            if (!options.sustain_version && options.versions && options.versions.length > 1) {\n\t                for (var i in options.versions) {\n\t                    var version = options.versions[i];\n\t                    if (version != options.version) {\n\t                        versions_button.addMenu({\n\t                            title   : 'Switch to ' + version,\n\t                            version : version,\n\t                            icon    : 'fa-cube',\n\t                            onclick : function() {\n\t                                // here we update the tool version (some tools encode the version also in the id)\n\t                                var id = options.id.replace(options.version, this.version);\n\t                                var version = this.version;\n\t                                // queue model request\n\t                                self.deferred.reset();\n\t                                self.deferred.execute(function(process) {\n\t                                    self._buildModel(process, {id: id, version: version})\n\t                                });\n\t                            }\n\t                        });\n\t                    }\n\t                }\n\t            } else {\n\t                versions_button.$el.hide();\n\t            }\n\t\n\t            // button for options e.g. search, help\n\t            var menu_button = new Ui.ButtonMenu({\n\t                icon    : 'fa-caret-down',\n\t                title   : (!options.narrow && 'Options') || null,\n\t                tooltip : 'View available options'\n\t            });\n\t            if(options.biostar_url) {\n\t                menu_button.addMenu({\n\t                    icon    : 'fa-question-circle',\n\t                    title   : 'Question?',\n\t                    tooltip : 'Ask a question about this tool (Biostar)',\n\t                    onclick : function() {\n\t                        window.open(options.biostar_url + '/p/new/post/');\n\t                    }\n\t                });\n\t                menu_button.addMenu({\n\t                    icon    : 'fa-search',\n\t                    title   : 'Search',\n\t                    tooltip : 'Search help for this tool (Biostar)',\n\t                    onclick : function() {\n\t                        window.open(options.biostar_url + '/local/search/page/?q=' + options.name);\n\t                    }\n\t                });\n\t            };\n\t            menu_button.addMenu({\n\t                icon    : 'fa-share',\n\t                title   : 'Share',\n\t                tooltip : 'Share this tool',\n\t                onclick : function() {\n\t                    prompt('Copy to clipboard: Ctrl+C, Enter', window.location.origin + Galaxy.root + 'root?tool_id=' + options.id);\n\t                }\n\t            });\n\t\n\t            // add admin operations\n\t            if (Galaxy.user && Galaxy.user.get('is_admin')) {\n\t                menu_button.addMenu({\n\t                    icon    : 'fa-download',\n\t                    title   : 'Download',\n\t                    tooltip : 'Download this tool',\n\t                    onclick : function() {\n\t                        window.location.href = Galaxy.root + 'api/tools/' + options.id + '/download';\n\t                    }\n\t                });\n\t            }\n\t\n\t            // button for version selection\n\t            if (options.requirements && options.requirements.length > 0) {\n\t                menu_button.addMenu({\n\t                    icon    : 'fa-info-circle',\n\t                    title   : 'Requirements',\n\t                    tooltip : 'Display tool requirements',\n\t                    onclick : function() {\n\t                        if (!this.visible) {\n\t                            this.visible = true;\n\t                            self.message.update({\n\t                                persistent  : true,\n\t                                message     : ToolTemplate.requirements(options),\n\t                                status      : 'info'\n\t                            });\n\t                        } else {\n\t                            this.visible = false;\n\t                            self.message.update({\n\t                                message     : ''\n\t                            });\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t\n\t            // add toolshed url\n\t            if (options.sharable_url) {\n\t                menu_button.addMenu({\n\t                    icon    : 'fa-external-link',\n\t                    title   : 'See in Tool Shed',\n\t                    tooltip : 'Access the repository',\n\t                    onclick : function() {\n\t                        window.open(options.sharable_url);\n\t                    }\n\t                });\n\t            }\n\t\n\t            return {\n\t                menu        : menu_button,\n\t                versions    : versions_button\n\t            }\n\t        },\n\t\n\t        /** Create footer\n\t        */\n\t        _footer: function() {\n\t            var options = this.options;\n\t            var $el = $( '<div/>' ).append( ToolTemplate.help( options ) );\n\t            if ( options.citations ) {\n\t                var $citations = $( '<div/>' );\n\t                var citations = new CitationModel.ToolCitationCollection();\n\t                citations.tool_id = options.id;\n\t                var citation_list_view = new CitationView.CitationListView({ el: $citations, collection: citations });\n\t                citation_list_view.render();\n\t                citations.fetch();\n\t                $el.append( $citations );\n\t            }\n\t            return $el;\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/**\n\t * Model, view, and controller objects for Galaxy tools and tool panel.\n\t */\n\t\n\t !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(3),\n\t    __webpack_require__(17),\n\t    __webpack_require__(11),\n\t    __webpack_require__(19)\n\t\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, util, data, ToolForm) {\n\t    'use strict';\n\t\n\t/**\n\t * Mixin for tracking model visibility.\n\t */\n\tvar VisibilityMixin = {\n\t    hidden: false,\n\t\n\t    show: function() {\n\t        this.set(\"hidden\", false);\n\t    },\n\t\n\t    hide: function() {\n\t        this.set(\"hidden\", true);\n\t    },\n\t\n\t    toggle: function() {\n\t        this.set(\"hidden\", !this.get(\"hidden\"));\n\t    },\n\t\n\t    is_visible: function() {\n\t        return !this.attributes.hidden;\n\t    }\n\t\n\t};\n\t\n\t/**\n\t * A tool parameter.\n\t */\n\tvar ToolParameter = Backbone.Model.extend({\n\t    defaults: {\n\t        name: null,\n\t        label: null,\n\t        type: null,\n\t        value: null,\n\t        html: null,\n\t        num_samples: 5\n\t    },\n\t\n\t    initialize: function(options) {\n\t        this.attributes.html = unescape(this.attributes.html);\n\t    },\n\t\n\t    copy: function() {\n\t        return new ToolParameter(this.toJSON());\n\t    },\n\t\n\t    set_value: function(value) {\n\t        this.set('value', value || '');\n\t    }\n\t});\n\t\n\tvar ToolParameterCollection = Backbone.Collection.extend({\n\t    model: ToolParameter\n\t});\n\t\n\t/**\n\t * A data tool parameter.\n\t */\n\tvar DataToolParameter = ToolParameter.extend({});\n\t\n\t/**\n\t * An integer tool parameter.\n\t */\n\tvar IntegerToolParameter = ToolParameter.extend({\n\t    set_value: function(value) {\n\t        this.set('value', parseInt(value, 10));\n\t    },\n\t\n\t    /**\n\t     * Returns samples from a tool input.\n\t     */\n\t    get_samples: function() {\n\t        return d3.scale.linear()\n\t                        .domain([this.get('min'), this.get('max')])\n\t                        .ticks(this.get('num_samples'));\n\t    }\n\t});\n\t\n\tvar FloatToolParameter = IntegerToolParameter.extend({\n\t    set_value: function(value) {\n\t        this.set('value', parseFloat(value));\n\t    }\n\t});\n\t\n\t/**\n\t * A select tool parameter.\n\t */\n\tvar SelectToolParameter = ToolParameter.extend({\n\t    /**\n\t     * Returns tool options.\n\t     */\n\t    get_samples: function() {\n\t        return _.map(this.get('options'), function(option) {\n\t            return option[0];\n\t        });\n\t    }\n\t});\n\t\n\t// Set up dictionary of parameter types.\n\tToolParameter.subModelTypes = {\n\t    'integer': IntegerToolParameter,\n\t    'float': FloatToolParameter,\n\t    'data': DataToolParameter,\n\t    'select': SelectToolParameter\n\t};\n\t\n\t/**\n\t * A Galaxy tool.\n\t */\n\tvar Tool = Backbone.Model.extend({\n\t    // Default attributes.\n\t    defaults: {\n\t        id: null,\n\t        name: null,\n\t        description: null,\n\t        target: null,\n\t        inputs: [],\n\t        outputs: []\n\t    },\n\t\n\t    urlRoot: Galaxy.root + 'api/tools',\n\t\n\t    initialize: function(options) {\n\t\n\t        // Set parameters.\n\t        this.set('inputs', new ToolParameterCollection(_.map(options.inputs, function(p) {\n\t            var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n\t            return new p_class(p);\n\t        })));\n\t    },\n\t\n\t    /**\n\t     *\n\t     */\n\t    toJSON: function() {\n\t        var rval = Backbone.Model.prototype.toJSON.call(this);\n\t\n\t        // Convert inputs to JSON manually.\n\t        rval.inputs = this.get('inputs').map(function(i) { return i.toJSON(); });\n\t        return rval;\n\t    },\n\t\n\t    /**\n\t     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n\t     * client and server yet.\n\t     */\n\t    remove_inputs: function(types) {\n\t        var tool = this,\n\t            incompatible_inputs = tool.get('inputs').filter( function(input) {\n\t                return ( types.indexOf( input.get('type') ) !== -1);\n\t            });\n\t        tool.get('inputs').remove(incompatible_inputs);\n\t    },\n\t\n\t    /**\n\t     * Returns object copy, optionally including only inputs that can be sampled.\n\t     */\n\t    copy: function(only_samplable_inputs) {\n\t        var copy = new Tool(this.toJSON());\n\t\n\t        // Return only samplable inputs if flag is set.\n\t        if (only_samplable_inputs) {\n\t            var valid_inputs = new Backbone.Collection();\n\t            copy.get('inputs').each(function(input) {\n\t                if (input.get_samples()) {\n\t                    valid_inputs.push(input);\n\t                }\n\t            });\n\t            copy.set('inputs', valid_inputs);\n\t        }\n\t\n\t        return copy;\n\t    },\n\t\n\t    apply_search_results: function(results) {\n\t        ( _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide() );\n\t        return this.is_visible();\n\t    },\n\t\n\t    /**\n\t     * Set a tool input's value.\n\t     */\n\t    set_input_value: function(name, value) {\n\t        this.get('inputs').find(function(input) {\n\t            return input.get('name') === name;\n\t        }).set('value', value);\n\t    },\n\t\n\t    /**\n\t     * Set many input values at once.\n\t     */\n\t    set_input_values: function(inputs_dict) {\n\t        var self = this;\n\t        _.each(_.keys(inputs_dict), function(input_name) {\n\t            self.set_input_value(input_name, inputs_dict[input_name]);\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Run tool; returns a Deferred that resolves to the tool's output(s).\n\t     */\n\t    run: function() {\n\t        return this._run();\n\t    },\n\t\n\t    /**\n\t     * Rerun tool using regions and a target dataset.\n\t     */\n\t    rerun: function(target_dataset, regions) {\n\t        return this._run({\n\t            action: 'rerun',\n\t            target_dataset_id: target_dataset.id,\n\t            regions: regions\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns input dict for tool's inputs.\n\t     */\n\t    get_inputs_dict: function() {\n\t        var input_dict = {};\n\t        this.get('inputs').each(function(input) {\n\t            input_dict[input.get('name')] = input.get('value');\n\t        });\n\t        return input_dict;\n\t    },\n\t\n\t    /**\n\t     * Run tool; returns a Deferred that resolves to the tool's output(s).\n\t     * NOTE: this method is a helper method and should not be called directly.\n\t     */\n\t    _run: function(additional_params) {\n\t        // Create payload.\n\t        var payload = _.extend({\n\t                tool_id: this.id,\n\t                inputs: this.get_inputs_dict()\n\t            }, additional_params);\n\t\n\t        // Because job may require indexing datasets, use server-side\n\t        // deferred to ensure that job is run. Also use deferred that\n\t        // resolves to outputs from tool.\n\t        var run_deferred = $.Deferred(),\n\t            ss_deferred = new util.ServerStateDeferred({\n\t            ajax_settings: {\n\t                url: this.urlRoot,\n\t                data: JSON.stringify(payload),\n\t                dataType: \"json\",\n\t                contentType: 'application/json',\n\t                type: \"POST\"\n\t            },\n\t            interval: 2000,\n\t            success_fn: function(response) {\n\t                return response !== \"pending\";\n\t            }\n\t        });\n\t\n\t        // Run job and resolve run_deferred to tool outputs.\n\t        $.when(ss_deferred.go()).then(function(result) {\n\t            run_deferred.resolve(new data.DatasetCollection(result));\n\t        });\n\t        return run_deferred;\n\t    }\n\t});\n\t_.extend(Tool.prototype, VisibilityMixin);\n\t\n\t/**\n\t * Tool view.\n\t */\n\tvar ToolView = Backbone.View.extend({\n\t\n\t});\n\t\n\t/**\n\t * Wrap collection of tools for fast access/manipulation.\n\t */\n\tvar ToolCollection = Backbone.Collection.extend({\n\t    model: Tool\n\t});\n\t\n\t/**\n\t * Label or section header in tool panel.\n\t */\n\tvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\t\n\t/**\n\t * Section of tool panel with elements (labels and tools).\n\t */\n\tvar ToolSection = Backbone.Model.extend({\n\t    defaults: {\n\t        elems: [],\n\t        open: false\n\t    },\n\t\n\t    clear_search_results: function() {\n\t        _.each(this.attributes.elems, function(elt) {\n\t            elt.show();\n\t        });\n\t\n\t        this.show();\n\t        this.set(\"open\", false);\n\t    },\n\t\n\t    apply_search_results: function(results) {\n\t        var all_hidden = true,\n\t            cur_label;\n\t        _.each(this.attributes.elems, function(elt) {\n\t            if (elt instanceof ToolSectionLabel) {\n\t                cur_label = elt;\n\t                cur_label.hide();\n\t            }\n\t            else if (elt instanceof Tool) {\n\t                if (elt.apply_search_results(results)) {\n\t                    all_hidden = false;\n\t                    if (cur_label) {\n\t                        cur_label.show();\n\t                    }\n\t                }\n\t            }\n\t        });\n\t\n\t        if (all_hidden) {\n\t            this.hide();\n\t        }\n\t        else {\n\t            this.show();\n\t            this.set(\"open\", true);\n\t        }\n\t    }\n\t});\n\t_.extend(ToolSection.prototype, VisibilityMixin);\n\t\n\t/**\n\t * Tool search that updates results when query is changed. Result value of null\n\t * indicates that query was not run; if not null, results are from search using\n\t * query.\n\t */\n\tvar ToolSearch = Backbone.Model.extend({\n\t    defaults: {\n\t        search_hint_string: \"search tools\",\n\t        min_chars_for_search: 3,\n\t        clear_btn_url: \"\",\n\t        search_url: \"\",\n\t        visible: true,\n\t        query: \"\",\n\t        results: null,\n\t        // ESC (27) will clear the input field and tool search filters\n\t        clear_key: 27\n\t    },\n\t\n\t    urlRoot: Galaxy.root + 'api/tools',\n\t\n\t    initialize: function() {\n\t        this.on(\"change:query\", this.do_search);\n\t    },\n\t\n\t    /**\n\t     * Do the search and update the results.\n\t     */\n\t    do_search: function() {\n\t        var query = this.attributes.query;\n\t\n\t        // If query is too short, do not search.\n\t        if (query.length < this.attributes.min_chars_for_search) {\n\t            this.set(\"results\", null);\n\t            return;\n\t        }\n\t\n\t        // Do search via AJAX.\n\t        var q = query;\n\t        // Stop previous ajax-request\n\t        if (this.timer) {\n\t            clearTimeout(this.timer);\n\t        }\n\t        // Start a new ajax-request in X ms\n\t        $(\"#search-clear-btn\").hide();\n\t        $(\"#search-spinner\").show();\n\t        var self = this;\n\t        this.timer = setTimeout(function () {\n\t            // log the search to analytics if present\n\t            if ( typeof ga !== 'undefined' ) {\n\t                ga( 'send', 'pageview', Galaxy.root + '?q=' + q );\n\t            }\n\t            $.get( self.urlRoot, { q: q }, function (data) {\n\t                self.set(\"results\", data);\n\t                $(\"#search-spinner\").hide();\n\t                $(\"#search-clear-btn\").show();\n\t            }, \"json\" );\n\t        }, 400 );\n\t    },\n\t\n\t    clear_search: function() {\n\t        this.set(\"query\", \"\");\n\t        this.set(\"results\", null);\n\t    }\n\t\n\t});\n\t_.extend(ToolSearch.prototype, VisibilityMixin);\n\t\n\t/**\n\t * Tool Panel.\n\t */\n\tvar ToolPanel = Backbone.Model.extend({\n\t\n\t    initialize: function(options) {\n\t        this.attributes.tool_search = options.tool_search;\n\t        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n\t        this.attributes.tools = options.tools;\n\t        this.attributes.layout = new Backbone.Collection( this.parse(options.layout) );\n\t    },\n\t\n\t    /**\n\t     * Parse tool panel dictionary and return collection of tool panel elements.\n\t     */\n\t    parse: function(response) {\n\t        // Recursive function to parse tool panel elements.\n\t        var self = this,\n\t            // Helper to recursively parse tool panel.\n\t            parse_elt = function(elt_dict) {\n\t                var type = elt_dict.model_class;\n\t                // There are many types of tools; for now, anything that ends in 'Tool'\n\t                // is treated as a generic tool.\n\t                if ( type.indexOf('Tool') === type.length - 4 ) {\n\t                    return self.attributes.tools.get(elt_dict.id);\n\t                }\n\t                else if (type === 'ToolSection') {\n\t                    // Parse elements.\n\t                    var elems = _.map(elt_dict.elems, parse_elt);\n\t                    elt_dict.elems = elems;\n\t                    return new ToolSection(elt_dict);\n\t                }\n\t                else if (type === 'ToolSectionLabel') {\n\t                    return new ToolSectionLabel(elt_dict);\n\t                }\n\t            };\n\t\n\t        return _.map(response, parse_elt);\n\t    },\n\t\n\t    clear_search_results: function() {\n\t        this.get('layout').each(function(panel_elt) {\n\t            if (panel_elt instanceof ToolSection) {\n\t                panel_elt.clear_search_results();\n\t            }\n\t            else {\n\t                // Label or tool, so just show.\n\t                panel_elt.show();\n\t            }\n\t        });\n\t    },\n\t\n\t    apply_search_results: function() {\n\t        var results = this.get('tool_search').get('results');\n\t        if (results === null) {\n\t            this.clear_search_results();\n\t            return;\n\t        }\n\t\n\t        var cur_label = null;\n\t        this.get('layout').each(function(panel_elt) {\n\t            if (panel_elt instanceof ToolSectionLabel) {\n\t                cur_label = panel_elt;\n\t                cur_label.hide();\n\t            }\n\t            else if (panel_elt instanceof Tool) {\n\t                if (panel_elt.apply_search_results(results)) {\n\t                    if (cur_label) {\n\t                        cur_label.show();\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                // Starting new section, so clear current label.\n\t                cur_label = null;\n\t                panel_elt.apply_search_results(results);\n\t            }\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * View classes for Galaxy tools and tool panel.\n\t *\n\t * Views use the templates defined below for rendering. Views update as needed\n\t * based on (a) model/collection events and (b) user interactions; in this sense,\n\t * they are controllers are well and the HTML is the real view in the MVC architecture.\n\t */\n\t\n\t/**\n\t * Base view that handles visibility based on model's hidden attribute.\n\t */\n\tvar BaseView = Backbone.View.extend({\n\t    initialize: function() {\n\t        this.model.on(\"change:hidden\", this.update_visible, this);\n\t        this.update_visible();\n\t    },\n\t    update_visible: function() {\n\t        ( this.model.attributes.hidden ? this.$el.hide() : this.$el.show() );\n\t    }\n\t});\n\t\n\t/**\n\t * Link to a tool.\n\t */\n\tvar ToolLinkView = BaseView.extend({\n\t    tagName: 'div',\n\t\n\t    render: function() {\n\t        // create element\n\t        var $link = $('<div/>');\n\t        $link.append(templates.tool_link(this.model.toJSON()));\n\t\n\t        // open upload dialog for upload tool\n\t        if (this.model.id === 'upload1') {\n\t            $link.find('a').on('click', function(e) {\n\t                e.preventDefault();\n\t                Galaxy.upload.show();\n\t            });\n\t        }\n\t        else if ( this.model.get( 'model_class' ) === 'Tool' ) { // regular tools\n\t            var self = this;\n\t            $link.find('a').on('click', function(e) {\n\t                e.preventDefault();\n\t                var form = new ToolForm.View( { id : self.model.id, version : self.model.get('version') } );\n\t                form.deferred.execute(function() {\n\t                    Galaxy.app.display( form );\n\t                });\n\t            });\n\t        }\n\t\n\t        // add element\n\t        this.$el.append($link);\n\t        return this;\n\t    }\n\t});\n\t\n\t/**\n\t * Panel label/section header.\n\t */\n\tvar ToolSectionLabelView = BaseView.extend({\n\t    tagName: 'div',\n\t    className: 'toolPanelLabel',\n\t\n\t    render: function() {\n\t        this.$el.append( $(\"<span/>\").text(this.model.attributes.text) );\n\t        return this;\n\t    }\n\t});\n\t\n\t/**\n\t * Panel section.\n\t */\n\tvar ToolSectionView = BaseView.extend({\n\t    tagName: 'div',\n\t    className: 'toolSectionWrapper',\n\t\n\t    initialize: function() {\n\t        BaseView.prototype.initialize.call(this);\n\t        this.model.on(\"change:open\", this.update_open, this);\n\t    },\n\t\n\t    render: function() {\n\t        // Build using template.\n\t        this.$el.append( templates.panel_section(this.model.toJSON()) );\n\t\n\t        // Add tools to section.\n\t        var section_body = this.$el.find(\".toolSectionBody\");\n\t        _.each(this.model.attributes.elems, function(elt) {\n\t            if (elt instanceof Tool) {\n\t                var tool_view = new ToolLinkView({model: elt, className: \"toolTitle\"});\n\t                tool_view.render();\n\t                section_body.append(tool_view.$el);\n\t            }\n\t            else if (elt instanceof ToolSectionLabel) {\n\t                var label_view = new ToolSectionLabelView({model: elt});\n\t                label_view.render();\n\t                section_body.append(label_view.$el);\n\t            }\n\t            else {\n\t                // TODO: handle nested section bodies?\n\t            }\n\t        });\n\t        return this;\n\t    },\n\t\n\t    events: {\n\t        'click .toolSectionTitle > a': 'toggle'\n\t    },\n\t\n\t    /**\n\t     * Toggle visibility of tool section.\n\t     */\n\t    toggle: function() {\n\t        this.model.set(\"open\", !this.model.attributes.open);\n\t    },\n\t\n\t    /**\n\t     * Update whether section is open or close.\n\t     */\n\t    update_open: function() {\n\t        (this.model.attributes.open ?\n\t            this.$el.children(\".toolSectionBody\").slideDown(\"fast\") :\n\t            this.$el.children(\".toolSectionBody\").slideUp(\"fast\")\n\t        );\n\t    }\n\t});\n\t\n\tvar ToolSearchView = Backbone.View.extend({\n\t    tagName: 'div',\n\t    id: 'tool-search',\n\t    className: 'bar',\n\t\n\t    events: {\n\t        'click': 'focus_and_select',\n\t        'keyup :input': 'query_changed',\n\t        'click #search-clear-btn': 'clear'\n\t    },\n\t\n\t    render: function() {\n\t        this.$el.append( templates.tool_search(this.model.toJSON()) );\n\t        if (!this.model.is_visible()) {\n\t            this.$el.hide();\n\t        }\n\t        this.$el.find('[title]').tooltip();\n\t        return this;\n\t    },\n\t\n\t    focus_and_select: function() {\n\t        this.$el.find(\":input\").focus().select();\n\t    },\n\t\n\t    clear: function() {\n\t        this.model.clear_search();\n\t        this.$el.find(\":input\").val('');\n\t        this.focus_and_select();\n\t        return false;\n\t    },\n\t\n\t    query_changed: function( evData ) {\n\t        // check for the 'clear key' (ESC) first\n\t        if( ( this.model.attributes.clear_key ) &&\n\t            ( this.model.attributes.clear_key === evData.which ) ){\n\t            this.clear();\n\t            return false;\n\t        }\n\t        this.model.set(\"query\", this.$el.find(\":input\").val());\n\t    }\n\t});\n\t\n\t/**\n\t * Tool panel view. Events triggered include:\n\t * tool_link_click(click event, tool_model)\n\t */\n\tvar ToolPanelView = Backbone.View.extend({\n\t    tagName: 'div',\n\t    className: 'toolMenu',\n\t\n\t    /**\n\t     * Set up view.\n\t     */\n\t    initialize: function() {\n\t        this.model.get('tool_search').on(\"change:results\", this.handle_search_results, this);\n\t    },\n\t\n\t    render: function() {\n\t        var self = this;\n\t\n\t        // Render search.\n\t        var search_view = new ToolSearchView( { model: this.model.get('tool_search') } );\n\t        search_view.render();\n\t        self.$el.append(search_view.$el);\n\t\n\t        // Render panel.\n\t        this.model.get('layout').each(function(panel_elt) {\n\t            if (panel_elt instanceof ToolSection) {\n\t                var section_title_view = new ToolSectionView({model: panel_elt});\n\t                section_title_view.render();\n\t                self.$el.append(section_title_view.$el);\n\t            }\n\t            else if (panel_elt instanceof Tool) {\n\t                var tool_view = new ToolLinkView({model: panel_elt, className: \"toolTitleNoSection\"});\n\t                tool_view.render();\n\t                self.$el.append(tool_view.$el);\n\t            }\n\t            else if (panel_elt instanceof ToolSectionLabel) {\n\t                var label_view = new ToolSectionLabelView({model: panel_elt});\n\t                label_view.render();\n\t                self.$el.append(label_view.$el);\n\t            }\n\t        });\n\t\n\t        // Setup tool link click eventing.\n\t        self.$el.find(\"a.tool-link\").click(function(e) {\n\t            // Tool id is always the first class.\n\t            var\n\t                tool_id = $(this).attr('class').split(/\\s+/)[0],\n\t                tool = self.model.get('tools').get(tool_id);\n\t\n\t            self.trigger(\"tool_link_click\", e, tool);\n\t        });\n\t\n\t        return this;\n\t    },\n\t\n\t    handle_search_results: function() {\n\t        var results = this.model.get('tool_search').get('results');\n\t        if (results && results.length === 0) {\n\t            $(\"#search-no-results\").show();\n\t        }\n\t        else {\n\t            $(\"#search-no-results\").hide();\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * View for working with a tool: setting parameters and inputs and executing the tool.\n\t */\n\tvar ToolFormView = Backbone.View.extend({\n\t    className: 'toolForm',\n\t\n\t    render: function() {\n\t        this.$el.children().remove();\n\t        this.$el.append( templates.tool_form(this.model.toJSON()) );\n\t    }\n\t});\n\t\n\t/**\n\t * Integrated tool menu + tool execution.\n\t */\n\tvar IntegratedToolMenuAndView = Backbone.View.extend({\n\t    className: 'toolMenuAndView',\n\t\n\t    initialize: function() {\n\t        this.tool_panel_view = new ToolPanelView({collection: this.collection});\n\t        this.tool_form_view = new ToolFormView();\n\t    },\n\t\n\t    render: function() {\n\t        // Render and append tool panel.\n\t        this.tool_panel_view.render();\n\t        this.tool_panel_view.$el.css(\"float\", \"left\");\n\t        this.$el.append(this.tool_panel_view.$el);\n\t\n\t        // Append tool form view.\n\t        this.tool_form_view.$el.hide();\n\t        this.$el.append(this.tool_form_view.$el);\n\t\n\t        // On tool link click, show tool.\n\t        var self = this;\n\t        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n\t            // Prevents click from activating link:\n\t            e.preventDefault();\n\t            // Show tool that was clicked on:\n\t            self.show_tool(tool);\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Fetch and display tool.\n\t     */\n\t    show_tool: function(tool) {\n\t        var self = this;\n\t        tool.fetch().done( function() {\n\t            self.tool_form_view.model = tool;\n\t            self.tool_form_view.render();\n\t            self.tool_form_view.$el.show();\n\t            $('#left').width(\"650px\");\n\t        });\n\t    }\n\t});\n\t\n\t// TODO: move into relevant views\n\tvar templates = {\n\t    // the search bar at the top of the tool panel\n\t    tool_search : _.template([\n\t        '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n\t                'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n\t        '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n\t        //TODO: replace with icon\n\t        '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>',\n\t    ].join('')),\n\t\n\t    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n\t    panel_section : _.template([\n\t        '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n\t            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n\t        '</div>',\n\t        '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n\t            '<div class=\"toolSectionBg\"></div>',\n\t        '<div>'\n\t    ].join('')),\n\t\n\t    // a single tool's link in the tool panel; will load the tool form in the center panel\n\t    tool_link : _.template([\n\t        '<span class=\"labels\">',\n\t            '<% _.each( labels, function( label ){ %>',\n\t            '<span class=\"label label-default label-<%- label %>\">',\n\t                '<%- label %>',\n\t            '</span>',\n\t            '<% }); %>',\n\t        '</span>',\n\t        '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n\t            '<%- name %>',\n\t        '</a>',\n\t        ' <%- description %>'\n\t    ].join('')),\n\t\n\t    // the tool form for entering tool parameters, viewing help and executing the tool\n\t    // loaded when a tool link is clicked in the tool panel\n\t    tool_form : _.template([\n\t        '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n\t        '<div class=\"toolFormBody\">',\n\t            '<% _.each( tool.inputs, function( input ){ %>',\n\t            '<div class=\"form-row\">',\n\t                '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n\t                '<div class=\"form-row-input\">',\n\t                    '<%= input.html %>',\n\t                '</div>',\n\t                '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n\t                    '<%- input.help %>',\n\t                '</div>',\n\t                '<div style=\"clear: both;\"></div>',\n\t            '</div>',\n\t            '<% }); %>',\n\t        '</div>',\n\t        '<div class=\"form-row form-actions\">',\n\t            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n\t        '</div>',\n\t        '<div class=\"toolHelp\">',\n\t            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n\t        '</div>',\n\t    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n\t    // which implies a leaky variable that I can't find\n\t    ].join(''), { variable: 'tool' }),\n\t};\n\t\n\t\n\t// Exports\n\treturn {\n\t    ToolParameter: ToolParameter,\n\t    IntegerToolParameter: IntegerToolParameter,\n\t    SelectToolParameter: SelectToolParameter,\n\t    Tool: Tool,\n\t    ToolCollection: ToolCollection,\n\t    ToolSearch: ToolSearch,\n\t    ToolPanel: ToolPanel,\n\t    ToolPanelView: ToolPanelView,\n\t    ToolFormView: ToolFormView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 47 */,\n/* 48 */,\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Renders the color picker used e.g. in the tool form **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\t    return Backbone.View.extend({\n\t        colors: {\n\t            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n\t            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n\t            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n\t                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n\t                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n\t                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n\t                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n\t        },\n\t        initialize : function( options ) {\n\t            this.options = Utils.merge( options, {} );\n\t            this.setElement( this._template() );\n\t\n\t            // link components\n\t            this.$panel = this.$( '.ui-color-picker-panel' );\n\t            this.$view = this.$( '.ui-color-picker-view' );\n\t            this.$value = this.$( '.ui-color-picker-value' );\n\t            this.$header = this.$( '.ui-color-picker-header' );\n\t\n\t            // build panel\n\t            this._build();\n\t\n\t            // hide panel on start up\n\t            this.visible = false;\n\t\n\t            // set initial value\n\t            this.value( this.options.value );\n\t\n\t            // link boxes\n\t            this.$boxes = this.$( '.ui-color-picker-box' );\n\t\n\t            // add event handler\n\t            var self = this;\n\t            this.$boxes.on( 'click', function() {\n\t                self.value( $( this ).css( 'background-color' ) );\n\t                self.$header.trigger( 'click' );\n\t            } );\n\t            this.$header.on( 'click', function() {\n\t                self.visible = !self.visible;\n\t                if ( self.visible ) {\n\t                    self.$view.fadeIn( 'fast' );\n\t                } else {\n\t                    self.$view.fadeOut( 'fast' );\n\t                }\n\t            } );\n\t        },\n\t\n\t        // value\n\t        value : function ( new_val ) {\n\t            if ( new_val !== undefined && new_val !== null ) {\n\t                // update color value\n\t                this.$value.css( 'background-color', new_val );\n\t            \n\t                // check selected color in panel\n\t                this.$( '.ui-color-picker-box' ).empty();\n\t                this.$( this._getValue() ).html( this._templateCheck() );\n\t\n\t                // trigger custom event\n\t                this.options.onchange && this.options.onchange( new_val );\n\t            }\n\t\n\t            // return current value\n\t            return this._getValue();\n\t        },\n\t\n\t        // get value from dom\n\t        _getValue: function() {\n\t            var rgb = this.$value.css( 'background-color' );\n\t            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\t            if ( rgb ) {\n\t                function hex( x ) {\n\t                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n\t                }\n\t                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t\n\t        // build panel\n\t        _build: function() {\n\t            var $content = this._content({\n\t                label       : 'Theme Colors',\n\t                colors      : this.colors.base,\n\t                padding     : 10\n\t            });\n\t            for ( var i in this.colors.theme ) {\n\t                var line_def = {};\n\t                if ( i == 0 ) {\n\t                    line_def[ 'bottom' ] = true;\n\t                } else {\n\t                    if ( i != this.colors.theme.length - 1 ) {\n\t                        line_def[ 'top' ]     = true;\n\t                        line_def[ 'bottom' ]  = true;\n\t                    } else {\n\t                        line_def[ 'top' ]     = true;\n\t                        line_def[ 'padding' ] = 5;\n\t                    }\n\t                }\n\t                line_def[ 'colors' ] = this.colors.theme[ i ];\n\t                this._content( line_def );\n\t            }\n\t            this._content({\n\t                label       : 'Standard Colors',\n\t                colors      : this.colors.standard,\n\t                padding     : 5\n\t            });\n\t        },\n\t\n\t        // create content\n\t        _content: function( options ) {\n\t            // get parameters\n\t            var label       = options.label;\n\t            var colors      = options.colors;\n\t            var padding     = options.padding;\n\t            var top         = options.top;\n\t            var bottom      = options.bottom;\n\t\n\t            // create lines\n\t            var $content = $( this._templateContent() );\n\t\n\t            // set label\n\t            var $label = $content.find( '.label' );\n\t            if ( options.label ) {\n\t                $label.html( options.label );\n\t            } else {\n\t                $label.hide();\n\t            }\n\t\n\t            // build line\n\t            var $line = $content.find( '.line' );\n\t            this.$panel.append( $content );\n\t            for ( var i in colors ) {\n\t                var $box = $( this._templateBox( colors[ i ] ) );\n\t                if ( top ) {\n\t                    $box.css( 'border-top', 'none' );\n\t                    $box.css( 'border-top-left-radius', '0px' );\n\t                    $box.css( 'border-top-right-radius', '0px' );\n\t                }\n\t                if ( bottom ) {\n\t                    $box.css( 'border-bottom', 'none' );\n\t                    $box.css( 'border-bottom-left-radius', '0px' );\n\t                    $box.css( 'border-bottom-right-radius', '0px' );\n\t                }\n\t                $line.append( $box );\n\t            }\n\t            if (padding) {\n\t                $line.css( 'padding-bottom', padding );\n\t            }\n\t            return $content;\n\t        },\n\t\n\t        // check icon\n\t        _templateCheck: function() {\n\t            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n\t        },\n\t\n\t        // content template\n\t        _templateContent: function() {\n\t            return  '<div class=\"ui-color-picker-content\">' +\n\t                        '<div class=\"label\"/>' +\n\t                        '<div class=\"line\"/>' +\n\t                    '</div>';\n\t        },\n\t\n\t        // box template\n\t        _templateBox: function( color ) {\n\t            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n\t        },\n\t\n\t        // template\n\t        _template: function() {\n\t            return  '<div class=\"ui-color-picker\">' +\n\t                        '<div class=\"ui-color-picker-header\">' +\n\t                            '<div class=\"ui-color-picker-value\"/>' +\n\t                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n\t                        '</div>' +\n\t                        '<div class=\"ui-color-picker-view ui-input\">' +\n\t                            '<div class=\"ui-color-picker-panel\"/>' +\n\t                        '</div>'\n\t                    '</div>';\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Options) {\n\t\n\t/**\n\t *  This class creates/wraps a drill down element.\n\t */\n\tvar View = Options.BaseIcons.extend({\n\t    // initialize\n\t    initialize: function(options) {\n\t        options.type     = options.display || 'checkbox';\n\t        options.multiple = (options.display == 'checkbox');\n\t        Options.BaseIcons.prototype.initialize.call(this, options);\n\t        this.initial = true;\n\t    },\n\t\n\t    // set expand states for initial value\n\t    value: function (new_val) {\n\t        var val = Options.BaseIcons.prototype.value.call(this, new_val);\n\t        if (this.initial && val !== null && this.header_index) {\n\t            this.initial = false;\n\t            var values = val;\n\t            if (!$.isArray(values)) {\n\t                values = [values];\n\t            }\n\t            for (var i in values) {\n\t                var list = this.header_index[values[i]];\n\t                for (var j in list) {\n\t                    this._setState(list[j], true);\n\t                }\n\t            }\n\t        }\n\t        return val;\n\t    },\n\t\n\t    /** Expand/collapse a sub group\n\t    */\n\t    _setState: function (header_id, is_expanded) {\n\t        var $button = this.$('.button-' + header_id);\n\t        var $subgroup = this.$('.subgroup-' + header_id);\n\t        $button.data('is_expanded', is_expanded);\n\t        if (is_expanded) {\n\t            $subgroup.fadeIn('fast')\n\t            $button.removeClass('fa-plus-square');\n\t            $button.addClass('fa-minus-square');\n\t        } else {\n\t            $subgroup.hide();\n\t            $button.removeClass('fa-minus-square');\n\t            $button.addClass('fa-plus-square');\n\t        }\n\t    },\n\t\n\t    /** Template to create options tree\n\t    */\n\t    _templateOptions: function(options) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // link data\n\t        this.header_index = {};\n\t        \n\t        // attach event handler\n\t        function attach($el, header_id) {\n\t            var $button = $el.find('.button-' + header_id);\n\t            $button.on('click', function() {\n\t                self._setState(header_id, !$button.data('is_expanded'));\n\t            });\n\t        }\n\t\n\t        // recursive function which iterates through options\n\t        function iterate ($tmpl, options, header) {\n\t            header = header || [];\n\t            for (i in options) {\n\t                // current option level in hierarchy\n\t                var level = options[i];\n\t\n\t                // check for options\n\t                var has_options = level.options.length > 0;\n\t\n\t                // copy current header list\n\t                var new_header = header.slice(0);\n\t\n\t                // keep track of header list\n\t                self.header_index[level.value] = new_header.slice(0);\n\t\n\t                // build template\n\t                var $group = $('<div/>');\n\t                if (has_options) {\n\t                    // create button and subgroup\n\t                    var header_id = Utils.uid();\n\t                    var $button = $('<span class=\"button-' + header_id + ' ui-drilldown-button fa fa-plus-square\"/>');\n\t                    var $subgroup = $('<div class=\"subgroup-' + header_id + '\" style=\"display: none; margin-left: 25px;\"/>');\n\t\n\t                    // keep track of button and subgroup\n\t                    new_header.push(header_id);\n\t\n\t                    // create expandable header section\n\t                    var $buttongroup = $('<div/>');\n\t                    $buttongroup.append($button);\n\t                    $buttongroup.append(self._templateOption({\n\t                        label: level.name,\n\t                        value: level.value\n\t                    }));\n\t                    $group.append($buttongroup);\n\t                    iterate($subgroup, level.options, new_header);\n\t                    $group.append($subgroup);\n\t\n\t                    // attach expand/collapse events\n\t                    attach($group, header_id);\n\t                } else {\n\t                    // append child options\n\t                    $group.append(self._templateOption({\n\t                        label: level.name,\n\t                        value: level.value\n\t                    }));\n\t                }\n\t                $tmpl.append($group);\n\t            }\n\t        }\n\t\n\t        // iterate through options and create dom\n\t        var $tmpl = $('<div/>');\n\t        iterate($tmpl, options);\n\t\n\t        // return template\n\t        return $tmpl;\n\t    },\n\t\n\t    /** Template for drill down view\n\t    */\n\t    _template: function(options) {\n\t        return '<div class=\"ui-options-list drilldown-container\" id=\"' + options.id + '\"/>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class creates/wraps a default html select field as backbone class.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Buttons) {\n\tvar View = Backbone.View.extend({\n\t    // options\n\t    optionsDefault: {\n\t        id          : Utils.uid(),\n\t        cls         : 'ui-select',\n\t        error_text  : 'No options available',\n\t        empty_text  : 'Nothing selected',\n\t        visible     : true,\n\t        wait        : false,\n\t        multiple    : false,\n\t        searchable  : true,\n\t        optional    : false\n\t    },\n\t\n\t    // initialize\n\t    initialize: function(options) {\n\t        // link this\n\t        var self = this;\n\t        this.model = new Backbone.Model();\n\t\n\t        // configure options\n\t        this.options = Utils.merge(options, this.optionsDefault);\n\t\n\t        // create new element\n\t        this.setElement(this._template(this.options));\n\t\n\t        // link elements\n\t        this.$select = this.$el.find('.select');\n\t        this.$icon_dropdown = this.$el.find('.icon-dropdown');\n\t        this.$icon_dropdown.on( 'click', function() { self.$select.select2 && self.$select.select2( 'open' ) });\n\t\n\t        // allow regular multi-select field to be resized\n\t        var minHeight = null;\n\t        this.$('.icon-resize').on('mousedown', function(event) {\n\t            var currentY = event.pageY;\n\t            var currentHeight = self.$select.height();\n\t            minHeight = minHeight || currentHeight;\n\t            $('#dd-helper').show().on('mousemove', function(event) {\n\t                self.$select.height(Math.max(currentHeight + (event.pageY - currentY), minHeight));\n\t            }).on('mouseup mouseleave', function() {\n\t                $('#dd-helper').hide().off();\n\t            });\n\t        });\n\t\n\t        // multiple select fields have an additional button and other custom properties\n\t        if (this.options.multiple) {\n\t            // create select all button\n\t            if (this.options.searchable) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function() {\n\t                        var new_value = [];\n\t                        if (self.all_button.value() !== 0) {\n\t                            new_value = self._availableOptions();\n\t                        }\n\t                        self.value(new_value);\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$el.prepend(this.all_button.$el);\n\t            } else {\n\t                this.$el.addClass('ui-select-multiple');\n\t            }\n\t            this.$select.prop('multiple', true);\n\t            this.$icon_dropdown.remove();\n\t        }\n\t\n\t        // update initial options\n\t        this.update(this.options.data);\n\t\n\t        // set initial value\n\t        if (this.options.value !== undefined) {\n\t            this.value(this.options.value);\n\t        }\n\t\n\t        // show/hide\n\t        if (!this.options.visible) {\n\t            this.hide();\n\t        }\n\t\n\t        // wait\n\t        if (this.options.wait) {\n\t            this.wait();\n\t        } else {\n\t            this.show();\n\t        }\n\t\n\t        // add change event. fires only on user activity\n\t        this.$select.on('change', function() {\n\t            self.trigger('change');\n\t        });\n\t\n\t        // add change event. fires on trigger\n\t        this.on('change', function() {\n\t            self.options.onchange && self.options.onchange(this.value());\n\t        });\n\t    },\n\t\n\t    /** Return/Set current selection\n\t    */\n\t    value: function (new_value) {\n\t        // set new value\n\t        if (new_value !== undefined) {\n\t            if (new_value === null) {\n\t                new_value = '__null__';\n\t            }\n\t            if (this.exists(new_value) || this.options.multiple) {\n\t                this.$select.val(new_value);\n\t                if (this.$select.select2) {\n\t                    this.$select.select2('val', new_value);\n\t                }\n\t            }\n\t        }\n\t        // get current value\n\t        var current = this._getValue();\n\t        if (this.all_button) {\n\t            this.all_button.value($.isArray(current) && current.length || 0, this._size());\n\t        }\n\t        return current;\n\t    },\n\t\n\t    /** Return the first select option\n\t    */\n\t    first: function() {\n\t        var options = this.$select.find('option').first();\n\t        if (options.length > 0) {\n\t            return options.val();\n\t        } else {\n\t            return null;\n\t        }\n\t    },\n\t\n\t    /** Return the label/text of the current selection\n\t    */\n\t    text: function () {\n\t        return this.$select.find('option:selected').text();\n\t    },\n\t\n\t    /** Show the select field\n\t    */\n\t    show: function() {\n\t        this.unwait();\n\t        this.$select.show();\n\t        this.$el.show();\n\t    },\n\t\n\t    /** Hide the select field\n\t    */\n\t    hide: function() {\n\t        this.$el.hide();\n\t    },\n\t\n\t    /** Show a spinner indicating that the select options are currently loaded\n\t    */\n\t    wait: function() {\n\t        this.$icon_dropdown.removeClass();\n\t        this.$icon_dropdown.addClass('icon-dropdown fa fa-spinner fa-spin');\n\t    },\n\t\n\t    /** Hide spinner indicating that the request has been completed\n\t    */\n\t    unwait: function() {\n\t        this.$icon_dropdown.removeClass();\n\t        this.$icon_dropdown.addClass('icon-dropdown fa fa-caret-down');\n\t    },\n\t\n\t    /** Returns true if the field is disabled\n\t    */\n\t    disabled: function() {\n\t        return this.$select.is(':disabled');\n\t    },\n\t\n\t    /** Enable the select field\n\t    */\n\t    enable: function() {\n\t        this.$select.prop('disabled', false);\n\t    },\n\t\n\t    /** Disable the select field\n\t    */\n\t    disable: function() {\n\t        this.$select.prop('disabled', true);\n\t    },\n\t\n\t    /** Update all available options at once\n\t    */\n\t    add: function( options, sorter ) {\n\t        _.each( this.model.get( 'options' ), function( v ) {\n\t            !_.findWhere( options, v ) && options.push( v );\n\t        });\n\t        sorter && options.sort( sorter );\n\t        this.update( options );\n\t    },\n\t    update: function(options) {\n\t        // backup current value\n\t        var current = this._getValue();\n\t\n\t        // remove all options\n\t        this.$select.find('option').remove();\n\t\n\t        // add optional field\n\t        if (!this.options.multiple && this.options.optional) {\n\t            this.$select.append(this._templateOption({value : '__null__', label : this.options.empty_text}));\n\t        }\n\t\n\t        // add new options\n\t        this.model.set( 'options', options );\n\t        for (var key in options) {\n\t            this.$select.append(this._templateOption(options[key]));\n\t        }\n\t\n\t        // count remaining entries\n\t        if (this._size() == 0) {\n\t            // disable select field\n\t            this.disable();\n\t\n\t            // create placeholder\n\t            this.$select.append(this._templateOption({value : '__null__', label : this.options.error_text}));\n\t        } else {\n\t            // enable select field\n\t            this.enable();\n\t        }\n\t\n\t        // update to searchable field (in this case select2)\n\t        if (this.options.searchable) {\n\t            this.$select.select2('destroy');\n\t            this.$select.select2({ closeOnSelect: !this.options.multiple });\n\t            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n\t        }\n\t\n\t        // set previous value\n\t        this.value(current);\n\t\n\t        // check if any value was set\n\t        if (this._getValue() === null && !(this.options.multiple && this.options.optional)) {\n\t            this.value(this.first());\n\t        }\n\t    },\n\t\n\t    /** Set the custom onchange callback function\n\t    */\n\t    setOnChange: function(callback) {\n\t        this.options.onchange = callback;\n\t    },\n\t\n\t    /** Check if a value is an existing option\n\t    */\n\t    exists: function(value) {\n\t        return this.$select.find('option[value=\"' + value + '\"]').length > 0;\n\t    },\n\t\n\t    /** Get current value from dom\n\t    */\n\t    _getValue: function() {\n\t        var val = this.$select.val();\n\t        if (!Utils.validate(val)) {\n\t            return null;\n\t        }\n\t        return val;\n\t    },\n\t\n\t    /** Returns all currently available options\n\t    */\n\t    _availableOptions: function() {\n\t        var available = [];\n\t        this.$select.find('option').each(function(i, e){\n\t            available.push($(e).attr('value'));\n\t        });\n\t        return available;\n\t    },\n\t\n\t    /** Number of available options\n\t    */\n\t    _size: function() {\n\t        return this.$select.find('option').length;\n\t    },\n\t\n\t    /** Template for select options\n\t    */\n\t    _templateOption: function(options) {\n\t        return '<option value=\"' + options.value + '\">' + _.escape(options.label) + '</option>';\n\t    },\n\t\n\t    /** Template for select view\n\t    */\n\t    _template: function(options) {\n\t        return  '<div id=\"' + options.id + '\" class=\"' + options.cls + '\">' +\n\t                    '<select id=\"' + options.id + '_select\" class=\"select\"/>' +\n\t                    '<div class=\"icon-dropdown\"/>' +\n\t                    '<div class=\"icon-resize\">' +\n\t                         '<i class=\"fa fa-angle-double-right fa-rotate-45\"/>' +\n\t                    '</div>' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, List) {\n\t\n\t/**\n\t * FTP file selector\n\t */\n\tvar View = Backbone.View.extend({\n\t    // initialize\n\t    initialize : function(options) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // create ui-list view to keep track of selected ftp files\n\t        this.ftpfile_list = new List.View({\n\t            name        : 'file',\n\t            optional    : options.optional,\n\t            multiple    : options.multiple,\n\t            onchange    : function() {\n\t                options.onchange && options.onchange(self.value());\n\t            }\n\t        });\n\t\n\t        // create elements\n\t        this.setElement(this.ftpfile_list.$el);\n\t\n\t        // initial fetch of ftps\n\t        Utils.get({\n\t            url     : Galaxy.root + 'api/remote_files',\n\t            success : function(response) {\n\t                var data = [];\n\t                for (var i in response) {\n\t                    data.push({\n\t                        value   : response[i]['path'],\n\t                        label   : response[i]['path']\n\t                    });\n\t                }\n\t                self.ftpfile_list.update(data);\n\t            }\n\t        });\n\t    },\n\t\n\t    /** Return/Set currently selected ftp datasets */\n\t    value: function(val) {\n\t        return this.ftpfile_list.value(val);\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(7), __webpack_require__(14), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Utils, Ui, Table, List) {\n\t\n\t// collection of libraries\n\tvar Libraries = Backbone.Collection.extend({\n\t    url: Galaxy.root + 'api/libraries?deleted=false'\n\t});\n\t\n\t// collection of dataset\n\tvar LibraryDatasets = Backbone.Collection.extend({\n\t    initialize: function() {\n\t        var self = this;\n\t        this.config = new Backbone.Model({ library_id: null });\n\t        this.config.on('change', function() {\n\t            self.fetch({ reset: true });\n\t        });\n\t    },\n\t    url: function() {\n\t        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n\t    }\n\t});\n\t\n\t// hda/hdca content selector ui element\n\tvar View = Backbone.View.extend({\n\t    // initialize\n\t    initialize : function(options) {\n\t        // link this\n\t        var self = this;\n\t\n\t        // collections\n\t        this.libraries  = new Libraries();\n\t        this.datasets   = new LibraryDatasets();\n\t\n\t        // link app and options\n\t        this.options = options;\n\t\n\t        // select field for the library\n\t        // TODO: Remove this once the library API supports searching for library datasets\n\t        this.library_select = new Ui.Select.View({\n\t            onchange    : function(value) {\n\t                self.datasets.config.set('library_id', value);\n\t            }\n\t        });\n\t\n\t        // create ui-list view to keep track of selected data libraries\n\t        this.dataset_list = new List.View({\n\t            name        : 'dataset',\n\t            optional    : options.optional,\n\t            multiple    : options.multiple,\n\t            onchange    : function() {\n\t                self.trigger('change');\n\t            }\n\t        });\n\t\n\t        // add reset handler for fetched libraries\n\t        this.libraries.on('reset', function() {\n\t            var data = [];\n\t            self.libraries.each(function(model) {\n\t                data.push({\n\t                    value   : model.id,\n\t                    label   : model.get('name')\n\t                });\n\t            });\n\t            self.library_select.update(data);\n\t        });\n\t\n\t        // add reset handler for fetched library datasets\n\t        this.datasets.on('reset', function() {\n\t            var data = [];\n\t            var library_current = self.library_select.text();\n\t            if (library_current !== null) {\n\t                self.datasets.each(function(model) {\n\t                    if (model.get('type') === 'file') {\n\t                        data.push({\n\t                            value   : model.id,\n\t                            label   : model.get('name')\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t            self.dataset_list.update(data);\n\t        });\n\t\n\t        // add change event. fires on trigger\n\t        this.on('change', function() {\n\t            options.onchange && options.onchange(self.value());\n\t        });\n\t\n\t        // create elements\n\t        this.setElement(this._template());\n\t        this.$('.library-select').append(this.library_select.$el);\n\t        this.$el.append(this.dataset_list.$el);\n\t\n\t        // initial fetch of libraries\n\t        this.libraries.fetch({\n\t            reset: true,\n\t            success: function() {\n\t                self.library_select.trigger('change');\n\t                if (self.options.value !== undefined) {\n\t                    self.value(self.options.value);\n\t                }\n\t            }\n\t        });\n\t    },\n\t\n\t    /** Return/Set currently selected library datasets */\n\t    value: function(val) {\n\t        return this.dataset_list.value(val);\n\t    },\n\t\n\t    /** Template */\n\t    _template: function() {\n\t        return  '<div class=\"ui-select-library\">' +\n\t                    '<div class=\"library ui-margin-bottom\">' +\n\t                        '<span class=\"library-title\">Select Library</span>' +\n\t                        '<span class=\"library-select\"/>' +\n\t                    '</div>' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View: View\n\t}\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(4) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\tvar View = Backbone.View.extend({\n\t    initialize : function( options ) {\n\t        var self = this;\n\t        this.options = Utils.merge( options, {\n\t            id      : Utils.uid(),\n\t            min     : null,\n\t            max     : null,\n\t            step    : null,\n\t            precise : false,\n\t            split   : 10000\n\t        } );\n\t\n\t        // create new element\n\t        this.setElement( this._template( this.options ) );\n\t\n\t        // determine wether to use the slider\n\t        this.useslider = this.options.max !== null && this.options.min !== null && this.options.max > this.options.min;\n\t\n\t        // set default step size\n\t        if ( this.options.step === null ) {\n\t            this.options.step = 1.0;\n\t            if ( this.options.precise && this.useslider ) {\n\t                this.options.step = ( this.options.max - this.options.min ) / this.options.split;\n\t            }\n\t        }\n\t\n\t        // create slider if min and max are defined properly\n\t        if ( this.useslider ) {\n\t            this.$slider = this.$( '#slider' );\n\t            this.$slider.slider( this.options );\n\t            this.$slider.on( 'slide', function ( event, ui ) {\n\t                self.value( ui.value );\n\t            });\n\t        } else {\n\t            this.$( '.ui-form-slider-text' ).css( 'width', '100%' );\n\t        }\n\t\n\t        // link text input field\n\t        this.$text = this.$( '#text' );\n\t\n\t        // set initial value\n\t        this.options.value !== undefined && ( this.value( this.options.value ) );\n\t\n\t        // add text field event\n\t        var pressed = [];\n\t        this.$text.on( 'change', function () {\n\t            self.value( $( this ).val() );\n\t        });\n\t        this.$text.on( 'keyup', function( e ) {\n\t            pressed[e.which] = false;\n\t            self.options.onchange && self.options.onchange( $( this ).val() );\n\t        });\n\t        this.$text.on( 'keydown', function ( e ) {\n\t            var v = e.which;\n\t            pressed[ v ] = true;\n\t            if ( self.options.is_workflow && pressed[ 16 ] && v == 52 ) {\n\t                self.value( '$' )\n\t                event.preventDefault();\n\t            } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n\t                || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.options.precise )\n\t                || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n\t                || self._isParameter( $( this ).val() )\n\t                || pressed[ 91 ] || pressed[ 17 ] ) ) {\n\t                event.preventDefault();\n\t            }\n\t        });\n\t    },\n\t\n\t    /** Set and Return the current value\n\t    */\n\t    value : function ( new_val ) {\n\t        if ( new_val !== undefined ) {\n\t            if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n\t                isNaN( new_val ) && ( new_val = 0 );\n\t                this.options.max !== null && ( new_val = Math.min( new_val, this.options.max ) );\n\t                this.options.min !== null && ( new_val = Math.max( new_val, this.options.min ) );\n\t            }\n\t            this.$slider && this.$slider.slider( 'value', new_val );\n\t            this.$text.val( new_val );\n\t            this.options.onchange && this.options.onchange( new_val );\n\t        }\n\t        return this.$text.val();\n\t    },\n\t\n\t    /** Return true if the field contains a workflow parameter i.e. $('name')\n\t    */\n\t    _isParameter: function( value ) {\n\t        return this.options.is_workflow && String( value ).substring( 0, 1 ) === '$';\n\t    },\n\t\n\t    /** Slider template\n\t    */\n\t    _template: function( options ) {\n\t        return  '<div id=\"' + options.id + '\" class=\"ui-form-slider\">' +\n\t                    '<input id=\"text\" type=\"text\" class=\"ui-form-slider-text\"/>' +\n\t                    '<div id=\"slider\" class=\"ui-form-slider-element\"/>' +\n\t                '</div>';\n\t    }\n\t});\n\t\n\treturn {\n\t    View : View\n\t};\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 55 */,\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17), __webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, util_mod, config_mod) {\n\t\n\t/**\n\t * A configuration setting. Currently key is used as id.\n\t */\n\tvar ConfigSetting = Backbone.Model.extend({\n\t\n\t    initialize: function(options) {\n\t        // Use key as id for now.\n\t        var key = this.get('key');\n\t        this.set('id', key);\n\t\n\t        // Set defaults based on key.\n\t        var defaults = _.find(ConfigSetting.known_settings_defaults, function(s) { return s.key === key; });\n\t        if (defaults) {\n\t            this.set(_.extend({}, defaults, options));\n\t        }\n\t\n\t        if (this.get('value') === undefined && this.get('default_value') !== undefined) {\n\t            // Use default to set value (if present).\n\t            this.set_value(this.get('default_value'));\n\t\n\t            // If no default value for color config, set random color.\n\t            if (!this.get('value') && this.get('type') === 'color') {\n\t                // For color setting, set random color.\n\t                this.set('value', util_mod.get_random_color());\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Cast and set value. This should be instead of\n\t     *  setting.set('value', new_value)\n\t     */\n\t    set_value: function(value, options) {\n\t        var type = this.get('type');\n\t\n\t        if (type === 'float') {\n\t            value = parseFloat(value);\n\t        }\n\t        else if (type === 'int') {\n\t            value = parseInt(value, 10);\n\t        }\n\t        // TODO: handle casting from string to bool?\n\t\n\t        this.set({value: value}, options);\n\t    }\n\t}, {\n\t    // This is a master list of default settings for known settings.\n\t    known_settings_defaults: [\n\t        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n\t        { key: 'color', label: 'Color', type: 'color', default_value: null },\n\t        { key: 'min_value', label: 'Min Value', type: 'float', default_value: null },\n\t        { key: 'max_value', label: 'Max Value', type: 'float', default_value: null },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 32, hidden: true },\n\t        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n\t        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n\t        { key: 'block_color', label: 'Block color', type: 'color', default_value: null },\n\t        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n\t        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n\t        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color', default_value: null },\n\t        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true }\n\t    ]\n\t});\n\t\n\t/**\n\t * Collection of config settings.\n\t */\n\tvar ConfigSettingCollection = Backbone.Collection.extend({\n\t    model: ConfigSetting,\n\t\n\t    /**\n\t     * Save settings as a dictionary of key-value pairs.\n\t     * This function is needed for backwards compatibility.\n\t     */\n\t    to_key_value_dict: function() {\n\t        var rval = {};\n\t        this.each(function(setting) {\n\t            rval[setting.get('key')] = setting.get('value');\n\t        });\n\t\n\t        return rval;\n\t    },\n\t\n\t    /**\n\t     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n\t     */\n\t    get_value: function(key) {\n\t        var s = this.get(key);\n\t        if (s) {\n\t            return s.get('value');\n\t        }\n\t\n\t        return undefined;\n\t    },\n\t\n\t    /**\n\t     * Set value for a setting.\n\t     */\n\t    set_value: function(key, value, options) {\n\t        var s = this.get(key);\n\t        if (s) {\n\t            return s.set_value(value, options);\n\t        }\n\t\n\t        return undefined;\n\t     },\n\t\n\t     /**\n\t      * Set default value for a setting.\n\t      */\n\t     set_default_value: function(key, default_value) {\n\t        var s = this.get(key);\n\t        if (s) {\n\t            return s.set('default_value', default_value);\n\t        }\n\t\n\t        return undefined;\n\t     }\n\t},\n\t{\n\t    /**\n\t     * Utility function that creates a ConfigSettingsCollection from a set of models\n\t     * and a saved_values dictionary.\n\t     */\n\t    from_models_and_saved_values: function(models, saved_values) {\n\t        // If there are saved values, copy models and update with saved values.\n\t        if (saved_values) {\n\t            models = _.map(models, function(m) {\n\t                return _.extend({}, m, { value: saved_values[m.key] });\n\t            });\n\t        }\n\t\n\t        return new ConfigSettingCollection(models);\n\t    }\n\t});\n\t\n\t/**\n\t * Viewer for config settings collection.\n\t */\n\tvar ConfigSettingCollectionView = Backbone.View.extend({\n\t    className: 'config-settings-view',\n\t\n\t    /**\n\t     * Renders form for editing configuration settings.\n\t     */\n\t    render: function() {\n\t        var container = this.$el;\n\t\n\t        this.collection.each(function(param, index) {\n\t            // Hidden params have no representation in the form\n\t            if (param.get('hidden')) { return; }\n\t\n\t            // Build row for param.\n\t            var id = 'param_' + index,\n\t                type = param.get('type'),\n\t                value = param.get('value');\n\t            var row = $(\"<div class='form-row' />\").appendTo(container);\n\t            row.append($('<label />').attr(\"for\", id ).text(param.get('label') + \":\" ));\n\t            // Draw parameter as checkbox\n\t            if ( type === 'bool' ) {\n\t                row.append( $('<input type=\"checkbox\" />').attr(\"id\", id ).attr(\"name\", id ).attr( 'checked', value ) );\n\t            }\n\t            // Draw parameter as textbox\n\t            else if ( type === 'text' ) {\n\t                row.append( $('<input type=\"text\"/>').attr(\"id\", id ).val(value).click( function() { $(this).select(); }));\n\t            }\n\t            // Draw parameter as select area\n\t            else if ( type === 'select' ) {\n\t                var select = $('<select />').attr(\"id\", id);\n\t                _.each(param.get('options'), function(option) {\n\t                    $(\"<option/>\").text( option.label ).attr( \"value\", option.value ).appendTo( select );\n\t                });\n\t                select.val( value );\n\t                row.append( select );\n\t\n\t            }\n\t            // Draw parameter as color picker\n\t            else if ( type === 'color' ) {\n\t                var\n\t                    container_div = $(\"<div/>\").appendTo(row),\n\t                    input = $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ).css(\"float\", \"left\")\n\t                        .appendTo(container_div).click(function(e) {\n\t                        // Hide other pickers.\n\t                        $(\".tooltip\").removeClass( \"in\" );\n\t\n\t                        // Show input's color picker.\n\t                        var tip = $(this).siblings(\".tooltip\").addClass( \"in\" );\n\t                        tip.css( {\n\t                            // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n\t                            // top: $(this).position().top + $(this.height)\n\t                            left: $(this).position().left + $(this).width() + 5,\n\t                            top: $(this).position().top - ( $(tip).height() / 2 ) + ( $(this).height() / 2 )\n\t                            } ).show();\n\t\n\t                        // Click management:\n\t\n\t                        // Keep showing tip if clicking in tip.\n\t                        tip.click(function(e) {\n\t                            e.stopPropagation();\n\t                        });\n\t\n\t                        // Hide tip if clicking outside of tip.\n\t                        $(document).bind( \"click.color-picker\", function() {\n\t                            tip.hide();\n\t                            $(document).unbind( \"click.color-picker\" );\n\t                        });\n\t\n\t                        // No propagation to avoid triggering document click (and tip hiding) above.\n\t                        e.stopPropagation();\n\t                    }),\n\t                    // Icon for setting a new random color; behavior set below.\n\t                    new_color_icon = $(\"<a href='javascript:void(0)'/>\").addClass(\"icon-button arrow-circle\").appendTo(container_div)\n\t                                     .attr(\"title\", \"Set new random color\").tooltip(),\n\t                    // Color picker in tool tip style.\n\t                    tip = $( \"<div class='tooltip right' style='position: absolute;' />\" ).appendTo(container_div).hide(),\n\t                    // Inner div for padding purposes\n\t                    tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip),\n\t                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip),\n\t                    farb_obj = $.farbtastic(tip_inner, { width: 100, height: 100, callback: input, color: value });\n\t\n\t                // Clear floating.\n\t                container_div.append( $(\"<div/>\").css(\"clear\", \"both\"));\n\t\n\t                // Use function to fix farb_obj value.\n\t                (function(fixed_farb_obj) {\n\t                    new_color_icon.click(function() {\n\t                        fixed_farb_obj.setColor(util_mod.get_random_color());\n\t                    });\n\t                })(farb_obj);\n\t\n\t            }\n\t            else {\n\t                row.append( $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ) );\n\t            }\n\t            // Help text\n\t            if ( param.help ) {\n\t                row.append( $(\"<div class='help'/>\").text( param.help ) );\n\t            }\n\t        });\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Render view in modal.\n\t     */\n\t    render_in_modal: function(title) {\n\t        // Set up handlers for cancel, ok button and for handling esc key.\n\t        var self = this,\n\t            cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n\t            ok_fn = function() {\n\t                Galaxy.modal.hide();\n\t                $(window).unbind(\"keypress.check_enter_esc\");\n\t                self.update_from_form();\n\t            },\n\t            check_enter_esc = function(e) {\n\t                if ((e.keyCode || e.which) === 27) { // Escape key\n\t                    cancel_fn();\n\t                } else if ((e.keyCode || e.which) === 13) { // Enter key\n\t                    ok_fn();\n\t                }\n\t            };\n\t\n\t        // Set keypress handler.\n\t        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\t\n\t        // Show modal.\n\t        if (this.$el.children().length === 0) {\n\t            this.render();\n\t        }\n\t        Galaxy.modal.show({\n\t            title: title || \"Configure\",\n\t            body: this.$el,\n\t            buttons: {\n\t                \"Cancel\": cancel_fn,\n\t                \"OK\": ok_fn\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Update settings with new values entered via form.\n\t     */\n\t    update_from_form: function() {\n\t        var self = this;\n\t        this.collection.each(function(setting, index) {\n\t            if ( !setting.get('hidden') ) {\n\t                // Set value from view.\n\t                var id = 'param_' + index;\n\t                var value = self.$el.find( '#' + id ).val();\n\t                if ( setting.get('type') === 'bool' ) {\n\t                    value = self.$el.find( '#' + id ).is( ':checked' );\n\t                }\n\t                setting.set_value(value);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t\n\treturn {\n\t    ConfigSetting: ConfigSetting,\n\t    ConfigSettingCollection: ConfigSettingCollection,\n\t    ConfigSettingCollectionView: ConfigSettingCollectionView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/**\n\t *  This class defines a queue to ensure that multiple deferred callbacks are executed sequentially.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function( Utils ) {\n\treturn Backbone.Model.extend({\n\t    initialize: function(){\n\t        this.active = {};\n\t        this.last = null;\n\t    },\n\t\n\t    /** Adds a callback to the queue. Upon execution a deferred object is parsed to the callback i.e. callback( deferred ).\n\t     *  If the callback does not take any arguments, the deferred is resolved instantly.\n\t    */\n\t    execute: function( callback ) {\n\t        var self = this;\n\t        var id = Utils.uid();\n\t        var has_deferred = callback.length > 0;\n\t\n\t        // register process\n\t        this.active[ id ] = true;\n\t\n\t        // deferred process\n\t        var process = $.Deferred();\n\t        process.promise().always(function() {\n\t            delete self.active[ id ];\n\t            has_deferred && Galaxy.emit.debug( 'deferred::execute()', this.state().charAt(0).toUpperCase() + this.state().slice(1) + ' ' + id );\n\t        });\n\t\n\t        // deferred queue\n\t        $.when( this.last ).always(function() {\n\t            if ( self.active[ id ] ) {\n\t                has_deferred && Galaxy.emit.debug( 'deferred::execute()', 'Running ' + id );\n\t                callback( process );\n\t                !has_deferred && process.resolve();\n\t            } else {\n\t                process.reject();\n\t            }\n\t        });\n\t        this.last = process.promise();\n\t    },\n\t\n\t    /** Resets the promise queue. All currently queued but unexecuted callbacks/promises will be rejected.\n\t    */\n\t    reset: function() {\n\t        Galaxy.emit.debug('deferred::execute()', 'Reset');\n\t        for ( var i in this.active ) {\n\t            this.active[ i ] = false;\n\t        }\n\t    },\n\t\n\t    /** Returns true if all processes are done.\n\t    */\n\t    ready: function() {\n\t        return $.isEmptyObject( this.active );\n\t    }\n\t});\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 58 */,\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, Backbone) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(11), __webpack_require__(17), __webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, data_mod, util_mod, config_mod) {\n\t\n\t/**\n\t * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n\t * to include in the representation; to_json_mappers defines mappers for returned objects.\n\t */\n\tvar CustomToJSON = {\n\t    /**\n\t     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n\t     */\n\t    toJSON: function() {\n\t        var self = this,\n\t            json = {};\n\t        _.each(self.constructor.to_json_keys, function(k) {\n\t            var val = self.get(k);\n\t            if (k in self.constructor.to_json_mappers) {\n\t                val = self.constructor.to_json_mappers[k](val, self);\n\t            }\n\t            json[k] = val;\n\t        });\n\t        return json;\n\t    }\n\t};\n\t\n\t/**\n\t * Model, view, and controller objects for Galaxy visualization framework.\n\t *\n\t * Models have no references to views, instead using events to indicate state\n\t * changes; this is advantageous because multiple views can use the same object\n\t * and models can be used without views.\n\t */\n\t\n\t/**\n\t * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n\t * track definitions are obtained from the server and the success_fn is called with the list of\n\t * definitions for selected datasets.\n\t */\n\tvar select_datasets = function(dataset_url, add_track_async_url, filters, success_fn) {\n\t    $.ajax({\n\t        url: dataset_url,\n\t        data: filters,\n\t        error: function() { alert( \"Grid failed\" ); },\n\t        success: function(table_html) {\n\t            Galaxy.modal.show({\n\t                title   : \"Select datasets for new tracks\",\n\t                body    : table_html,\n\t                buttons :\n\t                {\n\t                    \"Cancel\": function() {\n\t                        Galaxy.modal.hide();\n\t                    },\n\t                    \"Add\": function() {\n\t                       var requests = [];\n\t                        $('input[name=id]:checked,input[name=ldda_ids]:checked').each(function() {\n\t                            var data = {\n\t                                    data_type: 'track_config',\n\t                                   'hda_ldda': 'hda'\n\t                                },\n\t                                id = $(this).val();\n\t                               if ($(this).attr(\"name\") !== \"id\") {\n\t                                    data.hda_ldda = 'ldda';\n\t                                }\n\t                                requests[requests.length] = $.ajax({\n\t                                   url: add_track_async_url + \"/\" + id,\n\t                                    data: data,\n\t                                    dataType: \"json\"\n\t                                });\n\t                        });\n\t                        // To preserve order, wait until there are definitions for all tracks and then add\n\t                        // them sequentially.\n\t                        $.when.apply($, requests).then(function() {\n\t                            // jQuery always returns an Array for arguments, so need to look at first element\n\t                            // to determine whether multiple requests were made and consequently how to\n\t                            // map arguments to track definitions.\n\t                            var track_defs = (arguments[0] instanceof Array ?\n\t                                               $.map(arguments, function(arg) { return arg[0]; }) :\n\t                                               [ arguments[0] ]\n\t                                               );\n\t                            success_fn(track_defs);\n\t                        });\n\t                        Galaxy.modal.hide();\n\t                    }\n\t               }\n\t            });\n\t        }\n\t    });\n\t};\n\t\n\t// --------- Models ---------\n\t\n\t/**\n\t * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n\t */\n\tvar CanvasManager = function(default_font) {\n\t    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\t\n\t    this.dummy_canvas = this.new_canvas();\n\t    this.dummy_context = this.dummy_canvas.getContext('2d');\n\t    this.dummy_context.font = this.default_font;\n\t\n\t    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\t\n\t    this.patterns = {};\n\t\n\t    // FIXME: move somewhere to make this more general\n\t    this.load_pattern( 'right_strand', \"/visualization/strand_right.png\" );\n\t    this.load_pattern( 'left_strand', \"/visualization/strand_left.png\" );\n\t    this.load_pattern( 'right_strand_inv', \"/visualization/strand_right_inv.png\" );\n\t    this.load_pattern( 'left_strand_inv', \"/visualization/strand_left_inv.png\" );\n\t};\n\t\n\t_.extend( CanvasManager.prototype, {\n\t    load_pattern: function( key, path ) {\n\t        var patterns = this.patterns,\n\t            dummy_context = this.dummy_context,\n\t            image = new Image();\n\t        image.src = Galaxy.root + \"static/images\" + path;\n\t        image.onload = function() {\n\t            patterns[key] = dummy_context.createPattern( image, \"repeat\" );\n\t        };\n\t    },\n\t    get_pattern: function( key ) {\n\t        return this.patterns[key];\n\t    },\n\t    new_canvas: function() {\n\t        var canvas = $(\"<canvas/>\")[0];\n\t        // Keep a reference back to the manager\n\t        canvas.manager = this;\n\t        return canvas;\n\t    }\n\t});\n\t\n\t/**\n\t * Generic cache that handles key/value pairs. Keys can be any object that can be\n\t * converted to a String and compared.\n\t */\n\tvar Cache = Backbone.Model.extend({\n\t    defaults: {\n\t        num_elements: 20,\n\t        // Objects in cache; indexes into cache are strings of keys.\n\t        obj_cache: null,\n\t        // key_ary contains keys for objects in cache.\n\t        key_ary: null\n\t    },\n\t\n\t    initialize: function(options) {\n\t        this.clear();\n\t    },\n\t\n\t    /**\n\t     * Get an element from the cache using its key.\n\t     */\n\t    get_elt: function(key) {\n\t        var obj_cache = this.attributes.obj_cache,\n\t            key_ary = this.attributes.key_ary,\n\t            key_str = key.toString(),\n\t            index = _.indexOf(key_ary, function(k) {\n\t                return k.toString() === key_str;\n\t            });\n\t\n\t        // Update cache.\n\t        if (index !== -1) {\n\t            // Object is in cache, so update it.\n\t            if (obj_cache[key_str].stale) {\n\t                // Object is stale: remove key and object.\n\t                key_ary.splice(index, 1);\n\t                delete obj_cache[key_str];\n\t            }\n\t            else {\n\t                // Move key to back because it is most recently used.\n\t                this.move_key_to_end(key, index);\n\t            }\n\t        }\n\t\n\t        return obj_cache[key_str];\n\t    },\n\t\n\t    /**\n\t     * Put an element into the cache.\n\t     */\n\t    set_elt: function(key, value) {\n\t        var obj_cache = this.attributes.obj_cache,\n\t            key_ary = this.attributes.key_ary,\n\t            key_str = key.toString(),\n\t            num_elements = this.attributes.num_elements;\n\t\n\t        // Update keys, objects.\n\t        if (!obj_cache[key_str]) {\n\t            // Add object to cache.\n\t\n\t            if (key_ary.length >= num_elements) {\n\t                // Cache full, so remove first element.\n\t                var deleted_key = key_ary.shift();\n\t                delete obj_cache[deleted_key.toString()];\n\t            }\n\t\n\t            // Add key.\n\t            key_ary.push(key);\n\t        }\n\t\n\t        // Add object.\n\t        obj_cache[key_str] = value;\n\t        return value;\n\t    },\n\t\n\t    /**\n\t     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n\t     * delays the key's removal.\n\t     */\n\t    move_key_to_end: function(key, index) {\n\t        this.attributes.key_ary.splice(index, 1);\n\t        this.attributes.key_ary.push(key);\n\t    },\n\t\n\t    /**\n\t     * Clear all elements from the cache.\n\t     */\n\t    clear: function() {\n\t        this.attributes.obj_cache = {};\n\t        this.attributes.key_ary = [];\n\t    },\n\t\n\t    /** Returns the number of elements in the cache. */\n\t    size: function() {\n\t        return this.attributes.key_ary.length;\n\t    },\n\t\n\t    /** Returns key most recently added to cache. */\n\t    most_recently_added: function() {\n\t        return this.size() === 0 ? null :\n\t               // Most recent key is at the end of key array.\n\t               this.attributes.key_ary[this.attributes.key_ary.length - 1];\n\t    }\n\t});\n\t\n\t/**\n\t * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n\t */\n\tvar GenomeDataManager = Cache.extend({\n\t    defaults: _.extend({}, Cache.prototype.defaults, {\n\t        dataset: null,\n\t        genome: null,\n\t        init_data: null,\n\t        min_region_size: 200,\n\t        filters_manager: null,\n\t        data_type: \"data\",\n\t        data_mode_compatible: function(entry, mode) { return true; },\n\t        can_subset: function(entry) { return false; }\n\t    }),\n\t\n\t    /**\n\t     * Initialization.\n\t     */\n\t    initialize: function(options) {\n\t        Cache.prototype.initialize.call(this);\n\t\n\t        // Set initial entries in data manager.\n\t        var initial_entries = this.get('init_data');\n\t        if (initial_entries) {\n\t            this.add_data(initial_entries);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n\t     * If necessary, manager size is increased to hold all data.\n\t     */\n\t    add_data: function(entries) {\n\t        // Increase size to accomodate all entries.\n\t        if (this.get('num_elements') < entries.length) {\n\t            this.set('num_elements', entries.length);\n\t        }\n\t\n\t        // Put data into manager.\n\t        var self = this;\n\t        _.each(entries, function(entry) {\n\t            self.set_data(entry.region, entry);\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n\t     * cannot be used).\n\t     */\n\t    data_is_ready: function() {\n\t        var dataset = this.get('dataset'),\n\t            ready_deferred = $.Deferred(),\n\t            // If requesting raw data, query dataset state; if requesting (converted) data,\n\t            // need to query converted datasets state.\n\t            query_type = (this.get('data_type') === 'raw_data' ? 'state' :\n\t                          this.get('data_type') === 'data' ? 'converted_datasets_state' : \"error\" ),\n\t            ss_deferred = new util_mod.ServerStateDeferred({\n\t                ajax_settings: {\n\t                    url: this.get('dataset').url(),\n\t                    data: {\n\t                        hda_ldda: dataset.get('hda_ldda'),\n\t                        data_type: query_type\n\t                    },\n\t                    dataType: \"json\"\n\t                },\n\t                interval: 5000,\n\t                success_fn: function(response) { return response !== \"pending\"; }\n\t            });\n\t\n\t        $.when(ss_deferred.go()).then(function(response) {\n\t            ready_deferred.resolve(response === \"ok\" || response === \"data\" );\n\t        });\n\t        return ready_deferred;\n\t    },\n\t\n\t    /**\n\t     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n\t     */\n\t    search_features: function(query) {\n\t        var dataset = this.get('dataset'),\n\t            params = {\n\t                query: query,\n\t                hda_ldda: dataset.get('hda_ldda'),\n\t                data_type: 'features'\n\t            };\n\t        return $.getJSON(dataset.url(), params);\n\t    },\n\t\n\t    /**\n\t     * Load data from server and manages data entries. Adds a Deferred to manager\n\t     * for region; when data becomes available, replaces Deferred with data.\n\t     * Returns the Deferred that resolves when data is available.\n\t     */\n\t    load_data: function(region, mode, resolution, extra_params) {\n\t        // Setup data request params.\n\t        var dataset = this.get('dataset'),\n\t            params = {\n\t                        \"data_type\": this.get('data_type'),\n\t                        \"chrom\": region.get('chrom'),\n\t                        \"low\": region.get('start'),\n\t                        \"high\": region.get('end'),\n\t                        \"mode\": mode,\n\t                        \"resolution\": resolution,\n\t                        \"hda_ldda\": dataset.get('hda_ldda')\n\t                     };\n\t\n\t        $.extend(params, extra_params);\n\t\n\t        // Add track filters to params.\n\t        var filters_manager = this.get('filters_manager');\n\t        if (filters_manager) {\n\t            var filter_names = [];\n\t            var filters = filters_manager.filters;\n\t            for (var i = 0; i < filters.length; i++) {\n\t                filter_names.push(filters[i].name);\n\t            }\n\t            params.filter_cols = JSON.stringify(filter_names);\n\t        }\n\t\n\t        // Do request.\n\t        var manager = this,\n\t            entry = $.getJSON(dataset.url(), params, function (result) {\n\t                // Add region to the result.\n\t                result.region = region;\n\t                manager.set_data(region, result);\n\t            });\n\t\n\t        this.set_data(region, entry);\n\t        return entry;\n\t    },\n\t\n\t    /**\n\t     * Get data from dataset.\n\t     */\n\t    get_data: function(region, mode, resolution, extra_params) {\n\t        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n\t        var entry = this.get_elt(region);\n\t        if ( entry &&\n\t             ( util_mod.is_deferred(entry) || this.get('data_mode_compatible')(entry, mode) ) ) {\n\t            return entry;\n\t        }\n\t\n\t        //\n\t        // Look in cache for data that can be used.\n\t        // TODO: this logic could be improved if the visualization knew whether\n\t        // the data was \"index\" or \"data.\"\n\t        //\n\t        var key_ary = this.get('key_ary'),\n\t            obj_cache = this.get('obj_cache'),\n\t            entry_region, is_subregion;\n\t        for (var i = 0; i < key_ary.length; i++) {\n\t            entry_region = key_ary[i];\n\t\n\t            if (entry_region.contains(region)) {\n\t                is_subregion = true;\n\t\n\t                // This entry has data in the requested range. Return if data\n\t                // is compatible and can be subsetted.\n\t                entry = obj_cache[entry_region.toString()];\n\t                if ( util_mod.is_deferred(entry) ||\n\t                    ( this.get('data_mode_compatible')(entry, mode) && this.get('can_subset')(entry) ) ) {\n\t                    this.move_key_to_end(entry_region, i);\n\t\n\t                    // If there's data, subset it.\n\t                    if ( !util_mod.is_deferred(entry) ) {\n\t                        var subset_entry = this.subset_entry(entry, region);\n\t                        this.set_data(region, subset_entry);\n\t                        entry = subset_entry;\n\t                    }\n\t\n\t                    return entry;\n\t                }\n\t            }\n\t        }\n\t\n\t        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n\t        // subsetted. For these cases, do not increase length because region will never be found (and\n\t        // an infinite loop will occur.)\n\t        // If needed, extend region to make it minimum size.\n\t        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n\t            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n\t            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n\t            // below.\n\t\n\t            // Use copy of region to avoid changing actual region.\n\t            region = region.copy();\n\t\n\t            // Use heuristic to extend region: extend relative to last data request.\n\t            var last_request = this.most_recently_added();\n\t            if (!last_request || (region.get('start') > last_request.get('start'))) {\n\t                // This request is after the last request, so extend right.\n\t                region.set('end', region.get('start') + this.attributes.min_region_size);\n\t            }\n\t            else {\n\t                // This request is after the last request, so extend left.\n\t                region.set('start', region.get('end') - this.attributes.min_region_size);\n\t            }\n\t\n\t            // Trim region to avoid invalid coordinates.\n\t            region.set('genome', this.attributes.genome);\n\t            region.trim();\n\t        }\n\t\n\t        return this.load_data(region, mode, resolution, extra_params);\n\t    },\n\t\n\t    /**\n\t     * Alias for set_elt for readbility.\n\t     */\n\t    set_data: function(region, entry) {\n\t        this.set_elt(region, entry);\n\t    },\n\t\n\t    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n\t    DEEP_DATA_REQ: \"deep\",\n\t\n\t    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n\t    BROAD_DATA_REQ: \"breadth\",\n\t\n\t    /**\n\t     * Gets more data for a region using either a depth-first or a breadth-first approach.\n\t     */\n\t    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n\t        var cur_data = this._mark_stale(region);\n\t        if (!(cur_data && this.get('data_mode_compatible')(cur_data, mode))) {\n\t            console.log('ERROR: problem with getting more data: current data is not compatible');\n\t            return;\n\t        }\n\t\n\t        //\n\t        // Set parameters based on request type.\n\t        //\n\t        var query_low = region.get('start');\n\t        if (req_type === this.DEEP_DATA_REQ) {\n\t            // Use same interval but set start_val to skip data that's already in cur_data.\n\t            $.extend(extra_params, {start_val: cur_data.data.length + 1});\n\t        }\n\t        else if (req_type === this.BROAD_DATA_REQ) {\n\t            // To get past an area of extreme feature depth, set query low to be after either\n\t            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n\t            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n\t        }\n\t        var query_region = region.copy().set('start', query_low);\n\t\n\t        //\n\t        // Get additional data, append to current data, and set new data. Use a custom deferred object\n\t        // to signal when new data is available.\n\t        //\n\t        var data_manager = this,\n\t            new_data_request = this.load_data(query_region, mode, resolution, extra_params),\n\t            new_data_available = $.Deferred();\n\t        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n\t        // is all data, not just new data.\n\t        this.set_data(region, new_data_available);\n\t        $.when(new_data_request).then(function(result) {\n\t            // Update data and message.\n\t            if (result.data) {\n\t                result.data = cur_data.data.concat(result.data);\n\t                if (result.max_low) {\n\t                    result.max_low = cur_data.max_low;\n\t                }\n\t                if (result.message) {\n\t                    // HACK: replace number in message with current data length. Works but is ugly.\n\t                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n\t                }\n\t            }\n\t            data_manager.set_data(region, result);\n\t            new_data_available.resolve(result);\n\t        });\n\t        return new_data_available;\n\t    },\n\t\n\t    /**\n\t     * Returns true if more detailed data can be obtained for entry.\n\t     */\n\t    can_get_more_detailed_data: function(region) {\n\t        var cur_data = this.get_elt(region);\n\t\n\t        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n\t        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n\t        return (cur_data.dataset_type === 'bigwig' && cur_data.data.length < 8000);\n\t    },\n\t\n\t    /**\n\t     * Returns more detailed data for an entry.\n\t     */\n\t    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n\t        // Mark current entry as stale.\n\t        var cur_data = this._mark_stale(region);\n\t        if (!cur_data) {\n\t            console.log(\"ERROR getting more detailed data: no current data\");\n\t            return;\n\t        }\n\t\n\t        if (!extra_params) { extra_params = {}; }\n\t\n\t        // Use additional parameters to get more detailed data.\n\t        if (cur_data.dataset_type === 'bigwig') {\n\t            // FIXME: constant should go somewhere.\n\t            extra_params.num_samples = 1000 * detail_multiplier;\n\t        }\n\t\n\t        return this.load_data(region, mode, resolution, extra_params);\n\t    },\n\t\n\t    /**\n\t     * Marks cache data as stale.\n\t     */\n\t    _mark_stale: function(region) {\n\t        var entry = this.get_elt(region);\n\t        if (!entry) {\n\t            console.log(\"ERROR: no data to mark as stale: \", this.get('dataset'), region.toString());\n\t        }\n\t        entry.stale = true;\n\t        return entry;\n\t    },\n\t\n\t    /**\n\t     * Returns an array of data with each entry representing one chromosome/contig\n\t     * of data or, if data is not available, returns a Deferred that resolves to the\n\t     * data when it becomes available.\n\t     */\n\t    get_genome_wide_data: function(genome) {\n\t        // -- Get all data. --\n\t\n\t        var self = this,\n\t            all_data_available = true,\n\t\n\t            //  Map chromosome info into genome data.\n\t            gw_data = _.map(genome.get('chroms_info').chrom_info, function(chrom_info) {\n\t                var chrom_data = self.get_elt(\n\t                    new GenomeRegion({\n\t                        chrom: chrom_info.chrom,\n\t                        start: 0,\n\t                        end: chrom_info.len\n\t                    })\n\t                );\n\t\n\t                // Set flag if data is not available.\n\t                if (!chrom_data) { all_data_available = false; }\n\t\n\t                return chrom_data;\n\t            });\n\t\n\t        // -- If all data is available, return it. --\n\t        if (all_data_available) {\n\t            return gw_data;\n\t        }\n\t\n\t        // -- All data is not available, so load from server. --\n\t\n\t        var deferred = $.Deferred();\n\t        $.getJSON(this.get('dataset').url(), { data_type: 'genome_data' }, function(genome_wide_data) {\n\t            self.add_data(genome_wide_data.data);\n\t            deferred.resolve(genome_wide_data.data);\n\t        });\n\t\n\t        return deferred;\n\t    },\n\t\n\t    /**\n\t     * Returns entry with only data in the subregion.\n\t     */\n\t    subset_entry: function(entry, subregion) {\n\t        // Dictionary from entry type to function for subsetting data.\n\t        var subset_fns = {\n\t            bigwig: function(data, subregion) {\n\t                return _.filter(data, function(data_point) {\n\t                    return data_point[0] >= subregion.get('start') &&\n\t                           data_point[0] <= subregion.get('end');\n\t                });\n\t            },\n\t            refseq: function(data, subregion) {\n\t                var seq_start = subregion.get('start') - entry.region.get('start');\n\t                return entry.data.slice(seq_start, seq_start + subregion.length());\n\t            }\n\t        };\n\t\n\t        // Subset entry if there is a function for subsetting and regions are not the same.\n\t        var subregion_data = entry.data;\n\t        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n\t            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n\t        }\n\t\n\t        // Return entry with subregion's data.\n\t        return {\n\t            region: subregion,\n\t            data: subregion_data,\n\t            dataset_type: entry.dataset_type\n\t        };\n\t    }\n\t});\n\t\n\tvar GenomeReferenceDataManager = GenomeDataManager.extend({\n\t    initialize: function(options) {\n\t        // Use generic object in place of dataset and set urlRoot to fetch data.\n\t        var dataset_placeholder = new Backbone.Model();\n\t        dataset_placeholder.urlRoot = options.data_url;\n\t        this.set('dataset', dataset_placeholder);\n\t    },\n\t\n\t    load_data: function(region, mode, resolution, extra_params) {\n\t        // Fetch data if region is not too large.\n\t        return ( region.length() <= 100000 ?\n\t                 GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params) :\n\t                 { data: null, region: region } );\n\t    }\n\t});\n\t\n\t/**\n\t * A genome build.\n\t */\n\tvar Genome = Backbone.Model.extend({\n\t    defaults: {\n\t        name: null,\n\t        key: null,\n\t        chroms_info: null\n\t    },\n\t\n\t    initialize: function(options) {\n\t        this.id = options.dbkey;\n\t    },\n\t\n\t    /**\n\t     * Shorthand for getting to chromosome information.\n\t     */\n\t    get_chroms_info: function() {\n\t        return this.attributes.chroms_info.chrom_info;\n\t    },\n\t\n\t    /**\n\t     * Returns a GenomeRegion object denoting a complete chromosome.\n\t     */\n\t    get_chrom_region: function(chr_name) {\n\t        // FIXME: use findWhere in underscore 1.4\n\t        var chrom_info = _.find(this.get_chroms_info(), function(chrom_info) {\n\t            return chrom_info.chrom === chr_name;\n\t        });\n\t        return new GenomeRegion({\n\t            chrom: chrom_info.chrom,\n\t            end: chrom_info.len\n\t        });\n\t    },\n\t\n\t    /** Returns the length of a chromosome. */\n\t    get_chrom_len: function(chr_name) {\n\t        // FIXME: use findWhere in underscore 1.4\n\t        return _.find(this.get_chroms_info(), function(chrom_info) {\n\t            return chrom_info.chrom === chr_name;\n\t        }).len;\n\t    }\n\t});\n\t\n\t/**\n\t * A genomic region.\n\t */\n\tvar GenomeRegion = Backbone.Model.extend({\n\t    defaults: {\n\t        chrom: null,\n\t        start: 0,\n\t        end: 0,\n\t        str_val: null,\n\t        genome: null\n\t    },\n\t\n\t    /**\n\t     * Returns true if this region is the same as a given region.\n\t     * It does not test the genome right now.\n\t     */\n\t    same: function(region) {\n\t        return this.attributes.chrom === region.get('chrom') &&\n\t               this.attributes.start === region.get('start') &&\n\t               this.attributes.end === region.get('end');\n\t    },\n\t\n\t    /**\n\t     * If from_str specified, use it to initialize attributes.\n\t     */\n\t    initialize: function(options) {\n\t        if (options.from_str) {\n\t            var pieces = options.from_str.split(':'),\n\t                chrom = pieces[0],\n\t                start_end = pieces[1].split('-');\n\t            this.set({\n\t                chrom: chrom,\n\t                start: parseInt(start_end[0], 10),\n\t                end: parseInt(start_end[1], 10)\n\t            });\n\t        }\n\t\n\t        // Keep a copy of region's string value for fast lookup.\n\t        this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n\t\n\t        // Set str_val on attribute change.\n\t        this.on('change', function() {\n\t            this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n\t        }, this);\n\t    },\n\t\n\t    copy: function() {\n\t        return new GenomeRegion({\n\t            chrom: this.get('chrom'),\n\t            start: this.get('start'),\n\t            end: this.get('end')\n\t        });\n\t    },\n\t\n\t    length: function() {\n\t        return this.get('end') - this.get('start');\n\t    },\n\t\n\t    /** Returns region in canonical form chrom:start-end */\n\t    toString: function() {\n\t        return this.attributes.str_val;\n\t    },\n\t\n\t    toJSON: function() {\n\t        return {\n\t            chrom: this.get('chrom'),\n\t            start: this.get('start'),\n\t            end: this.get('end')\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n\t     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n\t     */\n\t    compute_overlap: function(a_region) {\n\t        var first_chrom = this.get('chrom'), second_chrom = a_region.get('chrom'),\n\t            first_start = this.get('start'), second_start = a_region.get('start'),\n\t            first_end = this.get('end'), second_end = a_region.get('end'),\n\t            overlap;\n\t\n\t        // Compare chroms.\n\t        if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n\t            return GenomeRegion.overlap_results.DIF_CHROMS;\n\t        }\n\t\n\t        // Compare regions.\n\t        if (first_start < second_start) {\n\t            if (first_end < second_start) {\n\t                overlap = GenomeRegion.overlap_results.BEFORE;\n\t            }\n\t            else if (first_end < second_end) {\n\t                overlap = GenomeRegion.overlap_results.OVERLAP_START;\n\t            }\n\t            else { // first_end >= second_end\n\t                overlap = GenomeRegion.overlap_results.CONTAINS;\n\t            }\n\t        }\n\t        else if (first_start > second_start) {\n\t            if (first_start > second_end) {\n\t                overlap = GenomeRegion.overlap_results.AFTER;\n\t            }\n\t            else if (first_end <= second_end) {\n\t                overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n\t            }\n\t            else {\n\t                overlap = GenomeRegion.overlap_results.OVERLAP_END;\n\t            }\n\t        }\n\t        else { // first_start === second_start\n\t            overlap = (first_end >= second_end ?\n\t                       GenomeRegion.overlap_results.CONTAINS :\n\t                       GenomeRegion.overlap_results.CONTAINED_BY);\n\t        }\n\t\n\t        return overlap;\n\t    },\n\t\n\t    /**\n\t     * Trim a region to match genome's constraints.\n\t     */\n\t    trim: function(genome) {\n\t        // Assume that all chromosome/contigs start at 0.\n\t        if (this.attributes.start < 0) {\n\t            this.attributes.start = 0;\n\t        }\n\t\n\t        // Only try to trim the end if genome is set.\n\t        if (this.attributes.genome) {\n\t            var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n\t            if (this.attributes.end > chrom_len) {\n\t                this.attributes.end = chrom_len - 1;\n\t            }\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Returns true if this region contains a given region.\n\t     */\n\t    contains: function(a_region) {\n\t        return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n\t    },\n\t\n\t    /**\n\t     * Returns true if regions overlap.\n\t     */\n\t    overlaps: function(a_region) {\n\t        return _.intersection( [this.compute_overlap(a_region)],\n\t                               [GenomeRegion.overlap_results.DIF_CHROMS, GenomeRegion.overlap_results.BEFORE, GenomeRegion.overlap_results.AFTER] ).length === 0;\n\t    }\n\t},\n\t{\n\t    overlap_results: {\n\t        DIF_CHROMS: 1000,\n\t        BEFORE: 1001,\n\t        CONTAINS: 1002,\n\t        OVERLAP_START: 1003,\n\t        OVERLAP_END: 1004,\n\t        CONTAINED_BY: 1005,\n\t        AFTER: 1006\n\t    }\n\t});\n\t\n\tvar GenomeRegionCollection = Backbone.Collection.extend({\n\t    model: GenomeRegion\n\t});\n\t\n\t/**\n\t * A genome browser bookmark.\n\t */\n\tvar BrowserBookmark = Backbone.Model.extend({\n\t    defaults: {\n\t        region: null,\n\t        note: ''\n\t    },\n\t\n\t    initialize: function(options) {\n\t        this.set('region', new GenomeRegion(options.region));\n\t    }\n\t});\n\t\n\t/**\n\t * Bookmarks collection.\n\t */\n\tvar BrowserBookmarkCollection = Backbone.Collection.extend({\n\t    model: BrowserBookmark\n\t});\n\t\n\t/**\n\t * A track of data in a genome visualization.\n\t */\n\t// TODO: rename to Track and merge with Trackster's Track object.\n\tvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend({\n\t    defaults: {\n\t        mode: 'Auto'\n\t    },\n\t\n\t    initialize: function(options) {\n\t        this.set('dataset', new data_mod.Dataset(options.dataset));\n\t\n\t        // -- Set up config settings. --\n\t        var models =  [\n\t            { key: 'name', default_value: this.get('dataset').get('name') },\n\t            { key: 'color' },\n\t            { key: 'min_value', label: 'Min Value', type: 'float', default_value: 0 },\n\t            { key: 'max_value', label: 'Max Value', type: 'float', default_value: 1 }\n\t        ];\n\t\n\t        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\t\n\t        // -- Set up data manager. --\n\t        var preloaded_data = this.get('preloaded_data');\n\t        if (preloaded_data) {\n\t            preloaded_data = preloaded_data.data;\n\t        }\n\t        else {\n\t            preloaded_data = [];\n\t        }\n\t        this.set('data_manager', new GenomeDataManager({\n\t            dataset: this.get('dataset'),\n\t            init_data: preloaded_data\n\t        }));\n\t    }\n\t},\n\t{\n\t    // This definition matches that produced by to_dict() methods in tracks.js\n\t    to_json_keys: [\n\t        'track_type',\n\t        'dataset',\n\t        'prefs',\n\t        'mode',\n\t        'filters',\n\t        'tool_state'\n\t    ],\n\t    to_json_mappers: {\n\t        prefs: function(p, self) {\n\t            if (_.size(p) === 0) {\n\t                p = {\n\t                    name: self.get('config').get('name').get('value'),\n\t                    color: self.get('config').get('color').get('value')\n\t                };\n\t            }\n\t            return p;\n\t        },\n\t        dataset: function(d) {\n\t            return {\n\t                id: d.id,\n\t                hda_ldda: d.get('hda_ldda')\n\t            };\n\t        }\n\t    }\n\t});\n\t\n\tvar BackboneTrackCollection = Backbone.Collection.extend({\n\t    model: BackboneTrack\n\t});\n\t\n\t/**\n\t * A visualization.\n\t */\n\tvar Visualization = Backbone.Model.extend({\n\t    defaults: {\n\t        title: '',\n\t        type: ''\n\t    },\n\t\n\t    urlRoot: Galaxy.root + \"api/visualizations\",\n\t\n\t    /**\n\t     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n\t     * Note: This is necessary because (a) Galaxy requires keyword args and\n\t     * (b) Galaxy does not handle PUT now.\n\t     */\n\t    save: function() {\n\t        return $.ajax({\n\t            url: this.url(),\n\t            type: \"POST\",\n\t            dataType: \"json\",\n\t            data: {\n\t                vis_json: JSON.stringify(this)\n\t            }\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * A visualization of genome data.\n\t */\n\tvar GenomeVisualization = Visualization.extend(CustomToJSON).extend({\n\t    defaults: _.extend({}, Visualization.prototype.defaults, {\n\t        dbkey: '',\n\t        drawables: null,\n\t        bookmarks: null,\n\t        viewport: null\n\t    }),\n\t\n\t    initialize: function(options) {\n\t        // Replace drawables with tracks.\n\t        this.set('drawables', new BackboneTrackCollection(options.tracks));\n\t\n\t        var models = [];\n\t        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\t\n\t        // Clear track and data definitions to avoid storing large objects.\n\t        this.unset('tracks');\n\t        this.get('drawables').each(function(d) {\n\t            d.unset('preloaded_data');\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Add a track or array of tracks to the visualization.\n\t     */\n\t    add_tracks: function(tracks) {\n\t        this.get('drawables').add(tracks);\n\t    }\n\t},\n\t{\n\t    // This definition matches that produced by to_dict() methods in tracks.js\n\t    to_json_keys: [\n\t        'view',\n\t        'viewport',\n\t        'bookmarks'\n\t    ],\n\t\n\t    to_json_mappers: {\n\t        'view': function(dummy, self) {\n\t            return {\n\t                obj_type: 'View',\n\t                prefs: {\n\t                    name: self.get('title'),\n\t                    content_visible: true\n\t                },\n\t                drawables: self.get('drawables')\n\t            };\n\t        }\n\t    }\n\t}\n\t);\n\t\n\t/**\n\t * -- Routers --\n\t */\n\t\n\t/**\n\t * Router for track browser.\n\t */\n\tvar TrackBrowserRouter = Backbone.Router.extend({\n\t    initialize: function(options) {\n\t        this.view = options.view;\n\t\n\t        // Can't put regular expression in routes dictionary.\n\t        // NOTE: parentheses are used to denote parameters returned to callback.\n\t        this.route(/([\\w]+)$/, 'change_location');\n\t        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, 'change_location');\n\t\n\t        // Handle navigate events from view.\n\t        var self = this;\n\t        self.view.on(\"navigate\", function(new_loc) {\n\t            self.navigate(new_loc);\n\t        });\n\t    },\n\t\n\t    change_location: function(new_loc) {\n\t        this.view.go_to(new_loc);\n\t    }\n\t});\n\t\n\treturn {\n\t    BackboneTrack: BackboneTrack,\n\t    BrowserBookmark: BrowserBookmark,\n\t    BrowserBookmarkCollection: BrowserBookmarkCollection,\n\t    Cache: Cache,\n\t    CanvasManager: CanvasManager,\n\t    Genome: Genome,\n\t    GenomeDataManager: GenomeDataManager,\n\t    GenomeRegion: GenomeRegion,\n\t    GenomeRegionCollection: GenomeRegionCollection,\n\t    GenomeVisualization: GenomeVisualization,\n\t    GenomeReferenceDataManager: GenomeReferenceDataManager,\n\t    TrackBrowserRouter: TrackBrowserRouter,\n\t    Visualization: Visualization,\n\t    select_datasets: select_datasets\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */,\n/* 103 */,\n/* 104 */,\n/* 105 */,\n/* 106 */,\n/* 107 */,\n/* 108 */,\n/* 109 */,\n/* 110 */,\n/* 111 */,\n/* 112 */,\n/* 113 */,\n/* 114 */,\n/* 115 */,\n/* 116 */,\n/* 117 */,\n/* 118 */,\n/* 119 */,\n/* 120 */,\n/* 121 */,\n/* 122 */,\n/* 123 */,\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/**\n\t * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n\t */\n\t\n\t// global variables\n\tvar ui              = null;\n\tvar view            = null;\n\tvar browser_router  = null;\n\t\n\t// load required libraries\n\t__webpack_require__.e/* require */(5, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [\n\t    // load js libraries\n\t    __webpack_require__(4),\n\t    __webpack_require__(96),\n\t    __webpack_require__(65),\n\t    __webpack_require__(98),\n\t    __webpack_require__(64),\n\t    __webpack_require__(68),\n\t    __webpack_require__(94),\n\t    __webpack_require__(66),\n\t    __webpack_require__(67),\n\t    __webpack_require__(16),\n\t]; (function(mod_utils, mod_icon_btn)\n\t{\n\t    // load css\n\t    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n\t    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n\t    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n\t    mod_utils.cssLoadFile(\"static/style/library.css\");\n\t    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n\t}.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));});\n\t\n\t// trackster viewer\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(3),\n\t    __webpack_require__(128),\n\t    __webpack_require__(59),\n\t    __webpack_require__(15),\n\t    __webpack_require__(58)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, tracks, visualization, mod_icon_btn, query_string) {\n\t\n\t/**\n\t * Base Object/Model for inhertiance.\n\t */\n\tvar Base = function() {\n\t    if( this.initialize ) {\n\t        this.initialize.apply(this, arguments);\n\t    }\n\t};\n\tBase.extend = Backbone.Model.extend;\n\t\n\t/**\n\t * User interface controls for trackster\n\t */\n\tvar TracksterUI = Base.extend({\n\t    initialize: function( baseURL ) {\n\t        this.baseURL = baseURL;\n\t    },\n\t\n\t    /**\n\t     * Save visualization, returning a Deferred object for the remote call to save.\n\t     */\n\t    save_viz: function() {\n\t        // show dialog\n\t        Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\t\n\t        // Save bookmarks.\n\t        var bookmarks = [];\n\t        $(\".bookmark\").each(function() {\n\t            bookmarks.push({\n\t                position: $(this).children(\".position\").text(),\n\t                annotation: $(this).children(\".annotation\").text()\n\t            });\n\t        });\n\t\n\t        // FIXME: give unique IDs to Drawables and save overview as ID.\n\t        var overview_track_name = (view.overview_drawable ? view.overview_drawable.config.get_value('name') : null),\n\t            viz_config = {\n\t                'view': view.to_dict(),\n\t                'viewport': { 'chrom': view.chrom, 'start': view.low , 'end': view.high, 'overview': overview_track_name },\n\t                'bookmarks': bookmarks\n\t            };\n\t\n\t        // Make call to save visualization.\n\t        return $.ajax({\n\t            url: Galaxy.root + \"visualization/save\",\n\t            type: \"POST\",\n\t            dataType: \"json\",\n\t            data: {\n\t                'id'        : view.vis_id,\n\t                'title'     : view.config.get_value('name'),\n\t                'dbkey'     : view.dbkey,\n\t                'type'      : 'trackster',\n\t                'vis_json'  : JSON.stringify(viz_config)\n\t            }\n\t        }).success(function(vis_info) {\n\t            Galaxy.modal.hide();\n\t            view.vis_id = vis_info.vis_id;\n\t            view.has_changes = false;\n\t\n\t            // Needed to set URL when first saving a visualization.\n\t            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n\t        }).error(function() {\n\t            // show dialog\n\t            Galaxy.modal.show({\n\t                title   : \"Could Not Save\",\n\t                body    : \"Could not save visualization. Please try again later.\",\n\t                buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n\t            });\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Create button menu\n\t     */\n\t    createButtonMenu: function() {\n\t        var self = this,\n\t            menu = mod_icon_btn.create_icon_buttons_menu([\n\t            { icon_class: 'plus-button', title: 'Add tracks', on_click: function() {\n\t                visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey },\n\t                function(new_tracks) {\n\t                    _.each(new_tracks, function(track) {\n\t                        view.add_drawable( tracks.object_from_template(track, view, view) );\n\t                    });\n\t                });\n\t            } },\n\t            { icon_class: 'block--plus', title: 'Add group', on_click: function() {\n\t                view.add_drawable( new tracks.DrawableGroup(view, view, { name: \"New Group\" }) );\n\t            } },\n\t            { icon_class: 'bookmarks', title: 'Bookmarks', on_click: function() {\n\t                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n\t                force_right_panel(($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\"));\n\t            } },\n\t            {\n\t                icon_class: 'globe',\n\t                title: 'Circster',\n\t                on_click: function() {\n\t                    window.location = self.baseURL + 'visualization/circster?id=' + view.vis_id;\n\t                }\n\t            },\n\t            { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n\t                self.save_viz();\n\t            } },\n\t            {\n\t                icon_class: 'cross-circle',\n\t                title: 'Close',\n\t                on_click: function() {\n\t                    self.handle_unsaved_changes(view);\n\t                }\n\t            }\n\t        ],\n\t        {\n\t            tooltip_config: { placement: 'bottom' }\n\t        });\n\t        this.buttonMenu = menu;\n\t        return menu;\n\t    },\n\t\n\t    /**\n\t     * Use a popup to select a dataset of create bookmarks from\n\t     */\n\t    add_bookmarks: function() {\n\t        var self = this,\n\t            baseURL = this.baseURL;\n\t\n\t        // show modal while loading history\n\t        Galaxy.modal.show({title: \"Select dataset for new bookmarks\", body: \"progress\" });\n\t\n\t        $.ajax({\n\t            url: this.baseURL + \"/visualization/list_histories\",\n\t            data: { \"f-dbkey\": view.dbkey },\n\t            error: function() { alert( \"Grid failed\" ); },\n\t            success: function(table_html) {\n\t\n\t                // show modal to select bookmarks\n\t                Galaxy.modal.show(\n\t                {\n\t                    title   : \"Select dataset for new bookmarks\",\n\t                    body    : table_html,\n\t                    buttons :\n\t                    {\n\t                        \"Cancel\": function()\n\t                        {\n\t                            Galaxy.modal.hide();\n\t                        },\n\t\n\t                        \"Insert\": function()\n\t                        {\n\t                            // Just use the first selected\n\t                            $('input[name=id]:checked,input[name=ldda_ids]:checked').first().each(function()\n\t                            {\n\t                                var data, id = $(this).val();\n\t                                if ($(this).attr(\"name\") === \"id\")\n\t                                    data = { hda_id: id };\n\t                                else\n\t                                    data = { ldda_id: id};\n\t\n\t                                $.ajax({\n\t                                    url: this.baseURL + \"/visualization/bookmarks_from_dataset\",\n\t                                    data: data,\n\t                                    dataType: \"json\"\n\t                                }).then( function(data) {\n\t                                    for( i = 0; i < data.data.length; i++ ) {\n\t                                        var row = data.data[i];\n\t                                        self.add_bookmark( row[0], row[1] );\n\t                                    }\n\t                                });\n\t                            });\n\t                            Galaxy.modal.hide();\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Add bookmark.\n\t     */\n\t    add_bookmark: function(position, annotation, editable) {\n\t        // Create HTML.\n\t        var bookmarks_container = $(\"#right .unified-panel-body\"),\n\t            new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\t\n\t        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark),\n\t            position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function() {\n\t                view.go_to(position);\n\t                return false;\n\t            }),\n\t            annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\t\n\t        // If editable, enable bookmark deletion and annotation editing.\n\t        if (editable) {\n\t            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function (){\n\t                    // Remove bookmark.\n\t                    new_bookmark.slideUp(\"fast\");\n\t                    new_bookmark.remove();\n\t                    view.has_changes = true;\n\t                    return false;\n\t                }),\n\t                delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n\t            annotation_div.make_text_editable({\n\t                num_rows: 3,\n\t                use_textarea: true,\n\t                help_text: \"Edit bookmark note\"\n\t            }).addClass(\"annotation\");\n\t        }\n\t\n\t        view.has_changes = true;\n\t        return new_bookmark;\n\t    },\n\t\n\t    /**\n\t     * Create a complete Trackster visualization. Returns view.\n\t     */\n\t    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n\t\n\t        // Create view.\n\t        var self = this,\n\t            view = new tracks.TracksterView(_.extend(view_config, {header: false}));\n\t        view.editor = true;\n\t        $.when( view.load_chroms_deferred ).then(function(chrom_info) {\n\t            // Viewport config.\n\t            if (viewport_config) {\n\t                var chrom = viewport_config.chrom,\n\t                    start = viewport_config.start,\n\t                    end = viewport_config.end,\n\t                    overview_drawable_name = viewport_config.overview;\n\t\n\t                if (chrom && (start !== undefined) && end) {\n\t                    view.change_chrom(chrom, start, end);\n\t                }\n\t                else {\n\t                    // No valid viewport, so use first chromosome.\n\t                    view.change_chrom(chrom_info[0].chrom);\n\t                }\n\t            }\n\t            else {\n\t                // No viewport, so use first chromosome.\n\t                view.change_chrom(chrom_info[0].chrom);\n\t            }\n\t\n\t            // Add drawables to view.\n\t            if (drawables_config) {\n\t                // FIXME: can from_dict() be used to create view and add drawables?\n\t                var drawable_config,\n\t                    drawable_type,\n\t                    drawable;\n\t                for (var i = 0; i < drawables_config.length; i++) {\n\t                    view.add_drawable( tracks.object_from_template( drawables_config[i], view, view ) );\n\t                }\n\t            }\n\t\n\t            // Set overview.\n\t            var overview_drawable;\n\t            for (var i = 0; i < view.drawables.length; i++) {\n\t                if (view.drawables[i].config.get_value('name') === overview_drawable_name) {\n\t                    view.set_overview(view.drawables[i]);\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // Load bookmarks.\n\t            if (bookmarks_config) {\n\t                var bookmark;\n\t                for (var i = 0; i < bookmarks_config.length; i++) {\n\t                    bookmark = bookmarks_config[i];\n\t                    self.add_bookmark(bookmark['position'], bookmark['annotation'], editable);\n\t                }\n\t            }\n\t\n\t            // View has no changes as of yet.\n\t            view.has_changes = false;\n\t        });\n\t\n\t        // Final initialization.\n\t        this.set_up_router({view: view});\n\t\n\t        return view;\n\t    },\n\t\n\t    /**\n\t     * Set up location router to use hashes as track browser locations.\n\t     */\n\t    set_up_router : function(options)\n\t    {\n\t        new visualization.TrackBrowserRouter(options);\n\t        Backbone.history.start();\n\t    },\n\t\n\t    /**\n\t     * Set up keyboard navigation for a visualization.\n\t     */\n\t    init_keyboard_nav: function(view) {\n\t        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n\t        $(document).keyup(function(e) {\n\t            // Do not navigate if arrow keys used in input element.\n\t            if ($(e.srcElement).is(':input')) {\n\t                return;\n\t            }\n\t\n\t            // Key codes: left == 37, up == 38, right == 39, down == 40\n\t            switch(e.which) {\n\t                case 37:\n\t                    view.move_fraction(0.25);\n\t                    break;\n\t                case 38:\n\t                    var change = Math.round(view.viewport_container.height()/15.0);\n\t                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() - 20);\n\t                    break;\n\t                case 39:\n\t                    view.move_fraction(-0.25);\n\t                    break;\n\t                case 40:\n\t                    var change = Math.round(view.viewport_container.height()/15.0);\n\t                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() + 20);\n\t                    break;\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Handle unsaved changes in visualization.\n\t     */\n\t    handle_unsaved_changes: function(view) {\n\t        if (view.has_changes) {\n\t            var self = this;\n\t            Galaxy.modal.show({\n\t                title: \"Close visualization\",\n\t                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n\t                buttons: {\n\t                    \"Cancel\": function() { Galaxy.modal.hide(); },\n\t                    \"Leave without Saving\" : function() {\n\t                        $(window).off('beforeunload');\n\t                        window.location = Galaxy.root + 'visualization';\n\t                    },\n\t                    \"Save\" : function() {\n\t                        $.when(self.save_viz()).then(function() {\n\t                            window.location = Galaxy.root + 'visualization';\n\t                        });\n\t                    }\n\t                }\n\t            });\n\t\n\t        }\n\t        else {\n\t            window.location = Galaxy.root + 'visualization';\n\t        }\n\t    }\n\t\n\t});\n\t\n\tvar TracksterView = Backbone.View.extend(\n\t{\n\t    // initalize trackster\n\t    initialize : function ()\n\t    {\n\t        // load ui\n\t        ui = new TracksterUI(Galaxy.root);\n\t\n\t        // create button menu\n\t        ui.createButtonMenu();\n\t\n\t        // attach the button menu to the panel header and float it left\n\t        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\t\n\t        // add to center panel\n\t        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\t\n\t        // configure right panel\n\t        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n\t        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\t\n\t        // resize view when showing/hiding right panel (bookmarks for now).\n\t        $(\"#right-border\").click(function() { view.resize_window(); });\n\t\n\t        // hide right panel\n\t        force_right_panel(\"hide\");\n\t\n\t\n\t        // check if id is available\n\t        if (galaxy_config.app.id){\n\t            this.view_existing();\n\t        } else if( query_string.get( 'dataset_id' ) ){\n\t            this.choose_existing_or_new();\n\t        } else {\n\t            this.view_new();\n\t        }\n\t    },\n\t\n\t    choose_existing_or_new : function () {\n\t        var self = this;\n\t        var dbkey = query_string.get( 'dbkey' ),\n\t            listTracksParams = {},\n\t            dataset_params = {\n\t                dbkey       : dbkey,\n\t                dataset_id  : query_string.get( 'dataset_id' ),\n\t                hda_ldda    : query_string.get( 'hda_ldda' )\n\t            };\n\t        if (dbkey){\n\t            listTracksParams[ 'f-dbkey' ] = dbkey;\n\t        }\n\t        $.ajax({\n\t            url: Galaxy.root + 'visualization/list_tracks?' + $.param( listTracksParams ),\n\t            dataType: \"html\",\n\t            error: function() { alert( \"Could not add this dataset to browser.\" ); },\n\t\n\t            success: function(table_html) {\n\t                console.debug( 'success' );\n\t                function view_in_saved(){\n\t                    // Show new modal with saved visualizations.\n\t                    Galaxy.modal.show({\n\t                        title : \"Add Data to Saved Visualization\",\n\t                        body : table_html,\n\t                        buttons : {\n\t                            \"Cancel\": function() {\n\t                                // go back to the first choice\n\t                                show_choice();\n\t                            },\n\t                            \"Add to visualization\": function() {\n\t                                $(parent.document).find('input[name=id]:checked').each(function() {\n\t                                    var vis_id = $(this).val();\n\t                                    dataset_params.id = vis_id;\n\t                                    window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n\t                                });\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t                function show_choice(){\n\t                    Galaxy.modal.show({\n\t                        title : \"View Data in a New or Saved Visualization?\",\n\t                        // either have text in here or have to remove body and the header/footer margins\n\t                        body  : (\n\t                            // TODO: yay. inline styles. thanks, galaxy\n\t                            '<p><ul style=\"list-style: disc inside none\">You can add this dataset as:' +\n\t                                \"<li>a new track to one of your existing, saved Trackster \" +\n\t                                \"sessions if they share the genome build: <b>\" + dbkey + \"</b></li>\" +\n\t                                \"<li>or create a new session with this dataset as the only track</li>\" +\n\t                            \"</ul></p>\"\n\t                        ),\n\t                        buttons : {\n\t                            \"Cancel\": function() {\n\t                                window.location = Galaxy.root + \"visualization/list\";\n\t                            },\n\t                            \"View in saved visualization\": function() {\n\t                                view_in_saved();\n\t                            },\n\t                            \"View in new visualization\": function() {\n\t                                self.view_new();\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t                show_choice();\n\t            }\n\t        });\n\t    },\n\t\n\t    // view\n\t    view_existing : function ()\n\t    {\n\t        // get config\n\t        var viz_config = galaxy_config.app.viz_config;\n\t\n\t        // view\n\t        view = ui.create_visualization(\n\t        {\n\t            container: $(\"#center .unified-panel-body\"),\n\t            name: viz_config.title,\n\t            vis_id: viz_config.vis_id,\n\t            dbkey: viz_config.dbkey\n\t        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\t\n\t        // initialize editor\n\t        this.init_editor();\n\t    },\n\t\n\t    // view\n\t    view_new : function ()\n\t    {\n\t        // availability of default database key\n\t        /*if (galaxy_config.app.default_dbkey !== undefined)\n\t        {\n\t            this.create_browser(\"Unnamed\", galaxy_config.app.default_dbkey);\n\t            return;\n\t        }*/\n\t\n\t        // reference this\n\t        var self = this;\n\t\n\t        // ajax\n\t        $.ajax(\n\t        {\n\t            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n\t            data: {},\n\t            error: function() { alert( \"Couldn't create new browser.\" ); },\n\t            success: function(response)\n\t            {\n\t                // show dialog\n\t                Galaxy.modal.show({\n\t                    title   : \"New Visualization\",\n\t                    body    : self.template_view_new(response),\n\t                    buttons : {\n\t                        \"Cancel\": function() { window.location = Galaxy.root + \"visualization/list\"; },\n\t                        \"Create\": function() { self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val()); Galaxy.modal.hide(); }\n\t                    }\n\t                });\n\t\n\t                // select default\n\t                var dbkeys_in_genomes = response.map( function( r ){ return r[1]; });\n\t                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes,galaxy_config.app.default_dbkey)) {\n\t                    $(\"#new-dbkey\").val( galaxy_config.app.default_dbkey );\n\t                }\n\t\n\t                // change focus\n\t                $(\"#new-title\").focus();\n\t                $(\"select[name='dbkey']\").select2();\n\t\n\t                // to support the large number of options for dbkey, enable scrolling in overlay.\n\t                $(\"#overlay\").css(\"overflow\", \"auto\");\n\t            }\n\t        });\n\t    },\n\t\n\t    // new browser form\n\t    template_view_new: function(response)\n\t    {\n\t        // start template\n\t        var html =  '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n\t                        '<div class=\"form-row\">' +\n\t                            '<label for=\"new-title\">Browser name:</label>' +\n\t                            '<div class=\"form-row-input\">' +\n\t                                '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n\t                            '</div>' +\n\t                            '<div style=\"clear: both;\"></div>' +\n\t                        '</div>' +\n\t                        '<div class=\"form-row\">' +\n\t                            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n\t                            '<div class=\"form-row-input\">' +\n\t                                '<select name=\"dbkey\" id=\"new-dbkey\">';\n\t\n\t        // add dbkeys\n\t        for (var i = 0; i < response.length; i++) {\n\t            html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + '</option>';\n\t        }\n\t\n\t        // close selection/finalize template\n\t        html +=                 '</select>' +\n\t                            '</div>' +\n\t                            '<div style=\"clear: both;\"></div>' +\n\t                        '</div>' +\n\t                        '<div class=\"form-row\">' +\n\t                            'Is the build not listed here? ' +\n\t                            '<a href=\"' + Galaxy.root + 'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n\t                        '</div>' +\n\t                    '</form>';\n\t\n\t        // return\n\t        return html;\n\t    },\n\t\n\t    // create\n\t    create_browser : function(name, dbkey)\n\t    {\n\t        $(document).trigger(\"convert_to_values\");\n\t\n\t        view = ui.create_visualization (\n\t        {\n\t            container: $(\"#center .unified-panel-body\"),\n\t            name: name,\n\t            dbkey: dbkey\n\t        }, galaxy_config.app.gene_region);\n\t\n\t        // initialize editor\n\t        this.init_editor();\n\t\n\t        // modify view setting\n\t        view.editor = true;\n\t    },\n\t\n\t    // initialization for editor-specific functions.\n\t    init_editor : function ()\n\t    {\n\t        // set title\n\t        $(\"#center .unified-panel-title\").text(view.config.get_value('name') + \" (\" + view.dbkey + \")\");\n\t\n\t        // add dataset\n\t        if (galaxy_config.app.add_dataset)\n\t            $.ajax({\n\t                url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n\t                data: { hda_ldda: 'hda', data_type: 'track_config' },\n\t                dataType: \"json\",\n\t                success: function(track_data) { view.add_drawable( tracks.object_from_template(track_data, view, view) ); }\n\t            });\n\t\n\t        // initialize icons\n\t        $(\"#add-bookmark-button\").click(function()\n\t        {\n\t            // add new bookmark.\n\t            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n\t                annotation = \"Bookmark description\";\n\t            return ui.add_bookmark(position, annotation, true);\n\t        });\n\t\n\t        // initialize keyboard\n\t        ui.init_keyboard_nav(view);\n\t\n\t        $(window).on('beforeunload', function() {\n\t            if (view.has_changes) {\n\t                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n\t            }\n\t        });\n\t    }\n\t});\n\t\n\treturn {\n\t    TracksterUI: TracksterUI,\n\t    GalaxyApp : TracksterView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_) {\n\t\n\tvar extend = _.extend;\n\t\n\t/**\n\t * Filters that enable users to show/hide data points dynamically.\n\t */\n\tvar Filter = function(obj_dict) {\n\t    this.manager = null;\n\t    this.name = obj_dict.name;\n\t    // Index into payload to filter.\n\t    this.index = obj_dict.index;\n\t    this.tool_id = obj_dict.tool_id;\n\t    // Name to use for filter when building expression for tool.\n\t    this.tool_exp_name = obj_dict.tool_exp_name;\n\t};\n\t\n\textend(Filter.prototype, {\n\t    /**\n\t     * Convert filter to dictionary.\n\t     */\n\t    to_dict: function() {\n\t        return {\n\t            name: this.name,\n\t            index: this.index,\n\t            tool_id: this.tool_id,\n\t            tool_exp_name: this.tool_exp_name\n\t        };\n\t    } \n\t});\n\t\n\t/**\n\t * Creates an action icon.\n\t */\n\tvar create_action_icon =  function(title, css_class, on_click_fn) {\n\t    return $(\"<a/>\").attr(\"href\", \"javascript:void(0);\").attr(\"title\", title)\n\t                    .addClass(\"icon-button\").addClass(css_class).tooltip()\n\t                    .click(on_click_fn);\n\t};\n\t\n\t/**\n\t * Number filters have a min, max as well as a low, high; low and high are used \n\t */\n\tvar NumberFilter = function(obj_dict) {\n\t    //\n\t    // Attribute init.\n\t    //\n\t    Filter.call(this, obj_dict);\n\t    // Filter low/high. These values are used to filter elements.\n\t    this.low = ('low' in obj_dict ? obj_dict.low : -Number.MAX_VALUE);\n\t    this.high = ('high' in obj_dict ? obj_dict.high : Number.MAX_VALUE);\n\t    // Slide min/max. These values are used to set/update slider.\n\t    this.min = ('min' in obj_dict ? obj_dict.min : Number.MAX_VALUE);\n\t    this.max = ('max' in obj_dict ? obj_dict.max : -Number.MAX_VALUE);\n\t    // UI elements associated with filter.\n\t    this.container = null;\n\t    this.slider = null;\n\t    this.slider_label = null;\n\t    \n\t    //\n\t    // Create HTML.\n\t    //\n\t    \n\t    // Function that supports inline text editing of slider values.\n\t    // Enable users to edit parameter's value via a text box.\n\t    var edit_slider_values = function(container, span, slider) {\n\t        container.click(function() {\n\t            var cur_value = span.text(),\n\t                max = parseFloat(slider.slider(\"option\", \"max\")),\n\t                input_size = (max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6),\n\t                multi_value = false,\n\t                slider_row = $(this).parents(\".slider-row\");\n\t                \n\t            // Row now has input.\n\t            slider_row.addClass(\"input\");\n\t                \n\t            // Increase input size if there are two values.\n\t            if (slider.slider(\"option\", \"values\")) {\n\t                input_size = 2*input_size + 1;\n\t                multi_value = true;\n\t            }\n\t            span.text(\"\");\n\t            // Temporary input for changing value.\n\t            $(\"<input type='text'/>\").attr(\"size\", input_size).attr(\"maxlength\", input_size)\n\t                                     .attr(\"value\", cur_value).appendTo(span).focus().select()\n\t                                     .click(function(e) {\n\t                // Don't want click to propogate up to values_span and restart everything.\n\t                e.stopPropagation();\n\t            }).blur(function() {\n\t                $(this).remove();\n\t                span.text(cur_value);\n\t                slider_row.removeClass(\"input\");\n\t            }).keyup(function(e) {\n\t                if (e.keyCode === 27) {\n\t                    // Escape key.\n\t                    $(this).trigger(\"blur\");\n\t                } else if (e.keyCode === 13) {\n\t                    //\n\t                    // Enter/return key initiates callback. If new value(s) are in slider range, \n\t                    // change value (which calls slider's change() function).\n\t                    //\n\t                    var slider_min = slider.slider(\"option\", \"min\"),\n\t                        slider_max = slider.slider(\"option\", \"max\"),\n\t                        invalid = function(a_val) {\n\t                            return (isNaN(a_val) || a_val > slider_max || a_val < slider_min);\n\t                        },\n\t                        new_value = $(this).val();\n\t                    if (!multi_value) {\n\t                        new_value = parseFloat(new_value);\n\t                        if (invalid(new_value)) {\n\t                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n\t                            return $(this);\n\t                        }\n\t                    }\n\t                    else { // Multi value.\n\t                        new_value = new_value.split(\"-\");\n\t                        new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n\t                        if (invalid(new_value[0]) || invalid(new_value[1])) {\n\t                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n\t                            return $(this);\n\t                        }\n\t                    }\n\t                    \n\t                    // Updating the slider also updates slider values and removes input. \n\t                    slider.slider((multi_value ? \"values\" : \"value\"), new_value);\n\t                    slider_row.removeClass(\"input\");\n\t                }\n\t            });\n\t        });\n\t    };\n\t    \n\t    var filter = this;\n\t    \n\t    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n\t    \n\t    // Set up filter label (name, values).\n\t    var filter_label = $(\"<div/>\").addClass(\"elt-label\").appendTo(filter.parent_div),\n\t        name_span = $(\"<span/>\").addClass(\"slider-name\").text(filter.name + \"  \").appendTo(filter_label),\n\t        values_span = $(\"<span/>\").text(this.low + \"-\" + this.high),\n\t        values_span_container = $(\"<span/>\").addClass(\"slider-value\").appendTo(filter_label).append(\"[\").append(values_span).append(\"]\");\n\t    filter.values_span = values_span;\n\t            \n\t    // Set up slider for filter.\n\t    var slider_div = $(\"<div/>\").addClass(\"slider\").appendTo(filter.parent_div);\n\t    filter.control_element = $(\"<div/>\").attr(\"id\", filter.name + \"-filter-control\").appendTo(slider_div);\n\t    filter.control_element.slider({\n\t        range: true,\n\t        min: this.min,\n\t        max: this.max,\n\t        step: this.get_slider_step(this.min, this.max),\n\t        values: [this.low, this.high],\n\t        slide: function(event, ui) { \n\t            filter.slide(event, ui); \n\t        },\n\t        change: function(event, ui) {\n\t            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n\t        }\n\t    });\n\t    filter.slider = filter.control_element;\n\t    filter.slider_label = values_span;\n\t    \n\t    // Enable users to edit slider values via text box.\n\t    edit_slider_values(values_span_container, values_span, filter.control_element);\n\t    \n\t    // Set up filter display controls.\n\t    var display_controls_div = $(\"<div/>\").addClass(\"display-controls\").appendTo(filter.parent_div);\n\t    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", \n\t                                                function() {\n\t                                                    if (filter.manager.alpha_filter !== filter) {\n\t                                                        // Setting this filter as the alpha filter.\n\t                                                        filter.manager.alpha_filter = filter;\n\t                                                        // Update UI for new filter.\n\t                                                        filter.manager.parent_div.find(\".layer-transparent\").removeClass(\"active\").hide();\n\t                                                        filter.transparency_icon.addClass(\"active\").show();\n\t                                                    }\n\t                                                    else {\n\t                                                        // Clearing filter as alpha filter.\n\t                                                        filter.manager.alpha_filter = null;\n\t                                                        filter.transparency_icon.removeClass(\"active\");\n\t                                                    }\n\t                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n\t                                                } )\n\t                                                .appendTo(display_controls_div).hide();\n\t    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", \n\t                                                function() {\n\t                                                    if (filter.manager.height_filter !== filter) {\n\t                                                        // Setting this filter as the height filter.\n\t                                                        filter.manager.height_filter = filter;\n\t                                                        // Update UI for new filter.\n\t                                                        filter.manager.parent_div.find(\".arrow-resize-090\").removeClass(\"active\").hide();\n\t                                                        filter.height_icon.addClass(\"active\").show();\n\t                                                    }\n\t                                                    else {\n\t                                                        // Clearing filter as alpha filter.\n\t                                                        filter.manager.height_filter = null;\n\t                                                        filter.height_icon.removeClass(\"active\");\n\t                                                    }\n\t                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n\t                                                } )\n\t                                                .appendTo(display_controls_div).hide();\n\t    filter.parent_div.hover( function() { \n\t                                filter.transparency_icon.show();\n\t                                filter.height_icon.show(); \n\t                            },\n\t                            function() {\n\t                                if (filter.manager.alpha_filter !== filter) {\n\t                                    filter.transparency_icon.hide();\n\t                                }\n\t                                if (filter.manager.height_filter !== filter) {\n\t                                    filter.height_icon.hide();\n\t                                }\n\t                            } );\n\t    \n\t    // Add to clear floating layout.\n\t    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n\t};\n\textend(NumberFilter.prototype, {\n\t    /**\n\t     * Convert filter to dictionary.\n\t     */\n\t    to_dict: function() {\n\t        var obj_dict = Filter.prototype.to_dict.call(this);\n\t        return extend(obj_dict, {\n\t            type: 'number',\n\t            min: this.min,\n\t            max: this.max,\n\t            low: this.low,\n\t            high: this.high\n\t        });\n\t    },\n\t    /**\n\t     * Return a copy of filter.\n\t     */\n\t    copy: function() {\n\t        return new NumberFilter( \n\t            {\n\t                name: this.name, \n\t                index: this.index, \n\t                tool_id: this.tool_id, \n\t                tool_exp_name: this.tool_exp_name\n\t            });\n\t    },\n\t    /**\n\t     * Get step for slider.\n\t     */\n\t    // FIXME: make this a \"static\" function.\n\t    get_slider_step: function(min, max) {\n\t        var range = max - min;\n\t        return (range <= 2 ? 0.01 : 1);\n\t    },\n\t    /**\n\t     * Handle slide events.\n\t     */\n\t    slide: function(event, ui) {\n\t        var values = ui.values;\n\t\n\t        // Set new values in UI.\n\t        this.values_span.text(values[0] + \"-\" + values[1]);\n\t\n\t        // Set new values in filter.\n\t        this.low = values[0];\n\t        this.high = values[1];\n\t         \n\t        // Set timeout to update if filter low, high are stable.\n\t        var self = this;\n\t        setTimeout(function() {\n\t            if (values[0] === self.low && values[1] === self.high) {\n\t                self.manager.track.request_draw({ force: true, clear_after: true });\n\t            }\n\t        }, 25);\n\t         \n\t     },\n\t    /** \n\t     * Returns true if filter can be applied to element.\n\t     */\n\t    applies_to: function(element) {\n\t        if (element.length > this.index) {\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t    /**\n\t     * Helper function: returns true if value in in filter's [low, high] range.\n\t     */\n\t    _keep_val: function(val) {\n\t        return (isNaN(val) || (val >= this.low && val <= this.high));\n\t    },    \n\t    /**\n\t     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive) \n\t     * or (b) if value is non-numeric and hence unfilterable.\n\t     */\n\t    keep: function(element) {\n\t        if ( !this.applies_to( element ) ) {\n\t            // No element to filter on.\n\t            return true;\n\t        }\n\t\n\t        // Keep value function.\n\t        var filter = this;\n\t\n\t        // Do filtering.\n\t        var to_filter = element[this.index];\n\t        if (to_filter instanceof Array) {\n\t            var returnVal = true;\n\t            for (var i = 0; i < to_filter.length; i++) {\n\t                if (!this._keep_val(to_filter[i])) {\n\t                    // Exclude element.\n\t                    returnVal = false;\n\t                    break;\n\t                }\n\t            }\n\t            return returnVal;\n\t        }\n\t        else {\n\t            return this._keep_val(element[this.index]);\n\t        }\n\t    },\n\t    /**\n\t     * Update filter's min and max values based on element's values.\n\t     */\n\t    update_attrs: function(element) {\n\t        var updated = false;\n\t        if (!this.applies_to(element) ) {\n\t            return updated;\n\t        }\n\t        \n\t        //\n\t        // Update filter's min, max based on element values.\n\t        //\n\t        \n\t        // Make value(s) into an Array.\n\t        var values = element[this.index];\n\t        if (!(values instanceof Array)) {\n\t            values = [values];\n\t        }\n\t        \n\t        // Loop through values and update min, max.\n\t        for (var i = 0; i < values.length; i++) {\n\t            var value = values[i];\n\t            if (value < this.min) {\n\t                this.min = Math.floor(value);\n\t                updated = true;\n\t            }\n\t            if (value > this.max) {\n\t                this.max = Math.ceil(value);\n\t                updated = true;\n\t            }\n\t        }\n\t        return updated;\n\t    },\n\t    /**\n\t     * Update filter's slider.\n\t     */\n\t    update_ui_elt: function () {\n\t        // Only show filter if min < max because filter is not useful otherwise. This\n\t        // covers all corner cases, such as when min, max have not been defined and\n\t        // when min == max.\n\t        if (this.min < this.max) {\n\t            this.parent_div.show();\n\t        }\n\t        else {\n\t            this.parent_div.hide();\n\t        }\n\t        \n\t        var \n\t            slider_min = this.slider.slider(\"option\", \"min\"),\n\t            slider_max = this.slider.slider(\"option\", \"max\");\n\t        if (this.min < slider_min || this.max > slider_max) {\n\t            // Update slider min, max, step.\n\t            this.slider.slider(\"option\", \"min\", this.min);\n\t            this.slider.slider(\"option\", \"max\", this.max);\n\t            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n\t            // Refresh slider:\n\t            // TODO: do we want to keep current values or reset to min/max?\n\t            // Currently we reset values:\n\t            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n\t            // To use the current values.\n\t            //var values = this.slider.slider( \"option\", \"values\" );\n\t            //this.slider.slider( \"option\", \"values\", values );\n\t        }\n\t    }\n\t});\n\t \n\t/**\n\t * Manages a set of filters.\n\t */\n\tvar FiltersManager = function(track, obj_dict) {\n\t    this.track = track;\n\t    this.alpha_filter = null;\n\t    this.height_filter = null;\n\t    this.filters = [];\n\t    \n\t    //\n\t    // Create HTML.\n\t    //\n\t        \n\t    //\n\t    // Create parent div.\n\t    //\n\t    this.parent_div = $(\"<div/>\").addClass(\"filters\").hide();\n\t    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n\t    this.parent_div.bind(\"drag\", function(e) {\n\t        e.stopPropagation();\n\t    }).click(function(e) {\n\t        e.stopPropagation();\n\t    }).bind(\"dblclick\", function(e) {\n\t        e.stopPropagation();\n\t    }).bind(\"keydown\", function(e) {\n\t        e.stopPropagation();\n\t    });\n\t    \n\t    //\n\t    // Restore state from dict.\n\t    //\n\t    if (obj_dict && 'filters' in obj_dict) { // Second condition needed for backward compatibility.\n\t        var \n\t            alpha_filter_name = ('alpha_filter' in obj_dict ? obj_dict.alpha_filter : null),\n\t            height_filter_name = ('height_filter' in obj_dict ? obj_dict.height_filter : null),            \n\t            filters_dict = obj_dict.filters,\n\t            filter;\n\t        for (var i = 0; i < filters_dict.length; i++) {\n\t            if (filters_dict[i].type === 'number') {\n\t                filter = new NumberFilter(filters_dict[i]);\n\t                this.add_filter(filter);\n\t                if (filter.name === alpha_filter_name) {\n\t                    this.alpha_filter = filter;\n\t                    filter.transparency_icon.addClass(\"active\").show();\n\t                }\n\t                if (filter.name === height_filter_name) {\n\t                    this.height_filter = filter;\n\t                    filter.height_icon.addClass(\"active\").show();\n\t                }\n\t            } \n\t            else {\n\t                console.log(\"ERROR: unsupported filter: \", name, type);\n\t            }\n\t        }\n\t        \n\t        \n\t        if ('visible' in obj_dict && obj_dict.visible) {\n\t            this.parent_div.show();\n\t        }\n\t    }\n\t    \n\t    // Add button to filter complete dataset.\n\t    if (this.filters.length !== 0) {\n\t        var run_buttons_row = $(\"<div/>\").addClass(\"param-row\").appendTo(this.parent_div);\n\t        var run_on_dataset_button = $(\"<input type='submit'/>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_buttons_row);\n\t        var filter_manager = this;\n\t        run_on_dataset_button.click( function() {\n\t            filter_manager.run_on_dataset();\n\t        });\n\t    }\n\t        \n\t};\n\t\n\textend(FiltersManager.prototype, {\n\t    // HTML manipulation and inspection.\n\t    show: function() { this.parent_div.show(); },\n\t    hide: function() { this.parent_div.hide(); },\n\t    toggle: function() { this.parent_div.toggle(); },\n\t    visible: function() { return this.parent_div.is(\":visible\"); },\n\t    /**\n\t     * Returns dictionary for manager.\n\t     */\n\t    to_dict: function() {\n\t        var obj_dict = {},\n\t            filter_dicts = [],\n\t            filter;\n\t            \n\t        // Include individual filter states.\n\t        for (var i = 0; i < this.filters.length; i++) {\n\t            filter = this.filters[i];\n\t            filter_dicts.push(filter.to_dict());\n\t        }\n\t        obj_dict.filters = filter_dicts;\n\t        \n\t        // Include transparency, height filters.\n\t        obj_dict.alpha_filter = (this.alpha_filter ? this.alpha_filter.name : null);\n\t        obj_dict.height_filter = (this.height_filter ? this.height_filter.name : null);\n\t        \n\t        // Include visibility.\n\t        obj_dict.visible = this.parent_div.is(\":visible\");\n\t        \n\t        return obj_dict;\n\t    },\n\t    /**\n\t     * Return a copy of the manager.\n\t     */\n\t    copy: function(new_track) {\n\t        var copy = new FiltersManager(new_track);\n\t        for (var i = 0; i < this.filters.length; i++) {\n\t            copy.add_filter(this.filters[i].copy());\n\t        }\n\t        return copy;\n\t    },\n\t    /**\n\t     * Add a filter to the manager.\n\t     */\n\t    add_filter: function(filter) {\n\t        filter.manager = this;\n\t        this.parent_div.append(filter.parent_div);\n\t        this.filters.push(filter);  \n\t    },\n\t    /**\n\t     * Remove all filters from manager.\n\t     */\n\t    remove_all: function() {\n\t        this.filters = [];\n\t        this.parent_div.children().remove();\n\t    },\n\t    /**\n\t     * Initialize filters.\n\t     */ \n\t    init_filters: function() {\n\t        for (var i = 0; i < this.filters.length; i++) {\n\t            var filter = this.filters[i];\n\t            filter.update_ui_elt();\n\t        }\n\t    },\n\t    /**\n\t     * Clear filters so that they do not impact track display.\n\t     */\n\t    clear_filters: function() {\n\t        for (var i = 0; i < this.filters.length; i++) {\n\t            var filter = this.filters[i];\n\t            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n\t        }\n\t        this.alpha_filter = null;\n\t        this.height_filter = null;\n\t        \n\t        // Hide icons for setting filters.\n\t        this.parent_div.find(\".icon-button\").hide();\n\t    },\n\t    run_on_dataset: function() {\n\t        // Get or create dictionary item.\n\t        var get_or_create_dict_item = function(dict, key, new_item) {\n\t            // Add new item to dict if \n\t            if (!(key in dict)) {\n\t                dict[key] = new_item;\n\t            }\n\t            return dict[key];\n\t        };\n\t        \n\t        //\n\t        // Find and group active filters. Active filters are those being used to hide data.\n\t        // Filters with the same tool id are grouped.\n\t        //\n\t        var active_filters = {},\n\t            filter, \n\t            tool_filter_conditions;\n\t        for (var i = 0; i < this.filters.length; i++) {\n\t            filter = this.filters[i];\n\t            if (filter.tool_id) {\n\t                // Add filtering conditions if filter low/high are set.\n\t                if (filter.min !== filter.low) {\n\t                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n\t                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" >= \" + filter.low;\n\t                }\n\t                if (filter.max !== filter.high) {\n\t                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n\t                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" <= \" + filter.high;\n\t                }\n\t            }\n\t        }\n\t        \n\t        //\n\t        // Use tools to run filters.\n\t        //\n\t        \n\t        // Create list of (tool_id, tool_filters) tuples.\n\t        var active_filters_list = [];\n\t        for (var tool_id in active_filters) {\n\t            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n\t        }\n\t        \n\t        // Invoke recursive function to run filters; this enables chaining of filters via\n\t        // iteratively application.\n\t        (function run_filter(input_dataset_id, filters) {\n\t            var \n\t                // Set up filtering info and params.\n\t                filter_tuple = filters[0],\n\t                tool_id = filter_tuple[0],\n\t                tool_filters = filter_tuple[1],\n\t                tool_filter_str = \"(\" + tool_filters.join(\") and (\") + \")\",\n\t                url_params = {\n\t                    cond: tool_filter_str,\n\t                    input: input_dataset_id,\n\t                    target_dataset_id: input_dataset_id,\n\t                    tool_id: tool_id\n\t                };\n\t\n\t            // Remove current filter.\n\t            filters = filters.slice(1);\n\t                \n\t            $.getJSON(run_tool_url, url_params, function(response) {\n\t                if (response.error) {\n\t                    // General error.\n\t                    Galaxy.modal.show({\n\t                        title: \"Filter Dataset\",\n\t                        body : \"Error running tool \" + tool_id,\n\t                        buttons : { \"Close\" : Galaxy.modal.hide() }\n\t                    });\n\t                }\n\t                else if (filters.length === 0) {\n\t                    // No more filters to run.\n\t                    Galaxy.modal.show({\n\t                        title: \"Filtering Dataset\",\n\t                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n\t                        buttons: { \"Close\" : Galaxy.modal.hide() }\n\t                    });\n\t                }\n\t                else {\n\t                    // More filters to run.\n\t                    run_filter(response.dataset_id, filters);\n\t                }\n\t            });\n\t              \n\t        })(this.track.dataset_id, active_filters_list);        \n\t    }\n\t});\n\t\n\treturn {\n\t    FiltersManager: FiltersManager,\n\t    NumberFilter: NumberFilter\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function( _ ) {\n\t\n\t/**\n\t * Compute the type of overlap between two regions. They are assumed to be on the same chrom/contig.\n\t * The overlap is computed relative to the second region; hence, OVERLAP_START indicates that the first\n\t * region overlaps the start (but not the end) of the second region.\n\t * NOTE: Coordinates are assumed to be in BED format: half open (start is closed, end is open).\n\t */\n\tvar BEFORE = 1001, CONTAINS = 1002, OVERLAP_START = 1003, OVERLAP_END = 1004, CONTAINED_BY = 1005, AFTER = 1006;\n\tvar compute_overlap = function(first_region, second_region) {\n\t    var\n\t        first_start = first_region[0], first_end = first_region[1],\n\t        second_start = second_region[0], second_end = second_region[1],\n\t        overlap;\n\t    if (first_start < second_start) {\n\t        if (first_end <= second_start) {\n\t            overlap = BEFORE;\n\t        }\n\t        else if (first_end <= second_end) {\n\t            overlap = OVERLAP_START;\n\t        }\n\t        else { // first_end > second_end\n\t            overlap = CONTAINS;\n\t        }\n\t    }\n\t    else { // first_start >= second_start\n\t        if (first_start > second_end) {\n\t            overlap = AFTER;\n\t        }\n\t        else if (first_end <= second_end) {\n\t            overlap = CONTAINED_BY;\n\t        }\n\t        else {\n\t            overlap = OVERLAP_END;\n\t        }\n\t    }\n\t\n\t    return overlap;\n\t};\n\t\n\t/**\n\t * Returns true if regions overlap.\n\t */\n\tvar is_overlap = function(first_region, second_region) {\n\t    var overlap = compute_overlap(first_region, second_region);\n\t    return (overlap !== BEFORE && overlap !== AFTER);\n\t};\n\t\n\t/**\n\t * Draw a dashed line on a canvas using filled rectangles. This function is based on:\n\t * http://vetruvet.blogspot.com/2010/10/drawing-dashed-lines-on-html5-canvas.html\n\t * However, that approach uses lines, which don't seem to render as well, so use\n\t * rectangles instead.\n\t */\n\tvar dashedLine = function(ctx, x1, y1, x2, y2, dashLen) {\n\t    if (dashLen === undefined) { dashLen = 4; }\n\t    var dX = x2 - x1;\n\t    var dY = y2 - y1;\n\t    var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\n\t    var dashX = dX / dashes;\n\t    var dashY = dY / dashes;\n\t    var q;\n\t\n\t    for (q = 0; q < dashes; q++, x1 += dashX, y1 += dashY) {\n\t        if (q % 2 !== 0) {\n\t            continue;\n\t        }\n\t        ctx.fillRect(x1, y1, dashLen, 1);\n\t    }\n\t};\n\t\n\t/**\n\t * Draw an isosceles triangle that points down.\n\t */\n\tvar drawDownwardEquilateralTriangle = function(ctx, down_vertex_x, down_vertex_y, side_len) {\n\t    // Compute other two points of triangle.\n\t    var\n\t        x1 = down_vertex_x - side_len/2,\n\t        x2 = down_vertex_x + side_len/2,\n\t        y = down_vertex_y - Math.sqrt( side_len*3/2 );\n\t\n\t    // Draw and fill.\n\t    ctx.beginPath();\n\t    ctx.moveTo(x1, y);\n\t    ctx.lineTo(x2, y);\n\t    ctx.lineTo(down_vertex_x, down_vertex_y);\n\t    ctx.lineTo(x1, y);\n\t\n\t    ctx.strokeStyle = this.fillStyle;\n\t    ctx.fill();\n\t    ctx.stroke();\n\t    ctx.closePath();\n\t};\n\t\n\t/**\n\t * Base class for all scalers. Scalers produce values that are used to change (scale) drawing attributes.\n\t */\n\tvar Scaler = function(default_val) {\n\t    this.default_val = (default_val ? default_val : 1);\n\t};\n\t\n\t/**\n\t * Produce a scaling value.\n\t */\n\tScaler.prototype.gen_val = function(input) {\n\t    return this.default_val;\n\t};\n\t\n\t/**\n\t * Results from painter.draw()\n\t */\n\tvar DrawResults = function(options) {\n\t    this.incomplete_features = options.incomplete_features;\n\t    this.feature_mapper = options.feature_mapper;\n\t};\n\t\n\t/**\n\t * Base class for painters\n\t *\n\t * -- Mode and prefs are both optional\n\t */\n\tvar Painter = function(data, view_start, view_end, prefs, mode) {\n\t    // Data and data properties\n\t    this.data = data;\n\t    // View\n\t    this.view_start = view_start;\n\t    this.view_end = view_end;\n\t    // Drawing prefs\n\t    this.prefs = _.extend({}, this.default_prefs, prefs);\n\t    this.mode = mode;\n\t};\n\t\n\tPainter.prototype.default_prefs = {};\n\t\n\t/**\n\t * Draw on the context using a rectangle of width x height using scale w_scale.\n\t */\n\tPainter.prototype.draw = function(ctx, width, height, w_scale) {};\n\t\n\t/**\n\t * Get starting drawing position, which is offset a half-base left of coordinate.\n\t */\n\tPainter.prototype.get_start_draw_pos = function(chrom_pos, w_scale) {\n\t    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, -0.5);\n\t};\n\t\n\t/**\n\t * Get end drawing position, which is offset a half-base right of coordinate.\n\t */\n\tPainter.prototype.get_end_draw_pos = function(chrom_pos, w_scale) {\n\t    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0.5);\n\t};\n\t\n\t/**\n\t * Get drawing position.\n\t */\n\tPainter.prototype.get_draw_pos = function(chrom_pos, w_scale) {\n\t    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0);\n\t};\n\t\n\t/**\n\t * Convert chromosome position to drawing position.\n\t */\n\tPainter.prototype._chrom_pos_to_draw_pos = function(chrom_pos, w_scale, offset) {\n\t    return Math.floor( w_scale * ( Math.max(0, chrom_pos - this.view_start) + offset) );\n\t};\n\t\n\t\n\tvar LinePainter = function(data, view_start, view_end, prefs, mode) {\n\t    Painter.call( this, data, view_start, view_end, prefs, mode );\n\t    if ( this.prefs.min_value === undefined ) {\n\t        this.prefs.min_value = _.min( _.map(this.data, function(d) { return d[1]; }) ) || 0;\n\t    }\n\t    if ( this.prefs.max_value === undefined ) {\n\t        this.prefs.max_value = _.max( _.map(this.data, function(d) { return d[1]; }) ) || 0;\n\t    }\n\t};\n\t\n\tLinePainter.prototype.default_prefs = { min_value: undefined, max_value: undefined, mode: \"Histogram\", color: \"#000\", overflow_color: \"#F66\" };\n\t\n\tLinePainter.prototype.draw = function(ctx, width, height, w_scale) {\n\t    var in_path = false,\n\t        min_value = this.prefs.min_value,\n\t        max_value = this.prefs.max_value,\n\t        vertical_range = max_value - min_value,\n\t        height_px = height,\n\t        view_start = this.view_start,\n\t        mode = this.mode,\n\t        data = this.data;\n\t\n\t    ctx.save();\n\t\n\t    // Pixel position of 0 on the y axis\n\t    var y_zero = Math.round( height + min_value / vertical_range * height );\n\t\n\t    // Horizontal line to denote x-axis\n\t    if ( mode !== \"Intensity\" ) {\n\t        ctx.fillStyle = \"#aaa\";\n\t        ctx.fillRect( 0, y_zero, width, 1 );\n\t    }\n\t\n\t    ctx.beginPath();\n\t    var x_scaled, y, delta_x_px;\n\t    if (data.length > 1) {\n\t        delta_x_px = Math.ceil((data[1][0] - data[0][0]) * w_scale);\n\t    }\n\t    else {\n\t        delta_x_px = 10;\n\t    }\n\t\n\t    // Painter color can be in either block_color (FeatureTrack) or color pref (LineTrack).\n\t    var painter_color = this.prefs.block_color || this.prefs.color,\n\t        // Extract RGB from preference color.\n\t        pref_color = parseInt( painter_color.slice(1), 16 ),\n\t        pref_r = (pref_color & 0xff0000) >> 16,\n\t        pref_g = (pref_color & 0x00ff00) >> 8,\n\t        pref_b = pref_color & 0x0000ff,\n\t        top_overflow = false,\n\t        bot_overflow = false;\n\t\n\t\n\t    // Paint track.\n\t    for (var i = 0, len = data.length; i < len; i++) {\n\t        // Reset attributes for next point.\n\t        ctx.fillStyle = ctx.strokeStyle = painter_color;\n\t        top_overflow = bot_overflow = false;\n\t\n\t        x_scaled = Math.ceil((data[i][0] - view_start) * w_scale);\n\t        y = data[i][1];\n\t\n\t        // Process Y (scaler) value.\n\t        if (y === null) {\n\t            if (in_path && mode === \"Filled\") {\n\t                ctx.lineTo(x_scaled, height_px);\n\t            }\n\t            in_path = false;\n\t            continue;\n\t        }\n\t\n\t        // Bound Y value by min, max.\n\t        if (y < min_value) {\n\t            bot_overflow = true;\n\t            y = min_value;\n\t        }\n\t        else if (y > max_value) {\n\t            top_overflow = true;\n\t            y = max_value;\n\t        }\n\t\n\t        // Draw point.\n\t        if (mode === \"Histogram\") {\n\t            // y becomes the bar height in pixels, which is the negated for canvas coords\n\t            y = Math.round( y / vertical_range * height_px );\n\t            ctx.fillRect(x_scaled, y_zero, delta_x_px, - y );\n\t        }\n\t        else if (mode === \"Intensity\") {\n\t            var\n\t                saturation = (y - min_value) / vertical_range,\n\t                // Range is [pref_color, 255] where saturation = 0 --> 255 and saturation = 1 --> pref color\n\t                new_r = Math.round( pref_r + (255 - pref_r) * (1 - saturation) ),\n\t                new_g = Math.round( pref_g + (255 - pref_g) * (1 - saturation) ),\n\t                new_b = Math.round( pref_b + (255 - pref_b) * (1 - saturation) );\n\t            ctx.fillStyle = \"rgb(\" + new_r + \",\" + new_g + \",\" + new_b + \")\";\n\t            ctx.fillRect(x_scaled, 0, delta_x_px, height_px);\n\t        }\n\t        else { // mode is Coverage/Line or Filled.\n\t\n\t            // Scale Y value.\n\t            y = Math.round( height_px - (y - min_value) / vertical_range * height_px );\n\t            if (in_path) {\n\t                ctx.lineTo(x_scaled, y);\n\t            }\n\t            else {\n\t                in_path = true;\n\t                if (mode === \"Filled\") {\n\t                    ctx.moveTo(x_scaled, height_px);\n\t                    ctx.lineTo(x_scaled, y);\n\t                }\n\t                else {\n\t                    ctx.moveTo(x_scaled, y);\n\t                    // Use this approach (note: same as for filled) to draw line from 0 to\n\t                    // first data point.\n\t                    //ctx.moveTo(x_scaled, height_px);\n\t                    //ctx.lineTo(x_scaled, y);\n\t                }\n\t            }\n\t        }\n\t\n\t        // Draw lines at boundaries if overflowing min or max\n\t        ctx.fillStyle = this.prefs.overflow_color;\n\t        if (top_overflow || bot_overflow) {\n\t            var overflow_x;\n\t            if (mode === \"Histogram\" || mode === \"Intensity\") {\n\t                overflow_x = delta_x_px;\n\t            }\n\t            else { // Line and Filled, which are points\n\t                x_scaled -= 2; // Move it over to the left so it's centered on the point\n\t                overflow_x = 4;\n\t            }\n\t            if (top_overflow) {\n\t                ctx.fillRect(x_scaled, 0, overflow_x, 3);\n\t            }\n\t            if (bot_overflow) {\n\t                ctx.fillRect(x_scaled, height_px - 3, overflow_x, 3);\n\t            }\n\t        }\n\t        ctx.fillStyle = painter_color;\n\t    }\n\t    if (mode === \"Filled\") {\n\t        if (in_path) {\n\t            ctx.lineTo( x_scaled, y_zero );\n\t            ctx.lineTo( 0, y_zero );\n\t        }\n\t        ctx.fill();\n\t    }\n\t    else {\n\t        ctx.stroke();\n\t    }\n\t\n\t    ctx.restore();\n\t};\n\t\n\t/**\n\t * Mapper that contains information about feature locations and data.\n\t */\n\tvar FeaturePositionMapper = function(slot_height) {\n\t    this.feature_positions = {};\n\t    this.slot_height = slot_height;\n\t    this.translation = 0;\n\t    this.y_translation = 0;\n\t};\n\t\n\t/**\n\t * Map feature data to a position defined by <slot, x_start, x_end>.\n\t */\n\tFeaturePositionMapper.prototype.map_feature_data = function(feature_data, slot, x_start, x_end) {\n\t    if (!this.feature_positions[slot]) {\n\t        this.feature_positions[slot] = [];\n\t    }\n\t    this.feature_positions[slot].push({\n\t        data: feature_data,\n\t        x_start: x_start,\n\t        x_end: x_end\n\t    });\n\t};\n\t\n\t/**\n\t * Get feature data for position <x, y>\n\t */\n\tFeaturePositionMapper.prototype.get_feature_data = function(x, y) {\n\t    // Find slot using Y.\n\t    var slot = Math.floor( (y-this.y_translation)/this.slot_height ),\n\t        feature_dict;\n\t\n\t    // May not be over a slot due to padding, margin, etc.\n\t    if (!this.feature_positions[slot]) {\n\t        return null;\n\t    }\n\t\n\t    // Find feature using X.\n\t    x += this.translation;\n\t    for (var i = 0; i < this.feature_positions[slot].length; i++) {\n\t        feature_dict = this.feature_positions[slot][i];\n\t        if (x >= feature_dict.x_start && x <= feature_dict.x_end) {\n\t            return feature_dict.data;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Abstract object for painting feature tracks. Subclasses must implement draw_element() for painting to work.\n\t * Painter uses a 0-based, half-open coordinate system; start coordinate is closed--included--and the end is open.\n\t * This coordinate system matches the BED format.\n\t */\n\tvar FeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n\t    Painter.call(this, data, view_start, view_end, prefs, mode);\n\t    this.alpha_scaler = (alpha_scaler ? alpha_scaler : new Scaler());\n\t    this.height_scaler = (height_scaler ? height_scaler : new Scaler());\n\t    this.max_label_length = 200;\n\t};\n\t\n\tFeaturePainter.prototype.default_prefs = { block_color: \"#FFF\", connector_color: \"#FFF\" };\n\t\n\t_.extend(FeaturePainter.prototype, {\n\t    get_required_height: function(rows_required, width) {\n\t        // y_scale is the height per row\n\t        var required_height = this.get_row_height(),\n\t            y_scale = required_height,\n\t            mode = this.mode;\n\t        // If using a packing mode, need to multiply by the number of slots used\n\t        if (mode === \"no_detail\" || mode === \"Squish\" || mode === \"Pack\") {\n\t            required_height = rows_required * y_scale;\n\t        }\n\t        return required_height + this.get_top_padding(width);\n\t    },\n\t\n\t    /** Extra padding before first row of features */\n\t    get_top_padding: function(width) {\n\t        return 0;\n\t    },\n\t\n\t    /**\n\t     * Draw data on ctx using slots and within the rectangle defined by width and height. Returns\n\t     * a FeaturePositionMapper object with information about where features were drawn.\n\t     */\n\t    draw: function(ctx, width, height, w_scale, slots) {\n\t        var data = this.data,\n\t            view_start = this.view_start,\n\t            view_end = this.view_end;\n\t\n\t        ctx.save();\n\t\n\t        ctx.fillStyle = this.prefs.block_color;\n\t        ctx.textAlign = \"right\";\n\t\n\t        var y_scale = this.get_row_height(),\n\t            feature_mapper = new FeaturePositionMapper(y_scale),\n\t            x_draw_coords,\n\t            incomplete_features = [];\n\t\n\t        for (var i = 0, len = data.length; i < len; i++) {\n\t            var feature = data[i],\n\t                feature_uid = feature[0],\n\t                feature_start = feature[1],\n\t                feature_end = feature[2],\n\t                // Slot valid only if features are slotted and this feature is slotted;\n\t                // feature may not be due to lack of space.\n\t                slot = (slots && slots[feature_uid] !== undefined ? slots[feature_uid].slot : null);\n\t\n\t            // Draw feature if (a) mode is dense or feature is slotted (as it must be for all non-dense modes) and\n\t            // (b) there's overlap between the feature and drawing region.\n\t            if ( (this.mode === \"Dense\" || slot !== null) && ( feature_start < view_end && feature_end > view_start ) ) {\n\t                x_draw_coords = this.draw_element(ctx, this.mode, feature, slot, view_start, view_end, w_scale, y_scale, width);\n\t                feature_mapper.map_feature_data(feature, slot, x_draw_coords[0], x_draw_coords[1]);\n\t\n\t                // Add to incomplete features if it's not drawn completely in region.\n\t                if (feature_start < view_start || feature_end > view_end) {\n\t                    incomplete_features.push(feature);\n\t                }\n\t            }\n\t        }\n\t\n\t        ctx.restore();\n\t\n\t        feature_mapper.y_translation = this.get_top_padding(width);\n\t        return new DrawResults({\n\t            incomplete_features: incomplete_features,\n\t            feature_mapper: feature_mapper\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Abstract function for drawing an individual feature.\n\t     */\n\t    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width ) {\n\t        return [0, 0];\n\t    }\n\t});\n\t\n\t// Constants specific to feature tracks moved here (HACKING, these should\n\t// basically all be configuration options)\n\tvar DENSE_TRACK_HEIGHT = 10,\n\t    NO_DETAIL_TRACK_HEIGHT = 3,\n\t    SQUISH_TRACK_HEIGHT = 5,\n\t    PACK_TRACK_HEIGHT = 10,\n\t    NO_DETAIL_FEATURE_HEIGHT = 1,\n\t    DENSE_FEATURE_HEIGHT = 9,\n\t    SQUISH_FEATURE_HEIGHT = 3,\n\t    PACK_FEATURE_HEIGHT = 9,\n\t    LABEL_SPACING = 2,\n\t    CONNECTOR_COLOR = \"#ccc\";\n\t\n\tvar LinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n\t    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n\t    // Whether to draw a single connector in the background that spans the entire feature (the intron fishbone)\n\t    this.draw_background_connector = true;\n\t    // Whether to call draw_connector for every pair of blocks\n\t    this.draw_individual_connectors = false;\n\t};\n\t\n\t_.extend(LinkedFeaturePainter.prototype, FeaturePainter.prototype, {\n\t\n\t    /**\n\t     * Height of a single row, depends on mode\n\t     */\n\t    get_row_height: function() {\n\t        var mode = this.mode, height;\n\t        if (mode === \"Dense\") {\n\t            height = DENSE_TRACK_HEIGHT;\n\t        }\n\t        else if (mode === \"no_detail\") {\n\t            height = NO_DETAIL_TRACK_HEIGHT;\n\t        }\n\t        else if (mode === \"Squish\") {\n\t            height = SQUISH_TRACK_HEIGHT;\n\t        }\n\t        else { // mode === \"Pack\"\n\t            height = PACK_TRACK_HEIGHT;\n\t        }\n\t        return height;\n\t    },\n\t\n\t    /**\n\t     * Draw a feature. Returns an array with feature's start and end X coordinates.\n\t     */\n\t    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n\t        var feature_uid = feature[0],\n\t            feature_start = feature[1],\n\t            feature_end = feature[2],\n\t            feature_name = feature[3],\n\t            feature_strand = feature[4],\n\t            // -0.5 to offset region between bases.\n\t            f_start = Math.floor( Math.max(0, (feature_start - tile_low - 0.5) * w_scale) ),\n\t            f_end   = Math.ceil( Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)) ),\n\t            draw_start = f_start,\n\t            draw_end = f_end,\n\t            y_start = (mode === \"Dense\" ? 0 : (0 + slot)) * y_scale + this.get_top_padding(width),\n\t            thickness, y_start, thick_start = null, thick_end = null,\n\t            // TODO: is there any reason why block, label color cannot be set at the Painter level?\n\t            // For now, assume '.' === '+'\n\t            block_color = (!feature_strand || feature_strand === \"+\" || feature_strand === \".\" ? this.prefs.block_color : this.prefs.reverse_strand_color);\n\t            label_color = this.prefs.label_color;\n\t\n\t        // Set global alpha.\n\t        ctx.globalAlpha = this.alpha_scaler.gen_val(feature);\n\t\n\t        // In dense mode, put all data in top slot.\n\t        if (mode === \"Dense\") {\n\t            slot = 1;\n\t        }\n\t\n\t        if (mode === \"no_detail\") {\n\t            // No details for feature, so only one way to display.\n\t            ctx.fillStyle = block_color;\n\t            ctx.fillRect(f_start, y_start + 5, f_end - f_start, NO_DETAIL_FEATURE_HEIGHT);\n\t        }\n\t        else { // Mode is either Squish or Pack:\n\t            // Feature details.\n\t            var feature_ts = feature[5],\n\t                feature_te = feature[6],\n\t                feature_blocks = feature[7],\n\t                // Whether we are drawing full height or squished features\n\t                full_height = true;\n\t\n\t            if (feature_ts && feature_te) {\n\t                thick_start = Math.floor( Math.max(0, (feature_ts - tile_low) * w_scale) );\n\t                thick_end = Math.ceil( Math.min(width, Math.max(0, (feature_te - tile_low) * w_scale)) );\n\t            }\n\t\n\t            // Set vars that depend on mode.\n\t            var thin_height, thick_height;\n\t            if (mode === \"Squish\" ) {\n\t                thin_height = 1;\n\t                thick_height = SQUISH_FEATURE_HEIGHT;\n\t                full_height = false;\n\t            } else if ( mode === \"Dense\" ) {\n\t                thin_height = 5;\n\t                thick_height = DENSE_FEATURE_HEIGHT;\n\t            } else { // mode === \"Pack\"\n\t                thin_height = 5;\n\t                thick_height = PACK_FEATURE_HEIGHT;\n\t            }\n\t\n\t            // Draw feature/feature blocks + connectors.\n\t            if (!feature_blocks) {\n\t                // If there are no blocks, treat the feature as one big exon.\n\t                ctx.fillStyle = block_color;\n\t                ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n\t                // If strand is specified, draw arrows over feature\n\t                if ( feature_strand && full_height ) {\n\t                    if (feature_strand === \"+\") {\n\t                        ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand_inv' );\n\t                    } else if (feature_strand === \"-\") {\n\t                        ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand_inv' );\n\t                    }\n\t                    ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n\t                }\n\t            } else {\n\t                //\n\t                // There are feature blocks and mode is either Squish or Pack.\n\t                //\n\t                // Approach: (a) draw whole feature as connector/intron and (b) draw blocks as\n\t                // needed. This ensures that whole feature, regardless of whether it starts with\n\t                // a block, is visible.\n\t                //\n\t\n\t                // Compute y axis start position and height\n\t                var cur_y_start, cur_height;\n\t                if (mode === \"Squish\" || mode === \"Dense\") {\n\t                    cur_y_start = y_start + Math.floor(SQUISH_FEATURE_HEIGHT/2) + 1;\n\t                    cur_height = 1;\n\t                }\n\t                else { // mode === \"Pack\"\n\t                    if (feature_strand) {\n\t                        cur_y_start = y_start;\n\t                        cur_height = thick_height;\n\t                    }\n\t                    else {\n\t                        cur_y_start += (SQUISH_FEATURE_HEIGHT/2) + 1;\n\t                        cur_height = 1;\n\t                    }\n\t                }\n\t\n\t                // Draw whole feature as connector/intron.\n\t                if ( this.draw_background_connector ) {\n\t                    if (mode === \"Squish\" || mode === \"Dense\") {\n\t                        ctx.fillStyle = CONNECTOR_COLOR;\n\t                    }\n\t                    else { // mode === \"Pack\"\n\t                        if (feature_strand) {\n\t                            if (feature_strand === \"+\") {\n\t                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand' );\n\t                            } else if (feature_strand === \"-\") {\n\t                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand' );\n\t                            }\n\t                        }\n\t                        else {\n\t                            ctx.fillStyle = CONNECTOR_COLOR;\n\t                        }\n\t                    }\n\t                    ctx.fillRect(f_start, cur_y_start, f_end - f_start, cur_height);\n\t                }\n\t\n\t                // Draw blocks.\n\t                var start_and_height;\n\t                for (var k = 0, k_len = feature_blocks.length; k < k_len; k++) {\n\t                    var block = feature_blocks[k],\n\t                        // -0.5 to offset block between bases.\n\t                        block_start = Math.floor( Math.max(0, (block[0] - tile_low - 0.5) * w_scale) ),\n\t                        block_end = Math.ceil( Math.min(width, Math.max((block[1] - tile_low - 0.5) * w_scale)) ),\n\t                        last_block_start, last_block_end;\n\t\n\t                    // Skip drawing if block not on tile.\n\t                    if (block_start > block_end) { continue; }\n\t\n\t                    // Draw thin block.\n\t                    ctx.fillStyle = block_color;\n\t                    ctx.fillRect(block_start, y_start + (thick_height-thin_height)/2 + 1, block_end - block_start, thin_height);\n\t\n\t                    // If block intersects with thick region, draw block as thick.\n\t                    // - No thick is sometimes encoded as thick_start == thick_end, so don't draw in that case\n\t                    if (thick_start !== undefined && feature_te > feature_ts && !(block_start > thick_end || block_end < thick_start) ) {\n\t                        var block_thick_start = Math.max(block_start, thick_start),\n\t                            block_thick_end = Math.min(block_end, thick_end);\n\t                        ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n\t                        if ( feature_blocks.length === 1 && mode === \"Pack\") {\n\t                            // Exactly one block means we have no introns, but do have a distinct \"thick\" region,\n\t                            // draw arrows over it if in pack mode.\n\t                            if (feature_strand === \"+\") {\n\t                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand_inv' );\n\t                            } else if (feature_strand === \"-\") {\n\t                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand_inv' );\n\t                            }\n\t                            // If region is wide enough in pixels, pad a bit\n\t                            if ( block_thick_start + 14 < block_thick_end ) {\n\t                                block_thick_start += 2;\n\t                                block_thick_end -= 2;\n\t                            }\n\t                            ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n\t                        }\n\t                    }\n\t                    // Draw individual connectors if required\n\t                    if ( this.draw_individual_connectors && last_block_start ) {\n\t                        this.draw_connector( ctx, last_block_start, last_block_end, block_start, block_end, y_start );\n\t                    }\n\t                    last_block_start = block_start;\n\t                    last_block_end = block_end;\n\t                }\n\t\n\t                // FIXME: Height scaling only works in Pack mode right now.\n\t                if (mode === \"Pack\") {\n\t                    // Reset alpha so height scaling is not impacted by alpha scaling.\n\t                    ctx.globalAlpha = 1;\n\t\n\t                    // Height scaling: draw white lines to reduce height according to height scale factor.\n\t                    ctx.fillStyle = \"white\"; // TODO: set this to background color.\n\t                    var\n\t                        hscale_factor = this.height_scaler.gen_val(feature),\n\t                        // Ceil ensures that min height is >= 1.\n\t                        new_height = Math.ceil(thick_height * hscale_factor),\n\t                        ws_height = Math.round( (thick_height-new_height)/2 );\n\t                    if (hscale_factor !== 1) {\n\t                        ctx.fillRect(f_start, cur_y_start + 1, f_end - f_start, ws_height);\n\t                        ctx.fillRect(f_start, cur_y_start + thick_height - ws_height + 1, f_end - f_start, ws_height);\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Reset alpha so that label is not transparent.\n\t            ctx.globalAlpha = 1;\n\t\n\t            // Draw label for Pack mode.\n\t            if (feature_name && mode === \"Pack\" && feature_start > tile_low) {\n\t                ctx.fillStyle = label_color;\n\t                // FIXME: assumption here that the entire view starts at 0\n\t                if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n\t                    ctx.textAlign = \"left\";\n\t                    ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 8, this.max_label_length);\n\t                    draw_end += ctx.measureText(feature_name).width + LABEL_SPACING;\n\t                } else {\n\t                    ctx.textAlign = \"right\";\n\t                    ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 8, this.max_label_length);\n\t                    draw_start -= ctx.measureText(feature_name).width + LABEL_SPACING;\n\t                }\n\t                //ctx.fillStyle = block_color;\n\t            }\n\t        }\n\t\n\t        // Reset global alpha.\n\t        ctx.globalAlpha = 1;\n\t\n\t        return [draw_start, draw_end];\n\t    }\n\t});\n\t\n\tvar ReadPainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler, ref_seq, base_color_fn) {\n\t    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n\t    this.ref_seq = (ref_seq ? ref_seq.data : null);\n\t    this.base_color_fn = base_color_fn;\n\t};\n\t\n\t_.extend(ReadPainter.prototype, FeaturePainter.prototype, {\n\t    /**\n\t     * Returns height based on mode.\n\t     */\n\t    get_row_height: function() {\n\t        var height, mode = this.mode;\n\t        if (mode === \"Dense\") {\n\t            height = DENSE_TRACK_HEIGHT;\n\t        }\n\t        else if (mode === \"Squish\") {\n\t            height = SQUISH_TRACK_HEIGHT;\n\t        }\n\t        else { // mode === \"Pack\"\n\t            height = PACK_TRACK_HEIGHT;\n\t            if (this.prefs.show_insertions) {\n\t                height *= 2;\n\t            }\n\t        }\n\t        return height;\n\t    },\n\t\n\t    /**\n\t     * Parse CIGAR string to get (a) a list of contiguous drawing blocks (MD=X) and\n\t     * (b) an array of [ op_index, op_len ] pairs where op_index is an index into the\n\t     * string 'MIDNSHP=X' Return value is a dictionary with two entries, blocks and cigar\n\t     */\n\t    _parse_cigar: function(cigar_str) {\n\t        var cigar_ops = 'MIDNSHP=X';\n\t\n\t        // Parse cigar.\n\t        var blocks = [ [0, 0] ],\n\t            cur_block = blocks[0],\n\t            base_pos = 0,\n\t\n\t            // Parse cigar operations out and update/create blocks as needed.\n\t            parsed_cigar = _.map(cigar_str.match(/[0-9]+[MIDNSHP=X]/g), function(op) {\n\t                // Get operation length, character.\n\t                var op_len = parseInt(op.slice(0, -1), 10),\n\t                    op_char = op.slice(-1);\n\t\n\t                // Update drawing block.\n\t                if (op_char === 'N') {\n\t                    // At skip, so need to start new block if current block represents\n\t                    // drawing area.\n\t                    if (cur_block[1] !== 0) {\n\t                        cur_block = [base_pos + op_len, base_pos + op_len];\n\t                        blocks.push(cur_block);\n\t                    }\n\t                }\n\t                else if ('ISHP'.indexOf(op_char) === -1) {\n\t                    // Operation is M,D,=,X.\n\t                    cur_block[1] += op_len;\n\t                    base_pos += op_len;\n\t                }\n\t\n\t                // Return parsed cigar.\n\t                return [ cigar_ops.indexOf(op_char), op_len ];\n\t            });\n\t\n\t        return {\n\t            blocks: blocks,\n\t            cigar: parsed_cigar\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Draw a single read from reference-based read sequence and cigar.\n\t     */\n\t    draw_read: function(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, cigar, strand, read_seq) {\n\t        // Helper function to update base and sequnence offsets.\n\t        var update_base_offset = function(offset, cig_op, cig_len) {\n\t                if ('M=NXD'.indexOf(cig_op) !== -1) {\n\t                    offset += cig_len;\n\t                }\n\t                return offset;\n\t            },\n\t            update_seq_offset = function(offset, cig_op, cig_len) {\n\t                if ('IX'.indexOf(cig_op) !== -1) {\n\t                    offset += cig_len;\n\t                }\n\t                return offset;\n\t            },\n\t            // Gets drawing coordinate for a sequence coordinate. Assumes closure variables w_scale and tile_low.\n\t            get_draw_coord = function(sequence_coord) {\n\t                // -0.5 to offset sequence between bases.\n\t                return Math.floor( Math.max(0, (sequence_coord - tile_low - 0.5) * w_scale) );\n\t            };\n\t\n\t        ctx.textAlign = \"center\";\n\t        var tile_region = [tile_low, tile_high],\n\t            base_offset = 0,\n\t            seq_offset = 0,\n\t            gap = Math.round(w_scale/2),\n\t            char_width_px = ctx.canvas.manager.char_width_px,\n\t            block_color = (strand === \"+\" ? this.prefs.detail_block_color : this.prefs.reverse_strand_color),\n\t            pack_mode = (mode === 'Pack'),\n\t            draw_height = (pack_mode ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT),\n\t            rect_y = y_start + 1,\n\t            paint_utils = new ReadPainterUtils(ctx, draw_height, w_scale, mode),\n\t            drawing_blocks = [],\n\t            s_start,\n\t            s_end;\n\t\n\t        // Keep list of items that need to be drawn on top of initial drawing layer.\n\t        var draw_last = [];\n\t\n\t        // Parse cigar and get drawing blocks.\n\t        var t = this._parse_cigar(cigar);\n\t        cigar = t.cigar;\n\t        drawing_blocks = t.blocks;\n\t\n\t        // Draw blocks.\n\t        for (var i = 0; i < drawing_blocks.length; i++) {\n\t            var block = drawing_blocks[i];\n\t\n\t            if (is_overlap([feature_start + block[0], feature_start + block[1]], tile_region)) {\n\t                s_start = get_draw_coord(feature_start + block[0]);\n\t                s_end = get_draw_coord(feature_start + block[1]);\n\t\n\t                // Make sure that block is drawn even if it too small to be rendered officially; in this case,\n\t                // read is drawn at 1px.\n\t                // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n\t                // and drawing.\n\t                if (s_start === s_end) {\n\t                    s_end += 1;\n\t                }\n\t\n\t                // Draw read base as rectangle.\n\t                ctx.fillStyle = block_color;\n\t                ctx.fillRect(s_start, rect_y, s_end - s_start, draw_height);\n\t            }\n\t        }\n\t\n\t        // Draw read features.\n\t        for (var cig_id = 0, len = cigar.length; cig_id < len; cig_id++) {\n\t            var cig = cigar[cig_id],\n\t                cig_op = \"MIDNSHP=X\"[ cig[0] ],\n\t                cig_len = cig[1];\n\t\n\t            var seq_start = feature_start + base_offset;\n\t            s_start = get_draw_coord(seq_start);\n\t            s_end = get_draw_coord(seq_start + cig_len);\n\t\n\t            // Skip feature if it's not in tile.\n\t            if (!is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n\t                // Update offsets.\n\t                base_offset = update_base_offset(base_offset, cig_op, cig_len);\n\t                seq_offset = update_seq_offset(seq_offset, cig_op, cig_len);\n\t                continue;\n\t            }\n\t\n\t            // Make sure that read is drawn even if it too small to be rendered officially; in this case,\n\t            // read is drawn at 1px.\n\t            // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n\t            // and drawing.\n\t            if (s_start === s_end) {\n\t                s_end += 1;\n\t            }\n\t\n\t            // Draw read feature.\n\t            switch (cig_op) {\n\t                case \"H\": // Hard clipping.\n\t                case \"S\": // Soft clipping.\n\t                case \"P\": // Padding.\n\t                    // Sequence not present and not related to alignment; do nothing.\n\t                    break;\n\t                case \"M\": // \"Match\".\n\t                    // Because it's not known whether there is a match, ignore.\n\t                    base_offset += cig_len;\n\t                    break;\n\t                case \"=\": // Match with reference.\n\t                case \"X\": // Mismatch with reference.\n\t                    //\n\t                    // Draw sequence and/or variants.\n\t                    //\n\t\n\t                    // Get sequence to draw.\n\t                    var cur_seq = '';\n\t                    if (cig_op === 'X') {\n\t                        // Get sequence from read_seq.\n\t                        cur_seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n\t                    }\n\t                    else if (this.ref_seq) { // && cig_op === '='\n\t                        // Use reference sequence.\n\t                        cur_seq = this.ref_seq.slice(\n\t                            // If read starts after tile start, slice at read start.\n\t                            Math.max(0, seq_start - tile_low),\n\t                            // If read ends before tile end, slice at read end.\n\t                            Math.min(seq_start - tile_low + cig_len, tile_high - tile_low)\n\t                        );\n\t                    }\n\t\n\t                    // Draw sequence. Because cur_seq starts and read/tile start, go to there to start writing.\n\t                    var start_pos = Math.max(seq_start, tile_low);\n\t                    for (var c = 0; c < cur_seq.length; c++) {\n\t                        // Draw base if showing all (i.e. not showing differences) or there is a mismatch.\n\t                        if (cur_seq && !this.prefs.show_differences || cig_op === 'X') {\n\t                            // Draw base.\n\t                            var c_start = Math.floor( Math.max(0, (start_pos + c - tile_low) * w_scale) );\n\t                            ctx.fillStyle = this.base_color_fn(cur_seq[c]);\n\t                            if (pack_mode && w_scale > char_width_px) {\n\t                                ctx.fillText(cur_seq[c], c_start, y_start + 9);\n\t                            }\n\t                            // Require a minimum w_scale so that variants are only drawn when somewhat zoomed in.\n\t                            else if (w_scale > 0.05) {\n\t                                ctx.fillRect(c_start - gap, rect_y, Math.max( 1, Math.round(w_scale) ), draw_height);\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    // Move forward in sequence only if sequence used to get mismatches.\n\t                    if (cig_op === 'X') { seq_offset += cig_len; }\n\t                    base_offset += cig_len;\n\t\n\t                    break;\n\t                case \"N\": // Skipped bases.\n\t                    ctx.fillStyle = CONNECTOR_COLOR;\n\t                    ctx.fillRect(s_start, rect_y + (draw_height - 1)/2, s_end - s_start, 1);\n\t                    // No change in seq_offset because sequence not used when skipping.\n\t                    base_offset += cig_len;\n\t                    break;\n\t                case \"D\": // Deletion.\n\t                    paint_utils.draw_deletion(s_start, rect_y, cig_len);\n\t                    base_offset += cig_len;\n\t                    break;\n\t                case \"I\": // Insertion.\n\t                    // Check to see if sequence should be drawn at all by looking at the overlap between\n\t                    // the sequence region and the tile region.\n\t                    var insert_x_coord = s_start - gap;\n\t\n\t                    if (is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n\t                        var seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n\t                        // Insertion point is between the sequence start and the previous base: (-gap) moves\n\t                        // back from sequence start to insertion point.\n\t                        if (this.prefs.show_insertions) {\n\t                            //\n\t                            // Show inserted sequence above, centered on insertion point.\n\t                            //\n\t\n\t                            // Draw sequence.\n\t                            // X center is offset + start - <half_sequence_length>\n\t                            var x_center = s_start - (s_end - s_start)/2;\n\t                            if ( (mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n\t                                // Draw sequence container.\n\t                                ctx.fillStyle = \"yellow\";\n\t                                ctx.fillRect(x_center - gap, y_start - 9, s_end - s_start, 9);\n\t                                draw_last[draw_last.length] = {type: \"triangle\", data: [insert_x_coord, y_start + 4, 5]};\n\t                                ctx.fillStyle = CONNECTOR_COLOR;\n\t                                // Based on overlap b/t sequence and tile, get sequence to be drawn.\n\t                                switch( compute_overlap( [seq_start, seq_start + cig_len], tile_region ) ) {\n\t                                    case(OVERLAP_START):\n\t                                        seq = seq.slice(tile_low-seq_start);\n\t                                        break;\n\t                                    case(OVERLAP_END):\n\t                                        seq = seq.slice(0, seq_start-tile_high);\n\t                                        break;\n\t                                    case(CONTAINED_BY):\n\t                                        // All of sequence drawn.\n\t                                        break;\n\t                                    case(CONTAINS):\n\t                                        seq = seq.slice(tile_low-seq_start, seq_start-tile_high);\n\t                                        break;\n\t                                }\n\t                                // Draw sequence.\n\t                                for (var c = 0, str_len = seq.length; c < str_len; c++) {\n\t                                    var c_start = Math.floor( Math.max(0, (seq_start + c -  tile_low) * w_scale) );\n\t                                    ctx.fillText(seq[c], c_start - (s_end - s_start)/2, y_start);\n\t                                }\n\t                            }\n\t                            else {\n\t                                // Draw block.\n\t                                ctx.fillStyle = \"yellow\";\n\t                                // TODO: This is a pretty hack-ish way to fill rectangle based on mode.\n\t                                ctx.fillRect(x_center, y_start + (this.mode !== \"Dense\" ? 2 : 5),\n\t                                             s_end - s_start, (mode !== \"Dense\" ? SQUISH_FEATURE_HEIGHT : DENSE_FEATURE_HEIGHT));\n\t                            }\n\t                        }\n\t                        else {\n\t                            if ( (mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n\t                                // Show insertions with a single number at the insertion point.\n\t                                draw_last.push( { type: \"text\", data: [seq.length, insert_x_coord, y_start + 9] } );\n\t                            }\n\t                            else {\n\t                                // TODO: probably can merge this case with code above.\n\t                            }\n\t                        }\n\t                    }\n\t                    seq_offset += cig_len;\n\t                    // No change to base offset because insertions are drawn above sequence/read.\n\t                    break;\n\t            }\n\t        }\n\t\n\t        //\n\t        // Draw last items.\n\t        //\n\t        ctx.fillStyle = \"yellow\";\n\t        var item, type, data;\n\t        for (var i = 0; i < draw_last.length; i++) {\n\t            item = draw_last[i];\n\t            type = item.type;\n\t            data = item.data;\n\t            if (type === \"text\") {\n\t                ctx.save();\n\t                ctx.font = \"bold \" + ctx.font;\n\t                ctx.fillText(data[0], data[1], data[2]);\n\t                ctx.restore();\n\t            }\n\t            else if (type === \"triangle\") {\n\t                drawDownwardEquilateralTriangle(ctx, data[0], data[1], data[2]);\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Draw a complete read pair\n\t     */\n\t    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width ) {\n\t        // All features need a start, end, and vertical center.\n\t        var feature_uid = feature[0],\n\t            feature_start = feature[1],\n\t            feature_end = feature[2],\n\t            feature_name = feature[3],\n\t            // -0.5 to put element between bases.\n\t            f_start = Math.floor( Math.max(-0.5 * w_scale, (feature_start - tile_low - 0.5) * w_scale) ),\n\t            f_end   = Math.ceil( Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)) ),\n\t            y_start = (mode === \"Dense\" ? 0 : (0 + slot)) * y_scale,\n\t            draw_height = (mode === 'Pack' ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT),\n\t            label_color = this.prefs.label_color;\n\t\n\t        // Draw read.\n\t        if (feature[5] instanceof Array) {\n\t            // Read is paired.\n\t            var connector = true;\n\t\n\t            // Draw left/forward read.\n\t            if (feature[4][1] >= tile_low && feature[4][0] <= tile_high && feature[4][2]) {\n\t                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[4][0], feature[4][2], feature[4][3], feature[4][4]);\n\t            }\n\t            else {\n\t                connector = false;\n\t            }\n\t\n\t            // Draw right/reverse read.\n\t            if (feature[5][1] >= tile_low && feature[5][0] <= tile_high && feature[5][2]) {\n\t                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[5][0], feature[5][2], feature[5][3], feature[5][4]);\n\t            }\n\t            else {\n\t                connector = false;\n\t            }\n\t\n\t            // Draw connector if both reads were drawn.\n\t            // TODO: currently, there is no way to connect reads drawn on different tiles; to connect reads on different tiles, data manager\n\t            // code is needed to join mate pairs from different regions. Alternatively, requesting multiple regions of data at once would\n\t            // make it possible to put together more easily.\n\t            // -0.5 to position connector correctly between reads.\n\t            var b1_end   = Math.ceil( Math.min(width, Math.max(-0.5 * w_scale, (feature[4][1] - tile_low - 0.5) * w_scale)) ),\n\t                b2_start = Math.floor( Math.max(-0.5 * w_scale, (feature[5][0] - tile_low - 0.5) * w_scale) );\n\t            if (connector && b2_start > b1_end) {\n\t                ctx.fillStyle = CONNECTOR_COLOR;\n\t                var line_height = y_start + 1 + (draw_height - 1)/2;\n\t                dashedLine(ctx, b1_end, line_height, b2_start, line_height);\n\t            }\n\t        } else {\n\t            // Read is single.\n\t            this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, feature[4], feature[5], feature[6]);\n\t        }\n\t        if (mode === \"Pack\" && feature_start >= tile_low && feature_name !== \".\") {\n\t            // Draw label.\n\t            ctx.fillStyle = this.prefs.label_color;\n\t            if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n\t                ctx.textAlign = \"left\";\n\t                ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 9, this.max_label_length);\n\t            } else {\n\t                ctx.textAlign = \"right\";\n\t                ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 9, this.max_label_length);\n\t            }\n\t        }\n\t\n\t        // FIXME: provide actual coordinates for drawn read.\n\t        return [0,0];\n\t    }\n\t});\n\t\n\tvar ArcLinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n\t    LinkedFeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n\t    // Need to know the longest feature length for adding spacing\n\t    this.longest_feature_length = this.calculate_longest_feature_length();\n\t    this.draw_background_connector = false;\n\t    this.draw_individual_connectors = true;\n\t};\n\t\n\t_.extend(ArcLinkedFeaturePainter.prototype, FeaturePainter.prototype, LinkedFeaturePainter.prototype, {\n\t\n\t    calculate_longest_feature_length: function () {\n\t        var longest_feature_length = 0;\n\t        for (var i = 0, len = this.data.length; i < len; i++) {\n\t            var feature = this.data[i], feature_start = feature[1], feature_end = feature[2];\n\t            longest_feature_length = Math.max( longest_feature_length, feature_end - feature_start );\n\t        }\n\t        return longest_feature_length;\n\t    },\n\t\n\t    get_top_padding: function( width ) {\n\t        var view_range = this.view_end - this.view_start,\n\t            w_scale = width / view_range;\n\t        return Math.min( 128, Math.ceil( ( this.longest_feature_length / 2 ) * w_scale ) );\n\t    },\n\t\n\t    draw_connector: function( ctx, block1_start, block1_end, block2_start, block2_end, y_start ) {\n\t        // Arc drawing -- from closest endpoints\n\t        var x_center = ( block1_end + block2_start ) / 2,\n\t            radius = block2_start - x_center;\n\t        // For full half circles\n\t        var angle1 = Math.PI, angle2 = 0;\n\t        if ( radius > 0 ) {\n\t            ctx.beginPath();\n\t            ctx.arc( x_center, y_start, block2_start - x_center, Math.PI, 0 );\n\t            ctx.stroke();\n\t        }\n\t    }\n\t});\n\t\n\t// Color stuff from less.js\n\t\n\tvar Color = function (rgb, a) {\n\t    /**\n\t     * The end goal here, is to parse the arguments\n\t     * into an integer triplet, such as `128, 255, 0`\n\t     *\n\t     * This facilitates operations and conversions.\n\t     */\n\t    if (Array.isArray(rgb)) {\n\t        this.rgb = rgb;\n\t    } else if (rgb.length == 6) {\n\t        this.rgb = rgb.match(/.{2}/g).map(function (c) {\n\t            return parseInt(c, 16);\n\t        });\n\t    } else if (rgb.length == 7) {\n\t        this.rgb = rgb.substring(1,7).match(/.{2}/g).map(function (c) {\n\t            return parseInt(c, 16);\n\t        });\n\t    } else {\n\t        this.rgb = rgb.split('').map(function (c) {\n\t            return parseInt(c + c, 16);\n\t        });\n\t    }\n\t    this.alpha = typeof(a) === 'number' ? a : 1;\n\t};\n\tColor.prototype = {\n\t    eval: function () { return this; },\n\t\n\t    //\n\t    // If we have some transparency, the only way to represent it\n\t    // is via `rgba`. Otherwise, we use the hex representation,\n\t    // which has better compatibility with older browsers.\n\t    // Values are capped between `0` and `255`, rounded and zero-padded.\n\t    //\n\t    toCSS: function () {\n\t        if (this.alpha < 1.0) {\n\t            return \"rgba(\" + this.rgb.map(function (c) {\n\t                return Math.round(c);\n\t            }).concat(this.alpha).join(', ') + \")\";\n\t        } else {\n\t            return '#' + this.rgb.map(function (i) {\n\t                i = Math.round(i);\n\t                i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n\t                return i.length === 1 ? '0' + i : i;\n\t            }).join('');\n\t        }\n\t    },\n\t\n\t    toHSL: function () {\n\t        var r = this.rgb[0] / 255,\n\t            g = this.rgb[1] / 255,\n\t            b = this.rgb[2] / 255,\n\t            a = this.alpha;\n\t\n\t        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n\t        var h, s, l = (max + min) / 2, d = max - min;\n\t\n\t        if (max === min) {\n\t            h = s = 0;\n\t        } else {\n\t            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\n\t            switch (max) {\n\t                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t                case g: h = (b - r) / d + 2;               break;\n\t                case b: h = (r - g) / d + 4;               break;\n\t            }\n\t            h /= 6;\n\t        }\n\t        return { h: h * 360, s: s, l: l, a: a };\n\t    },\n\t\n\t    toARGB: function () {\n\t        var argb = [Math.round(this.alpha * 255)].concat(this.rgb);\n\t        return '#' + argb.map(function (i) {\n\t            i = Math.round(i);\n\t            i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n\t            return i.length === 1 ? '0' + i : i;\n\t        }).join('');\n\t    },\n\t\n\t    mix: function (color2, weight) {\n\t        color1 = this;\n\t\n\t        var p = weight; // .value / 100.0;\n\t        var w = p * 2 - 1;\n\t        var a = color1.toHSL().a - color2.toHSL().a;\n\t\n\t        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t        var w2 = 1 - w1;\n\t\n\t        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n\t                   color1.rgb[1] * w1 + color2.rgb[1] * w2,\n\t                   color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\t\n\t        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\t\n\t        return new Color(rgb, alpha);\n\t    }\n\t};\n\t\n\t\n\t// End colors from less.js\n\t\n\tvar LinearRamp = function( start_color, end_color, start_value, end_value ) {\n\t    /**\n\t     * Simple linear gradient\n\t     */\n\t    this.start_color = new Color( start_color );\n\t    this.end_color = new Color( end_color );\n\t    this.start_value = start_value;\n\t    this.end_value = end_value;\n\t    this.value_range = end_value - start_value;\n\t};\n\t\n\tLinearRamp.prototype.map_value = function( value ) {\n\t    value = Math.max( value, this.start_value );\n\t    value = Math.min( value, this.end_value );\n\t    value = ( value - this.start_value ) / this.value_range;\n\t    // HACK: just red for now\n\t    // return \"hsl(0,100%,\" + (value * 100) + \"%)\"\n\t    return this.start_color.mix( this.end_color, 1 - value ).toCSS();\n\t};\n\t\n\tvar SplitRamp = function( start_color, middle_color, end_color, start_value, end_value ) {\n\t    /**\n\t     * Two gradients split away from 0\n\t     */\n\t    this.positive_ramp = new LinearRamp( middle_color, end_color, 0, end_value );\n\t    this.negative_ramp = new LinearRamp( middle_color, start_color, 0, -start_value );\n\t    this.start_value = start_value;\n\t    this.end_value = end_value;\n\t};\n\t\n\tSplitRamp.prototype.map_value = function( value ) {\n\t    value = Math.max( value, this.start_value );\n\t    value = Math.min( value, this.end_value );\n\t    if ( value >= 0 ) {\n\t        return this.positive_ramp.map_value( value );\n\t    } else {\n\t        return this.negative_ramp.map_value( -value );\n\t    }\n\t};\n\t\n\tvar DiagonalHeatmapPainter = function(data, view_start, view_end, prefs, mode) {\n\t    Painter.call( this, data, view_start, view_end, prefs, mode );\n\t    var i, len;\n\t\n\t    if ( this.prefs.min_value === undefined ) {\n\t        var min_value = Infinity;\n\t        for (i = 0, len = this.data.length; i < len; i++) {\n\t            min_value = Math.min( min_value, this.data[i][6] );\n\t        }\n\t        this.prefs.min_value = min_value;\n\t    }\n\t    if ( this.prefs.max_value === undefined ) {\n\t        var max_value = -Infinity;\n\t        for (i = 0, len = this.data.length; i < len; i++) {\n\t            max_value = Math.max( max_value, this.data[i][6] );\n\t        }\n\t        this.prefs.max_value = max_value;\n\t    }\n\t};\n\t\n\tDiagonalHeatmapPainter.prototype.default_prefs = {\n\t    min_value: undefined,\n\t    max_value: undefined,\n\t    mode: \"Heatmap\",\n\t    pos_color: \"#FF8C00\",\n\t    neg_color: \"#4169E1\"\n\t};\n\t\n\tDiagonalHeatmapPainter.prototype.draw = function(ctx, width, height, w_scale) {\n\t    var\n\t        min_value = this.prefs.min_value,\n\t        max_value = this.prefs.max_value,\n\t        value_range = max_value - min_value,\n\t        height_px = height,\n\t        view_start = this.view_start,\n\t        mode = this.mode,\n\t        data = this.data,\n\t        invsqrt2 = 1 / Math.sqrt(2);\n\t\n\t    var ramp = ( new SplitRamp( this.prefs.neg_color, \"#FFFFFF\", this.prefs.pos_color, min_value, max_value ) );\n\t\n\t    var d, s1, e1, s2, e2, value;\n\t\n\t    var scale = function( p ) { return ( p - view_start ) * w_scale; };\n\t\n\t    ctx.save();\n\t\n\t    // Draw into triangle, then rotate and scale\n\t    ctx.rotate(-45 * Math.PI / 180);\n\t    ctx.scale( invsqrt2, invsqrt2 );\n\t\n\t    // Paint track.\n\t    for (var i = 0, len = data.length; i < len; i++) {\n\t        d = data[i];\n\t\n\t        s1 = scale( d[1] );\n\t        e1 = scale( d[2] );\n\t        s2 = scale( d[4] );\n\t        e2 = scale( d[5] );\n\t        value = d[6];\n\t\n\t        ctx.fillStyle = ( ramp.map_value( value ) );\n\t        ctx.fillRect( s1, s2, ( e1 - s1 ), ( e2 - s2 ) );\n\t    }\n\t\n\t    ctx.restore();\n\t};\n\t\n\t/**\n\t * Utilities for painting reads.\n\t */\n\tvar ReadPainterUtils = function(ctx, row_height, px_per_base, mode) {\n\t    this.ctx = ctx;\n\t    this.row_height = row_height;\n\t    this.px_per_base = px_per_base;\n\t    this.draw_details = (mode === 'Pack' || mode === 'Auto') && (px_per_base >= ctx.canvas.manager.char_width_px);\n\t    this.delete_details_thickness = 0.2;\n\t};\n\t\n\t_.extend(ReadPainterUtils.prototype, {\n\t    /**\n\t     * Draw deletion of base(s).\n\t     * @param draw_detail if true, drawing in detail and deletion is drawn more subtly\n\t     */\n\t    draw_deletion: function(x, y, len) {\n\t        this.ctx.fillStyle = \"black\";\n\t        var thickness = (this.draw_details ? this.delete_details_thickness : 1) * this.row_height;\n\t        y += 0.5 * ( this.row_height - thickness );\n\t        this.ctx.fillRect(x, y, len * this.px_per_base, thickness);\n\t    }\n\t});\n\t\n\t/**\n\t * Paints variant data onto canvas.\n\t */\n\tvar VariantPainter = function(data, view_start, view_end, prefs, mode, base_color_fn) {\n\t    Painter.call(this, data, view_start, view_end, prefs, mode);\n\t    this.base_color_fn = base_color_fn;\n\t    this.divider_height = 1;\n\t};\n\t\n\t_.extend(VariantPainter.prototype, Painter.prototype, {\n\t    /**\n\t     * Height of a single row, depends on mode\n\t     */\n\t    get_row_height: function() {\n\t        var mode = this.mode, height;\n\t        if (mode === \"Dense\") {\n\t            height = DENSE_TRACK_HEIGHT;\n\t        }\n\t        else if (mode === \"Squish\") {\n\t            height = SQUISH_TRACK_HEIGHT;\n\t        }\n\t        else { // mode === \"Pack\"\n\t            height = PACK_TRACK_HEIGHT;\n\t        }\n\t        return height;\n\t    },\n\t\n\t    /**\n\t     * Returns required height to draw a particular number of samples in a given mode.\n\t     */\n\t    get_required_height: function(num_samples) {\n\t        // FIXME: for single-sample data, height should be summary_height when zoomed out and\n\t        // row_height when zoomed in.\n\t        var height = this.prefs.summary_height;\n\t\n\t        // If showing sample data, height is summary + divider + samples.\n\t        if (num_samples > 1 && this.prefs.show_sample_data) {\n\t            height += this.divider_height + num_samples * this.get_row_height();\n\t        }\n\t        return height;\n\t    },\n\t\n\t    /**\n\t     * Draw on the context using a rectangle of width x height with scale w_scale.\n\t     */\n\t    draw: function(ctx, width, height, w_scale) {\n\t        ctx.save();\n\t\n\t        var\n\t        /**\n\t         * Returns dictionary of information about an indel; returns empty if there no indel. Assumes indel is left-aligned.\n\t         * Dict attributes:\n\t         *    -type: 'insertion' or 'deletion'\n\t         *    -start: where the deletion starts relative to reference start\n\t         *    -len: how long the deletion is\n\t         */\n\t        get_indel_info = function(ref, alt) {\n\t            var ref_len = ref.length,\n\t                alt_len = alt.length,\n\t                start = 0,\n\t                len = 1,\n\t                type = null;\n\t            if (alt === '-') {\n\t                type = 'deletion';\n\t                len = ref.length;\n\t            }\n\t            else if (ref.indexOf(alt) === 0 && ref_len > alt_len) {\n\t                type = 'deletion';\n\t                len = ref_len - alt_len;\n\t                start = alt_len;\n\t            }\n\t            else if (alt.indexOf(ref) === 0 && ref_len < alt_len) {\n\t                // Insertion.\n\t                type = 'insertion';\n\t                len = alt_len - ref_len;\n\t                start = alt_len;\n\t            }\n\t\n\t            return ( type !== null ? { type: type, start: start, len: len } : {} );\n\t        };\n\t\n\t        // Draw.\n\t        var locus_data,\n\t            pos,\n\t            id,\n\t            ref,\n\t            alt,\n\t            qual,\n\t            filter,\n\t            sample_gts,\n\t            allele_counts,\n\t            variant,\n\t            draw_x_start,\n\t            draw_y_start,\n\t            genotype,\n\t            // Always draw variants at least 1 pixel wide.\n\t            base_px = Math.max(1, Math.floor(w_scale)),\n\t            // Determine number of samples.\n\t            num_samples = (this.data.length ? this.data[0][7].split(',').length : 0),\n\t            row_height = (this.mode === 'Squish' ? SQUISH_TRACK_HEIGHT : PACK_TRACK_HEIGHT),\n\t            // If zoomed out, fill the whole row with feature to make it easier to read;\n\t            // when zoomed in, use feature height so that there are gaps in sample rows.\n\t            feature_height = (w_scale < 0.1 ?\n\t                              row_height :\n\t                              (this.mode === 'Squish' ? SQUISH_FEATURE_HEIGHT : PACK_FEATURE_HEIGHT)\n\t                             ),\n\t            draw_summary = true,\n\t            paint_utils = new ReadPainterUtils(ctx, row_height, w_scale, this.mode),\n\t            j;\n\t\n\t        // If there's a single sample, update drawing variables.\n\t        if (num_samples === 1) {\n\t            row_height = feature_height =\n\t                (w_scale < ctx.canvas.manager.char_width_px ? this.prefs.summary_height : row_height);\n\t            paint_utils.row_height = row_height;\n\t            // No summary when there's a single sample.\n\t            draw_summary = false;\n\t        }\n\t\n\t        // Draw divider between summary and samples.\n\t        if (this.prefs.show_sample_data && draw_summary) {\n\t            ctx.fillStyle = '#F3F3F3';\n\t            ctx.globalAlpha = 1;\n\t            ctx.fillRect(0, this.prefs.summary_height - this.divider_height, width, this.divider_height);\n\t        }\n\t\n\t        // Draw variants.\n\t        ctx.textAlign = \"center\";\n\t        for (var i = 0; i < this.data.length; i++) {\n\t            // Get locus data.\n\t            locus_data = this.data[i];\n\t            pos = locus_data[1];\n\t            ref = locus_data[3];\n\t            alt = [ locus_data[4].split(',') ];\n\t            sample_gts = locus_data[7].split(',');\n\t            allele_counts = locus_data.slice(8);\n\t\n\t            // Process alterate values to derive information about each alt.\n\t            alt = _.map(_.flatten(alt), function(a) {\n\t                var alt_info = {\n\t                        type: 'snp',\n\t                        value: a,\n\t                        start: 0\n\t                    },\n\t                    indel_info = get_indel_info(ref, a);\n\t\n\t                return _.extend(alt_info, indel_info);\n\t            });\n\t\n\t            // Only draw locus data if it's in viewing region.\n\t            if (pos < this.view_start || pos > this.view_end) {\n\t                continue;\n\t            }\n\t\n\t            // Draw summary for alleles.\n\t            if (draw_summary) {\n\t                ctx.fillStyle = '#999999';\n\t                ctx.globalAlpha = 1;\n\t                for (j = 0; j < alt.length; j++) {\n\t                    // Draw background for summary.\n\t                    draw_x_start = this.get_start_draw_pos(pos + alt[j].start, w_scale);\n\t                    ctx.fillRect(draw_x_start, 0, base_px, this.prefs.summary_height);\n\t                    draw_y_start = this.prefs.summary_height;\n\t                    // Draw allele fractions onto summary.\n\t                    for (j = 0; j < alt.length; j++) {\n\t                        ctx.fillStyle = ( alt[j].type === 'deletion' ? 'black' : this.base_color_fn(alt[j].value) );\n\t                        allele_frac = allele_counts / sample_gts.length;\n\t                        draw_height = Math.ceil(this.prefs.summary_height * allele_frac);\n\t                        ctx.fillRect(draw_x_start, draw_y_start - draw_height, base_px, draw_height);\n\t                        draw_y_start -= draw_height;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Done drawing if not showing samples data.\n\t            if (!this.prefs.show_sample_data) { continue; }\n\t\n\t            // Draw sample genotype(s).\n\t            draw_y_start = (draw_summary ? this.prefs.summary_height + this.divider_height : 0);\n\t            for (j = 0; j < sample_gts.length; j++, draw_y_start += row_height) {\n\t                genotype = (sample_gts[j] ? sample_gts[j].split(/\\/|\\|/) : ['0', '0']);\n\t\n\t                // Get variant to draw and set drawing properties.\n\t                variant = null;\n\t                if (genotype[0] === genotype[1]) {\n\t                    if (genotype[0] === '.') {\n\t                        // TODO: draw uncalled variant.\n\t                    }\n\t                    else if (genotype[0] !== '0') {\n\t                        // Homozygous for variant.\n\t                        variant = alt[ parseInt(genotype[0], 10) - 1 ];\n\t                        ctx.globalAlpha = 1;\n\t                    }\n\t                    // else reference\n\t                }\n\t                else { // Heterozygous for variant.\n\t                    variant = (genotype[0] !== '0' ? genotype[0] : genotype[1]);\n\t                    variant = alt[ parseInt(variant, 10) - 1 ];\n\t                    ctx.globalAlpha = 0.5;\n\t                }\n\t\n\t                // If there's a variant, draw it.\n\t                if (variant) {\n\t                    draw_x_start = this.get_start_draw_pos(pos + variant.start, w_scale);\n\t                    if (variant.type === 'snp') {\n\t                        var snp = variant.value;\n\t                        ctx.fillStyle = this.base_color_fn(snp);\n\t                        if (paint_utils.draw_details) {\n\t                            ctx.fillText(snp, this.get_draw_pos(pos, w_scale), draw_y_start + row_height);\n\t                        }\n\t                        else {\n\t                            ctx.fillRect(draw_x_start, draw_y_start + 1, base_px, feature_height);\n\t                        }\n\t                    }\n\t                    else if (variant.type === 'deletion') {\n\t                        paint_utils.draw_deletion(draw_x_start, draw_y_start + 1, variant.len);\n\t                    }\n\t                    else {\n\t                        // TODO: handle insertions.\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        ctx.restore();\n\t    }\n\t});\n\t\n\treturn {\n\t    Scaler: Scaler,\n\t    LinePainter: LinePainter,\n\t    LinkedFeaturePainter: LinkedFeaturePainter,\n\t    ReadPainter: ReadPainter,\n\t    ArcLinkedFeaturePainter: ArcLinkedFeaturePainter,\n\t    DiagonalHeatmapPainter: DiagonalHeatmapPainter,\n\t    VariantPainter: VariantPainter\n\t};\n\t\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function( _ ) {\n\t\n\tvar extend = _.extend;\n\t\n\t// HACK: LABEL_SPACING is currently duplicated between here and painters\n\tvar LABEL_SPACING = 2,\n\t    PACK_SPACING = 5;\n\t\n\t/**\n\t * Hold slotting information for a feature.\n\t */\n\tvar SlottedInfo = function(slot, feature) {\n\t    this.slot = slot;\n\t    this.feature = feature;\n\t};\n\t\n\t/**\n\t * FeatureSlotter determines slots in which to draw features for vertical\n\t * packing.\n\t *\n\t * This implementation is incremental, any feature assigned a slot will be\n\t * retained for slotting future features.\n\t */\n\tvar FeatureSlotter = function (w_scale, mode, max_rows, measureText) {\n\t    this.slots = {};\n\t    this.start_end_dct = {};\n\t    this.w_scale = w_scale;\n\t    this.mode = mode;\n\t    this.include_label = (mode === \"Pack\");\n\t    this.max_rows = max_rows;\n\t    this.measureText = measureText;\n\t};\n\t\n\t/**\n\t * Slot a set of features, `this.slots` will be updated with slots by id, and\n\t * the largest slot required for the passed set of features is returned\n\t */\n\textend( FeatureSlotter.prototype, {\n\t    /**\n\t     * Get drawing coordinate for a feature.\n\t     */\n\t    _get_draw_coords: function(feature) {\n\t        // Get initial draw coordinates using w_scale.\n\t        var draw_start = Math.floor(feature[1] * this.w_scale),\n\t            draw_end = Math.ceil(feature[2] * this.w_scale),\n\t            f_name = feature[3],\n\t            text_align;\n\t\n\t        // Update start, end drawing locations to include feature name.\n\t        // Try to put the name on the left, if not, put on right.\n\t        if (f_name !== undefined && this.include_label ) {\n\t            // Add gap for label spacing and extra pack space padding\n\t            // TODO: Fix constants\n\t            var text_len = this.measureText(f_name).width + (LABEL_SPACING + PACK_SPACING);\n\t            if (draw_start - text_len >= 0) {\n\t                draw_start -= text_len;\n\t                text_align = \"left\";\n\t            } else {\n\t                draw_end += text_len;\n\t                text_align = \"right\";\n\t            }\n\t        }\n\t\n\t        /*\n\t        if (slot_num < 0) {\n\t            \n\t            TODO: this is not yet working --\n\t            console.log(feature_uid, \"looking for slot with text on the right\");\n\t            // Slot not found. If text was on left, try on right and see\n\t            // if slot can be found.\n\t            // TODO: are there any checks we need to do to ensure that text\n\t            // will fit on tile?\n\t            if (text_align === \"left\") {\n\t                draw_start -= text_len;\n\t                draw_end -= text_len;\n\t                text_align = \"right\";\n\t                slot_num = find_slot(draw_start, draw_end);\n\t            }\n\t            if (slot_num >= 0) {\n\t                console.log(feature_uid, \"found slot with text on the right\");\n\t            }\n\t\n\t        }\n\t        */\n\t\n\t        return [draw_start, draw_end];\n\t    },\n\t\n\t    /**\n\t     * Find the first slot such that current feature doesn't overlap any other features in that slot.\n\t     * Returns -1 if no slot was found.\n\t     */\n\t    _find_slot: function(draw_coords) {\n\t        // TODO: Use a data structure for faster searching of available slots.\n\t        var draw_start = draw_coords[0],\n\t            draw_end = draw_coords[1];\n\t        for (var slot_num = 0; slot_num <= this.max_rows; slot_num++) {\n\t            var has_overlap = false,\n\t                slot = this.start_end_dct[slot_num];\n\t            if (slot !== undefined) {\n\t                // Iterate through features already in slot to see if current feature will fit.\n\t                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n\t                    var s_e = slot[k];\n\t                    if (draw_end > s_e[0] && draw_start < s_e[1]) {\n\t                        // There is overlap\n\t                        has_overlap = true;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            if (!has_overlap) {\n\t                return slot_num;\n\t            }\n\t        }\n\t        return -1;\n\t    },\n\t\n\t    /**\n\t     * Slot features.\n\t     */\n\t    slot_features: function( features ) {\n\t        var start_end_dct = this.start_end_dct,\n\t            undone = [], \n\t            highest_slot = 0,\n\t            feature,\n\t            feature_uid;\n\t\n\t        // Loop through features to (a) find those that are not yet slotted and (b) update\n\t        // those that are slotted if new information is availabe. For (a), features already\n\t        // slotted (based on slotting from other tiles) will retain their current slot.\n\t        for (var i = 0, len = features.length; i < len; i++) {\n\t            feature = features[i];\n\t            feature_uid = feature[0];\n\t            var slotted_info = this.slots[feature_uid];\n\t\n\t            // Separate and handle slotted vs. unslotted features.\n\t            if (slotted_info) {\n\t                // Feature is slotted; if feature now has larger start/end coordinates,\n\t                // update drawing coordinates.\n\t                if (feature[1] < slotted_info.feature[1]  || slotted_info.feature[2] < feature[2]) {\n\t                    // Feature has changed (e.g. a single read now has its pair), so recalculate its \n\t                    // drawing coordinates.\n\t                    var old_draw_coords = this._get_draw_coords(slotted_info.feature),\n\t                        new_draw_coords = this._get_draw_coords(feature),\n\t                        slotted_coords = this.start_end_dct[slotted_info.slot];\n\t                    for (var k = 0; k < slotted_coords.length; k++) {\n\t                        var dc = slotted_coords[k];\n\t                        if (dc[0] === old_draw_coords[0] && dc[1] === old_draw_coords[1]) {\n\t                            // Replace old drawing coordinates with new ones.\n\t                            slotted_coords[k] = new_draw_coords;\n\t                        }\n\t                    }\n\t                }\n\t                highest_slot = Math.max(highest_slot, this.slots[feature_uid].slot);\n\t            } \n\t            else {\n\t                undone.push(i);\n\t            }\n\t        }\n\t        \n\t        // Slot unslotted features.\n\t        \n\t        // Do slotting.\n\t        for (var i = 0, len = undone.length; i < len; i++) {\n\t            feature = features[undone[i]];\n\t            feature_uid = feature[0];\n\t            var draw_coords = this._get_draw_coords(feature);\n\t                        \n\t            // Find slot.\n\t            var slot_num = this._find_slot(draw_coords);\n\t\n\t            // Do slotting.\n\t            if (slot_num >= 0) {\n\t                // Add current feature to slot.\n\t                if (start_end_dct[slot_num] === undefined) {\n\t                    start_end_dct[slot_num] = [];\n\t                }\n\t                start_end_dct[slot_num].push(draw_coords);\n\t                this.slots[feature_uid] = new SlottedInfo(slot_num, feature);\n\t                highest_slot = Math.max(highest_slot, slot_num);\n\t            }\n\t        }\n\t        \n\t        // Debugging: view slots data.\n\t        /*\n\t        for (var i = 0; i < MAX_FEATURE_DEPTH; i++) {\n\t            var slot = start_end_dct[i];\n\t            if (slot !== undefined) {\n\t                console.log(i, \"*************\");\n\t                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n\t                    console.log(\"\\t\", slot[k][0], slot[k][1]);\n\t                }\n\t            }\n\t        }\n\t        */\n\t        return highest_slot + 1;\n\t    }\n\t});\n\t\n\treturn {\n\t    FeatureSlotter: FeatureSlotter\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, Backbone) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(3),\n\t    __webpack_require__(59),\n\t    __webpack_require__(129),\n\t    __webpack_require__(17),\n\t    __webpack_require__(127),\n\t    __webpack_require__(126),\n\t    __webpack_require__(125),\n\t    __webpack_require__(11),\n\t    __webpack_require__(46),\n\t    __webpack_require__(56),\n\t    __webpack_require__(16),\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod) {\n\t\n\t\n\tvar extend = _.extend;\n\t\n\t// ---- Web UI specific utilities ----\n\t\n\t/**\n\t * Dictionary of HTML element-JavaScript object relationships.\n\t */\n\t// TODO: probably should separate moveable objects from containers.\n\tvar html_elt_js_obj_dict = {};\n\t\n\t/**\n\t * Designates an HTML as a container.\n\t */\n\tvar is_container = function(element, obj) {\n\t    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n\t};\n\t\n\t/**\n\t * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n\t * Function manages JS objects, containers as well.\n\t *\n\t * @param element HTML element to make moveable\n\t * @param handle_class classname that denotes HTML element to be used as handle\n\t * @param container_selector selector used to identify possible containers for this element\n\t * @param element_js_obj JavaScript object associated with element; used\n\t */\n\tvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n\t    // HACK: set default value for container selector.\n\t    container_selector = \".group\";\n\t\n\t    // Register element with its object.\n\t    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\t\n\t    // Need to provide selector for handle, not class.\n\t    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n\t        var element = $(this),\n\t            parent = $(this).parent(),\n\t            // Only sorting amongst tracks and groups.\n\t            children = parent.children('.track,.group'),\n\t            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n\t            child,\n\t            container,\n\t            top,\n\t            bottom,\n\t            i;\n\t\n\t        //\n\t        // Enable three types of dragging: (a) out of container; (b) into container;\n\t        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n\t        //\n\t\n\t        // Handle dragging out of container.\n\t        container = $(this).parents(container_selector);\n\t        if (container.length !== 0) {\n\t            top = container.position().top;\n\t            bottom = top + container.outerHeight();\n\t            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n\t            if (d.offsetY < top) {\n\t                // Moving above container.\n\t                $(this).insertBefore(container);\n\t                cur_container.remove_drawable(this_obj);\n\t                cur_container.container.add_drawable_before(this_obj, cur_container);\n\t                return;\n\t            }\n\t            else if (d.offsetY > bottom) {\n\t                // Moving below container.\n\t                $(this).insertAfter(container);\n\t                cur_container.remove_drawable(this_obj);\n\t                cur_container.container.add_drawable(this_obj);\n\t                return;\n\t            }\n\t        }\n\t\n\t        // Handle dragging into container. Child is appended to container's content_div.\n\t        container = null;\n\t        for ( i = 0; i < children.length; i++ ) {\n\t            child = $(children.get(i));\n\t            top = child.position().top;\n\t            bottom = top + child.outerHeight();\n\t            // Dragging into container if child is a container and offset is inside container.\n\t            if ( child.is(container_selector) && this !== child.get(0) &&\n\t                 d.offsetY >= top && d.offsetY <= bottom ) {\n\t                // Append/prepend based on where offsetY is closest to and return.\n\t                if (d.offsetY - top < bottom - d.offsetY) {\n\t                    child.find(\".content-div\").prepend(this);\n\t                }\n\t                else {\n\t                    child.find(\".content-div\").append(this);\n\t                }\n\t                // Update containers. Object may not have container if it is being moved quickly.\n\t                if (this_obj.container) {\n\t                    this_obj.container.remove_drawable(this_obj);\n\t                }\n\t                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n\t                return;\n\t            }\n\t        }\n\t\n\t        // Handle sibling movement, aka sorting.\n\t\n\t        // Determine new position\n\t        for ( i = 0; i < children.length; i++ ) {\n\t            child = $(children.get(i));\n\t            if ( d.offsetY < child.position().top &&\n\t                 // Cannot move tracks above reference track or intro div.\n\t                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n\t                break;\n\t            }\n\t        }\n\t\n\t        // If not already in the right place, move. Need\n\t        // to handle the end specially since we don't have\n\t        // insert at index\n\t        if ( i === children.length ) {\n\t            if ( this !== children.get(i - 1) ) {\n\t                parent.append(this);\n\t                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n\t            }\n\t        }\n\t        else if ( this !== children.get(i) ) {\n\t            $(this).insertBefore( children.get(i) );\n\t            // Need to adjust insert position if moving down because move is changing\n\t            // indices of all list items.\n\t            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n\t        }\n\t    }).bind(\"dragstart\", function() {\n\t        $(this).addClass('dragging');\n\t    }).bind(\"dragend\", function() {\n\t        $(this).removeClass('dragging');\n\t    });\n\t};\n\t\n\t/**\n\t * Init constants & functions used throughout trackster.\n\t */\n\tvar\n\t    // Padding at the top of tracks for error messages\n\t    ERROR_PADDING = 20,\n\t    // Maximum number of rows un a slotted track\n\t    MAX_FEATURE_DEPTH = 100,\n\t    // Minimum width for window for squish to be used.\n\t    MIN_SQUISH_VIEW_WIDTH = 12000,\n\t    // Number of pixels per tile, not including left offset.\n\t    TILE_SIZE = 400,\n\t    DEFAULT_DATA_QUERY_WAIT = 5000,\n\t    // Maximum number of chromosomes that are selectable at any one time.\n\t    MAX_CHROMS_SELECTABLE = 100,\n\t    DATA_ERROR = \"Cannot display dataset due to an error. \",\n\t    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n\t    DATA_NONE = \"No data for this chrom/contig.\",\n\t    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n\t                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n\t    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n\t    DATA_LOADING = \"Loading data...\",\n\t    DATA_OK = \"Ready for display\",\n\t    TILE_CACHE_SIZE = 10,\n\t    DATA_CACHE_SIZE = 20,\n\t\n\t    // Numerical/continuous data display modes.\n\t    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\t\n\t/**\n\t * Round a number to a given number of decimal places.\n\t */\n\tfunction round(num, places) {\n\t    // Default rounding is to integer.\n\t    if (!places) {\n\t        places = 0;\n\t    }\n\t\n\t    var val = Math.pow(10, places);\n\t    return Math.round(num * val) / val;\n\t}\n\t\n\t/**\n\t * Drawables hierarchy:\n\t *\n\t * Drawable\n\t *    --> DrawableCollection\n\t *        --> DrawableGroup\n\t *        --> View\n\t *    --> Track\n\t */\n\t\n\t/**\n\t * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n\t * container. They have the following HTML elements and structure:\n\t *  <container_div>\n\t *      <header_div>\n\t *      <content_div>\n\t *\n\t * They optionally have a drag handle class.\n\t */\n\tvar Drawable = function(view, container, obj_dict) {\n\t    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n\t    this.id = Drawable.id_counter++;\n\t    this.view = view;\n\t    this.container = container;\n\t    this.drag_handle_class = obj_dict.drag_handle_class;\n\t    this.is_overview = false;\n\t    this.action_icons = {};\n\t\n\t    // -- Set up drawable configuration. --\n\t    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\t\n\t    // If there's no saved name, use object name.\n\t    if (!this.config.get_value('name')) {\n\t        this.config.set_value('name', obj_dict.name);\n\t    }\n\t    if (this.config_onchange) {\n\t        this.config.on('change', this.config_onchange, this);\n\t    }\n\t\n\t    // Build Drawable HTML and behaviors.\n\t    this.container_div = this.build_container_div();\n\t    this.header_div = null;\n\t\n\t    // Use opt-out policy on header creation because this is the more frequent approach:\n\t    // unless flag set, create header.\n\t    if (obj_dict.header !== false) {\n\t        var header_view = new viz_views.TrackHeaderView({\n\t            model: this,\n\t            id: this.id\n\t        });\n\t\n\t        this.header_div = header_view.$el;\n\t        this.container_div.append(this.header_div);\n\t\n\t        // Show icons when users is hovering over track.\n\t        var icons_div = header_view.icons_div;\n\t        this.action_icons = header_view.action_icons;\n\t        this.container_div.hover(\n\t            function() { icons_div.show(); }, function() { icons_div.hide(); }\n\t        );\n\t    }\n\t};\n\t\n\tDrawable.prototype.action_icons_def = [\n\t    // Hide/show drawable content.\n\t    // FIXME: make this an odict for easier lookup.\n\t    {\n\t        name: \"toggle_icon\",\n\t        title: \"Hide/show content\",\n\t        css_class: \"toggle\",\n\t        on_click_fn: function(drawable) {\n\t            if ( drawable.config.get_value('content_visible') ) {\n\t                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n\t                drawable.hide_contents();\n\t                drawable.config.set_value('content_visible', false);\n\t            }\n\t            else {\n\t                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n\t                drawable.config.set_value('content_visible', true);\n\t                drawable.show_contents();\n\t            }\n\t        }\n\t    },\n\t    // Edit settings.\n\t    {\n\t        name: \"settings_icon\",\n\t        title: \"Edit settings\",\n\t        css_class: \"gear\",\n\t        on_click_fn: function(drawable) {\n\t            var view = new config_mod.ConfigSettingCollectionView({\n\t                collection: drawable.config\n\t            });\n\t            view.render_in_modal('Configure Track');\n\t        }\n\t    },\n\t    // Remove.\n\t    {\n\t        name: \"remove_icon\",\n\t        title: \"Remove\",\n\t        css_class: \"remove-icon\",\n\t        on_click_fn: function(drawable) {\n\t            // Tooltip for remove icon must be deleted when drawable is deleted.\n\t            $(\".tooltip\").remove();\n\t            drawable.remove();\n\t        }\n\t    }\n\t];\n\t\n\textend(Drawable.prototype, {\n\t    config_params: [\n\t        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n\t        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n\t    ],\n\t\n\t    config_onchange: function() {},\n\t\n\t    init: function() {},\n\t\n\t    changed: function() {\n\t        this.view.changed();\n\t    },\n\t\n\t    can_draw: function() {\n\t        if (this.enabled && this.config.get_value('content_visible')) {\n\t            return true;\n\t        }\n\t\n\t        return false;\n\t    },\n\t\n\t    request_draw: function() {},\n\t\n\t    _draw: function(options) {},\n\t\n\t    /**\n\t     * Returns representation of object in a dictionary for easy saving.\n\t     * Use from_dict to recreate object.\n\t     */\n\t    to_dict: function() {},\n\t\n\t    /**\n\t     * Set drawable name.\n\t     */\n\t    set_name: function(new_name) {\n\t        this.old_name = this.config.get_value('name');\n\t        this.config.set_value('name', new_name);\n\t    },\n\t\n\t    /**\n\t     * Revert track name; currently name can be reverted only once.\n\t     */\n\t    revert_name: function() {\n\t        if (this.old_name) {\n\t            this.config.set_value('name', this.old_name);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Remove drawable (a) from its container and (b) from the HTML.\n\t     */\n\t    remove: function() {\n\t        this.changed();\n\t\n\t        this.container.remove_drawable(this);\n\t        var view = this.view;\n\t        this.container_div.hide(0, function() {\n\t            $(this).remove();\n\t            // HACK: is there a better way to update the view?\n\t            view.update_intro_div();\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Build drawable's container div; this is the parent div for all drawable's elements.\n\t     */\n\t    build_container_div: function() {},\n\t\n\t    /**\n\t     * Update icons.\n\t     */\n\t    update_icons: function() {},\n\t\n\t    /**\n\t     * Hide drawable's contents.\n\t     */\n\t    hide_contents: function () {},\n\t\n\t    /**\n\t     * Show drawable's contents.\n\t     */\n\t    show_contents: function() {},\n\t\n\t    /**\n\t     * Returns a shallow copy of all drawables in this drawable.\n\t     */\n\t    get_drawables: function() {}\n\t});\n\t\n\t/**\n\t * A collection of drawable objects.\n\t */\n\tvar DrawableCollection = function(view, container, obj_dict) {\n\t    Drawable.call(this, view, container, obj_dict);\n\t\n\t    // Attribute init.\n\t    this.obj_type = obj_dict.obj_type;\n\t    this.drawables = [];\n\t};\n\t\n\textend(DrawableCollection.prototype, Drawable.prototype, {\n\t    /**\n\t     * Unpack and add drawables to the collection.\n\t     */\n\t    unpack_drawables: function(drawables_array) {\n\t        // Add drawables to collection.\n\t        this.drawables = [];\n\t        var drawable;\n\t        for (var i = 0; i < drawables_array.length; i++) {\n\t            drawable = object_from_template(drawables_array[i], this.view, this);\n\t            this.add_drawable(drawable);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Init each drawable in the collection.\n\t     */\n\t    init: function() {\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            this.drawables[i].init();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Draw each drawable in the collection.\n\t     */\n\t    _draw: function(options) {\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            this.drawables[i]._draw(options);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns representation of object in a dictionary for easy saving.\n\t     * Use from_dict to recreate object.\n\t     */\n\t    to_dict: function() {\n\t        var dictified_drawables = [];\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            dictified_drawables.push(this.drawables[i].to_dict());\n\t        }\n\t        return {\n\t            prefs: this.config.to_key_value_dict(),\n\t            obj_type: this.obj_type,\n\t            drawables: dictified_drawables\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Add a drawable to the end of the collection.\n\t     */\n\t    add_drawable: function(drawable) {\n\t        this.drawables.push(drawable);\n\t        drawable.container = this;\n\t        this.changed();\n\t    },\n\t\n\t    /**\n\t     * Add a drawable before another drawable.\n\t     */\n\t    add_drawable_before: function(drawable, other) {\n\t        this.changed();\n\t        var index = this.drawables.indexOf(other);\n\t        if (index !== -1) {\n\t            this.drawables.splice(index, 0, drawable);\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /**\n\t     * Replace one drawable with another.\n\t     */\n\t    replace_drawable: function(old_drawable, new_drawable, update_html) {\n\t        var index = this.drawables.indexOf(old_drawable);\n\t        if (index !== -1) {\n\t            this.drawables[index] = new_drawable;\n\t            if (update_html) {\n\t                old_drawable.container_div.replaceWith(new_drawable.container_div);\n\t            }\n\t            this.changed();\n\t        }\n\t        return index;\n\t    },\n\t\n\t    /**\n\t     * Remove drawable from this collection.\n\t     */\n\t    remove_drawable: function(drawable) {\n\t        var index = this.drawables.indexOf(drawable);\n\t        if (index !== -1) {\n\t            // Found drawable to remove.\n\t            this.drawables.splice(index, 1);\n\t            drawable.container = null;\n\t            this.changed();\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /**\n\t     * Move drawable to another location in collection.\n\t     */\n\t    move_drawable: function(drawable, new_position) {\n\t        var index = this.drawables.indexOf(drawable);\n\t        if (index !== -1) {\n\t            // Remove from current position:\n\t            this.drawables.splice(index, 1);\n\t            // insert into new position:\n\t            this.drawables.splice(new_position, 0, drawable);\n\t            this.changed();\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /**\n\t     * Returns all drawables in this drawable.\n\t     */\n\t    get_drawables: function() {\n\t        return this.drawables;\n\t    },\n\t\n\t    /**\n\t     * Returns all <track_type> tracks in collection.\n\t     */\n\t    get_tracks: function(track_type) {\n\t        // Initialize queue with copy of drawables array.\n\t        var queue = this.drawables.slice(0),\n\t            tracks = [],\n\t            drawable;\n\t        while (queue.length !== 0) {\n\t            drawable = queue.shift();\n\t            if (drawable instanceof track_type) {\n\t                tracks.push(drawable);\n\t            }\n\t            else if (drawable.drawables) {\n\t                queue = queue.concat(drawable.drawables);\n\t            }\n\t        }\n\t        return tracks;\n\t    }\n\t});\n\t\n\t/**\n\t * A group of drawables that are moveable, visible.\n\t */\n\tvar DrawableGroup = function(view, container, obj_dict) {\n\t    extend(obj_dict, {\n\t        obj_type: \"DrawableGroup\",\n\t        drag_handle_class: \"group-handle\"\n\t    });\n\t    DrawableCollection.call(this, view, container, obj_dict);\n\t\n\t    // Set up containers/moving for group: register both container_div and content div as container\n\t    // because both are used as containers (container div to recognize container, content_div to\n\t    // store elements). Group can be moved.\n\t    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n\t    is_container(this.container_div, this);\n\t    is_container(this.content_div, this);\n\t    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\t\n\t    // Set up filters.\n\t    this.filters_manager = new filters_mod.FiltersManager(this);\n\t    this.header_div.after(this.filters_manager.parent_div);\n\t\n\t    // HACK: add div to clear floating elements.\n\t    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\t\n\t    // For saving drawables' filter managers when group-level filtering is done:\n\t    this.saved_filters_managers = [];\n\t\n\t    // Add drawables.\n\t    if ('drawables' in obj_dict) {\n\t        this.unpack_drawables(obj_dict.drawables);\n\t    }\n\t\n\t    // Restore filters.\n\t    if ('filters' in obj_dict) {\n\t        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n\t        var old_manager = this.filters_manager;\n\t        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n\t        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\t\n\t        if (obj_dict.filters.visible) {\n\t            this.setup_multitrack_filtering();\n\t        }\n\t    }\n\t};\n\t\n\textend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n\t    action_icons_def: [\n\t        Drawable.prototype.action_icons_def[0],\n\t        Drawable.prototype.action_icons_def[1],\n\t        // Replace group with composite track.\n\t        {\n\t            name: \"composite_icon\",\n\t            title: \"Show composite track\",\n\t            css_class: \"layers-stack\",\n\t            on_click_fn: function(group) {\n\t                $(\".tooltip\").remove();\n\t                group.show_composite_track();\n\t            }\n\t        },\n\t        // Toggle track filters.\n\t        {\n\t            name: \"filters_icon\",\n\t            title: \"Filters\",\n\t            css_class: \"ui-slider-050\",\n\t            on_click_fn: function(group) {\n\t                // TODO: update Tooltip text.\n\t                if (group.filters_manager.visible()) {\n\t                    // Hiding filters.\n\t                    group.filters_manager.clear_filters();\n\t                    group._restore_filter_managers();\n\t                    // TODO: maintain current filter by restoring and setting saved manager's\n\t                    // settings to current/shared manager's settings.\n\t                    // TODO: need to restore filter managers when moving drawable outside group.\n\t                }\n\t                else {\n\t                    // Showing filters.\n\t                    group.setup_multitrack_filtering();\n\t                    group.request_draw({ clear_tile_cache: true });\n\t                }\n\t                group.filters_manager.toggle();\n\t            }\n\t        },\n\t        Drawable.prototype.action_icons_def[2]\n\t    ],\n\t\n\t    build_container_div: function() {\n\t        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n\t        if (this.container) {\n\t            this.container.content_div.append(container_div);\n\t        }\n\t        return container_div;\n\t    },\n\t\n\t    hide_contents: function () {\n\t        this.tiles_div.hide();\n\t    },\n\t\n\t    show_contents: function() {\n\t        // Show the contents div and labels (if present)\n\t        this.tiles_div.show();\n\t        // Request a redraw of the content\n\t        this.request_draw();\n\t    },\n\t\n\t    update_icons: function() {\n\t        //\n\t        // Handle update when there are no tracks.\n\t        //\n\t        var num_drawables = this.drawables.length;\n\t        if (num_drawables === 0) {\n\t            this.action_icons.composite_icon.hide();\n\t            this.action_icons.filters_icon.hide();\n\t        }\n\t        else if (num_drawables === 1) {\n\t            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n\t            this.action_icons.filters_icon.hide();\n\t        }\n\t        else { // There are 2 or more tracks.\n\t\n\t            //\n\t            // Determine if a composite track can be created. Current criteria:\n\t            // (a) all tracks are line tracks;\n\t            //      OR\n\t            // FIXME: this is not enabled right now because it has not been well tested:\n\t            // (b) there is a single FeatureTrack.\n\t            //\n\t\n\t            // All tracks the same?\n\t            var i, j, drawable,\n\t                same_type = true,\n\t                a_type = this.drawables[0].get_type(),\n\t                num_feature_tracks = 0;\n\t            for (i = 0; i < num_drawables; i++) {\n\t                drawable = this.drawables[i];\n\t                if (drawable.get_type() !== a_type) {\n\t                    can_composite = false;\n\t                    break;\n\t                }\n\t                if (drawable instanceof FeatureTrack) {\n\t                    num_feature_tracks++;\n\t                }\n\t            }\n\t\n\t            if (same_type && this.drawables[0] instanceof LineTrack) {\n\t                this.action_icons.composite_icon.show();\n\t            }\n\t            else {\n\t                this.action_icons.composite_icon.hide();\n\t                $(\".tooltip\").remove();\n\t            }\n\t\n\t            //\n\t            // Set up group-level filtering and update filter icon.\n\t            //\n\t            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n\t                //\n\t                // Find shared filters.\n\t                //\n\t                var shared_filters = {},\n\t                    filter;\n\t\n\t                // Init shared filters with filters from first drawable.\n\t                drawable = this.drawables[0];\n\t                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n\t                    filter = drawable.filters_manager.filters[j];\n\t                    shared_filters[filter.name] = [filter];\n\t                }\n\t\n\t                // Create lists of shared filters.\n\t                for (i = 1; i < this.drawables.length; i++) {\n\t                    drawable = this.drawables[i];\n\t                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n\t                        filter = drawable.filters_manager.filters[j];\n\t                        if (filter.name in shared_filters) {\n\t                            shared_filters[filter.name].push(filter);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                //\n\t                // Create filters for shared filters manager. Shared filters manager is group's\n\t                // manager.\n\t                //\n\t                this.filters_manager.remove_all();\n\t                var\n\t                    filters,\n\t                    new_filter,\n\t                    min,\n\t                    max;\n\t                for (var filter_name in shared_filters) {\n\t                    filters = shared_filters[filter_name];\n\t                    if (filters.length === num_feature_tracks) {\n\t                        // Add new filter.\n\t                        // FIXME: can filter.copy() be used?\n\t                        new_filter = new filters_mod.NumberFilter( {\n\t                                        name: filters[0].name,\n\t                                        index: filters[0].index\n\t                                        } );\n\t                        this.filters_manager.add_filter(new_filter);\n\t                    }\n\t                }\n\t\n\t                // Show/hide icon based on filter availability.\n\t                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n\t            }\n\t            else {\n\t                this.action_icons.filters_icon.hide();\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Restore individual track filter managers.\n\t     */\n\t    _restore_filter_managers: function() {\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n\t        }\n\t        this.saved_filters_managers = [];\n\t    },\n\t\n\t    /**\n\t     *\n\t     */\n\t    setup_multitrack_filtering: function() {\n\t        // Save tracks' managers and set up shared manager.\n\t        if (this.filters_manager.filters.length > 0) {\n\t            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n\t            this.saved_filters_managers = [];\n\t            for (var i = 0; i < this.drawables.length; i++) {\n\t                drawable = this.drawables[i];\n\t                this.saved_filters_managers.push(drawable.filters_manager);\n\t                drawable.filters_manager = this.filters_manager;\n\t            }\n\t\n\t            //TODO: hide filters icons for each drawable?\n\t        }\n\t        this.filters_manager.init_filters();\n\t    },\n\t\n\t    /**\n\t     * Replace group with a single composite track that includes all group's tracks.\n\t     */\n\t    show_composite_track: function() {\n\t        var composite_track = new CompositeTrack(this.view, this.view, {\n\t            name: this.config.get_value('name'),\n\t            drawables: this.drawables\n\t        });\n\t        var index = this.container.replace_drawable(this, composite_track, true);\n\t        composite_track.request_draw();\n\t    },\n\t\n\t    add_drawable: function(drawable) {\n\t        DrawableCollection.prototype.add_drawable.call(this, drawable);\n\t        this.update_icons();\n\t    },\n\t\n\t    remove_drawable: function(drawable) {\n\t        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n\t        this.update_icons();\n\t    },\n\t\n\t    to_dict: function() {\n\t        // If filters are visible, need to restore original filter managers before converting to dict.\n\t        if (this.filters_manager.visible()) {\n\t            this._restore_filter_managers();\n\t        }\n\t\n\t        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\t\n\t        // Setup multi-track filtering again.\n\t        if (this.filters_manager.visible()) {\n\t            this.setup_multitrack_filtering();\n\t        }\n\t\n\t        return obj_dict;\n\t    },\n\t\n\t    request_draw: function(options) {\n\t        _.each(this.drawables, function(d) {\n\t            d.request_draw(options);\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * View object manages a trackster visualization, including tracks and user interactions.\n\t * Events triggered:\n\t *      navigate: when browser view changes to a new locations\n\t */\n\tvar TracksterView = Backbone.View.extend({\n\t\n\t    initialize: function(obj_dict) {\n\t        extend(obj_dict, {\n\t            obj_type: \"View\"\n\t        });\n\t        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n\t        this.chrom = null;\n\t        this.vis_id = obj_dict.vis_id;\n\t        this.dbkey = obj_dict.dbkey;\n\t        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n\t        this.label_tracks = [];\n\t        this.tracks_to_be_redrawn = [];\n\t        this.max_low = 0;\n\t        this.max_high = 0;\n\t        this.zoom_factor = 3;\n\t        this.min_separation = 30;\n\t        this.has_changes = false;\n\t        // Deferred object that indicates when view's chrom data has been loaded.\n\t        this.load_chroms_deferred = null;\n\t        this.render();\n\t        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n\t        this.reset();\n\t\n\t        // Define track configuration\n\t        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n\t                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n\t                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n\t                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n\t                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n\t                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n\t                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n\t            ], { name: obj_dict.name });\n\t    },\n\t\n\t    render: function() {\n\t        // Attribute init.\n\t        this.requested_redraw = false;\n\t\n\t        // Create DOM elements\n\t        var parent_element = this.container,\n\t            view = this;\n\t        // Top container for things that are fixed at the top\n\t        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n\t        // Browser content, primary tracks are contained in here\n\t        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n\t        // Bottom container for things that are fixed at the bottom\n\t        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n\t        // Label track fixed at top\n\t        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n\t        // Viewport for dragging tracks in center\n\t        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n\t        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n\t        this.content_div = this.viewport_container;\n\t        is_container(this.viewport_container, view);\n\t        // Introduction div shown when there are no tracks.\n\t        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n\t        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n\t            visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey }, function(tracks) {\n\t                _.each(tracks, function(track) {\n\t                    view.add_drawable( object_from_template(track, view, view) );\n\t                });\n\t            });\n\t        });\n\t\n\t        // Navigation at top\n\t        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n\t        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\t\n\t        if (this.stand_alone) {\n\t            this.nav_container.addClass(\"stand-alone\");\n\t            this.nav.addClass(\"stand-alone\");\n\t        }\n\t\n\t        // Overview (scrollbar and overview plot) at bottom\n\t        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n\t        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n\t        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n\t                                       .addClass(\"icon-button overview-close tooltip\")\n\t                                       .hide()\n\t                                       .appendTo(this.overview_viewport);\n\t        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n\t        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n\t        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n\t        this.default_overview_height = this.overview_box.height();\n\t\n\t        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n\t        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n\t        var submit_nav = function(e) {\n\t            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n\t                if ((e.keyCode || e.which) !== 27) { // Not escape key\n\t                    view.go_to( $(this).val() );\n\t                }\n\t                $(this).hide();\n\t                $(this).val('');\n\t                view.location_span.show();\n\t                view.chrom_select.show();\n\t            }\n\t\n\t            // Suppress key presses so that they do impact viz.\n\t            e.stopPropagation();\n\t        };\n\t        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n\t        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n\t        this.location_span.click(function() {\n\t            view.location_span.hide();\n\t            view.chrom_select.hide();\n\t            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n\t            view.nav_input.css(\"display\", \"inline-block\");\n\t            view.nav_input.select();\n\t            view.nav_input.focus();\n\t            // Set up autocomplete for tracks' features.\n\t            view.nav_input.autocomplete({\n\t                source: function(request, response) {\n\t                    // Using current text, query each track and create list of all matching features.\n\t                    var all_features = [],\n\t                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n\t                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n\t                            all_features = all_features.concat(dataset_features);\n\t                        });\n\t                    });\n\t\n\t                    // When all searching is done, fill autocomplete.\n\t                    $.when.apply($, feature_search_deferreds).done(function() {\n\t                        response($.map(all_features, function(feature) {\n\t                            return {\n\t                                label: feature[0],\n\t                                value: feature[1]\n\t                            };\n\t                        }));\n\t                    });\n\t                },\n\t                minLength: 2\n\t            });\n\t        });\n\t        if (this.vis_id !== undefined) {\n\t            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n\t        }\n\t\n\t        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n\t                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n\t        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n\t                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\t\n\t        // Get initial set of chroms.\n\t        this.load_chroms_deferred = this.load_chroms({low: 0});\n\t        this.chrom_select.bind(\"change\", function() {\n\t            view.change_chrom(view.chrom_select.val());\n\t        });\n\t\n\t        /*\n\t        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n\t            if (Math.abs(delta) < 0.5) {\n\t                return;\n\t            }\n\t            if (delta > 0) {\n\t                view.zoom_in(e.pageX, this.viewport_container);\n\t            } else {\n\t                view.zoom_out();\n\t            }\n\t            e.preventDefault();\n\t        });\n\t        */\n\t\n\t        // Blur tool/filter inputs when user clicks on content div.\n\t        this.browser_content_div.click(function( e ) {\n\t            $(this).find(\"input\").trigger(\"blur\");\n\t        });\n\t\n\t        // Double clicking zooms in\n\t        this.browser_content_div.bind(\"dblclick\", function( e ) {\n\t            view.zoom_in(e.pageX, this.viewport_container);\n\t        });\n\t\n\t        // Dragging the overview box (~ horizontal scroll bar)\n\t        this.overview_box.bind(\"dragstart\", function( e, d ) {\n\t            this.current_x = d.offsetX;\n\t        }).bind(\"drag\", function( e, d ) {\n\t            var delta = d.offsetX - this.current_x;\n\t            this.current_x = d.offsetX;\n\t            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n\t            view.move_delta(-delta_chrom);\n\t        });\n\t\n\t        this.overview_close.click(function() {\n\t            view.reset_overview();\n\t        });\n\t\n\t        // Dragging in the viewport scrolls\n\t        this.viewport_container.bind( \"draginit\", function( e, d ) {\n\t            // Disable interaction if started in scrollbar (for webkit)\n\t            if ( e.clientX > view.viewport_container.width() - 16 ) {\n\t                return false;\n\t            }\n\t        }).bind( \"dragstart\", function( e, d ) {\n\t            d.original_low = view.low;\n\t            d.current_height = e.clientY;\n\t            d.current_x = d.offsetX;\n\t        }).bind( \"drag\", function( e, d ) {\n\t            var container = $(this);\n\t            var delta = d.offsetX - d.current_x;\n\t            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n\t            container.scrollTop(new_scroll);\n\t            d.current_height = e.clientY;\n\t            d.current_x = d.offsetX;\n\t            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n\t            view.move_delta(delta_chrom);\n\t        });\n\t        /*\n\t        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n\t        needed here because moving left/right should be difficult.\n\t\n\t        // Also capture mouse wheel for left/right scrolling\n\t        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n\t            // Only handle x axis scrolling; y axis scrolling is\n\t            // handled by the browser when the event bubbles up.\n\t            if (dx) {\n\t                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n\t                view.move_delta( delta_chrom );\n\t            }\n\t        });\n\t        */\n\t\n\t        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n\t        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n\t            return $(\"<div/>\").addClass('zoom-area').css(\n\t                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n\t            ).appendTo( $(this) );\n\t        }).bind( \"drag\", function( e, d ) {\n\t            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n\t            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n\t                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n\t                span = (view.high - view.low),\n\t                width = view.viewport_container.width();\n\t            view.update_location( Math.round(min / width * span) + view.low,\n\t                                  Math.round(max / width * span) + view.low );\n\t        }).bind( \"dragend\", function( e, d ) {\n\t            var min = Math.min(e.pageX, d.startX),\n\t                max = Math.max(e.pageX, d.startX),\n\t                span = (view.high - view.low),\n\t                width = view.viewport_container.width(),\n\t                old_low = view.low;\n\t            view.low = Math.round(min / width * span) + old_low;\n\t            view.high = Math.round(max / width * span) + old_low;\n\t            $(d.proxy).remove();\n\t            view.request_redraw();\n\t        });\n\t\n\t        // FIXME: this is still wonky for embedded visualizations.\n\t        /*\n\t        // For vertical alignment, track mouse with simple line.\n\t        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\t\n\t        // Show tracker only when hovering over view.\n\t        parent_element.hover(\n\t            function() {\n\t                mouse_tracker_div.show();\n\t                parent_element.mousemove(function(e) {\n\t                    mouse_tracker_div.css({\n\t                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n\t                        left: e.pageX - parent_element.offset().left - 1\n\t                    });\n\t                });\n\t            },\n\t            function() {\n\t                parent_element.off('mousemove');\n\t                mouse_tracker_div.hide();\n\t            }\n\t        );\n\t        */\n\t\n\t        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\t\n\t        $(window).bind(\"resize\", function() {\n\t            // Stop previous timer.\n\t            if (this.resize_timer) {\n\t                clearTimeout(this.resize_timer);\n\t            }\n\t\n\t            // When function activated, resize window and redraw.\n\t            this.resize_timer = setTimeout(function () {\n\t                view.resize_window();\n\t            }, 500 );\n\t        });\n\t        $(document).bind(\"redraw\", function() { view.redraw(); });\n\t\n\t        this.reset();\n\t        $(window).trigger(\"resize\");\n\t    },\n\t\n\t    get_base_color: function(base) {\n\t        return this.config.get_value(base.toLowerCase() + '_color') ||\n\t               this.config.get_value('n_color');\n\t    }\n\t\n\t});\n\t\n\t// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\n\textend( TracksterView.prototype, DrawableCollection.prototype, {\n\t\n\t    changed: function() {\n\t        this.has_changes = true;\n\t    },\n\t\n\t    /** Add or remove intro div depending on view state. */\n\t    update_intro_div: function() {\n\t        this.intro_div.toggle(this.drawables.length === 0);\n\t    },\n\t\n\t    /**\n\t     * Triggers navigate events as needed. If there is a delay,\n\t     * then event is triggered only after navigation has stopped.\n\t     */\n\t    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n\t        // Stop previous timer.\n\t        if (this.timer) {\n\t            clearTimeout(this.timer);\n\t        }\n\t\n\t        if (delay) {\n\t            // To aggregate calls, use timer and only navigate once\n\t            // location has stabilized.\n\t            var self = this;\n\t            this.timer = setTimeout(function () {\n\t                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n\t            }, 500 );\n\t        }\n\t        else {\n\t            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n\t        }\n\t    },\n\t\n\t    update_location: function(low, high) {\n\t        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n\t        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\t\n\t        // Update location. Only update when there is a valid chrom; when loading vis, there may\n\t        // not be a valid chrom.\n\t        var chrom = this.chrom_select.val();\n\t        if (chrom !== \"\") {\n\t            this.trigger_navigate(chrom, this.low, this.high, true);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Load chrom data for the view. Returns a jQuery Deferred.\n\t     */\n\t    // FIXME: instead of loading chrom data, should load and store genome object.\n\t    load_chroms: function(url_parms) {\n\t        url_parms.num = MAX_CHROMS_SELECTABLE;\n\t\n\t        var\n\t            view = this,\n\t            chrom_data = $.Deferred();\n\t        $.ajax({\n\t            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n\t            data: url_parms,\n\t            dataType: \"json\",\n\t            success: function (result) {\n\t                // Do nothing if could not load chroms.\n\t                if (result.chrom_info.length === 0) {\n\t                    return;\n\t                }\n\t\n\t                // Load chroms.\n\t                if (result.reference) {\n\t                    var ref_track = new ReferenceTrack(view);\n\t                    view.add_label_track(ref_track);\n\t                    view.reference_track = ref_track;\n\t                }\n\t                view.chrom_data = result.chrom_info;\n\t                var chrom_options = '<option value=\"\">Select Chrom/Contig</option>';\n\t                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n\t                    var chrom = view.chrom_data[i].chrom;\n\t                    chrom_options += '<option value=\"' + chrom + '\">' + chrom + '</option>';\n\t                }\n\t                if (result.prev_chroms) {\n\t                    chrom_options += '<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>';\n\t                }\n\t                if (result.next_chroms) {\n\t                    chrom_options += '<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>';\n\t                }\n\t                view.chrom_select.html(chrom_options);\n\t                view.chrom_start_index = result.start_index;\n\t\n\t                chrom_data.resolve(result.chrom_info);\n\t            },\n\t            error: function() {\n\t                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n\t            }\n\t        });\n\t        return chrom_data;\n\t    },\n\t\n\t    change_chrom: function(chrom, low, high) {\n\t        var view = this;\n\t        // If chrom data is still loading, wait for it.\n\t        if (!view.chrom_data) {\n\t            view.load_chroms_deferred.then(function() {\n\t                view.change_chrom(chrom, low, high);\n\t            });\n\t            return;\n\t        }\n\t\n\t        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n\t        if (!chrom || chrom === \"None\") {\n\t            return;\n\t        }\n\t\n\t        //\n\t        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n\t        //\n\t        if (chrom === \"previous\") {\n\t            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n\t            return;\n\t        }\n\t        if (chrom === \"next\") {\n\t            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n\t            return;\n\t        }\n\t\n\t        //\n\t        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n\t        // chrom set.\n\t        //\n\t        var found = $.grep(view.chrom_data, function(v, i) {\n\t            return v.chrom === chrom;\n\t        })[0];\n\t        if (found === undefined) {\n\t            // Try to load chrom and then change to chrom.\n\t            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n\t            return;\n\t        }\n\t        else {\n\t            // Switching to local chrom.\n\t            if (chrom !== view.chrom) {\n\t                view.chrom = chrom;\n\t                view.chrom_select.val(view.chrom);\n\t                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n\t                view.reset();\n\t\n\t                for (var i = 0, len = view.drawables.length; i < len; i++) {\n\t                    var drawable = view.drawables[i];\n\t                    if (drawable.init) {\n\t                        drawable.init();\n\t                    }\n\t                }\n\t                if (view.reference_track) {\n\t                    view.reference_track.init();\n\t                }\n\t            }\n\t\n\t            // Resolve low, high.\n\t            if (low === undefined && high === undefined) {\n\t                // Both are undefined, so view is whole chromosome.\n\t                view.low = 0;\n\t                view.high = view.max_high;\n\t            }\n\t            else {\n\t                // Low and/or high is defined.\n\t                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n\t                if (high === undefined) {\n\t                    // Center visualization around low.\n\t                    // HACK: max resolution is currently 30 bases.\n\t                    view.low = Math.max(view.low - 15, 0);\n\t                    view.high = view.low + 30;\n\t                }\n\t                else {\n\t                    // High is defined.\n\t                    view.high = Math.min(high, view.max_high);\n\t                }\n\t            }\n\t\n\t            view.request_redraw();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Change viewing region to that denoted by string. General format of string is:\n\t     *\n\t     * <chrom>[ {separator}<start>[-<end>] ]\n\t     *\n\t     * where separator can be whitespace or a colon. Examples:\n\t     *\n\t     * chr22\n\t     * chr1:100-200\n\t     * chr7 89999\n\t     * chr8 90000 990000\n\t     */\n\t    go_to: function(str) {\n\t        // Remove commas.\n\t        str = str.replace(/,/g, '');\n\t\n\t        // Replace colons and hyphens with space for easy parsing.\n\t        str = str.replace(/:|\\-/g, ' ');\n\t\n\t        // Parse new location.\n\t        var chrom_pos = str.split(/\\s+/),\n\t            chrom = chrom_pos[0],\n\t            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n\t            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\t\n\t        this.change_chrom(chrom, new_low, new_high);\n\t    },\n\t\n\t    move_fraction: function(fraction) {\n\t        var view = this;\n\t        var span = view.high - view.low;\n\t        this.move_delta(fraction * span);\n\t    },\n\t\n\t    move_delta: function(delta_chrom) {\n\t        //\n\t        // Update low, high.\n\t        //\n\t\n\t        var view = this;\n\t        var current_chrom_span = view.high - view.low;\n\t        // Check for left and right boundaries\n\t        if (view.low - delta_chrom < view.max_low) {\n\t            view.low = view.max_low;\n\t            view.high = view.max_low + current_chrom_span;\n\t        } else if (view.high - delta_chrom > view.max_high) {\n\t            view.high = view.max_high;\n\t            view.low = view.max_high - current_chrom_span;\n\t        } else {\n\t            view.high -= delta_chrom;\n\t            view.low -= delta_chrom;\n\t        }\n\t\n\t        //\n\t        // Redraw view.\n\t        //\n\t\n\t        // Redraw without requesting more data immediately.\n\t        view.request_redraw({ data_fetch: false });\n\t\n\t        // Set up timeout to redraw with more data when moving stops.\n\t        if (this.redraw_on_move_fn) {\n\t            clearTimeout(this.redraw_on_move_fn);\n\t        }\n\t\n\t        this.redraw_on_move_fn = setTimeout(function() {\n\t            view.request_redraw();\n\t        }, 200);\n\t\n\t        // Navigate.\n\t        var chrom = view.chrom_select.val();\n\t        this.trigger_navigate(chrom, view.low, view.high, true);\n\t    },\n\t\n\t    /**\n\t     * Add a drawable to the view.\n\t     */\n\t    add_drawable: function(drawable) {\n\t        DrawableCollection.prototype.add_drawable.call(this, drawable);\n\t        drawable.init();\n\t        this.changed();\n\t        this.update_intro_div();\n\t\n\t        // When drawable config changes, mark view as changed. This\n\t        // captures most (all?) state change that needs to be saved.\n\t        var self = this;\n\t        drawable.config.on('change', function() {\n\t            self.changed();\n\t        });\n\t    },\n\t\n\t    add_label_track: function (label_track) {\n\t        label_track.view = this;\n\t        label_track.init();\n\t        this.label_tracks.push(label_track);\n\t    },\n\t\n\t    /**\n\t     * Remove drawable from the view.\n\t     */\n\t    remove_drawable: function(drawable, hide) {\n\t        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n\t        if (hide) {\n\t            var view = this;\n\t            drawable.container_div.hide(0, function() {\n\t                $(this).remove();\n\t                view.update_intro_div();\n\t            });\n\t        }\n\t    },\n\t\n\t    reset: function() {\n\t        this.low = this.max_low;\n\t        this.high = this.max_high;\n\t        this.viewport_container.find(\".yaxislabel\").remove();\n\t    },\n\t\n\t    /**\n\t     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n\t     * all drawables are redrawn.\n\t     */\n\t    request_redraw: function(options, drawable) {\n\t        var view = this,\n\t            // Either redrawing a single drawable or all view's drawables.\n\t            track_list = (drawable ? [drawable] : view.drawables);\n\t\n\t        // Add/update tracks in track list to redraw list.\n\t        _.each(track_list, function(track) {\n\t            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n\t                return to[0] === track;\n\t            });\n\t\n\t            if (track_options) {\n\t                // Track already in list; update options.\n\t                track_options[1] = options;\n\t            }\n\t            else {\n\t                // Track not in list yet.\n\t                view.tracks_to_be_redrawn.push([track, options]);\n\t            }\n\t        });\n\t\n\t        // Set up redraw if it has not been requested since last redraw.\n\t        if (!this.requested_redraw) {\n\t            requestAnimationFrame(function() { view._redraw(); });\n\t            this.requested_redraw = true;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Redraws view and tracks.\n\t     * NOTE: this method should never be called directly; request_redraw() should be used so\n\t     * that requestAnimationFrame can manage redrawing.\n\t     */\n\t    _redraw: function() {\n\t        // TODO: move this code to function that does location setting.\n\t\n\t        // Clear because requested redraw is being handled now.\n\t        this.requested_redraw = false;\n\t\n\t        var low = this.low,\n\t            high = this.high;\n\t\n\t        if (low < this.max_low) {\n\t            low = this.max_low;\n\t        }\n\t        if (high > this.max_high) {\n\t            high = this.max_high;\n\t        }\n\t        var span = this.high - this.low;\n\t        if (this.high !== 0 && span < this.min_separation) {\n\t            high = low + this.min_separation;\n\t        }\n\t        this.low = Math.floor(low);\n\t        this.high = Math.ceil(high);\n\t\n\t        this.update_location(this.low, this.high);\n\t\n\t        // -- Drawing code --\n\t\n\t        // Resolution is a pixel density.\n\t        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\t\n\t        // Overview\n\t        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n\t        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n\t        var min_width_px = 13;\n\t\n\t        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n\t        if (width_px < min_width_px) {\n\t            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n\t        }\n\t        if (this.overview_highlight) {\n\t            this.overview_highlight.css({ left: left_px, width: width_px });\n\t        }\n\t\n\t        // Draw data tracks.\n\t        _.each(this.tracks_to_be_redrawn, function(track_options) {\n\t            var track = track_options[0],\n\t                options = track_options[1];\n\t            if (track) {\n\t                track._draw(options);\n\t            }\n\t        });\n\t        this.tracks_to_be_redrawn = [];\n\t\n\t        // Draw label tracks.\n\t        _.each(this.label_tracks, function(label_track) {\n\t            label_track._draw();\n\t        });\n\t    },\n\t\n\t    zoom_in: function (point, container) {\n\t        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n\t            return;\n\t        }\n\t        var span = this.high - this.low,\n\t            cur_center = span / 2 + this.low,\n\t            new_half = (span / this.zoom_factor) / 2;\n\t        if (point) {\n\t            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n\t        }\n\t        this.low = Math.round(cur_center - new_half);\n\t        this.high = Math.round(cur_center + new_half);\n\t\n\t        this.changed();\n\t        this.request_redraw();\n\t    },\n\t\n\t    zoom_out: function () {\n\t        if (this.max_high === 0) {\n\t            return;\n\t        }\n\t        var span = this.high - this.low,\n\t            cur_center = span / 2 + this.low,\n\t            new_half = (span * this.zoom_factor) / 2;\n\t        this.low = Math.round(cur_center - new_half);\n\t        this.high = Math.round(cur_center + new_half);\n\t        this.changed();\n\t        this.request_redraw();\n\t    },\n\t\n\t    /** Resize viewport. Use this method if header/footer content has changed in size. */\n\t    resize_viewport: function() {\n\t        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n\t    },\n\t\n\t    /** Called when window is resized. */\n\t    resize_window: function() {\n\t        this.resize_viewport();\n\t        this.request_redraw();\n\t    },\n\t\n\t    /** Show a Drawable in the overview. */\n\t    set_overview: function(drawable) {\n\t        if (this.overview_drawable) {\n\t            // If drawable to be set as overview is already in overview, do nothing.\n\t            // Otherwise, remove overview.\n\t            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n\t                return;\n\t            }\n\t            this.overview_viewport.find(\".track\").remove();\n\t        }\n\t\n\t        // Set new overview.\n\t        var\n\t            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n\t            view = this;\n\t        overview_drawable.header_div.hide();\n\t        overview_drawable.is_overview = true;\n\t        view.overview_drawable = overview_drawable;\n\t        this.overview_drawable.postdraw_actions = function() {\n\t            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n\t            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n\t            view.overview_close.show();\n\t            view.resize_window();\n\t        };\n\t        view.overview_drawable.request_draw();\n\t        this.changed();\n\t    },\n\t\n\t    /** Close and reset overview. */\n\t    reset_overview: function() {\n\t        // Update UI.\n\t        $(\".tooltip\").remove();\n\t        this.overview_viewport.find(\".track-tile\").remove();\n\t        this.overview_viewport.height(this.default_overview_height);\n\t        this.overview_box.height(this.default_overview_height);\n\t        this.overview_close.hide();\n\t        this.overview_highlight.hide();\n\t        view.resize_window();\n\t        view.overview_drawable = null;\n\t    }\n\t});\n\t\n\t/**\n\t * Encapsulation of a tool that users can apply to tracks/datasets.\n\t */\n\tvar TracksterTool = tools_mod.Tool.extend({\n\t    defaults: {\n\t        track: null\n\t    },\n\t\n\t    initialize: function(options) {\n\t        tools_mod.Tool.prototype.initialize.call(this, options);\n\t\n\t        // Restore tool visibility from state; default to hidden.\n\t        var hidden = true;\n\t        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n\t            hidden = options.tool_state.hidden;\n\t        }\n\t        this.set('hidden', hidden);\n\t\n\t        // FIXME: need to restore tool values from options.tool_state\n\t\n\t        // HACK: remove some inputs because Trackster does yet not work with them.\n\t        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n\t    },\n\t\n\t    state_dict: function(options) {\n\t        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n\t    }\n\t});\n\t\n\t/**\n\t * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n\t */\n\t var ToolParameterView = Backbone.View.extend({\n\t\n\t    events: {\n\t        'change :input': 'update_value'\n\t    },\n\t\n\t    render: function() {\n\t        var param_div = this.$el.addClass(\"param-row\"),\n\t            param = this.model;\n\t\n\t        // Param label.\n\t        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n\t        // Param HTML.\n\t        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n\t        // Set initial value.\n\t        html_div.find(\":input\").val(param.get('value'));\n\t\n\t        // Add to clear floating layout.\n\t        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n\t    },\n\t\n\t    update_value: function(update_event) {\n\t        this.model.set_value($(update_event.target).val());\n\t    }\n\t });\n\t\n\t/**\n\t * View for TracksterTool.\n\t */\n\tvar TracksterToolView = Backbone.View.extend({\n\t\n\t    initialize: function(options) {\n\t        this.model.on('change:hidden', this.set_visible, this);\n\t    },\n\t\n\t    /**\n\t     * Render tool UI.\n\t     */\n\t    render: function() {\n\t        var self = this;\n\t            tool = this.model,\n\t            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\t\n\t        // Prevent div events from propogating to other elements.\n\t        parent_div.bind(\"drag\", function(e) {\n\t            e.stopPropagation();\n\t        }).click(function(e) {\n\t            e.stopPropagation();\n\t        }).bind(\"dblclick\", function(e) {\n\t            e.stopPropagation();\n\t        }).keydown(function(e) { e.stopPropagation(); });\n\t\n\t        // Add name, inputs.\n\t        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n\t        tool.get('inputs').each(function(param) {\n\t            // Render parameter.\n\t            var param_view = new ToolParameterView({ model: param });\n\t            param_view.render();\n\t            parent_div.append(param_view.$el);\n\t        });\n\t\n\t        // Highlight value for inputs for easy replacement.\n\t        parent_div.find(\"input\").click(function() { $(this).select(); });\n\t\n\t        // Add buttons for running on dataset, region.\n\t        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n\t        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n\t        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n\t        run_on_region_button.click( function() {\n\t            // Run tool to create new track.\n\t            self.run_on_region();\n\t        });\n\t        run_on_dataset_button.click( function() {\n\t            self.run_on_dataset();\n\t        });\n\t\n\t        if (tool.is_visible()) {\n\t            this.$el.show();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Show or hide tool depending on tool visibility state.\n\t     */\n\t    set_visible: function() {\n\t        this.$el.toggle(this.model.is_visible());\n\t    },\n\t\n\t    /**\n\t     * Update tool parameters.\n\t     */\n\t    update_params: function() {\n\t        for (var i = 0; i < this.params.length; i++) {\n\t            this.params[i].update_value();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n\t     */\n\t    run_on_dataset: function() {\n\t        var tool = this.model;\n\t        this.run(\n\t            // URL params.\n\t            {\n\t                target_dataset_id: this.model.get('track').dataset.id,\n\t                action: 'rerun',\n\t                tool_id: tool.id\n\t            },\n\t            null,\n\t            // Success callback.\n\t            function(track_data) {\n\t                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n\t            }\n\t        );\n\t    },\n\t\n\t    /**\n\t     * Run dataset on visible region. This creates a new track and sets the track's contents\n\t     * to the tool's output.\n\t     */\n\t    run_on_region: function() {\n\t        //\n\t        // Create track for tool's output immediately to provide user feedback.\n\t        //\n\t        var track = this.model.get('track'),\n\t            tool = this.model,\n\t            region = new visualization.GenomeRegion({\n\t                chrom: track.view.chrom,\n\t                start: track.view.low,\n\t                end: track.view.high\n\t            }),\n\t            url_params =\n\t            {\n\t                target_dataset_id: track.dataset.id,\n\t                action: 'rerun',\n\t                tool_id: tool.id,\n\t                regions: [\n\t                    region.toJSON()\n\t                ]\n\t            },\n\t            current_track = track,\n\t            // Set name of track to include tool name, parameters, and region used.\n\t            track_name = tool.get('name') +\n\t                         current_track.tool_region_and_parameters_str(region),\n\t            container;\n\t\n\t        // If track not in a group, create a group for it and add new track to group. If track\n\t        // already in group, add track to group.\n\t        if (current_track.container === view) {\n\t            // Create new group.\n\t            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\t\n\t            // Replace track with group.\n\t            var index = current_track.container.replace_drawable(current_track, group, false);\n\t\n\t            // Update HTML.\n\t            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n\t            // a Drawable or DrawableCollection function.\n\t            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n\t            group.add_drawable(current_track);\n\t            current_track.container_div.appendTo(group.content_div);\n\t            container = group;\n\t        }\n\t        else {\n\t            // Use current group.\n\t            container = current_track.container;\n\t        }\n\t\n\t        // Create and init new track.\n\t        var new_track = new current_track.constructor(view, container, {\n\t            name: track_name,\n\t            hda_ldda: \"hda\"\n\t        });\n\t        new_track.init_for_tool_data();\n\t        new_track.change_mode(current_track.mode);\n\t        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n\t        new_track.update_icons();\n\t        container.add_drawable(new_track);\n\t        new_track.tiles_div.text(\"Starting job.\");\n\t\n\t        // Run tool.\n\t        this.run(url_params, new_track,\n\t                // Success callback.\n\t                function(track_data) {\n\t                    new_track.set_dataset(new data.Dataset(track_data));\n\t                    new_track.tiles_div.text(\"Running job.\");\n\t                    new_track.init();\n\t                }\n\t        );\n\t    },\n\t\n\t    /**\n\t     * Run tool using a set of URL params and a success callback.\n\t     */\n\t    run: function(url_params, new_track, success_callback) {\n\t        // Run tool.\n\t        url_params.inputs = this.model.get_inputs_dict();\n\t        var ss_deferred = new util.ServerStateDeferred({\n\t            ajax_settings: {\n\t                url: Galaxy.root + \"api/tools\",\n\t                data: JSON.stringify(url_params),\n\t                dataType: \"json\",\n\t                contentType: 'application/json',\n\t                type: \"POST\"\n\t            },\n\t            interval: 2000,\n\t            success_fn: function(response) {\n\t                return response !== \"pending\";\n\t            }\n\t        });\n\t\n\t        // Start with this status message.\n\t        //new_track.container_div.addClass(\"pending\");\n\t        //new_track.content_div.html(DATA_PENDING);\n\t\n\t        $.when(ss_deferred.go()).then(function(response) {\n\t            if (response === \"no converter\") {\n\t                // No converter available for input datasets, so cannot run tool.\n\t                new_track.container_div.addClass(\"error\");\n\t                new_track.content_div.text(DATA_NOCONVERTER);\n\t            }\n\t            else if (response.error) {\n\t                // General error.\n\t                new_track.container_div.addClass(\"error\");\n\t                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n\t            }\n\t            else {\n\t                // Job submitted and running.\n\t                success_callback(response);\n\t            }\n\t        });\n\t    }\n\t\n\t});\n\t\n\t/**\n\t * Generates scale values based on filter and feature's value for filter.\n\t */\n\tvar FilterScaler = function(filter, default_val) {\n\t    painters.Scaler.call(this, default_val);\n\t    this.filter = filter;\n\t};\n\t\n\tFilterScaler.prototype.gen_val = function(feature_data) {\n\t    // If filter is not initalized yet, return default val.\n\t    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n\t        return this.default_val;\n\t    }\n\t\n\t    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n\t    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n\t};\n\t\n\t/**\n\t * Tiles drawn by tracks.\n\t */\n\tvar Tile = function(track, region, w_scale, canvas, data) {\n\t    this.track = track;\n\t    this.region = region;\n\t    this.low = region.get('start');\n\t    this.high = region.get('end');\n\t    this.w_scale = w_scale;\n\t    this.canvas = canvas;\n\t    // Wrap element in div for background and to provide container for tile-specific elements.\n\t    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n\t    this.data = data;\n\t    this.stale = false;\n\t};\n\t\n\t/**\n\t * Perform pre-display actions.\n\t */\n\tTile.prototype.predisplay_actions = function() {};\n\t\n\tvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n\t    Tile.call(this, track, region, w_scale, canvas, data);\n\t};\n\tLineTrackTile.prototype.predisplay_actions = function() {};\n\t\n\tvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n\t                                feature_mapper, incomplete_features, seq_data) {\n\t    // Attribute init.\n\t    Tile.call(this, track, region, w_scale, canvas, data);\n\t    this.mode = mode;\n\t    this.all_slotted = all_slotted;\n\t    this.feature_mapper = feature_mapper;\n\t    this.has_icons = false;\n\t    this.incomplete_features = incomplete_features;\n\t    // Features drawn based on data from other tiles.\n\t    this.other_tiles_features_drawn = {};\n\t    this.seq_data = seq_data;\n\t\n\t    // Add message + action icons to tile's html.\n\t    /*\n\t    This does not work right now because a random set of reads is returned by the server.\n\t    When the server can respond with more data systematically, renable these icons.\n\t    if (message) {\n\t        this.has_icons = true;\n\t\n\t        var\n\t            tile = this;\n\t            canvas = this.html_elt.children()[0],\n\t            message_div = $(\"<div/>\").addClass(\"tile-message\")\n\t                            // -1 to account for border.\n\t                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\t\n\t        // Handle message; only message currently is that only the first N elements are displayed.\n\t        var tile_region = new visualization.GenomeRegion({\n\t                chrom: track.view.chrom,\n\t                start: this.low,\n\t                end: this.high\n\t            }),\n\t            num_features = data.length,\n\t            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n\t                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n\t                                .tooltip().appendTo(message_div),\n\t            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n\t                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n\t                                .tooltip().appendTo(message_div);\n\t\n\t        // Set up actions for icons.\n\t        more_down_icon.click(function() {\n\t            // Mark tile as stale, request more data, and redraw track.\n\t            tile.stale = true;\n\t            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n\t            $(\".tooltip\").hide();\n\t            track.request_draw();\n\t        }).dblclick(function(e) {\n\t            // Do not propogate as this would normally zoom in.\n\t            e.stopPropagation();\n\t        });\n\t\n\t        more_across_icon.click(function() {\n\t            // Mark tile as stale, request more data, and redraw track.\n\t            tile.stale = true;\n\t            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n\t            $(\".tooltip\").hide();\n\t            track.request_draw();\n\t        }).dblclick(function(e) {\n\t            // Do not propogate as this would normally zoom in.\n\t            e.stopPropagation();\n\t        });\n\t    }\n\t    */\n\t};\n\textend(FeatureTrackTile.prototype, Tile.prototype);\n\t\n\t/**\n\t * Sets up support for popups.\n\t */\n\tFeatureTrackTile.prototype.predisplay_actions = function() {\n\t    /*\n\t    FIXME: use a canvas library to handle popups.\n\t    //\n\t    // Add support for popups.\n\t    //\n\t    var tile = this,\n\t        popups = {};\n\t\n\t    // Only show popups in Pack mode.\n\t    if (tile.mode !== \"Pack\") { return; }\n\t\n\t    $(this.html_elt).hover(\n\t    function() {\n\t        this.hovered = true;\n\t        $(this).mousemove();\n\t    },\n\t    function() {\n\t        this.hovered = false;\n\t        // Clear popup if it is still hanging around (this is probably not needed)\n\t        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n\t    } ).mousemove(function (e) {\n\t        // Use the hover plugin to get a delay before showing popup\n\t        if ( !this.hovered ) { return; }\n\t        // Get feature data for position.\n\t        var\n\t            this_offset = $(this).offset(),\n\t            offsetX = e.pageX - this_offset.left,\n\t            offsetY = e.pageY - this_offset.top,\n\t            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n\t            feature_uid = (feature_data ? feature_data[0] : null);\n\t        // Hide visible popup if not over a feature or over a different feature.\n\t        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n\t            if ( !feature_uid ||\n\t                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n\t                $(this).remove();\n\t            }\n\t        });\n\t\n\t        if (feature_data) {\n\t            // Get or create popup.\n\t            var popup = popups[feature_uid];\n\t            if (!popup) {\n\t                // Create feature's popup element.\n\t                var feature_dict = {\n\t                        name: feature_data[3],\n\t                        start: feature_data[1],\n\t                        end: feature_data[2],\n\t                        strand: feature_data[4]\n\t                    },\n\t                    filters = tile.track.filters_manager.filters,\n\t                    filter;\n\t\n\t                // Add filter values to feature dict.\n\t                for (var i = 0; i < filters.length; i++) {\n\t                    filter = filters[i];\n\t                    feature_dict[filter.name] = feature_data[filter.index];\n\t                }\n\t\n\t                // Build popup.\n\t                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n\t                var table = $(\"<table/>\"),\n\t                    key, value, row;\n\t                for (key in feature_dict) {\n\t                    value = feature_dict[key];\n\t                    row = $(\"<tr/>\").appendTo(table);\n\t                    $(\"<th/>\").appendTo(row).text(key);\n\t                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n\t                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n\t                }\n\t                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n\t                popups[feature_uid] = popup;\n\t            }\n\t\n\t            // Attach popup to track's overlay.\n\t            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\t\n\t            // Offsets are within canvas, but popup must be positioned relative to parent element.\n\t            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n\t            // overlap popup.\n\t            var\n\t                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n\t                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n\t            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n\t        }\n\t        else if (!e.isPropagationStopped()) {\n\t            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n\t            // called on tiles under this tile.\n\t            e.stopPropagation();\n\t            $(this).siblings().each(function() {\n\t                $(this).trigger(e);\n\t            });\n\t        }\n\t    })\n\t    .mouseleave(function() {\n\t        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n\t    });\n\t    */\n\t};\n\t\n\t/**\n\t * Tracks are objects can be added to the View.\n\t *\n\t * Track object hierarchy:\n\t * Track\n\t * -> LabelTrack\n\t * -> TiledTrack\n\t * ----> LineTrack\n\t * ----> ReferenceTrack\n\t * ----> FeatureTrack\n\t * -------> ReadTrack\n\t * ----> VariantTrack\n\t */\n\tvar Track = function(view, container, obj_dict) {\n\t    // For now, track's container is always view.\n\t    extend(obj_dict, {\n\t        drag_handle_class: \"draghandle\"\n\t    });\n\t    Drawable.call(this, view, container, obj_dict);\n\t\n\t    //\n\t    // Attribute init.\n\t    //\n\t\n\t    // Set or create dataset.\n\t    this.dataset = null;\n\t    if (obj_dict.dataset) {\n\t        // Dataset can be a Backbone model or a dict that can be used to create a model.\n\t        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n\t    }\n\t    this.dataset_check_type = 'converted_datasets_state';\n\t    this.data_url_extra_params = {};\n\t    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n\t    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n\t    this.data_manager = ('data_manager' in obj_dict ?\n\t                         obj_dict.data_manager :\n\t                         new visualization.GenomeDataManager({\n\t                             dataset: this.dataset,\n\t                             // HACK: simulate 'genome' attributes from view for now.\n\t                             // View should eventually use Genome object.\n\t                             genome: new visualization.Genome({\n\t                                key: view.dbkey,\n\t                                chroms_info: {\n\t                                    chrom_info: view.chrom_data\n\t                                }\n\t                             }),\n\t                             data_mode_compatible: this.data_and_mode_compatible,\n\t                             can_subset: this.can_subset\n\t                         }));\n\t\n\t    // Height attributes: min height, max height, and visible height.\n\t    this.min_height_px = 16;\n\t    this.max_height_px = 800;\n\t    this.visible_height_px = this.config.get_value('height');\n\t\n\t    //\n\t    // Create content div, which is where track is displayed, and add to container if available.\n\t    //\n\t    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n\t    if (this.container) {\n\t        this.container.content_div.append(this.container_div);\n\t        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n\t            this.add_resize_handle();\n\t        }\n\t    }\n\t};\n\t\n\textend(Track.prototype, Drawable.prototype, {\n\t    action_icons_def: [\n\t        // Change track mode.\n\t        {\n\t            name: \"mode_icon\",\n\t            title: \"Set display mode\",\n\t            css_class: \"chevron-expand\",\n\t            on_click_fn: function() {}\n\t        },\n\t        // Hide/show content.\n\t        Drawable.prototype.action_icons_def[0],\n\t        // Set track as overview.\n\t        {\n\t            name: \"overview_icon\",\n\t            title: \"Set as overview\",\n\t            css_class: \"application-dock-270\",\n\t            on_click_fn: function(track) {\n\t                track.view.set_overview(track);\n\t            }\n\t        },\n\t        // Edit config.\n\t        Drawable.prototype.action_icons_def[1],\n\t        // Toggle track filters.\n\t        {\n\t            name: \"filters_icon\",\n\t            title: \"Filters\",\n\t            css_class: \"ui-slider-050\",\n\t            on_click_fn: function(drawable) {\n\t                // TODO: update Tooltip text.\n\t                if (drawable.filters_manager.visible()) {\n\t                    drawable.filters_manager.clear_filters();\n\t                }\n\t                else {\n\t                    drawable.filters_manager.init_filters();\n\t                }\n\t                drawable.filters_manager.toggle();\n\t            }\n\t        },\n\t        // Toggle track tool.\n\t        {\n\t            name: \"tools_icon\",\n\t            title: \"Tool\",\n\t            css_class: \"hammer\",\n\t            on_click_fn: function(track) {\n\t                // TODO: update Tooltip text.\n\t\n\t                track.tool.toggle();\n\t\n\t                // Update track name.\n\t                if (track.tool.is_visible()) {\n\t                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n\t                }\n\t                else {\n\t                    track.revert_name();\n\t                }\n\t                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n\t                $(\".tooltip\").remove();\n\t            }\n\t        },\n\t        // Go to parameter exploration visualization.\n\t        {\n\t            name: \"param_space_viz_icon\",\n\t            title: \"Tool parameter space visualization\",\n\t            css_class: \"arrow-split\",\n\t            on_click_fn: function(track) {\n\t                var html =\n\t                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n\t                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n\t                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n\t                    '<option value=\"cur\">current viewing area</option>' +\n\t                    '<option value=\"bookmarks\">bookmarks</option>' +\n\t                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n\t                    '</select>';\n\t                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n\t                    ok_fn = function() {\n\t                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n\t                            regions,\n\t                            view_region = new visualization.GenomeRegion({\n\t                                chrom: view.chrom,\n\t                                start: view.low,\n\t                                end: view.high\n\t                            }),\n\t                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n\t                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n\t                            });\n\t\n\t                        // Get regions for visualization.\n\t                        if (regions_to_use === 'cur') {\n\t                            // Use only current region.\n\t                            regions = [ view_region ];\n\t                        }\n\t                        else if (regions_to_use === 'bookmarks') {\n\t                            // Use only bookmarks.\n\t                            regions = bookmarked_regions;\n\t                        }\n\t                        else {\n\t                            // Use both current region and bookmarks.\n\t                            regions = [ view_region ].concat(bookmarked_regions);\n\t                        }\n\t\n\t                        Galaxy.modal.hide();\n\t\n\t                        // Go to visualization.\n\t                        window.location.href =\n\t                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n\t                            $.param({\n\t                                dataset_id: track.dataset.id,\n\t                                hda_ldda: track.dataset.get('hda_ldda'),\n\t                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n\t                            });\n\t                    },\n\t                    check_enter_esc = function(e) {\n\t                        if ((e.keyCode || e.which) === 27) { // Escape key\n\t                            cancel_fn();\n\t                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n\t                            ok_fn();\n\t                        }\n\t                    };\n\t\n\t                // show dialog\n\t                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n\t            }\n\t        },\n\t        // Remove track.\n\t        Drawable.prototype.action_icons_def[2]\n\t    ],\n\t\n\t    can_draw: function() {\n\t        return this.dataset && Drawable.prototype.can_draw.call(this);\n\t    },\n\t\n\t    build_container_div: function () {\n\t        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n\t    },\n\t\n\t    /**\n\t     * Set track's dataset.\n\t     */\n\t    set_dataset: function(dataset) {\n\t        this.dataset = dataset;\n\t        this.data_manager.set('dataset', dataset);\n\t    },\n\t\n\t    /**\n\t     * Action to take during resize.\n\t     */\n\t    on_resize: function() {\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Add resizing handle to drawable's container_div.\n\t     */\n\t    add_resize_handle: function () {\n\t        var track = this;\n\t        var in_handle = false;\n\t        var in_drag = false;\n\t        var drag_control = $( \"<div class='track-resize'>\" );\n\t        // Control shows on hover over track, stays while dragging\n\t        $(track.container_div).hover( function() {\n\t            if ( track.config.get_value('content_visible') ) {\n\t                in_handle = true;\n\t                drag_control.show();\n\t            }\n\t        }, function() {\n\t            in_handle = false;\n\t            if ( ! in_drag ) { drag_control.hide(); }\n\t        });\n\t        // Update height and force redraw of current view while dragging,\n\t        // clear cache to force redraw of other tiles.\n\t        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n\t            in_drag = true;\n\t            d.original_height = $(track.content_div).height();\n\t        }).bind( \"drag\", function( e, d ) {\n\t            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n\t            $(track.tiles_div).css( 'height', new_height );\n\t            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n\t            track.on_resize();\n\t        }).bind( \"dragend\", function( e, d ) {\n\t            track.tile_cache.clear();\n\t            in_drag = false;\n\t            if (!in_handle) { drag_control.hide(); }\n\t            track.config.set_value('height', track.visible_height_px);\n\t            track.changed();\n\t        }).appendTo(track.container_div);\n\t    },\n\t\n\t    /**\n\t     * Hide any elements that are part of the tracks contents area. Should\n\t     * remove as approprite, the track will be redrawn by show_contents.\n\t     */\n\t    hide_contents: function () {\n\t        // Hide tiles.\n\t        this.tiles_div.hide();\n\t        // Hide any y axis labels (common to several track types)\n\t        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n\t    },\n\t\n\t    show_contents: function() {\n\t        // Show the contents div and labels (if present)\n\t        this.tiles_div.show();\n\t        this.container_div.find(\".yaxislabel, .track-resize\").show();\n\t        // Request a redraw of the content\n\t        this.request_draw();\n\t    },\n\t\n\t    /**\n\t     * Returns track type.\n\t     */\n\t    get_type: function() {\n\t        // Order is important: start with most-specific classes and go up the track hierarchy.\n\t        if (this instanceof LabelTrack) {\n\t            return \"LabelTrack\";\n\t        }\n\t        else if (this instanceof ReferenceTrack) {\n\t            return \"ReferenceTrack\";\n\t        }\n\t        else if (this instanceof LineTrack) {\n\t            return \"LineTrack\";\n\t        }\n\t        else if (this instanceof ReadTrack) {\n\t            return \"ReadTrack\";\n\t        }\n\t        else if (this instanceof VariantTrack) {\n\t            return \"VariantTrack\";\n\t        }\n\t        else if (this instanceof CompositeTrack) {\n\t            return \"CompositeTrack\";\n\t        }\n\t        else if (this instanceof FeatureTrack) {\n\t            return \"FeatureTrack\";\n\t        }\n\t        return \"\";\n\t    },\n\t\n\t    /**\n\t     * Remove visualization content and display message.\n\t     */\n\t    show_message: function(msg_html) {\n\t        this.tiles_div.remove();\n\t        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n\t    },\n\t\n\t    /**\n\t     * Initialize and draw the track.\n\t     */\n\t    init: function(retry) {\n\t        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n\t        // used in this function to determine what action(s) to take.\n\t\n\t        var track = this;\n\t        track.enabled = false;\n\t        track.tile_cache.clear();\n\t        track.data_manager.clear();\n\t        /*\n\t        if (!track.content_div.text()) {\n\t            track.content_div.text(DATA_LOADING);\n\t        }\n\t        */\n\t        // Remove old track content (e.g. tiles, messages).\n\t        track.content_div.children().remove();\n\t        track.container_div.removeClass(\"nodata error pending\");\n\t\n\t        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\t\n\t        //\n\t        // Tracks with no dataset id are handled differently.\n\t        // FIXME: is this really necessary?\n\t        //\n\t        if (!track.dataset.id) {\n\t            return;\n\t        }\n\t\n\t        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n\t        // about track status.\n\t        var init_deferred = $.Deferred(),\n\t            params = {\n\t                hda_ldda: track.dataset.get('hda_ldda'),\n\t                data_type: this.dataset_check_type,\n\t                chrom: track.view.chrom,\n\t                retry: retry\n\t            };\n\t        $.getJSON(this.dataset.url(), params, function (result) {\n\t            if (!result || result === \"error\" || result.kind === \"error\") {\n\t                // Dataset is in error state.\n\t                track.container_div.addClass(\"error\");\n\t                var msg_elt = track.show_message(DATA_ERROR);\n\t                if (result.message) {\n\t                    // Add links to (a) show error and (b) try again.\n\t                    msg_elt.append(\n\t                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n\t                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n\t                        })\n\t                    );\n\t                    msg_elt.append( $('<span/>').text(' ') );\n\t                    msg_elt.append(\n\t                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n\t                            track.init(true);\n\t                        })\n\t                    );\n\t                }\n\t            }\n\t            else if (result === \"no converter\") {\n\t                track.container_div.addClass(\"error\");\n\t                track.show_message(DATA_NOCONVERTER);\n\t            }\n\t            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n\t                track.container_div.addClass(\"nodata\");\n\t                track.show_message(DATA_NONE);\n\t            }\n\t            else if (result === \"pending\") {\n\t                track.container_div.addClass(\"pending\");\n\t                track.show_message(DATA_PENDING);\n\t                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n\t                setTimeout(function() { track.init(); }, track.data_query_wait);\n\t            }\n\t            else if (result === \"data\" || result.status === \"data\") {\n\t                if (result.valid_chroms) {\n\t                    track.valid_chroms = result.valid_chroms;\n\t                    track.update_icons();\n\t                }\n\t                track.tiles_div.text(DATA_OK);\n\t                if (track.view.chrom) {\n\t                    track.tiles_div.text(\"\");\n\t                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n\t                    track.enabled = true;\n\t                    // predraw_init may be asynchronous, wait for it and then draw\n\t                    $.when.apply($, track.predraw_init()).done(function() {\n\t                        init_deferred.resolve();\n\t                        track.container_div.removeClass(\"nodata error pending\");\n\t                        track.request_draw();\n\t                    });\n\t                }\n\t                else {\n\t                    init_deferred.resolve();\n\t                }\n\t            }\n\t        });\n\t\n\t        this.update_icons();\n\t        return init_deferred;\n\t    },\n\t\n\t    /**\n\t     * Additional initialization required before drawing track for the first time.\n\t     */\n\t    predraw_init: function() {\n\t        var track = this;\n\t        return $.getJSON( track.dataset.url(),\n\t            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n\t               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n\t            var data = result.data;\n\t\n\t            // Tracks may not have stat data either because there is no data or data is not yet ready.\n\t            if (data !== undefined && data.min !== undefined && data.max !== undefined) {\n\t                // Compute default minimum and maximum values\n\t                var min_value = data.min,\n\t                    max_value = data.max;\n\t                // If mean and sd are present, use them to compute a ~95% window\n\t                // but only if it would shrink the range on one side\n\t                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n\t                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n\t                // Update config, prefs\n\t                track.config.set_default_value('min_value', min_value);\n\t                track.config.set_default_value('max_value', max_value);\n\t                track.config.set_value('min_value', min_value);\n\t                track.config.set_value('max_value', max_value);\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Returns all drawables in this drawable.\n\t     */\n\t    get_drawables: function() {\n\t        return this;\n\t    }\n\t});\n\t\n\tvar TiledTrack = function(view, container, obj_dict) {\n\t    Track.call(this, view, container, obj_dict);\n\t\n\t    var track = this;\n\t\n\t    // Make track moveable.\n\t    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\t\n\t    // Attribute init.\n\t    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n\t    // HACK: set filters manager for data manager.\n\t    // FIXME: prolly need function to set filters and update data_manager reference.\n\t    this.data_manager.set('filters_manager', this.filters_manager);\n\t    this.filters_available = false;\n\t    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n\t        'track': this,\n\t        'tool_state': obj_dict.tool_state\n\t    } ) )\n\t    : null);\n\t    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n\t    this.left_offset = 0;\n\t\n\t    if (this.header_div) {\n\t        //\n\t        // Setup filters.\n\t        //\n\t        this.set_filters_manager(this.filters_manager);\n\t\n\t        //\n\t        // Create dynamic tool view.\n\t        //\n\t        if (this.tool) {\n\t            var tool_view = new TracksterToolView({ model: this.tool });\n\t            tool_view.render();\n\t            this.dynamic_tool_div = tool_view.$el;\n\t            this.header_div.after(this.dynamic_tool_div);\n\t        }\n\t    }\n\t\n\t    // Add tiles_div, overlay_div to content_div.\n\t    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n\t    if (!this.config.get_value('content_visible')) {\n\t        this.tiles_div.hide();\n\t    }\n\t    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\t\n\t    if (obj_dict.mode) {\n\t        this.change_mode(obj_dict.mode);\n\t    }\n\t};\n\textend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\t\n\t    action_icons_def: Track.prototype.action_icons_def.concat( [\n\t        // Show more rows when all features are not slotted.\n\t        {\n\t            name: \"show_more_rows_icon\",\n\t            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n\t            css_class: \"exclamation\",\n\t            on_click_fn: function(track) {\n\t                $(\".tooltip\").remove();\n\t                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n\t                track.request_draw({ clear_tile_cache: true });\n\t            },\n\t            hide: true\n\t        }\n\t    ] ),\n\t\n\t    /**\n\t     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n\t     */\n\t    copy: function(container) {\n\t        // Create copy.\n\t        var obj_dict = this.to_dict();\n\t        extend(obj_dict, {\n\t            data_manager: this.data_manager\n\t        });\n\t        var new_track = new this.constructor(this.view, container, obj_dict);\n\t        // Misc. init and return.\n\t        new_track.change_mode(this.mode);\n\t        new_track.enabled = this.enabled;\n\t        return new_track;\n\t    },\n\t\n\t    /**\n\t     * Set filters manager + HTML elements.\n\t     */\n\t    set_filters_manager: function(filters_manager) {\n\t        this.filters_manager = filters_manager;\n\t        this.header_div.after(this.filters_manager.parent_div);\n\t    },\n\t\n\t    /**\n\t     * Returns representation of object in a dictionary for easy saving.\n\t     * Use from_dict to recreate object.\n\t     */\n\t    to_dict: function() {\n\t        return {\n\t            track_type: this.get_type(),\n\t            dataset: {\n\t                id: this.dataset.id,\n\t                hda_ldda: this.dataset.get('hda_ldda')\n\t            },\n\t            prefs: this.config.to_key_value_dict(),\n\t            mode: this.mode,\n\t            filters: this.filters_manager.to_dict(),\n\t            tool_state: (this.tool ? this.tool.state_dict() : {})\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Set track bounds for current chromosome.\n\t     */\n\t    set_min_max: function() {\n\t        var track = this;\n\t\n\t        return $.getJSON( track.dataset.url(),\n\t            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n\t              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n\t            function(result) {\n\t                var data = result.data;\n\t                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n\t                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n\t                    // Compute default minimum and maximum values\n\t                    var min_value = data.min,\n\t                        max_value = data.max;\n\t                    // If mean and sd are present, use them to compute a ~95% window\n\t                    // but only if it would shrink the range on one side\n\t                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n\t                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n\t                    // Update the prefs\n\t                    track.config.set_value('min_value', min_value);\n\t                    track.config.set_value('max_value', max_value);\n\t                }\n\t            });\n\t    },\n\t\n\t    /**\n\t     * Change track's mode.\n\t     */\n\t    change_mode: function(new_mode) {\n\t        var track = this;\n\t        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n\t        track.mode = new_mode;\n\t        track.config.set_value('mode', new_mode);\n\t        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n\t        // data manager would work if Auto data were checked for compatibility when a specific\n\t        // mode is chosen.\n\t        if (new_mode === 'Auto') { this.data_manager.clear(); }\n\t        track.request_draw({ clear_tile_cache: true });\n\t        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n\t        return track;\n\t    },\n\t\n\t    /**\n\t     * Update track's buttons.\n\t     */\n\t    update_icons: function() {\n\t        var track = this;\n\t\n\t        //\n\t        // Show/hide filter icon.\n\t        //\n\t        track.action_icons.filters_icon.toggle(track.filters_available);\n\t\n\t        //\n\t        // Show/hide tool icons.\n\t        //\n\t        track.action_icons.tools_icon.toggle(track.tool !== null);\n\t        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n\t    },\n\t\n\t    /**\n\t     * Generate a key for the tile cache.\n\t     * TODO: create a TileCache object (like DataCache) and generate key internally.\n\t     */\n\t    _gen_tile_cache_key: function(w_scale, tile_region) {\n\t        return w_scale + '_' + tile_region;\n\t    },\n\t\n\t    /**\n\t     * Request that track be drawn.\n\t     */\n\t    request_draw: function(options) {\n\t        if (options && options.clear_tile_cache) {\n\t            this.tile_cache.clear();\n\t        }\n\t        this.view.request_redraw(options, this);\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken before drawing.\n\t     */\n\t    before_draw: function() {\n\t        // Clear because this is set when drawing.\n\t        this.max_height_px = 0;\n\t    },\n\t\n\t    /**\n\t     * Draw track. Options include:\n\t     * -force: force a redraw rather than use cached tiles (default: false)\n\t     * -clear_after: clear old tiles after drawing new tiles (default: false)\n\t     * -data_fetch: fetch data if necessary (default: true)\n\t     *\n\t     * NOTE: this function should never be called directly; use request_draw() so that drawing\n\t     * management can be used.\n\t     */\n\t    _draw: function(options) {\n\t        if ( !this.can_draw() ) { return; }\n\t\n\t        var clear_after = options && options.clear_after,\n\t            low = this.view.low,\n\t            high = this.view.high,\n\t            range = high - low,\n\t            width = this.view.container.width(),\n\t            w_scale = this.view.resolution_px_b,\n\t            resolution = 1 / w_scale;\n\t\n\t        // For overview, adjust high, low, resolution, and w_scale.\n\t        if (this.is_overview) {\n\t            low = this.view.max_low;\n\t            high = this.view.max_high;\n\t            w_scale = width / (view.max_high - view.max_low);\n\t            resolution = 1 / w_scale;\n\t        }\n\t\n\t        this.before_draw();\n\t\n\t        //\n\t        // Method for moving and/or removing tiles:\n\t        // (a) mark all elements for removal using class 'remove'\n\t        // (b) during tile drawing/placement, remove class for elements that are moved;\n\t        //     this occurs in show_tile()\n\t        // (c) after drawing tiles, remove elements still marked for removal\n\t        //     (i.e. that still have class 'remove').\n\t        //\n\t\n\t        // Step (a) for (re)moving tiles.\n\t        this.tiles_div.children().addClass(\"remove\");\n\t\n\t        var\n\t            // Tile width in bases.\n\t            tile_width = Math.floor(TILE_SIZE * resolution),\n\t            // Index of first tile that overlaps visible region.\n\t            tile_index = Math.floor(low / tile_width),\n\t            tile_region,\n\t            tile_promise,\n\t            tile_promises = [],\n\t            tiles = [];\n\t        // Draw tiles.\n\t        while ( (tile_index * tile_width) < high ) {\n\t            // Get tile region.\n\t            tile_region = new visualization.GenomeRegion({\n\t                chrom: this.view.chrom,\n\t                start: tile_index * tile_width,\n\t                // Tile high cannot be larger than view.max_high, which the chromosome length.\n\t                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n\t            });\n\t            tile_promise = this.draw_helper(tile_region, w_scale, options);\n\t            tile_promises.push(tile_promise);\n\t            $.when(tile_promise).then(function(tile) {\n\t                tiles.push(tile);\n\t            });\n\t\n\t            // Go to next tile.\n\t            tile_index += 1;\n\t        }\n\t\n\t        // Step (c) for (re)moving tiles when clear_after is false.\n\t        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\t\n\t        // When all tiles are drawn, call post-draw actions.\n\t        var track = this;\n\t        $.when.apply($, tile_promises).then(function() {\n\t            // Step (c) for (re)moving tiles when clear_after is true:\n\t            track.tiles_div.children(\".remove\").remove();\n\t\n\t            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n\t            // (a) ReferenceTrack without sufficient resolution;\n\t            // (b) data_fetch = false.\n\t            tiles = _.filter(tiles, function(t) {\n\t                return t !== null;\n\t            });\n\t            if (tiles.length !== 0) {\n\t                track.postdraw_actions(tiles, width, w_scale, clear_after);\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Add a maximum/minimum label to track.\n\t     */\n\t    _add_yaxis_label: function(type, on_change) {\n\t        var track = this,\n\t            css_class = (type === 'max' ? 'top' : 'bottom'),\n\t            text = (type === 'max' ? 'max' : 'min'),\n\t            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n\t            label = this.container_div.find(\".yaxislabel.\" + css_class);\n\t\n\t        // Default action for on_change is to redraw track.\n\t        on_change = on_change || function() {\n\t            track.request_draw({ clear_tile_cache: true });\n\t        };\n\t\n\t        if (label.length !== 0) {\n\t            // Label already exists, so update value.\n\t            label.text(track.config.get_value(pref_name));\n\t        }\n\t        else {\n\t            // Add label.\n\t            label = $(\"<div/>\").text(track.config.get_value(pref_name)).make_text_editable({\n\t                num_cols: 12,\n\t                on_finish: function(new_val) {\n\t                    $(\".tooltip\").remove();\n\t                    track.config.set_value(pref_name, new_val);\n\t                    on_change();\n\t                },\n\t                help_text: \"Set \" + text + \" value\"\n\t            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n\t            this.container_div.prepend(label);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n\t     * drawn/fetched and shown.\n\t     */\n\t    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n\t        var line_track_tiles = _.filter(tiles, function(tile) {\n\t            return (tile instanceof LineTrackTile);\n\t        });\n\t\n\t        //\n\t        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n\t        //\n\t\n\t        if (line_track_tiles.length > 0) {\n\t            // -- Drawing in Coverage mode. --\n\t\n\t            // Clear because this is set when drawing.\n\t            this.max_height_px = 0;\n\t            var track = this;\n\t            _.each(tiles, function(tile) {\n\t                if (!(tile instanceof LineTrackTile)) {\n\t                    tile.html_elt.remove();\n\t                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n\t                }\n\t            });\n\t\n\t            track._add_yaxis_label('max');\n\t        }\n\t        else {\n\t            // -- Drawing in non-Coverage mode. --\n\t\n\t            // Remove Y-axis labels because there are no line track tiles.\n\t            this.container_div.find('.yaxislabel').remove();\n\t\n\t            //\n\t            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n\t            //\n\t            var icons_present = _.find(tiles, function(tile) {\n\t                return tile.has_icons;\n\t            });\n\t\n\t            if (icons_present) {\n\t                _.each(tiles, function(tile) {\n\t                    if (!tile.has_icons) {\n\t                        // Need to align with other tile(s) that have icons.\n\t                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns appropriate display mode based on data.\n\t     */\n\t    get_mode: function(data) {\n\t        return this.mode;\n\t    },\n\t\n\t    /**\n\t     * Update track interface to show display mode being used.\n\t     */\n\t    update_auto_mode: function( display_mode ) {\n\t        // FIXME: needs to be implemented.\n\t    },\n\t\n\t    /**\n\t     * Returns a list of drawables to draw. Defaults to current track.\n\t     */\n\t    _get_drawables: function() {\n\t        return [ this ];\n\t    },\n\t\n\t    /**\n\t     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n\t     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n\t     * -force: force a redraw rather than use cached tiles (default: false)\n\t     * -data_fetch: fetch data if necessary (default: true)\n\t     */\n\t    draw_helper: function(region, w_scale, options) {\n\t        // Init options if necessary to avoid having to check if options defined.\n\t        if (!options) { options = {}; }\n\t\n\t        var force = options.force,\n\t            mode = options.mode || this.mode,\n\t            resolution = 1 / w_scale,\n\t\n\t            // Useful vars.\n\t            track = this,\n\t            drawables = this._get_drawables(),\n\t            key = this._gen_tile_cache_key(w_scale, region),\n\t            is_tile = function(o) { return (o && 'track' in o); };\n\t\n\t        // Check tile cache, if found show existing tile in correct position\n\t        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n\t        if (tile) {\n\t            if (is_tile(tile)) {\n\t                track.show_tile(tile, w_scale);\n\t            }\n\t            return tile;\n\t        }\n\t\n\t        // If not fetching data, nothing more to do because data is needed to draw tile.\n\t        if (options.data_fetch === false) { return null; }\n\t\n\t        // Function that returns data/Deferreds needed to draw tile.\n\t        var get_tile_data = function() {\n\t            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n\t            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\t\n\t            // Map drawable object to data needed for drawing.\n\t            var tile_data = _.map(drawables, function(d) {\n\t                // Get the track data/promise.\n\t                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n\t            });\n\t\n\t            // Get reference data/promise.\n\t            if (view.reference_track) {\n\t                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n\t            }\n\t\n\t            return tile_data;\n\t        };\n\t\n\t        //\n\t        // When data is available, draw tile.\n\t        //\n\t        var tile_drawn = $.Deferred();\n\t        track.tile_cache.set_elt(key, tile_drawn);\n\t        $.when.apply($, get_tile_data()).then( function() {\n\t            var tile_data = get_tile_data(),\n\t                tracks_data = tile_data,\n\t                seq_data;\n\t\n\t            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n\t            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n\t            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n\t            // GenomeDataManager in visualization module.\n\t            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n\t                track.tile_cache.set_elt(key, undefined);\n\t                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n\t                    tile_drawn.resolve(tile);\n\t                });\n\t                return;\n\t            }\n\t\n\t            // If sequence data is available, subset to get only data in region.\n\t            if (view.reference_track) {\n\t                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n\t            }\n\t\n\t            // Get drawing modes, heights for all tracks.\n\t            var drawing_modes = [],\n\t                drawing_heights = [];\n\t\n\t            _.each(drawables, function(d, i) {\n\t                var mode = d.mode,\n\t                    data = tracks_data[i];\n\t                if (mode === \"Auto\") {\n\t                    mode = d.get_mode(data);\n\t                    d.update_auto_mode(mode);\n\t                }\n\t                drawing_modes.push(mode);\n\t                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n\t            });\n\t\n\t            var canvas = track.view.canvas_manager.new_canvas(),\n\t                tile_low = region.get('start'),\n\t                tile_high = region.get('end'),\n\t                all_data_index = 0,\n\t                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n\t                height = _.max(drawing_heights),\n\t                tile;\n\t\n\t            //\n\t            // Draw all tracks on tile.\n\t            //\n\t            canvas.width = width;\n\t            // Height is specified in options or is the height found above.\n\t            canvas.height = (options.height || height);\n\t            var ctx = canvas.getContext('2d');\n\t            ctx.translate(track.left_offset, 0);\n\t            if (drawables.length > 1) {\n\t                ctx.globalAlpha = 0.5;\n\t                ctx.globalCompositeOperation = \"source-over\";\n\t            }\n\t            _.each(drawables, function(d, i) {\n\t                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n\t            });\n\t\n\t            // Don't cache, show if no tile.\n\t            if (tile !== undefined) {\n\t                track.tile_cache.set_elt(key, tile);\n\t                track.show_tile(tile, w_scale);\n\t            }\n\t\n\t            tile_drawn.resolve(tile);\n\t        });\n\t\n\t        return tile_drawn;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas height needed to display data; return value is an integer that denotes the\n\t     * number of pixels required.\n\t     */\n\t    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n\t        return this.visible_height_px;\n\t    },\n\t\n\t    /**\n\t     * Draw line (bigwig) data onto tile.\n\t     */\n\t    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n\t        var canvas = ctx.canvas,\n\t            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n\t        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\t\n\t        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n\t    },\n\t\n\t    /**\n\t     * Draw a track tile.\n\t     * @param result result from server\n\t     * @param ctx canvas context to draw on\n\t     * @param mode mode to draw in\n\t     * @param region region to draw on tile\n\t     * @param w_scale pixels per base\n\t     * @param ref_seq reference sequence data\n\t     */\n\t    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\t\n\t    /**\n\t     * Show track tile and perform associated actions. Showing tile may actually move\n\t     * an existing tile rather than reshowing it.\n\t     */\n\t    show_tile: function(tile, w_scale) {\n\t        var track = this,\n\t            tile_element = tile.html_elt;\n\t\n\t        // -- Show/move tile element. --\n\t\n\t        tile.predisplay_actions();\n\t\n\t        // Position tile element based on current viewport.\n\t        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n\t        if (this.left_offset) {\n\t            left -= this.left_offset;\n\t        }\n\t        tile_element.css('left', left);\n\t\n\t        if ( tile_element.hasClass(\"remove\") ) {\n\t            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n\t            // for removing tiles.\n\t            tile_element.removeClass(\"remove\");\n\t        }\n\t        else {\n\t            // Showing new tile.\n\t            this.tiles_div.append(tile_element);\n\t        }\n\t\n\t        // -- Update track, tile heights based on new tile. --\n\t\n\t        tile_element.css('height', 'auto');\n\t\n\t        // Update max height based on current tile's height.\n\t        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n\t        // -2 to get the correct height.\n\t        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\t\n\t        // Update height for all tiles based on max height.\n\t        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\t\n\t        // Update track height based on max height and visible height.\n\t        var track_height = this.max_height_px;\n\t        if (this.visible_height_px !== 0) {\n\t            track_height = Math.min(this.max_height_px, this.visible_height_px);\n\t        }\n\t        this.tiles_div.css(\"height\", track_height + \"px\");\n\t    },\n\t\n\t    /**\n\t     * Utility function that creates a label string describing the region and parameters of a track's tool.\n\t     */\n\t    tool_region_and_parameters_str: function(region) {\n\t        var track = this,\n\t            region_str = (region !== undefined ? region.toString() : \"all\"),\n\t            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n\t        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n\t    },\n\t\n\t    /**\n\t     * Returns true if data is compatible with a given mode.\n\t     */\n\t    data_and_mode_compatible: function(data, mode) {\n\t        // Only handle modes that user can set.\n\t        if (mode === \"Auto\") {\n\t            return true;\n\t        }\n\t        // Histogram mode requires bigwig data.\n\t        else if (mode === \"Coverage\") {\n\t            return data.dataset_type === \"bigwig\";\n\t        }\n\t        // All other modes--Dense, Squish, Pack--require data + details.\n\t        else if (data.dataset_type === \"bigwig\" ||\n\t                 data.extra_info === \"no_detail\") {\n\t            return false;\n\t        }\n\t        else {\n\t            return true;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns true if entry can be subsetted.\n\t     */\n\t    can_subset: function(entry) {\n\t        // Do not subset entries with a message or data with no detail.\n\t        if (entry.message || entry.extra_info === \"no_detail\")  {\n\t            return false;\n\t        }\n\t        // Subset only if data is single-bp resolution.\n\t        else if (entry.dataset_type === 'bigwig') {\n\t            return (entry.data[1][0] - entry.data[0][0] === 1);\n\t        }\n\t\n\t        return true;\n\t    },\n\t\n\t    /**\n\t     * Set up track to receive tool data.\n\t     */\n\t    init_for_tool_data: function() {\n\t        // Set up track to fetch raw data rather than converted data.\n\t        this.data_manager.set('data_type', 'raw_data');\n\t        this.data_query_wait = 1000;\n\t        this.dataset_check_type = 'state';\n\t\n\t        // FIXME: this is optional and is disabled for now because it creates\n\t        // additional converter jobs without a clear benefit because indexing\n\t        // such a small dataset provides little benefit.\n\t        //\n\t        // Set up one-time, post-draw to clear tool execution settings.\n\t        //\n\t        /*\n\t        this.normal_postdraw_actions = this.postdraw_actions;\n\t        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n\t            var self = this;\n\t\n\t            // Do normal postdraw init.\n\t            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\t\n\t            // Tool-execution specific post-draw init:\n\t\n\t            // Reset dataset check, wait time.\n\t            self.dataset_check_type = 'converted_datasets_state';\n\t            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\t\n\t            // Reset data URL when dataset indexing has completed/when not pending.\n\t            var ss_deferred = new util.ServerStateDeferred({\n\t                url: self.dataset_state_url,\n\t                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n\t                interval: self.data_query_wait,\n\t                // Set up deferred to check dataset state until it is not pending.\n\t                success_fn: function(result) { return result !== \"pending\"; }\n\t            });\n\t            $.when(ss_deferred.go()).then(function() {\n\t                // Dataset is indexed, so use converted data.\n\t                self.data_manager.set('data_type', 'data');\n\t            });\n\t\n\t            // Reset post-draw actions function.\n\t            self.postdraw_actions = self.normal_postdraw_actions;\n\t        };\n\t        */\n\t    }\n\t});\n\t\n\tvar LabelTrack = function (view, container) {\n\t    Track.call(this, view, container, {\n\t        resize: false,\n\t        header: false\n\t    });\n\t    this.container_div.addClass( \"label-track\" );\n\t};\n\textend(LabelTrack.prototype, Track.prototype, {\n\t    init: function() {\n\t        // Enable by default because there should always be data when drawing track.\n\t        this.enabled = true;\n\t    },\n\t\n\t    /**\n\t     * Additional initialization required before drawing track for the first time.\n\t     */\n\t    predraw_init: function() {},\n\t\n\t    _draw: function(options) {\n\t        var view = this.view,\n\t            range = view.high - view.low,\n\t            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n\t            position = Math.floor( view.low / tickDistance ) * tickDistance,\n\t            width = this.view.container.width(),\n\t            new_div = $(\"<div/>\").addClass('label-container');\n\t        while ( position < view.high ) {\n\t            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n\t            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n\t                left: screenPosition\n\t            }));\n\t            position += tickDistance;\n\t        }\n\t        this.content_div.children( \":first\" ).remove();\n\t        this.content_div.append( new_div );\n\t    }\n\t});\n\t\n\t// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n\t// composite tracks with line + feature tracks. It's probably best if different classes\n\t// are created for each type of composite track.\n\t\n\t/**\n\t * A tiled track composed of multiple other tracks. Composite tracks only work with\n\t * bigwig data for now.\n\t */\n\tvar CompositeTrack = function(view, container, obj_dict) {\n\t    TiledTrack.call(this, view, container, obj_dict);\n\t\n\t    // Init drawables; each drawable is a copy so that config/preferences\n\t    // are independent of each other. Also init left offset.\n\t    this.drawables = [];\n\t    if ('drawables' in obj_dict) {\n\t        var drawable;\n\t        for (var i = 0; i < obj_dict.drawables.length; i++) {\n\t            drawable = obj_dict.drawables[i];\n\t            this.drawables[i] = object_from_template(drawable, view, null);\n\t\n\t            // Track's left offset is the max of all tracks.\n\t            if (drawable.left_offset > this.left_offset) {\n\t                this.left_offset = drawable.left_offset;\n\t            }\n\t        }\n\t        this.enabled = true;\n\t    }\n\t\n\t    // Set all feature tracks to use Coverage mode.\n\t    _.each(this.drawables, function(d) {\n\t        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n\t            d.change_mode(\"Coverage\");\n\t        }\n\t    });\n\t\n\t    this.update_icons();\n\t\n\t    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n\t    // that for object type.\n\t    this.obj_type = \"CompositeTrack\";\n\t};\n\t\n\textend(CompositeTrack.prototype, TiledTrack.prototype, {\n\t    display_modes: CONTINUOUS_DATA_MODES,\n\t\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n\t        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 30, hidden: true }\n\t    ] ),\n\t\n\t    action_icons_def:\n\t    [\n\t        // Create composite track from group's tracks.\n\t        {\n\t            name: \"composite_icon\",\n\t            title: \"Show individual tracks\",\n\t            css_class: \"layers-stack\",\n\t            on_click_fn: function(track) {\n\t                $(\".tooltip\").remove();\n\t                track.show_group();\n\t            }\n\t        }\n\t    ].concat(TiledTrack.prototype.action_icons_def),\n\t\n\t    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n\t    /**\n\t     * Returns representation of object in a dictionary for easy saving.\n\t     * Use from_dict to recreate object.\n\t     */\n\t    to_dict: DrawableCollection.prototype.to_dict,\n\t\n\t    add_drawable: DrawableCollection.prototype.add_drawable,\n\t\n\t    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Action to take during resize.\n\t     */\n\t    on_resize: function() {\n\t        // Propogate visible height to other tracks.\n\t        var visible_height = this.visible_height_px;\n\t        _.each(this.drawables, function(d) {\n\t            d.visible_height_px = visible_height;\n\t        });\n\t        Track.prototype.on_resize.call(this);\n\t    },\n\t\n\t    /**\n\t     * Change mode for all tracks.\n\t     */\n\t    change_mode: function(new_mode) {\n\t        TiledTrack.prototype.change_mode.call(this, new_mode);\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            this.drawables[i].change_mode(new_mode);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Initialize component tracks and draw composite track when all components are initialized.\n\t     */\n\t    init: function() {\n\t        // Init components.\n\t        var init_deferreds = [];\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            init_deferreds.push(this.drawables[i].init());\n\t        }\n\t\n\t        // Draw composite when all tracks available.\n\t        var track = this;\n\t        $.when.apply($, init_deferreds).then(function() {\n\t            track.enabled = true;\n\t            track.request_draw();\n\t        });\n\t    },\n\t\n\t    update_icons: function() {\n\t        // For now, hide filters and tool.\n\t        this.action_icons.filters_icon.hide();\n\t        this.action_icons.tools_icon.hide();\n\t        this.action_icons.param_space_viz_icon.hide();\n\t    },\n\t\n\t    can_draw: Drawable.prototype.can_draw,\n\t\n\t    _get_drawables: function() {\n\t        return this.drawables;\n\t    },\n\t\n\t    /**\n\t     * Replace this track with group that includes individual tracks.\n\t     */\n\t    show_group: function() {\n\t        // Create group with individual tracks.\n\t        var group = new DrawableGroup(this.view, this.container, {\n\t                name: this.config.get_value('name')\n\t            }),\n\t            track;\n\t        for (var i = 0; i < this.drawables.length; i++) {\n\t            track = this.drawables[i];\n\t            track.update_icons();\n\t            group.add_drawable(track);\n\t            track.container = group;\n\t            group.content_div.append(track.container_div);\n\t        }\n\t\n\t        // Replace track with group.\n\t        var index = this.container.replace_drawable(this, group, true);\n\t        group.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Actions taken before drawing.\n\t     */\n\t    before_draw: function() {\n\t        // FIXME: this is needed only if there are feature tracks in the composite track.\n\t        // TiledTrack.prototype.before_draw.call(this);\n\t\n\t        //\n\t        // Set min, max for tracks to be largest min, max.\n\t        //\n\t\n\t        // Get smallest min, biggest max.\n\t        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n\t            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\t\n\t        this.config.set_value('min_value', min);\n\t        this.config.set_value('max_value', max);\n\t\n\t        // Set all tracks to smallest min, biggest max.\n\t        _.each(this.drawables, function(d) {\n\t            d.config.set_value('min_value', min);\n\t            d.config.set_value('max_value', max);\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Update minimum, maximum for component tracks.\n\t     */\n\t    update_all_min_max: function() {\n\t        var track = this,\n\t            min_value = this.config.get_value('min_value'),\n\t            max_value = this.config.get_value('max_value');\n\t        _.each(this.drawables, function(d) {\n\t            d.config.set_value('min_value', min_value);\n\t            d.config.set_value('max_value', max_value);\n\t        });\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n\t     * drawn/fetched and shown.\n\t     */\n\t    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n\t        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n\t        var max_height = -1, i;\n\t        for (i = 0; i < tiles.length; i++) {\n\t            var height = tiles[i].html_elt.find(\"canvas\").height();\n\t            if (height > max_height) {\n\t                max_height = height;\n\t            }\n\t        }\n\t\n\t        for (i = 0; i < tiles.length; i++) {\n\t            var tile = tiles[i];\n\t            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n\t                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n\t                tile.html_elt.remove();\n\t            }\n\t        }\n\t\n\t        // Wrap function so that it can be called without object reference.\n\t        var track = this,\n\t            t = function() { track.update_all_min_max(); };\n\t\n\t        // Add min, max labels.\n\t        this._add_yaxis_label('min', t);\n\t        this._add_yaxis_label('max', t);\n\t    }\n\t});\n\t\n\t/**\n\t * Displays reference genome data.\n\t */\n\tvar ReferenceTrack = function (view) {\n\t    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\t\n\t    // Use offset to ensure that bases at tile edges are drawn.\n\t    this.left_offset = view.canvas_manager.char_width_px;\n\t    this.container_div.addClass(\"reference-track\");\n\t    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n\t    this.data_url_extra_params = {reference: true};\n\t    this.data_manager = new visualization.GenomeReferenceDataManager({\n\t        data_url: this.data_url,\n\t        can_subset: this.can_subset\n\t    });\n\t    this.hide_contents();\n\t};\n\textend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'height', type: 'int', default_value: 13, hidden: true }\n\t    ] ),\n\t\n\t    init: function() {\n\t        this.data_manager.clear();\n\t        // Enable by default because there should always be data when drawing track.\n\t        this.enabled = true;\n\t    },\n\t\n\t    /**\n\t     * Additional initialization required before drawing track for the first time.\n\t     */\n\t    predraw_init: function() {},\n\t\n\t    can_draw: Drawable.prototype.can_draw,\n\t\n\t    /**\n\t     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n\t     */\n\t    draw_helper: function(region, w_scale, options) {\n\t        var cur_visible = this.tiles_div.is(':visible'),\n\t            new_visible,\n\t            tile = null;\n\t        if (w_scale > this.view.canvas_manager.char_width_px) {\n\t            this.tiles_div.show();\n\t            new_visible = true;\n\t            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n\t        }\n\t        else {\n\t            new_visible = false;\n\t            this.tiles_div.hide();\n\t        }\n\t\n\t        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n\t        // postdraw_actions is not called when reference track not shown due to no tiles. If\n\t        // it is moved to postdraw_actions, resize must be called each time because cannot\n\t        // easily detect showing/hiding.\n\t\n\t        // If showing or hiding reference track, resize viewport.\n\t        if (cur_visible !== new_visible) {\n\t            this.view.resize_viewport();\n\t        }\n\t\n\t        return tile;\n\t    },\n\t\n\t    can_subset: function(entry) { return true; },\n\t\n\t    /**\n\t     * Draw ReferenceTrack tile.\n\t     */\n\t    draw_tile: function(data, ctx, mode, region, w_scale) {\n\t        // Try to subset data.\n\t        var subset = this.data_manager.subset_entry(data, region),\n\t            seq_data = subset.data;\n\t\n\t        // Draw sequence data.\n\t        var canvas = ctx.canvas;\n\t        ctx.font = ctx.canvas.manager.default_font;\n\t        ctx.textAlign = \"center\";\n\t        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n\t            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n\t            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n\t        }\n\t        return new Tile(this, region, w_scale, canvas, subset);\n\t    }\n\t});\n\t\n\t/**\n\t * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n\t */\n\tvar LineTrack = function (view, container, obj_dict) {\n\t    this.mode = \"Histogram\";\n\t    TiledTrack.call(this, view, container, obj_dict);\n\t};\n\textend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n\t    display_modes: CONTINUOUS_DATA_MODES,\n\t\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'color', label: 'Color', type: 'color' },\n\t        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n\t        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 30, hidden: true }\n\t    ] ),\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken before drawing.\n\t     */\n\t    // FIXME: can the default behavior be used; right now it breaks during resize.\n\t    before_draw: function() {},\n\t\n\t    /**\n\t     * Draw track tile.\n\t     */\n\t    draw_tile: function(result, ctx, mode, region, w_scale) {\n\t        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n\t    },\n\t\n\t    /**\n\t     * Subset data only if data is at single-base pair resolution.\n\t     */\n\t    can_subset: function(entry) {\n\t        return (entry.data[1][0] - entry.data[0][0] === 1);\n\t    },\n\t\n\t    /**\n\t     * Add min, max labels.\n\t     */\n\t    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n\t        // Add min, max labels.\n\t        this._add_yaxis_label('max');\n\t        this._add_yaxis_label('min');\n\t    }\n\t});\n\t\n\t/**\n\t * Diagonal heatmap for showing interactions data.\n\t */\n\tvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n\t    this.mode = \"Heatmap\";\n\t    TiledTrack.call(this, view, container, obj_dict);\n\t};\n\t\n\textend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n\t    display_modes: [\"Heatmap\"],\n\t\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n\t        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n\t        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n\t        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 500, hidden: true }\n\t    ] ),\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Additional initialization required before drawing track for the first time.\n\t     */\n\t    predraw_init: function() {\n\t        var track = this;\n\t        return $.getJSON( track.dataset.url(),\n\t            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n\t               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n\t            var data = result.data;\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Draw tile.\n\t     */\n\t    draw_tile: function(result, ctx, mode, region, w_scale) {\n\t        // Paint onto canvas.\n\t        var canvas = ctx.canvas,\n\t            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n\t        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\t\n\t        return new Tile(this, region, w_scale, canvas, result.data);\n\t    }\n\t});\n\t\n\t/**\n\t * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n\t */\n\tvar FeatureTrack = function(view, container, obj_dict) {\n\t    TiledTrack.call(this, view, container, obj_dict);\n\t    this.container_div.addClass( \"feature-track\" );\n\t    this.summary_draw_height = 30;\n\t    this.slotters = {};\n\t    this.start_end_dct = {};\n\t    this.left_offset = 200;\n\t\n\t    // this.painter = painters.LinkedFeaturePainter;\n\t    this.set_painter_from_config();\n\t};\n\textend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n\t    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\t\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'block_color', label: 'Block color', type: 'color' },\n\t        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n\t        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n\t        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n\t          help: 'Show the number of items in each bin when drawing summary histogram' },\n\t        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n\t        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n\t        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n\t            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 0, hidden: true}\n\t    ] ),\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.set_painter_from_config();\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    set_painter_from_config: function() {\n\t        if ( this.config.get_value('connector_style') === 'arcs' ) {\n\t            this.painter = painters.ArcLinkedFeaturePainter;\n\t        } else {\n\t            this.painter = painters.LinkedFeaturePainter;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n\t     * drawn/fetched and shown.\n\t     */\n\t    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n\t        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\t\n\t        var track = this,\n\t            i,\n\t            line_track_tiles = _.filter(tiles, function(t) {\n\t                return (t instanceof LineTrackTile);\n\t            });\n\t\n\t        //\n\t        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n\t        // are labeled incomplete on the tile level because they cannot be completely drawn.\n\t        //\n\t        if (line_track_tiles.length === 0) {\n\t            // Gather incomplete features together.\n\t            var all_incomplete_features = {};\n\t            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n\t                _.each(inc_features, function(feature) {\n\t                    all_incomplete_features[feature[0]] = feature;\n\t                });\n\t            });\n\t\n\t            // Draw incomplete features on each tile.\n\t            var self = this;\n\t            _.each(tiles, function(tile) {\n\t                // Remove features already drawn on tile originally.\n\t                var tile_incomplete_features =_.omit(all_incomplete_features,\n\t                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\t\n\t                // Remove features already drawn on tile in past postdraw actions.\n\t                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\t\n\t                // Draw tile's incomplete features.\n\t                if (_.size(tile_incomplete_features) !== 0) {\n\t                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n\t                    // canvas, and then draw incomplete features on the new canvas.\n\t                    var features = { data: _.values( tile_incomplete_features ) },\n\t                        new_canvas = self.view.canvas_manager.new_canvas(),\n\t                        new_canvas_ctx = new_canvas.getContext('2d');\n\t                    new_canvas.height = Math.max(tile.canvas.height,\n\t                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n\t                    new_canvas.width = tile.canvas.width;\n\t                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n\t                    new_canvas_ctx.translate(track.left_offset, 0);\n\t                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n\t                                                  tile.region, tile.w_scale, tile.seq_data);\n\t                    $(tile.canvas).replaceWith($(new_tile.canvas));\n\t                    tile.canvas = new_canvas;\n\t                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n\t                }\n\t            });\n\t        }\n\t\n\t        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n\t        /*\n\t        This code isn't used right now because Coverage mode uses predefined max in preferences.\n\t        if (track.mode === \"Coverage\") {\n\t            // Get global max.\n\t            var global_max = -1;\n\t            for (i = 0; i < tiles.length; i++) {\n\t                var cur_max = tiles[i].max_val;\n\t                if (cur_max > global_max) {\n\t                    global_max = cur_max;\n\t                }\n\t            }\n\t\n\t            for (i = 0; i < tiles.length; i++) {\n\t                var tile = tiles[i];\n\t                if (tile.max_val !== global_max) {\n\t                    tile.html_elt.remove();\n\t                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n\t                }\n\t            }\n\t        }\n\t        */\n\t\n\t        //\n\t        // Update filter attributes, UI.\n\t        //\n\t\n\t        // Update filtering UI.\n\t        if (track.filters_manager) {\n\t            var filters = track.filters_manager.filters,\n\t                f;\n\t            for (f = 0; f < filters.length; f++) {\n\t                filters[f].update_ui_elt();\n\t            }\n\t\n\t            // Determine if filters are available; this is based on the tiles' data.\n\t            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n\t            var filters_available = false,\n\t                example_feature,\n\t                filter;\n\t            for (i = 0; i < tiles.length; i++) {\n\t                if (tiles[i].data.length) {\n\t                    example_feature = tiles[i].data[0];\n\t                    for (f = 0; f < filters.length; f++) {\n\t                        filter = filters[f];\n\t                        if ( filter.applies_to(example_feature) &&\n\t                             filter.min !== filter.max ) {\n\t                            filters_available = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // If filter availability changed, hide filter div if necessary and update menu.\n\t            if (track.filters_available !== filters_available) {\n\t                track.filters_available = filters_available;\n\t                if (!track.filters_available) {\n\t                    track.filters_manager.hide();\n\t                }\n\t                track.update_icons();\n\t            }\n\t        }\n\t\n\t        //\n\t        // If not all features slotted, show icon for showing more rows (slots).\n\t        //\n\t        if (tiles[0] instanceof FeatureTrackTile) {\n\t            var all_slotted = true;\n\t            for (i = 0; i < tiles.length; i++) {\n\t                if (!tiles[i].all_slotted) {\n\t                    all_slotted = false;\n\t                    break;\n\t                }\n\t            }\n\t            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n\t        }\n\t        else {\n\t            this.action_icons.show_more_rows_icon.hide();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Update track interface to show display mode being used.\n\t     */\n\t    update_auto_mode: function(mode) {\n\t        if (this.mode === \"Auto\") {\n\t            if (mode === \"no_detail\") {\n\t                mode = \"feature spans\";\n\t            }\n\t            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Place features in slots for drawing (i.e. pack features).\n\t     * this.slotters[level] is created in this method. this.slotters[level]\n\t     * is a Slotter object. Returns the number of slots used to pack features.\n\t     */\n\t    incremental_slots: function(level, features, mode) {\n\t\n\t        // Get/create incremental slots for level. If display mode changed,\n\t        // need to create new slots.\n\t\n\t        var dummy_context = this.view.canvas_manager.dummy_context,\n\t            slotter = this.slotters[level];\n\t        if (!slotter || (slotter.mode !== mode)) {\n\t            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n\t            this.slotters[level] = slotter;\n\t        }\n\t\n\t        return slotter.slot_features( features );\n\t    },\n\t\n\t    /**\n\t     * Returns appropriate display mode based on data.\n\t     */\n\t    get_mode: function(data) {\n\t        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n\t        if (data.extra_info === \"no_detail\" || this.is_overview) {\n\t            mode = \"no_detail\";\n\t        }\n\t        else {\n\t            // Choose b/t Squish and Pack.\n\t            // Proxy measures for using Squish:\n\t            // (a) error message re: limiting number of features shown;\n\t            // (b) X number of features shown;\n\t            // (c) size of view shown.\n\t            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n\t            // fix this so that tiles are redrawn as necessary to use the same mode.\n\t            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n\t            //     (result.data && result.data.length > 2000) ||\n\t            //var data = result.data;\n\t            // if ( (data.length && data.length < 4) ||\n\t            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n\t            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n\t                mode = \"Squish\";\n\t            } else {\n\t                mode = \"Pack\";\n\t            }\n\t        }\n\t        return mode;\n\t    },\n\t\n\t    /**\n\t     * Returns canvas height needed to display data; return value is an integer that denotes the\n\t     * number of pixels required.\n\t     */\n\t    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n\t        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n\t            return this.summary_draw_height;\n\t        }\n\t        else {\n\t            // All other modes require slotting.\n\t            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n\t            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n\t            // works as a static function.\n\t            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n\t            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Draw FeatureTrack tile.\n\t     * @param result result from server\n\t     * @param cxt canvas context to draw on\n\t     * @param mode mode to draw in\n\t     * @param region region to draw on tile\n\t     * @param w_scale pixels per base\n\t     * @param ref_seq reference sequence data\n\t     * @param cur_tile true if drawing is occurring on a currently visible tile.\n\t     */\n\t    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n\t        var track = this,\n\t            canvas = ctx.canvas,\n\t            tile_low = region.get('start'),\n\t            tile_high = region.get('end'),\n\t            left_offset = this.left_offset;\n\t\n\t        // If data is line track data, draw line track tile.\n\t        if (result.dataset_type === 'bigwig') {\n\t            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n\t        }\n\t\n\t        // Handle row-by-row tracks\n\t\n\t        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n\t        var\n\t            filtered = [],\n\t            slots = this.slotters[w_scale].slots;\n\t            all_slotted = true;\n\t        if ( result.data ) {\n\t            var filters = this.filters_manager.filters;\n\t            for (var i = 0, len = result.data.length; i < len; i++) {\n\t                var feature = result.data[i];\n\t                var hide_feature = false;\n\t                var filter;\n\t                for (var f = 0, flen = filters.length; f < flen; f++) {\n\t                    filter = filters[f];\n\t                    filter.update_attrs(feature);\n\t                    if (!filter.keep(feature)) {\n\t                        hide_feature = true;\n\t                        break;\n\t                    }\n\t                }\n\t                if (!hide_feature) {\n\t                    // Feature visible.\n\t                    filtered.push(feature);\n\t                    // Set flag if not slotted.\n\t                    if ( !(feature[0] in slots) ) {\n\t                        all_slotted = false;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        // Create painter.\n\t        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n\t            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n\t            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n\t                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n\t                                         ref_seq,\n\t                                         // Only the ReadPainer will use this function\n\t                                         function(b) { return track.view.get_base_color(b); });\n\t        var feature_mapper = null;\n\t\n\t        ctx.fillStyle = this.config.get_value('block_color');\n\t        ctx.font = ctx.canvas.manager.default_font;\n\t        ctx.textAlign = \"right\";\n\t\n\t        if (result.data) {\n\t            // Draw features.\n\t            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n\t            feature_mapper = draw_results.feature_mapper;\n\t            incomplete_features = draw_results.incomplete_features;\n\t            feature_mapper.translation = -left_offset;\n\t        }\n\t\n\t        // If not drawing on current tile, create new tile.\n\t        if (!cur_tile) {\n\t            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n\t                                        result.message, all_slotted, feature_mapper,\n\t                                        incomplete_features, ref_seq);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Displays variant data.\n\t */\n\tvar VariantTrack = function(view, container, obj_dict) {\n\t    TiledTrack.call(this, view, container, obj_dict);\n\t    this.painter = painters.VariantPainter;\n\t    this.summary_draw_height = 30;\n\t\n\t    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n\t    // variant is drawn when variant is at start of tile.\n\t    this.left_offset = 30;\n\t};\n\t\n\textend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n\t    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\t\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'color', label: 'Histogram color', type: 'color' },\n\t        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n\t        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n\t        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'height', type: 'int', default_value: 0, hidden: true }\n\t    ] ),\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.request_draw({ clear_tile_cache: true });\n\t    },\n\t\n\t    /**\n\t     * Draw tile.\n\t     */\n\t    draw_tile: function(result, ctx, mode, region, w_scale) {\n\t        // Data could be coverage data or variant data.\n\t        if (result.dataset_type === 'bigwig') {\n\t            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n\t        }\n\t        else { // result.dataset_type === 'variant'\n\t            var view = this.view,\n\t                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n\t                                             function(b) { return view.get_base_color(b); });\n\t            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n\t            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Returns canvas height needed to display data; return value is an integer that denotes the\n\t     * number of pixels required.\n\t     */\n\t    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n\t        if (result.dataset_type === 'bigwig') {\n\t            return this.summary_draw_height;\n\t        }\n\t        else {\n\t            // HACK: sample_names is not be defined when dataset definition is fetched before\n\t            // dataset is complete (as is done when running tools). In that case, fall back on\n\t            // # of samples in data. This can be fixed by re-requesting dataset definition\n\t            // in init.\n\t            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n\t            if (num_samples === 0 && result.data.length !== 0) {\n\t                // Sample data is separated by commas, so this computes # of samples:\n\t                num_samples = result.data[0][7].match(/,/g);\n\t                if ( num_samples === null ) {\n\t                    num_samples = 1;\n\t                }\n\t                else {\n\t                    num_samples = num_samples.length + 1;\n\t                }\n\t            }\n\t\n\t            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n\t            return dummy_painter.get_required_height(num_samples);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Additional initialization required before drawing track for the first time.\n\t     */\n\t    predraw_init: function() {\n\t        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n\t        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n\t        // this be moved somewhere else?\n\t        if (!this.dataset.get_metadata('sample_names')) {\n\t            deferreds.push(this.dataset.fetch());\n\t        }\n\t        return deferreds;\n\t    },\n\t\n\t    /**\n\t     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n\t     * drawn/fetched and shown.\n\t     */\n\t    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n\t        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\t\n\t        var line_track_tiles = _.filter(tiles, function(t) {\n\t            return (t instanceof LineTrackTile);\n\t        });\n\t\n\t        // Add summary/sample labels if needed and not already included.\n\t        var sample_names = this.dataset.get_metadata('sample_names');\n\t        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n\t            var font_size;\n\t\n\t            // Add and/or style labels.\n\t            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n\t                // Add summary and sample labels.\n\t\n\t                // Add summary label to middle of summary area.\n\t                font_size = this.config.get_value('summary_height') / 2;\n\t                this.tiles_div.prepend(\n\t                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n\t                        'font-size': font_size + 'px',\n\t                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n\t                    })\n\t                );\n\t\n\t                // Show sample labels.\n\t                if (this.config.get_value('show_sample_data')) {\n\t                    var samples_div_html = sample_names.join('<br/>');\n\t\n\t                    this.tiles_div.prepend(\n\t                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n\t                            'top': this.config.get_value('summary_height')\n\t                        })\n\t                    );\n\t                }\n\t            }\n\t\n\t            // Style labels.\n\t\n\t            // Match sample font size to mode.\n\t            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n\t            $(this.tiles_div).find('.sample').css({\n\t                'font-size': font_size,\n\t                'line-height': font_size\n\t            });\n\t            // Color labels to preference color.\n\t            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n\t        }\n\t        else {\n\t            // Remove all labels.\n\t            this.container_div.find('.yaxislabel.variant').remove();\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n\t */\n\tvar ReadTrack = function (view, container, obj_dict) {\n\t    FeatureTrack.call(this, view, container, obj_dict);\n\t    this.painter = painters.ReadPainter;\n\t    this.update_icons();\n\t};\n\t\n\textend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n\t    config_params: _.union( Drawable.prototype.config_params, [\n\t        { key: 'block_color', label: 'Histogram color', type: 'color' },\n\t        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n\t        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n\t        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n\t        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n\t        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n\t        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n\t        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n\t        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n\t        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n\t        { key: 'height', type: 'int', default_value: 0, hidden: true}\n\t    ] ),\n\t\n\t    config_onchange: function() {\n\t        this.set_name(this.config.get_value('name'));\n\t        this.request_draw({ clear_tile_cache: true });\n\t    }\n\t});\n\t\n\t/**\n\t * Objects that can be added to a view.\n\t */\n\tvar addable_objects = {\n\t    \"CompositeTrack\": CompositeTrack,\n\t    \"DrawableGroup\": DrawableGroup,\n\t    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n\t    \"FeatureTrack\": FeatureTrack,\n\t    \"LineTrack\": LineTrack,\n\t    \"ReadTrack\": ReadTrack,\n\t    \"VariantTrack\": VariantTrack,\n\t    // For backward compatibility, map vcf track to variant.\n\t    \"VcfTrack\": VariantTrack\n\t};\n\t\n\t/**\n\t * Create new object from a template. A template can be either an object dictionary or an\n\t * object itself.\n\t */\n\tvar object_from_template = function(template, view, container) {\n\t    if ('copy' in template) {\n\t        // Template is an object.\n\t        return template.copy(container);\n\t    }\n\t    else {\n\t        // Template is a dictionary.\n\t        var\n\t           drawable_type = template.obj_type;\n\t        // For backward compatibility:\n\t        if (!drawable_type) {\n\t            drawable_type = template.track_type;\n\t        }\n\t        return new addable_objects[ drawable_type ](view, container, template);\n\t    }\n\t};\n\t\n\treturn {\n\t    TracksterView: TracksterView,\n\t    DrawableGroup: DrawableGroup,\n\t    LineTrack: LineTrack,\n\t    FeatureTrack: FeatureTrack,\n\t    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n\t    ReadTrack: ReadTrack,\n\t    VariantTrack: VariantTrack,\n\t    CompositeTrack: CompositeTrack,\n\t    object_from_template: object_from_template\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2)))\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_) {\n\t\n\t/**\n\t * View for track/group header.\n\t */\n\tvar TrackHeaderView = Backbone.View.extend({\n\t    className: 'track-header',\n\t\n\t    initialize: function() {\n\t        // Watch and update name changes.\n\t        this.model.config.get('name').on('change:value', this.update_name, this);\n\t        this.render();\n\t    },\n\t\n\t    render: function() {\n\t        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n\t        this.$el.append($(\"<div/>\").addClass(\"track-name\")\n\t                                   .text(this.model.config.get_value('name')));\n\t\n\t        // Icons container.\n\t        this.action_icons = {};\n\t        this.render_action_icons();\n\t\n\t        // Suppress double clicks in header so that they do not impact viz under header.\n\t        this.$el.dblclick( function(e) { e.stopPropagation(); } );\n\t        \n\t        // Needed for floating elts in header.\n\t        this.$el.append( $(\"<div style='clear: both'/>\") );\n\t    },\n\t\n\t    update_name: function() {\n\t        this.$el.find('.track-name').text(this.model.config.get_value('name'));\n\t    },\n\t\n\t    render_action_icons: function() {\n\t        var self = this;\n\t        this.icons_div = $(\"<div/>\").addClass('track-icons').hide().appendTo(this.$el);\n\t        _.each(this.model.action_icons_def, function(icon_dict) {\n\t            self.add_action_icon(icon_dict.name, icon_dict.title, icon_dict.css_class, \n\t                                 icon_dict.on_click_fn, icon_dict.prepend, icon_dict.hide);\n\t        });\n\t\n\t        // Set up behavior for modes popup.\n\t        this.set_display_modes(this.model.display_modes);\n\t    },\n\t\n\t    /**\n\t     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n\t     */\n\t    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n\t        var self = this;\n\t        this.action_icons[name] = $(\"<a/>\").attr(\"title\", title)\n\t                                           .addClass(\"icon-button\").addClass(css_class).tooltip()\n\t                                           .click( function() { on_click_fn(self.model); } )\n\t                                           .appendTo(this.icons_div);\n\t        if (hide) {\n\t            this.action_icons[name].hide();\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Set track's modes and update mode icon popup.\n\t     */\n\t    set_display_modes: function(new_modes, init_mode) {\n\t        if (!new_modes) { return; }\n\t\n\t        // HACK: move this out of view and into track.\n\t\n\t        // Set modes, init mode.\n\t        this.model.display_modes = new_modes;\n\t        this.model.mode = (init_mode || this.model.config.get_value('mode') || this.model.display_modes[0]);\n\t        \n\t        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\t\n\t        // Setup popup menu for changing modes.\n\t        var self = this,\n\t            track = this.model,\n\t            mode_mapping = {};\n\t        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n\t            var mode = track.display_modes[i];\n\t            mode_mapping[mode] = function(mode) {\n\t                return function() { \n\t                    track.change_mode(mode);\n\t                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n\t                    // icons div for now.\n\t                    //self.icons_div.show(); \n\t                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } ); \n\t                };\n\t            }(mode);\n\t        }\n\t\n\t        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n\t    }\n\t});\n\t\n\treturn {\n\t    TrackHeaderView: TrackHeaderView\n\t};\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** 0.0.bundled.js\n **/","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.model.get( 'message' ) );\n                this.$el.fadeIn();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.$el.fadeOut();\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                visible         : true,\n                cls             : '',\n                area            : false\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .val( this.model.get( 'value' ) );\n            this.model.get( 'disabled' ) ? this.$el.attr( 'disabled', true ) : this.$el.removeAttr( 'disabled' );\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().html( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    return {\n        Button      : Buttons.ButtonDefault,\n        ButtonIcon  : Buttons.ButtonIcon,\n        ButtonCheck : Buttons.ButtonCheck,\n        ButtonMenu  : Buttons.ButtonMenu,\n        ButtonLink  : Buttons.ButtonLink,\n        Input       : Input,\n        Label       : Label,\n        Message     : Message,\n        Modal       : Modal,\n        RadioButton : Options.RadioButton,\n        Checkbox    : Options.Checkbox,\n        Radio       : Options.Radio,\n        Select      : Select,\n        Hidden      : Hidden,\n        Slider      : Slider,\n        Drilldown   : Drilldown\n    }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-misc.js\n ** module id = 7\n ** module chunks = 0 3\n **/","define(['utils/utils'], function( Utils ) {\nvar View = Backbone.View.extend({\n    visible     : false,\n    initialize  : function( options ) {\n        var self = this;\n        this.options = Utils.merge( options, {\n            id              : Utils.uid(),\n            title           : '',\n            icon            : '',\n            buttons         : null,\n            body            : null,\n            scrollable      : true,\n            nopadding       : false,\n            operations      : null,\n            placement       : 'bottom',\n            cls             : 'ui-portlet',\n            operations_flt  : 'right',\n            collapsible     : false,\n            collapsed       : false\n        });\n        this.setElement( this._template( this.options ) );\n\n        // link content\n        this.$body = this.$( '.portlet-body' );\n        this.$title = this.$( '.portlet-title-text' );\n        this.$header = this.$( '.portlet-header' );\n        this.$content = this.$( '.portlet-content' );\n        this.$footer = this.$( '.portlet-footer' );\n\n        // set content padding\n        if ( this.options.nopadding ) {\n            this.$content.css( 'padding', '0px' );\n            this.$body.css( 'padding', '0px' );\n        }\n\n        // append buttons\n        this.$buttons = this.$( '.portlet-buttons' );\n        if ( this.options.buttons ) {\n            $.each( this.options.buttons, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$buttons.append( item.$el );\n            });\n        } else {\n            this.$buttons.remove();\n        }\n\n        // append operations\n        this.$operations = this.$( '.portlet-operations' );\n        if ( this.options.operations ) {\n            $.each( this.options.operations, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$operations.append( item.$el );\n            });\n        }\n\n        // add body\n        this.options.body && this.append( this.options.body );\n\n        // make portlet collapsible\n        this.collapsed = false;\n        if ( this.options.collapsible ) {\n            this.$title.addClass( 'no-highlight' ).css({\n                'cursor'            : 'pointer',\n                'text-decoration'   : 'underline'\n            });\n            this.$title.on( 'click', function() {\n                if ( self.collapsed ) { self.expand(); } else { self.collapse(); }\n            });\n            this.options.collapsed && this.collapse();\n        }\n    },\n\n    // append\n    append: function( $el ) {\n        this.$body.append( $el );\n    },\n\n    // remove all content\n    empty: function() {\n        this.$body.empty();\n    },\n\n    // header\n    header: function() {\n        return this.$header;\n    },\n\n    // body\n    body: function() {\n        return this.$body;\n    },\n\n    // footer\n    footer: function() {\n        return this.$footer;\n    },\n\n    // show\n    show: function(){\n        this.visible = true;\n        this.$el.fadeIn( 'fast' );\n    },\n\n    // hide\n    hide: function(){\n        this.visible = false;\n        this.$el.fadeOut( 'fast' );\n    },\n\n    // enable buttons\n    enableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n    },\n\n    // disable buttons\n    disableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n    },\n\n    // hide operation\n    hideOperation: function( id ) {\n        this.$operations.find( '#' + id ).hide();\n    },\n\n    // show operation\n    showOperation: function( id ) {\n        this.$operations.find( '#' + id ).show();\n    },\n\n    // set operation\n    setOperation: function( id, callback ) {\n        var $el = this.$operations.find( '#' + id );\n        $el.off( 'click' );\n        $el.on( 'click', callback );\n    },\n\n    // title\n    title: function( new_title ) {\n        var $el = this.$title;\n        if ( new_title ) {\n            $el.html( new_title );\n        }\n        return $el.html();\n    },\n\n    // collapse portlet\n    collapse: function() {\n        this.collapsed = true;\n        this.$content.height( '0%' );\n        this.$body.hide();\n        this.$footer.hide();\n        this.trigger( 'collapsed' );\n    },\n\n    // expand portlet\n    expand: function() {\n        this.collapsed = false;\n        this.$content.height( '100%' );\n        this.$body.fadeIn( 'fast' );\n        this.$footer.fadeIn( 'fast' );\n        this.trigger( 'expanded' );\n    },\n\n    // disable content access\n    disable: function() {\n        this.$( '.portlet-backdrop' ).show();\n    },\n\n    // enable content access\n    enable: function() {\n        this.$( '.portlet-backdrop' ).hide();\n    },\n\n    // fill regular modal template\n    _template: function( options ) {\n        var tmpl =  '<div id=\"' + options.id + '\" class=\"' + options.cls + '\">';\n        if ( options.title ) {\n            tmpl +=     '<div class=\"portlet-header\">' +\n                            '<div class=\"portlet-operations\" style=\"float: ' + options.operations_flt + ';\"/>' +\n                            '<div class=\"portlet-title\">';\n            if ( options.icon ) {\n                tmpl +=         '<i class=\"icon fa ' + options.icon + '\">&nbsp;</i>';\n            }\n            tmpl +=             '<span class=\"portlet-title-text\">' + options.title + '</span>' +\n                            '</div>' +\n                        '</div>';\n        }\n        tmpl +=         '<div class=\"portlet-content\">';\n        if ( options.placement == 'top' ) {\n            tmpl +=         '<div class=\"portlet-buttons\"/>';\n        }\n        tmpl +=             '<div class=\"portlet-body\"/>';\n        if ( options.placement == 'bottom' ) {\n            tmpl +=         '<div class=\"portlet-buttons\"/>';\n        }\n        tmpl +=         '</div>' +\n                        '<div class=\"portlet-footer\"/>' +\n                        '<div class=\"portlet-backdrop\"/>' +\n                    '</div>';\n        return tmpl;\n    }\n});\nreturn {\n    View : View\n}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-portlet.js\n ** module id = 9\n ** module chunks = 0 3\n **/","// Additional dependencies: jQuery, underscore.\ndefine(['mvc/ui/ui-modal', 'mvc/ui/ui-frames', 'mvc/ui/icon-button'], function(Modal, Frames, mod_icon_btn) {\n\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: '',\n        type: '',\n        name: '',\n        hda_ldda: 'hda',\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get('metadata')) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on('change', this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(_.keys(this.attributes), function(k) {\n            if (k.indexOf('metadata_') === 0) {\n                // Found metadata.\n                var new_key = k.split('metadata_')[1];\n                metadata.set(new_key, this.attributes[k]);\n                delete this.attributes[k];\n            }\n        }, this);\n\n        // Because this is an internal change, silence it.\n        this.set('metadata', metadata, { 'silent': true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: Galaxy.root + \"api/datasets\"\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        chunk_index: -1,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        this.attributes.chunk_index = (this.attributes.first_data_chunk ? 1 : 0);\n        this.attributes.chunk_url = Galaxy.root + 'dataset/display?dataset_id=' + this.id;\n        this.attributes.url_viz = Galaxy.root + 'visualization';\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this,\n            next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            chunk: self.attributes.chunk_index++\n        }).success(function(chunk) {\n            var rval;\n            if (chunk.ck_data !== '') {\n                // Found chunk.\n                rval = chunk;\n            }\n            else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model   : options.model,\n            $el     : this.$el\n        });\n    },\n\n    expand_to_container: function(){\n        if (this.$el.height() < this.scroll_elt.height()){\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function( func ){\n        var self = this;\n        if ( !this.loading_chunk && this.scrolled_to_bottom() ) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $('<div/>').attr('id', 'loading_indicator');\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $('<table/>').attr({\n            id: 'content_table',\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata('column_names'),\n            header_container = $('<thead/>').appendTo(data_table),\n            header_row = $('<tr/>').appendTo(header_container);\n        if (column_names) {\n            header_row.append('<th>' + column_names.join('</th><th>') + '</th>');\n        } else {\n            for (var j = 1; j <= this.model.get_metadata('columns'); j++) {\n                header_row.append('<th>' + j + '</th>');\n            }\n        }\n\n        // Render first chunk.\n        var self = this,\n            first_chunk = this.model.get('first_data_chunk');\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        }\n        else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(function(result) {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(function(){\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $('<td>').text(cell_contents);\n        var column_types = this.model.get_metadata('column_types');\n        if (colspan !== undefined) {\n            $cell.attr('colspan', colspan).addClass('stringalign');\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === 'str' || column_types[index] === 'list') {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass('stringalign');\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split('\\t'),\n            row = $('<tr>'),\n            num_columns = this.model.get_metadata('columns');\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass('dark_row');\n        }\n\n        if (cells.length === num_columns) {\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n        }\n        else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(cells.slice(0, num_columns - 1), function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            row.append(this._renderCell(cells.slice(num_columns - 1).join('\\t'), num_columns - 1));\n        }\n        else if (num_columns > 5 && cells.length === num_columns - 1 ) {\n            // SAM file or like format with optional metadata missing.\n            _.each(cells, function(cell_contents, index) {\n                row.append(this._renderCell(cell_contents, index));\n            }, this);\n            row.append($('<td>'));\n        }\n        else {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find('table');\n        _.each(chunk.ck_data.split('\\n'), function(line, index) {\n            if (line !== ''){\n                data_table.append(this._renderRow(line));\n            }\n        }, this);\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        scroll_elt = _.find(this.$el.parents(), function(p) {\n            return $(p).css('overflow') === 'auto';\n        });\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) { scroll_elt = window; }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return (this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0);\n    }\n\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: 'relative',\n            overflow: 'scroll',\n            height: options.height || '500px'\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n\n});\n\n// button for trackster visualization\nvar TabularButtonTracksterView = Backbone.View.extend({\n\n    // gene region columns\n    col: {\n        chrom   : null,\n        start   : null,\n        end     : null\n    },\n\n    // url for trackster\n    url_viz     : null,\n\n    // dataset id\n    dataset_id  : null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext   : null,\n\n    // backbone initialize\n    initialize: function (options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model       = options.model;\n        var metadata    = model.get('metadata');\n\n        // check for datatype\n        if (!model.get('file_ext')) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get('file_ext');\n\n        // check for bed-file format\n        if (this.file_ext == 'bed')\n        {\n            // verify that metadata exists\n            if (metadata.get('chromCol') && metadata.get('startCol') && metadata.get('endCol'))\n            {\n                // read in columns\n                this.col.chrom   = metadata.get('chromCol') - 1;\n                this.col.start   = metadata.get('startCol') - 1;\n                this.col.end     = metadata.get('endCol') - 1;\n            } else {\n                console.log('TabularButtonTrackster : Bed-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == 'vcf')\n        {\n            // search array\n            function search (str, array) {\n                for (var j = 0; j < array.length; j++)\n                    if (array[j].match(str)) return j;\n                return -1;\n            };\n\n            // load\n            this.col.chrom = search('Chrom', metadata.get('column_names'));\n            this.col.start = search('Pos', metadata.get('column_names'));\n            this.col.end   = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log('TabularButtonTrackster : VCF-file metadata incomplete.');\n                return;\n            }\n        }\n\n        // check\n        if(this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log('TabularButtonTrackster : Dataset identification is missing.');\n            return;\n        }\n\n        // get url\n        if (model.get('url_viz')) {\n            this.url_viz = model.get('url_viz');\n        } else {\n            console.log('TabularButtonTrackster : Url for visualization controller is missing.');\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get('genome_build')) {\n            this.genome_build = model.get('genome_build');\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model : new mod_icon_btn.IconButton({\n                title       : 'Visualize',\n                icon_class  : 'chart_curve',\n                id          : 'btn_viz'\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    // backbone events\n    events:\n    {\n        'mouseover tr'  : 'show',\n        'mouseleave'    : 'hide'\n    },\n\n    // show button\n    show: function (e) {\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        };\n\n        // check\n        if(this.col.chrom === null)\n            return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row.children().eq(this.col.chrom).html();\n        var start = row.children().eq(this.col.start).html();\n\n        // end is optional\n        var end = this.col.end ? row.children().eq(this.col.end).html() : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id  : this.dataset_id,\n                gene_region : chrom + \":\" + start + \"-\" + end\n            };\n\n            // get button position\n            var offset  = row.offset();\n            var left    = offset.left - 10;\n            var top     = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $('#btn_viz').css({'position': 'fixed', 'top': top + 'px', 'left': left + 'px'});\n            $('#btn_viz').off('click');\n            $('#btn_viz').click(this.create_trackster_action(this.url_viz, btn_viz_pars, this.genome_build));\n\n            // show the button\n            $('#btn_viz').show();\n        } else {\n            // hide the button\n            $('#btn_viz').hide();\n        }\n    },\n\n    // hide button\n    hide: function () {\n        this.$el.find('#btn_viz').hide();\n    },\n\n    // create action\n    create_trackster_action : function (vis_url, dataset_params, dbkey) {\n        // link this\n        var self = this;\n\n        // create function\n        return function() {\n            var listTracksParams = {};\n            if (dbkey) {\n                listTracksParams[ 'f-dbkey' ] = dbkey;\n            }\n            $.ajax({\n                url: vis_url + '/list_tracks?' + $.param( listTracksParams ),\n                dataType: 'html',\n                error: function() {\n                    // show error message\n                    self.modal.show({\n                        title   : 'Something went wrong!',\n                        body    : 'Unfortunately we could not add this dataset to the track browser. Please try again or contact us.',\n                        buttons : {\n                            'Cancel': function(){\n                                self.modal.hide();\n                            }\n                        }\n                    });\n                },\n                success: function(table_html) {\n                    self.modal.show({\n                        title   : 'View Data in a New or Saved Visualization',\n                        buttons :{\n                            'Cancel': function(){\n                                self.modal.hide();\n                            },\n                            'View in saved visualization': function(){\n                                // show modal with saved visualizations\n                                self.modal.show(\n                                {\n                                    title   : 'Add Data to Saved Visualization',\n                                    body    : table_html,\n                                    buttons : {\n                                        'Cancel': function(){\n                                            self.modal.hide();\n                                        },\n                                        'Add to visualization': function(){\n                                            // hide\n                                            self.modal.hide();\n\n                                            // search selected fields\n                                            self.modal.$el.find('input[name=id]:checked').each(function(){\n                                                // get visualization id\n                                                var vis_id = $(this).val();\n                                                dataset_params.id = vis_id;\n\n                                                // add widget\n                                                self.frame.add({\n                                                    title    : 'Trackster',\n                                                    type     : 'url',\n                                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                                });\n                                            });\n                                        }\n                                    }\n                                });\n                            },\n                            'View in new visualization': function(){\n                                // hide\n                                self.modal.hide();\n\n                                // add widget\n                                self.frame.add({\n                                    title    : 'Trackster',\n                                    type     : 'url',\n                                    content  : vis_url + '/trackster?' + $.param(dataset_params)\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n            return false;\n        };\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = function(model, view, model_config, parent_elt) {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = function(options) {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = (embedded ? new EmbeddedTabularDatasetChunkedView(options) :\n                           new TopLevelTabularDatasetChunkedView(options));\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nreturn {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/dataset/data.js\n ** module id = 11\n ** module chunks = 0 1 3\n **/","/** This class contains all button views.\n*/\ndefine(['utils/utils'], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal.\n    */\n    var ButtonBase = Backbone.View.extend({\n        initialize: function( options ) {\n            this.options = Utils.merge( options, {\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                icon        : '',\n                cls         : 'ui-button btn btn-default',\n                cls_wait    : 'btn btn-info'\n            } );\n            this.setElement( this._template( this.options ) );\n            var self = this;\n            $( this.el ).on( 'click' , function() {\n                $( '.tooltip' ).hide();\n                if ( options.onclick && !self.disabled ) {\n                    options.onclick();\n                }\n            } );\n            $( this.el ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n        },\n\n        // disable\n        disable: function() {\n            this.$el.addClass( 'disabled' );\n            this.disabled = true;\n        },\n\n        // enable\n        enable: function() {\n            this.$el.removeClass( 'disabled' );\n            this.disabled = false;\n        },\n\n        // show spinner\n        wait: function() {\n            this.$el.removeClass( this.options.cls ).addClass( this.options.cls_wait ).prop( 'disabled', true );\n            this.$( '.icon' ).removeClass( this.options.icon ).addClass( 'fa-spinner fa-spin' );\n            this.$( '.title' ).html( 'Sending...' );\n        },\n\n        // hide spinner\n        unwait: function() {\n            this.$el.removeClass( this.options.cls_wait ).addClass( this.options.cls ).prop( 'disabled', false );\n            this.$( '.icon' ).removeClass( 'fa-spinner fa-spin' ).addClass( this.options.icon );\n            this.$( '.title' ).html( this.options.title );\n        },\n\n        // template\n        _template: function( options ) {\n            var str =   '<button id=\"' + options.id + '\" type=\"submit\" style=\"float: ' + options.floating + ';\" type=\"button\" class=\"' + options.cls + '\">';\n            if (options.icon) {\n                str +=      '<i class=\"icon fa ' + options.icon + '\"/>&nbsp;';\n            }\n            str +=          '<span class=\"title\">' + options.title + '</span>' +\n                        '</button>';\n            return str;\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons.\n    */\n    var ButtonLink = ButtonBase.extend({\n        initialize: function( options ) {\n            ButtonBase.prototype.initialize.call( this, options );\n        },\n        _template: function( options ) {\n            return  '<a id=\"' + options.id + '\" class=\"' + options.cls + '\" href=\"' + ( options.href || 'javascript:void(0)' ) + '\"' +\n                        ' title=\"' + options.title + '\" target=\"' + ( options.target || '_top' ) + '\">' + '<span class=\"' + options.icon + '\"/>' +\n                    '</a>';\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected.\n    */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            // configure options\n            this.options = Utils.merge(options, {\n                title : 'Select/Unselect all',\n                icons : ['fa fa-square-o', 'fa fa-minus-square-o', 'fa fa-check-square-o'],\n                value : 0\n            });\n\n            // create new element\n            this.setElement( this._template() );\n            this.$title = this.$( '.title' );\n            this.$icon  = this.$( '.icon' );\n\n            // set initial value\n            this.value( this.options.value );\n\n            // set title\n            this.$title.html( this.options.title );\n\n            // add event handler\n            var self = this;\n            this.$el.on('click', function() {\n                self.current = ( self.current === 0 && 2 ) || 0;\n                self.value( self.current );\n                self.options.onclick && self.options.onclick();\n            });\n        },\n\n        /* Sets a new value and/or returns the current value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total ) {\n                    if ( new_val !== 0 ) {\n                        new_val = ( new_val !== total ) && 1 || 2;\n                    }\n                }\n                this.current = new_val;\n                this.$icon.removeClass()\n                          .addClass( 'icon' )\n                          .addClass( this.options.icons[ new_val ] );\n                this.options.onchange && this.options.onchange( new_val );\n            }\n            return this.current;\n        },\n\n        /** Template containing the check button and the title\n        */\n        _template: function() {\n            return  '<div class=\"ui-button-check\" >' +\n                        '<span class=\"icon\"/>' +\n                        '<span class=\"title\"/>' +\n                    '</div>';\n        }\n    });\n\n    /** This renders a differently styled, more compact button version.\n        TODO: Consolidate with icon-button.js and/or button-default.js.\n    */\n    var ButtonIcon = Backbone.View.extend({\n        initialize : function( options ) {\n            // get options\n            this.options = Utils.merge( options, {\n                id          : Utils.uid(),\n                title       : '',\n                floating    : 'right',\n                cls         : 'ui-button-icon',\n                icon        : '',\n                tooltip     : '',\n                onclick     : null\n            });\n\n            // create new element\n            this.setElement( this._template( this.options ) );\n\n            // link button element\n            this.$button = this.$el.find( '.button' );\n\n            // add event\n            var self = this;\n            $(this.el).on('click', function() {\n                // hide all tooltips\n                $( '.tooltip' ).hide();\n\n                // execute onclick callback\n                if ( options.onclick && !self.disabled ) {\n                    options.onclick();\n                }\n            });\n\n            // add tooltip\n            this.$button.tooltip( { title: options.tooltip, placement: 'bottom' } );\n        },\n\n        // disable\n        disable: function() {\n            this.$button.addClass( 'disabled' );\n            this.disabled = true;\n        },\n\n        // enable\n        enable: function() {\n            this.$button.removeClass( 'disabled' );\n            this.disabled = false;\n        },\n\n        // change icon\n        setIcon: function(icon_cls) {\n            this.$('i').removeClass( this.options.icon ).addClass( icon_cls );\n            this.options.icon = icon_cls;\n        },\n\n        // template\n        _template: function( options ) {\n            // width\n            var width = '';\n            if ( options.title ) {\n                width = 'width: auto;';\n            }\n\n            // string\n            var str =   '<div id=\"' + options.id + '\" style=\"float: ' + options.floating + '; ' + width + '\" class=\"' + options.cls + '\">' +\n                            '<div class=\"button\">';\n            if (options.title) {\n                str +=          '<i class=\"icon fa ' + options.icon + '\"/>&nbsp;' +\n                                '<span class=\"title\">' + options.title + '</span>';\n            } else {\n                str +=          '<i class=\"icon fa ' + options.icon + '\"/>';\n            }\n            str +=          '</div>' +\n                        '</div>';\n            return str;\n        }\n    });\n\n    /** This class creates a button with dropdown menu. It extends the functionality of the Ui.ButtonIcon class.\n        TODO: Consolidate class, use common base class\n    */\n    var ButtonMenu = Backbone.View.extend({\n        // optional sub menu\n        $menu: null,\n\n        // initialize\n        initialize: function ( options ) {\n            // get options\n            this.options = Utils.merge( options, {\n                // same as Ui.ButtonIcon\n                id              : '',\n                title           : '',\n                floating        : 'right',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                \n                // additional options\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            } );\n\n            // add template for tab\n            this.setElement( $( this._template( this.options ) ) );\n\n            // find root\n            var $root = $( this.el ).find( '.root' );\n\n            // link head\n            var self = this;\n            $root.on( 'click', function( e ) {\n                // hide all tooltips\n                $( '.tooltip' ).hide();\n\n                // prevent default\n                e.preventDefault();\n\n                // add click event\n                if( self.options.onclick ) {\n                    self.options.onclick();\n                }\n            });\n\n            // visiblity\n            if ( !this.options.visible )\n                this.hide();\n\n            // add tooltip\n            $root.tooltip( { title: options.tooltip, placement: 'bottom' } );\n        },\n\n        // show\n        show: function() {\n            $( this.el ).show();\n        },\n\n        // hide\n        hide: function() {\n            $( this.el ).hide();\n        },\n\n        // add menu item\n        addMenu: function ( options ) {\n            // menu option defaults\n            var menuOptions = {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }\n\n            // get options\n            menuOptions = Utils.merge( options, menuOptions );\n\n            // check if submenu element is available\n            if ( !this.$menu ) {\n                // insert submenu element into root\n                $( this.el ).append( this._templateMenu() );\n\n                // update element link\n                this.$menu = $( this.el ).find( '.menu' );\n            }\n\n            // create\n            var $item = $( this._templateMenuItem( menuOptions ) );\n\n            // add events\n            $item.on( 'click', function( e ) {\n                if( menuOptions.onclick ) {\n                    e.preventDefault();\n                    menuOptions.onclick();\n                }\n            });\n\n            // append menu\n            this.$menu.append( $item );\n\n            // append divider\n            if ( menuOptions.divider ) {\n                this.$menu.append( $( this._templateDivider() ) );\n            }\n        },\n\n        // fill template header\n        _templateMenuItem: function ( options ) {\n            var tmpl =  '<li>' +\n                            '<a class=\"dropdown-item\" href=\"' + options.href + '\" target=\"' + options.target + '\" ';\n            if ( options.download ) {\n                tmpl +=         'download=\"' + options.download + '\"';\n            }\n            tmpl +=         '>';\n            if ( options.icon ) {\n                tmpl +=         '<i class=\"fa ' + options.icon + '\"/>';\n            }\n            tmpl +=             ' ' + options.title +\n                            '</a>' +\n                        '</li>';\n            return tmpl;\n        },\n\n        // fill template header\n        _templateMenu: function () {\n            return '<ul class=\"menu dropdown-menu pull-' + this.options.pull + '\" role=\"menu\"/>';\n        },\n\n        _templateDivider: function() {\n            return '<li class=\"divider\"/>';\n        },\n\n        // element\n        _template: function(options) {\n            // TODO: width/margin should be set in css\n            var width = '';\n            var margin = '';\n            if ( options.title ) {\n                width = 'width: auto;';\n            } else {\n                margin = 'margin: 0px;';\n            }\n            var str =   '<div id=\"' + options.id + '\" style=\"float: ' + options.floating + '; ' + width + '\" class=\"dropdown ' + options.cls + '\">' +\n                            '<div class=\"root button dropdown-toggle\" data-toggle=\"dropdown\" style=\"' + margin + '\">' +\n                                '<i class=\"icon fa ' + options.icon + '\"/>';\n            if ( options.title ) {\n                str +=          '&nbsp;<span class=\"title\">' + options.title + '</span>';\n            }\n            str +=          '</div>' +\n                        '</div>';\n            return str;\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonBase,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-buttons.js\n ** module id = 13\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n/**\n *  This class creates a ui table element.\n */\nvar View = Backbone.View.extend({\n    // current row\n    row: null,\n    \n    // count rows\n    row_count: 0,\n    \n    // defaults options\n    optionsDefault: {\n        content     : 'No content available.',\n        onchange    : null,\n        ondblclick  : null,\n        onconfirm   : null,\n        cls         : 'ui-table',\n        cls_tr      : ''\n    },\n    \n    // events\n    events : {\n        'click'     : '_onclick',\n        'dblclick'  : '_ondblclick'\n    },\n    \n    // initialize\n    initialize : function(options) {\n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n        \n        // create new element\n        var $el = $(this._template(this.options));\n        \n        // link sub-elements\n        this.$thead = $el.find('thead');\n        this.$tbody = $el.find('tbody');\n        this.$tmessage = $el.find('tmessage');\n        \n        // set element\n        this.setElement($el);\n                \n        // initialize row\n        this.row = this._row();\n    },\n    \n    // add header cell\n    addHeader: function($el) {\n        var wrapper = $('<th></th>');\n        wrapper.append($el);\n        this.row.append(wrapper);\n    },\n    \n    // header\n    appendHeader: function() {\n        // append header row\n        this.$thead.append(this.row);\n\n        // row\n        this.row = $('<tr></tr>');\n    },\n    \n    // add row cell\n    add: function($el, width, align) {\n        var wrapper = $('<td></td>');\n        if (width) {\n            wrapper.css('width', width);\n        }\n        if (align) {\n            wrapper.css('text-align', align);\n        }\n        wrapper.append($el);\n        this.row.append(wrapper);\n    },\n    \n    // append\n    append: function(id, fade) {\n        this._commit(id, fade, false);\n    },\n    \n    // prepend\n    prepend: function(id, fade) {\n        this._commit(id, fade, true);\n    },\n    \n    // get element\n    get: function(id) {\n        return this.$el.find('#' + id);\n    },\n    \n    // delete\n    del: function(id) {\n        var item = this.$tbody.find('#' + id);\n        if (item.length > 0) {\n            item.remove();\n            this.row_count--;\n            this._refresh();\n        }\n    },\n\n    // delete all\n    delAll: function() {\n        this.$tbody.empty();\n        this.row_count = 0;\n        this._refresh();\n    },\n        \n    // value\n    value: function(new_value) {\n        // get current id/value\n        this.before = this.$tbody.find('.current').attr('id');\n        \n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this.$tbody.find('tr').removeClass('current');\n            if (new_value) {\n                this.$tbody.find('#' + new_value).addClass('current');\n            }\n        }\n        \n        // get current id/value\n        var after = this.$tbody.find('.current').attr('id');\n        if(after === undefined) {\n            return null;\n        } else {\n            // fire onchange\n            if (after != this.before && this.options.onchange) {\n                this.options.onchange(new_value);\n            }\n            \n            // return current value\n            return after;\n        }\n    },\n    \n    // size\n    size: function() {\n        return this.$tbody.find('tr').length;\n    },\n    \n    // commit\n    _commit: function(id, fade, prepend) {\n        // remove previous item with same id\n        this.del(id);\n        \n        // add\n        this.row.attr('id', id);\n        \n        // add row\n        if (prepend) {\n            this.$tbody.prepend(this.row);\n        } else {\n            this.$tbody.append(this.row);\n        }\n        \n        // fade mode\n        if (fade) {\n            this.row.hide();\n            this.row.fadeIn();\n        }\n        \n        // row\n        this.row = this._row();\n        \n        // row count\n        this.row_count++;\n        this._refresh();\n    },\n    \n    // create new row\n    _row: function() {\n        return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n    },\n    \n    // onclick\n    _onclick: function(e) {\n        // get values\n        var old_value = this.value();\n        var new_value = $(e.target).closest('tr').attr('id');\n        if (new_value != ''){\n            // check equality\n            if (new_value && old_value != new_value) {\n                if (this.options.onconfirm) {\n                    this.options.onconfirm(new_value);\n                } else {\n                    this.value(new_value);\n                }\n            }\n        }\n    },\n\n    // ondblclick\n    _ondblclick: function(e) {\n        var value = this.value();\n        if (value && this.options.ondblclick) {\n            this.options.ondblclick(value);\n        }\n    },\n        \n    // refresh\n    _refresh: function() {\n        if (this.row_count == 0) {\n            this.$tmessage.show();\n        } else {\n            this.$tmessage.hide();\n        }\n    },\n        \n    // load html template\n    _template: function(options) {\n        return  '<div>' +\n                    '<table class=\"' + options.cls + '\">' +\n                        '<thead></thead>' +\n                        '<tbody></tbody>' +\n                    '</table>' +\n                    '<tmessage>' + options.content + '</tmessage>' +\n                '<div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-table.js\n ** module id = 14\n ** module chunks = 0 3\n **/","define([\n    //jquery\n    //backbone\n], function(){\n//=============================================================================\n/**\n * backbone model for icon buttons\n */\nvar IconButton = Backbone.Model.extend({\n    defaults: {\n        title           : \"\",\n        icon_class      : \"\",\n        on_click        : null,\n        menu_options    : null,\n        is_menu_button  : true,\n        id              : null,\n        href            : null,\n        target          : null,\n        enabled         : true,\n        visible         : true,\n        tooltip_config  : {}\n    }\n});\n\n/**\n *  backbone view for icon buttons\n */\nvar IconButtonView = Backbone.View.extend({\n\n    initialize : function(){\n        // better rendering this way\n        this.model.attributes.tooltip_config = { placement : 'bottom' };\n        this.model.bind( 'change', this.render, this );\n    },\n\n    render : function( ){\n        // hide tooltip\n        this.$el.tooltip( 'hide' );\n\n        var new_elem = this.template( this.model.toJSON() );\n        // configure tooltip\n        new_elem.tooltip( this.model.get( 'tooltip_config' ));\n        this.$el.replaceWith( new_elem );\n        this.setElement( new_elem );\n        return this;\n    },\n\n    events : {\n        'click' : 'click'\n    },\n\n    click : function( event ){\n        // if on_click pass to that function\n        if( _.isFunction( this.model.get( 'on_click' ) ) ){\n            this.model.get( 'on_click' )( event );\n            return false;\n        }\n        // otherwise, bubble up ( to href or whatever )\n        return true;\n    },\n\n    // generate html element\n    template: function( options ){\n        var buffer = 'title=\"' + options.title + '\" class=\"icon-button';\n\n        if( options.is_menu_button ){\n            buffer += ' menu-button';\n        }\n\n        buffer += ' ' + options.icon_class;\n\n        if( !options.enabled ){\n            buffer += '_disabled';\n        }\n\n        // close class tag\n        buffer += '\"';\n\n        if( options.id ){\n            buffer += ' id=\"' + options.id + '\"';\n        }\n\n        buffer += ' href=\"' + options.href + '\"';\n        // add target for href\n        if( options.target ){\n            buffer += ' target=\"' + options.target + '\"';\n        }\n        // set visibility\n        if( !options.visible ){\n            buffer += ' style=\"display: none;\"';\n        }\n\n        // enabled/disabled\n        if ( options.enabled ){\n            buffer = '<a ' + buffer + '/>';\n        } else {\n            buffer = '<span ' + buffer + '/>';\n        }\n\n        // return element\n        return $( buffer );\n    }\n} );\n\n// define collection\nvar IconButtonCollection = Backbone.Collection.extend({\n    model: IconButton\n});\n\n/**\n * menu with multiple icon buttons\n * views are not needed nor used for individual buttons\n */\nvar IconButtonMenuView = Backbone.View.extend({\n\n    tagName: 'div',\n\n    initialize: function(){\n        this.render();\n    },\n\n    render: function(){\n        // initialize icon buttons\n        var self = this;\n        this.collection.each(function(button){\n            // create and add icon button to menu\n            var elt = $('<a/>')\n                .attr('href', 'javascript:void(0)')\n                .attr('title', button.attributes.title)\n                .addClass('icon-button menu-button')\n                .addClass(button.attributes.icon_class)\n                .appendTo(self.$el)\n                .click(button.attributes.on_click);\n\n            // configure tooltip\n            if (button.attributes.tooltip_config){\n                elt.tooltip(button.attributes.tooltip_config);\n            }\n\n            // add popup menu to icon\n            var menu_options = button.get('options');\n            if (menu_options){\n                make_popupmenu(elt, menu_options);\n            }\n        });\n\n        // return\n        return this;\n    }\n});\n\n/**\n * Returns an IconButtonMenuView for the provided configuration.\n * Configuration is a list of dictionaries where each dictionary\n * defines an icon button. Each dictionary must have the following\n * elements: icon_class, title, and on_click.\n */\nvar create_icon_buttons_menu = function(config, global_config)\n{\n    // initialize global configuration\n    if (!global_config) global_config = {};\n\n    // create and initialize menu\n    var buttons = new IconButtonCollection(\n        _.map(config, function(button_config){\n            return new IconButton(_.extend(button_config, global_config));\n        })\n    );\n\n    // return menu\n    return new IconButtonMenuView( {collection: buttons} );\n};\n\n\n//=============================================================================\n    return {\n        IconButton              : IconButton,\n        IconButtonView          : IconButtonView,\n        IconButtonCollection    : IconButtonCollection,\n        IconButtonMenuView      : IconButtonMenuView,\n        create_icon_buttons_menu: create_icon_buttons_menu\n    };\n})\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/icon-button.js\n ** module id = 15\n ** module chunks = 0 1 3\n **/","// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([ 'jquery' ], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n\n}(function ( jQuery ) {\n'use_strict';\n\nvar $ = jQuery;\n\n// ============================================================================\n/**\n * Make an element with text editable: (a) when user clicks on text, a textbox/area\n * is provided for editing; (b) when enter key pressed, element's text is set and on_finish\n * is called.\n */\n$.fn.make_text_editable = function(config_dict) {\n    // Get config options.\n    var num_cols = (\"num_cols\" in config_dict ? config_dict.num_cols : 30),\n        num_rows = (\"num_rows\" in config_dict ? config_dict.num_rows : 4),\n        use_textarea = (\"use_textarea\" in config_dict ? config_dict.use_textarea : false),\n        on_finish = (\"on_finish\" in config_dict ? config_dict.on_finish : null),\n        help_text = (\"help_text\" in config_dict ? config_dict.help_text : null);\n\n    // Add element behavior.\n    var container = $(this);\n    container.addClass(\"editable-text\").click(function(e) {\n        // If there's already an input element, editing is active, so do nothing.\n        if ($(this).children(\":input\").length > 0) {\n            return;\n        }\n\n        container.removeClass(\"editable-text\");\n\n        // Handler for setting element text.\n        var set_text = function(new_text) {\n            container.find(\":input\").remove();\n\n            if (new_text !== \"\") {\n                container.text(new_text);\n            } else {\n                // No text; need a line so that there is a click target.\n                container.html(\"<br>\");\n            }\n            container.addClass(\"editable-text\");\n\n            if (on_finish) {\n                on_finish(new_text);\n            }\n        };\n\n        // Create input element(s) for editing.\n        var cur_text = (\"cur_text\" in config_dict ? config_dict.cur_text : container.text() ),\n            input_elt, button_elt;\n\n        if (use_textarea) {\n            input_elt = $(\"<textarea/>\")\n                .attr({ rows: num_rows, cols: num_cols }).text($.trim(cur_text))\n                .keyup(function(e) {\n                    if (e.keyCode === 27) {\n                        // Escape key.\n                        set_text(cur_text);\n                    }\n                });\n            button_elt = $(\"<button/>\").text(\"Done\").click(function() {\n                set_text(input_elt.val());\n                // Return false so that click does not propogate to container.\n                return false;\n            });\n        }\n        else {\n            input_elt = $(\"<input type='text'/>\").attr({ value: $.trim(cur_text), size: num_cols })\n            .blur(function() {\n                set_text(cur_text);\n            }).keyup(function(e) {\n                if (e.keyCode === 27) {\n                    // Escape key.\n                    $(this).trigger(\"blur\");\n                } else if (e.keyCode === 13) {\n                    // Enter key.\n                    set_text($(this).val());\n                }\n\n                // Do not propogate event to avoid unwanted side effects.\n                e.stopPropagation();\n            });\n        }\n\n        // Replace text with input object(s) and focus & select.\n        container.text(\"\");\n        container.append(input_elt);\n        if (button_elt) {\n            container.append(button_elt);\n        }\n        input_elt.focus();\n        input_elt.select();\n\n        // Do not propogate to elements below b/c that blurs input and prevents it from being used.\n        e.stopPropagation();\n    });\n\n    // Add help text if there some.\n    if (help_text) {\n        container.attr(\"title\", help_text).tooltip();\n    }\n\n    return container;\n};\n\n// ============================================================================\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/ui/editable-text.js\n ** module id = 16\n ** module chunks = 0 3\n **/","define(function(){\n\n/**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\nfunction commatize( number ) {\n    number += ''; // Convert to string\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(number)) {\n        number = number.replace(rgx, '$1' + ',' + '$2');\n    }\n    return number;\n}\n\n/**\n * Helper to determine if object is jQuery deferred.\n */\nvar is_deferred = function ( d ) {\n    return ('promise' in d);\n};\n\n/**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\nvar ServerStateDeferred = Backbone.Model.extend({\n    defaults: {\n        ajax_settings: {},\n        interval: 1000,\n        success_fn: function(result) { return true; }\n    },\n\n    /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n    go: function() {\n        var deferred = $.Deferred(),\n            self = this,\n            ajax_settings = self.get('ajax_settings'),\n            success_fn = self.get('success_fn'),\n            interval = self.get('interval'),\n             _go = function() {\n                 $.ajax(ajax_settings).success(function(result) {\n                     if (success_fn(result)) {\n                         // Result is good, so resolve.\n                         deferred.resolve(result);\n                     }\n                     else {\n                         // Result not good, try again.\n                         setTimeout(_go, interval);\n                     }\n                 });\n             };\n         _go();\n         return deferred;\n    }\n});\n\n/**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\nvar get_random_color = function(colors) {\n    // Default for colors is white.\n    if (!colors) { colors = \"#ffffff\"; }\n\n    // If needed, create list of colors.\n    if ( typeof(colors) === \"string\" ) {\n        colors = [ colors ];\n    }\n\n    // Convert colors to numbers.\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = parseInt( colors[i].slice(1), 16 );\n    }\n\n    // -- Perceived brightness and difference formulas are from\n    // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n    // Compute perceived color brightness (based on RGB-YIQ transformation):\n    var brightness = function(r, g, b) {\n        return ( (r * 299) + (g * 587) + (b * 114) ) / 1000;\n    };\n\n    // Compute color difference:\n    var difference = function(r1, g1, b1, r2, g2, b2) {\n        return ( Math.max(r1, r2) - Math.min(r1, r2) ) +\n               ( Math.max(g1, g2) - Math.min(g1, g2) ) +\n               ( Math.max(b1, b2) - Math.min(b1, b2) );\n    };\n\n    // Create new random color.\n    var new_color, nr, ng, nb,\n        other_color, or, og, ob,\n        n_brightness, o_brightness,\n        diff, ok = false,\n        num_tries = 0;\n    do {\n        // New color is never white b/c random in [0,1)\n        new_color = Math.round( Math.random() * 0xffffff );\n        nr = ( new_color & 0xff0000 ) >> 16;\n        ng = ( new_color & 0x00ff00 ) >> 8;\n        nb = new_color & 0x0000ff;\n        n_brightness = brightness(nr, ng, nb);\n        ok = true;\n        for (i = 0; i < colors.length; i++) {\n            other_color = colors[i];\n            or = ( other_color & 0xff0000 ) >> 16;\n            og = ( other_color & 0x00ff00 ) >> 8;\n            ob = other_color & 0x0000ff;\n            o_brightness = brightness(or, og, ob);\n            diff = difference(nr, ng, nb, or, og, ob);\n            // These thresholds may need to be adjusted. Brightness difference range is 125;\n            // color difference range is 500.\n            if ( ( Math.abs(n_brightness - o_brightness) < 40 ) ||\n                 ( diff < 200 ) ) {\n                ok = false;\n                break;\n            }\n        }\n\n        num_tries++\n;    } while (!ok && num_tries <= 10 );\n\n    // Add 0x1000000 to left pad number with 0s.\n    return '#' + ( 0x1000000 + new_color ).toString(16).substr(1,6);\n};\n\nreturn {\n    commatize: commatize,\n    is_deferred: is_deferred,\n    ServerStateDeferred : ServerStateDeferred,\n    get_random_color    : get_random_color\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster/util.js\n ** module id = 17\n ** module chunks = 0 3\n **/","define([\n    \"libs/bibtex\",\n    \"mvc/base-mvc\",\n    \"utils/localization\"\n], function( parseBibtex, baseMVC, _l ){\n/* global Backbone */\n// we use amd here to require, but bibtex uses a global or commonjs pattern.\n// webpack will load via commonjs and plain requirejs will load as global. Check both\nparseBibtex = parseBibtex || window.BibtexParser;\n\nvar logNamespace = 'citation';\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend( baseMVC.LoggableMixin ).extend( {\n    _logNamespace : logNamespace,\n\n    initialize: function() {\n        var bibtex = this.get( 'content' );\n        var entry = parseBibtex(bibtex).entries[0];\n        this.entry = entry;\n        this._fields = {};\n        var rawFields = entry.Fields;\n        for(var key in rawFields) {\n            var value = rawFields[ key ];\n            var lowerKey = key.toLowerCase();\n            this._fields[ lowerKey ] = value;\n        }\n    },\n    entryType: function() {\n        return this.entry.EntryType;\n    },\n    fields: function() {\n        return this._fields;\n    }\n} );\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend( baseMVC.LoggableMixin ).extend( {\n    _logNamespace : logNamespace,\n\n    /** root api url */\n    urlRoot : Galaxy.root + 'api',\n    partial : true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model : Citation,\n} );\n\nvar HistoryCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/histories/' + this.history_id + '/citations';\n    }\n} );\n\nvar ToolCitationCollection = BaseCitationCollection.extend( {\n    /** complete api url */\n    url : function() {\n        return this.urlRoot + '/tools/' + this.tool_id + '/citations';\n    },\n    partial : false, // If a tool has citations, assume they are complete.\n} );\n\n\n//==============================================================================\nreturn {\n    Citation : Citation,\n    HistoryCitationCollection  : HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/citation/citation-model.js\n ** module id = 18\n ** module chunks = 0 3\n **/","/**\n    This is the regular tool form.\n*/\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/tool/tool-form-base', 'mvc/tool/tool-template'],\n    function( Utils, Ui, ToolFormBase, ToolTemplate ) {\n    var View = ToolFormBase.extend({\n        initialize: function( options ) {\n            var self = this;\n            ToolFormBase.prototype.initialize.call( this, Utils.merge({\n                customize       : function( options ) {\n                    // build execute button\n                    options.buttons = {\n                        execute : execute_btn = new Ui.Button({\n                            icon     : 'fa-check',\n                            tooltip  : 'Execute: ' + options.name + ' (' + options.version + ')',\n                            title    : 'Execute',\n                            cls      : 'btn btn-primary',\n                            floating : 'clear',\n                            onclick  : function() {\n                                execute_btn.wait();\n                                self.portlet.disable();\n                                self.submit( options, function() {\n                                    execute_btn.unwait();\n                                    self.portlet.enable();\n                                } );\n                            }\n                        })\n                    };\n                    // remap feature\n                    if ( options.job_id && options.job_remap ) {\n                        options.inputs[ 'rerun_remap_job_id' ] = {\n                            label       : 'Resume dependencies from this job',\n                            name        : 'rerun_remap_job_id',\n                            type        : 'select',\n                            display     : 'radio',\n                            ignore      : '__ignore__',\n                            value       : '__ignore__',\n                            options     : [ [ 'Yes', options.job_id ], [ 'No', '__ignore__' ] ],\n                            help        : 'The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.'\n                        }\n                    }\n                }\n            }, options ) );\n        },\n\n        /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n        submit: function( options, callback ) {\n            var self = this;\n            var job_def = {\n                tool_id         : options.id,\n                tool_version    : options.version,\n                inputs          : this.data.create()\n            }\n            this.trigger( 'reset' );\n            if ( !self.validate( job_def ) ) {\n                Galaxy.emit.debug( 'tool-form::submit()', 'Submission canceled. Validation failed.' );\n                callback && callback();\n                return;\n            }\n            Galaxy.emit.debug( 'tool-form::submit()', 'Validation complete.', job_def );\n            Utils.request({\n                type    : 'POST',\n                url     : Galaxy.root + 'api/tools',\n                data    : job_def,\n                success : function( response ) {\n                    callback && callback();\n                    self.$el.empty().append( ToolTemplate.success( response ) );\n                    parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n                },\n                error   : function( response ) {\n                    callback && callback();\n                    Galaxy.emit.debug( 'tool-form::submit', 'Submission failed.', response );\n                    if ( response && response.err_data ) {\n                        var error_messages = self.data.matchResponse( response.err_data );\n                        for (var input_id in error_messages) {\n                            self.highlight( input_id, error_messages[ input_id ]);\n                            break;\n                        }\n                    } else {\n                        self.modal.show({\n                            title   : 'Job submission failed',\n                            body    : ( response && response.err_msg ) || ToolTemplate.error( job_def ),\n                            buttons : {\n                                'Close' : function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n        validate: function( job_def ) {\n            var job_inputs  = job_def.inputs;\n            var batch_n     = -1;\n            var batch_src   = null;\n            for ( var job_input_id in job_inputs ) {\n                var input_value = job_inputs[ job_input_id ];\n                var input_id    = this.data.match( job_input_id );\n                var input_field = this.field_list[ input_id ];\n                var input_def   = this.input_list[ input_id ];\n                if ( !input_id || !input_def || !input_field ) {\n                    Galaxy.emit.debug('tool-form::validate()', 'Retrieving input objects failed.');\n                    continue;\n                }\n                if ( !input_def.optional && input_value == null ) {\n                    this.highlight( input_id );\n                    return false;\n                }\n                if ( input_value && input_value.batch ) {\n                    var n = input_value.values.length;\n                    var src = n > 0 && input_value.values[ 0 ] && input_value.values[ 0 ].src;\n                    if ( src ) {\n                        if ( batch_src === null ) {\n                            batch_src = src;\n                        } else if ( batch_src !== src ) {\n                            this.highlight( input_id, 'Please select either dataset or dataset list fields for all batch mode fields.' );\n                            return false;\n                        }\n                    }\n                    if ( batch_n === -1 ) {\n                        batch_n = n;\n                    } else if ( batch_n !== n ) {\n                        this.highlight( input_id, 'Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>' + n + '</b> selection(s) while a previous field contains <b>' + batch_n + '</b>.' );\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/tool/tool-form.js\n ** module id = 19\n ** module chunks = 0 3\n **/","// dependencies\ndefine([], function() {\n\n// tool form templates\nreturn {\n    help: function( options ) {\n        var $tmpl = $( '<div/>' ).addClass( 'ui-form-help' ).append( options.help );\n        $tmpl.find( 'a' ).attr( 'target', '_blank' );\n        return $tmpl;\n    },\n\n    success: function(response) {\n        // check\n        if (!response.jobs || !response.jobs.length) {\n            return this.error(response);\n        }\n\n        // number of jobs\n        var njobs = response.jobs.length;\n\n        // job count info text\n        var njobs_text = '';\n        if (njobs == 1) {\n            njobs_text = '1 job has';\n        } else {\n            njobs_text = njobs + ' jobs have';\n        }\n\n        // create template string\n        var tmpl =  '<div class=\"donemessagelarge\">' +\n                        '<p>' + njobs_text + ' been successfully added to the queue - resulting in the following datasets:</p>';\n        for (var i in response.outputs) {\n            tmpl +=     '<p style=\"padding: 10px 20px;\"><b>' + response.outputs[i].hid + ': ' + response.outputs[i].name + '</b></p>';\n        }\n        tmpl +=         '<p>You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from \\'running\\' to \\'finished\\' if completed successfully or \\'error\\' if problems were encountered.</p>' +\n                    '</div>';\n\n        // return success message element\n        return tmpl;\n    },\n\n    error: function(response) {\n        return  '<div>' +\n                    '<p>' +\n                        'The server could not complete the request. Please contact the Galaxy Team if this error persists.' +\n                    '</p>' +\n                    '<textarea class=\"ui-textarea\" disabled style=\"color: black; height: 300px !important;\">' +\n                        JSON.stringify(response, undefined, 4) +\n                    '</textarea>' +\n                '</div>';\n    },\n\n    requirements: function(options) {\n        var requirements_message = 'This tool requires ';\n        for (var i in options.requirements) {\n            var req = options.requirements[i];\n            requirements_message += req.name;\n            if (req.version) {\n                requirements_message += ' (Version ' + req.version + ')';\n            }\n            if (i < options.requirements.length - 2) {\n                requirements_message += ', ';\n            }\n            if (i == options.requirements.length - 2) {\n                requirements_message += ' and ';\n            }\n        }\n        return requirements_message + '. Click <a target=\"_blank\" href=\"https://wiki.galaxyproject.org/Tools/Requirements\">here</a> for more information.';\n    }\n};\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/tool/tool-template.js\n ** module id = 20\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'], function(Utils, Portlet, Ui) {\n\n// ui list element\nvar View = Backbone.View.extend({\n    // create portlet to keep track of selected list elements\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // initialize options\n        this.options = options;\n        this.name = options.name || 'element';\n        this.multiple = options.multiple || false;\n\n        // create message handler\n        this.message = new Ui.Message();\n\n        // create portlet\n        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n        // create select field containing the options which can be inserted into the list\n        this.select = new Ui.Select.View({ optional : options.optional });\n\n        // create insert new list element button\n        this.button = new Ui.ButtonIcon({\n            icon        : 'fa fa-sign-in',\n            floating    : 'left',\n            tooltip     : 'Insert new ' + this.name,\n            onclick     : function() {\n                self.add({\n                    id      : self.select.value(),\n                    name    : self.select.text()\n                });\n            }\n        });\n\n        // build main element\n        this.setElement(this._template(options));\n        this.$('.ui-list-message').append(this.message.$el);\n        this.$('.ui-list-portlet').append(this.portlet.$el);\n        this.$('.ui-list-button').append(this.button.$el);\n        this.$('.ui-list-select').append(this.select.$el);\n    },\n\n    /** Return/Set currently selected list elements */\n    value: function(val) {\n        // set new value\n        if (val !== undefined) {\n            this.portlet.empty();\n            if ($.isArray(val)) {\n                for (var i in val) {\n                    var v = val[i];\n                    var v_id = null;\n                    var v_name = null;\n                    if ($.type(v) != 'string') {\n                        v_id = v.id;\n                        v_name = v.name;\n                    } else {\n                        v_id = v_name = v;\n                    }\n                    if (v_id != null) {\n                        this.add({\n                            id      : v_id,\n                            name    : v_name\n                        });\n                    }\n                }\n            }\n            this._refresh();\n        }\n        // get current value\n        var lst = [];\n        this.$('.ui-list-id').each(function() {\n            lst.push({\n                id      : $(this).prop('id'),\n                name    : $(this).find('.ui-list-name').html()\n            });\n        });\n        if (lst.length == 0) {\n            return null;\n        }\n        return lst;\n    },\n\n    /** Add row */\n    add: function(options) {\n        var self = this;\n        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n            if (Utils.validate(options.id)) {\n                var $el = $(this._templateRow({\n                    id      : options.id,\n                    name    : options.name\n                }));\n                $el.on('click', function() {\n                    $el.remove();\n                    self._refresh();\n                });\n                $el.on('mouseover', function() {\n                    $el.addClass('portlet-highlight');\n                });\n                $el.on('mouseout', function() {\n                    $el.removeClass('portlet-highlight');\n                });\n                this.portlet.append($el);\n                this._refresh();\n            } else {\n                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n            }\n        } else {\n            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n        }\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.select.update(options);\n    },\n\n    /** Refresh view */\n    _refresh: function() {\n        if (this.$('.ui-list-id').length > 0) {\n            !this.multiple && this.button.disable();\n            this.$('.ui-list-portlet').show();\n        } else {\n            this.button.enable();\n            this.$('.ui-list-portlet').hide();\n        }\n        this.options.onchange && this.options.onchange();\n    },\n\n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-list\">' +\n                    '<div class=\"ui-margin-top\">' +\n                        '<span class=\"ui-list-button\"/>' +\n                        '<span class=\"ui-list-select\"/>' +\n                    '</div>' +\n                    '<div class=\"ui-list-message\"/>' +\n                    '<div class=\"ui-list-portlet\"/>' +\n                '</div>';\n    },\n\n    /** Row Template */\n    _templateRow: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-list.js\n ** module id = 21\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-buttons'], function(Utils, Buttons) {\n\n/** Base class for options based ui elements **/\nvar Base = Backbone.View.extend({\n    // initialize\n    initialize: function(options) {\n        // link this\n        var self = this;\n\n        // configure options\n        this.options = Utils.merge(options, {\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false\n        });\n\n        // create new element\n        this.setElement('<div class=\"ui-options\"/>');\n\n        // create elements\n        this.$message   = $('<div/>');\n        this.$options   = $(this._template(options));\n        this.$menu      = $('<div class=\"ui-options-menu\"/>');\n\n        // append\n        this.$el.append(this.$message);\n        this.$el.append(this.$menu);\n        this.$el.append(this.$options);\n\n        // add select/unselect all button\n        if (this.options.multiple) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$('input').prop('checked', self.all_button.value() !== 0);\n                    self.trigger('change');\n                }\n            });\n            this.$menu.append(this.all_button.$el);\n        }\n\n        // hide input field\n        if (!this.options.visible) {\n            this.$el.hide();\n        }\n\n        // initialize data\n        this.update(this.options.data);\n\n        // set initial value\n        if (this.options.value !== undefined) {\n            this.value(this.options.value);\n        }\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            this.options.onchange && this.options.onchange(this.value());\n        });\n    },\n\n    /** Update options\n    */\n    update: function(options) {\n        // backup current value\n        var current = this._getValue();\n\n        // remove all options\n        this.$options.empty();\n\n        // add new options using single option templates or full template\n        if (this._templateOptions) {\n            // rebuild options using full template\n            this.$options.append(this._templateOptions(options));\n        } else {\n            // rebuild options using single option templates\n            for (var key in options) {\n                var $option = $(this._templateOption(options[key]));\n                $option.addClass('ui-option');\n                $option.tooltip({title: options[key].tooltip, placement: 'bottom'});\n                this.$options.append($option);\n            }\n        }\n\n        // add change events\n        var self = this;\n        this.$('input').on('change', function() {\n            self.value(self._getValue());\n            self.trigger('change');\n        });\n\n        // set previous value\n        this.value(current);\n\n        // data initialization has been completed\n        this.unwait();\n    },\n\n    /** Return/Set current value\n    */\n    value: function (new_value) {\n        // set new value if available\n        if (new_value !== undefined) {\n            // reset selection\n            this.$('input').prop('checked', false);\n            // set value\n            if (new_value !== null) {\n                // check if its an array\n                if (!(new_value instanceof Array)) {\n                    new_value = [new_value];\n                }\n                // update to new selection\n                for (var i in new_value) {\n                    this.$('input[value=\"' + new_value[i] + '\"]').first().prop('checked', true);\n                }\n            };\n        }\n        // get current value\n        var current = this._getValue();\n        if (this.all_button) {\n            var value = current;\n            if (!(value instanceof Array)) {\n                value = 0;\n            } else {\n                value = value.length;\n            }\n            this.all_button.value(value, this._size());\n        }\n        return current;\n    },\n\n    /** Check if selected value exists (or any if multiple)\n    */\n    exists: function(value) {\n        if (value !== undefined) {\n            if (!(value instanceof Array)) {\n                value = [value];\n            }\n            for (var i in value) {\n                if (this.$('input[value=\"' + value[i] + '\"]').length > 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    /** Return first available option\n    */\n    first: function() {\n        var options = this.$('input').first();\n        if (options.length > 0) {\n            return options.val();\n        } else {\n            return null;\n        }\n    },\n\n    /** Wait message during request processing\n    */\n    wait: function() {\n        if (this._size() == 0) {\n            this._messageShow(this.options.wait_text, 'info');\n            this.$options.hide();\n            this.$menu.hide();\n        }\n    },\n\n    /** Hide wait message\n    */\n    unwait: function() {\n        var total = this._size();\n        if (total == 0) {\n            this._messageShow(this.options.error_text, 'danger');\n            this.$options.hide();\n            this.$menu.hide();\n        } else {\n            this._messageHide();\n            this.$options.css('display', 'inline-block');\n            this.$menu.show();\n        }\n    },\n\n    /** Return current selection\n    */\n    _getValue: function() {\n        // track values in array\n        var selected = [];\n        this.$(':checked').each(function() {\n            selected.push($(this).val());\n        });\n\n        // get selected elements\n        if (!Utils.validate(selected)) {\n            return null;\n        }\n\n        // return multiple or single value\n        if (this.options.multiple) {\n            return selected;\n        } else {\n            return selected[0];\n        }\n    },\n\n    /** Returns the number of options\n    */\n    _size: function() {\n        return this.$('.ui-option').length;\n    },\n\n    /** Show message instead if options\n    */\n    _messageShow: function(text, status) {\n        this.$message.show();\n        this.$message.removeClass();\n        this.$message.addClass('ui-message alert alert-' + status);\n        this.$message.html(text);\n    },\n\n    /** Hide message\n    */\n    _messageHide: function() {\n        this.$message.hide();\n    },\n\n    /** Main template function\n    */\n    _template: function() {\n        return '<div class=\"ui-options-list\"/>';\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function(pair) {\n        var id = Utils.uid();\n        return  '<div class=\"ui-option\">' +\n                    '<input id=\"' + id + '\" type=\"' + this.options.type + '\" name=\"' + this.options.id + '\" value=\"' + pair.value + '\"/>' +\n                    '<label class=\"ui-options-label\" for=\"' + id + '\">' + pair.label + '</label>' +\n                '</div>';\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function(options) {\n        options.multiple = true;\n        options.type = 'checkbox';\n        BaseIcons.prototype.initialize.call(this, options);\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    // initialize\n    initialize: function(options) {\n        Base.prototype.initialize.call(this, options);\n    },\n\n    /** Return/Set current value\n    */\n    value: function (new_value) {\n        // set new value\n        if (new_value !== undefined) {\n            this.$('input').prop('checked', false);\n            this.$('label').removeClass('active');\n            this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n        }\n\n        // get and return value\n        return this._getValue();\n    },\n\n    /** Template for a single option\n    */\n    _templateOption: function(pair) {\n        var cls = 'fa ' + pair.icon;\n        if (!pair.label) {\n            cls += ' no-padding';\n        }\n        var tmpl =  '<label class=\"btn btn-default\">';\n        if (pair.icon) {\n            tmpl +=     '<i class=\"' + cls + '\"/>';\n        }\n        tmpl +=         '<input type=\"radio\" name=\"' + this.options.id + '\" value=\"' + pair.value + '\"/>';\n        if (pair.label) {\n            tmpl +=         pair.label;\n        }\n        tmpl +=     '</label>';\n        return tmpl;\n    },\n\n    /** Main template function\n    */\n    _template: function() {\n        return '<div class=\"btn-group ui-radiobutton\" data-toggle=\"buttons\"/>';\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-options.js\n ** module id = 22\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// return\nvar View = Backbone.View.extend({\n    // defaults options\n    optionsDefault: {\n        title_new       : '',\n        operations      : null,\n        onnew           : null,\n        max             : null,\n        onchange        : null\n    },\n    \n    // initialize\n    initialize : function(options) {\n        // configure\n        this.visible    = false;\n        this.$nav       = null;\n        this.$content   = null;\n        this.first_tab  = null;\n        this.current_id = null;\n            \n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n        \n        // create tabs\n        var $tabs = $(this._template(this.options));\n        \n        // link elements\n        this.$nav       = $tabs.find('.tab-navigation');\n        this.$content   = $tabs.find('.tab-content');\n        \n        // create new element\n        this.setElement($tabs);\n        \n        // clear list\n        this.list = {};\n        \n        // link this\n        var self = this;\n            \n        // append operations\n        if (this.options.operations) {\n            $.each(this.options.operations, function(name, item) {\n                item.$el.prop('id', name);\n                self.$nav.find('.operations').append(item.$el);\n            });\n        }\n        \n        // add built-in add-new-tab tab\n        if (this.options.onnew) {\n            // create tab object\n            var $tab_new = $(this._template_tab_new(this.options));\n            \n            // append to navbar\n            this.$nav.append($tab_new);\n            \n            // add tooltip\n            $tab_new.tooltip({title: 'Add a new tab', placement: 'bottom', container: self.$el});\n            \n            // link click event\n            $tab_new.on('click', function(e) {\n                $tab_new.tooltip('hide');\n                self.options.onnew();\n            });\n        }\n    },\n    \n    // size\n    size: function() {\n        return _.size(this.list);\n    },\n    \n    // front\n    current: function() {\n        return this.$el.find('.tab-pane.active').attr('id');\n    },\n    \n    // append\n    add: function(options) {\n        // self\n        var self = this;\n            \n        // get tab id\n        var id = options.id;\n\n        // create tab object\n        var $tab_title      = $(this._template_tab(options));\n        var $tab_content    = $(this._template_tab_content(options));\n        \n        // add to list\n        this.list[id] = options.ondel ? true : false;\n            \n        // add a new tab either before the add-new-tab tab or behind the last tab\n        if (this.options.onnew) {\n            this.$nav.find('#new-tab').before($tab_title);\n        } else {\n            this.$nav.append($tab_title);\n        }\n        \n        // add content\n        $tab_content.append(options.$el);\n        this.$content.append($tab_content);\n        \n        // activate this tab if this is the first tab\n        if (this.size() == 1) {\n            $tab_title.addClass('active');\n            $tab_content.addClass('active');\n            this.first_tab = id;\n        }\n        \n        // hide add tab\n        if (this.options.max && this.size() >= this.options.max) {\n            this.$el.find('#new-tab').hide();\n        }\n        \n        // add click event to remove tab\n        if (options.ondel) {\n            var $del_icon = $tab_title.find('#delete');\n            $del_icon.tooltip({title: 'Delete this tab', placement: 'bottom', container: self.$el});\n            $del_icon.on('click', function() {\n                $del_icon.tooltip('destroy');\n                self.$el.find('.tooltip').remove();\n                options.ondel();\n                return false;\n            });\n        }\n        \n        // add custom click event handler\n        $tab_title.on('click', function(e) {\n            // prevent default\n            e.preventDefault();\n            \n            // click\n            if (options.onclick) {\n                options.onclick();\n            } else {\n                self.show(id);\n            }\n        });\n        \n        // initialize current id\n        if (!this.current_id) {\n            this.current_id = id;\n        }\n    },\n    \n    // delete tab\n    del: function(id) {\n        // delete tab from dom\n        this.$el.find('#tab-' + id).remove();\n        this.$el.find('#' + id).remove();\n        \n        // check if first tab has been deleted\n        if (this.first_tab == id) {\n            this.first_tab = null;\n        }\n        \n        // show first tab\n        if (this.first_tab != null) {\n            this.show(this.first_tab);\n        }\n        \n        // delete from list\n        if (this.list[id]) {\n            delete this.list[id];\n        }\n        \n        // show add tab\n        if (this.size() < this.options.max) {\n            this.$el.find('#new-tab').show();\n        }\n    },\n    \n    // delete tab\n    delRemovable: function() {\n        for (var id in this.list) {\n            this.del(id);\n        }\n    },\n    \n    // show\n    show: function(id){\n        // show tab view\n        this.$el.fadeIn('fast');\n        this.visible = true;\n        \n        // show selected tab\n        if (id) {\n            // reassign active class\n            this.$el.find('#tab-' + this.current_id).removeClass('active');\n            this.$el.find('#' + this.current_id).removeClass('active');\n            this.$el.find('#tab-' + id).addClass('active');\n            this.$el.find('#' + id).addClass('active');\n            \n            // update current id\n            this.current_id = id;\n        }\n        \n        // change\n        if (this.options.onchange) {\n            this.options.onchange(id);\n        }\n    },\n    \n    // hide\n    hide: function(){\n        this.$el.fadeOut('fast');\n        this.visible = false;\n    },\n\n    // hide operation\n    hideOperation: function(id) {\n        this.$nav.find('#' + id).hide();\n    },\n\n    // show operation\n    showOperation: function(id) {\n        this.$nav.find('#' + id).show();\n    },\n    \n    // set operation\n    setOperation: function(id, callback) {\n        var $el = this.$nav.find('#' + id);\n        $el.off('click');\n        $el.on('click', callback);\n    },\n    \n    // title\n    title: function(id, new_title) {\n        var $el = this.$el.find('#tab-title-text-' + id);\n        if (new_title) {\n            $el.html(new_title);\n        }\n        return $el.html();\n    },\n    \n    // retitle\n    retitle: function(new_title) {\n        var index = 0;\n        for (var id in this.list) {\n            this.title(id, ++index + ': ' + new_title);\n        }\n    },\n    \n    // fill template\n    _template: function(options) {\n        return  '<div class=\"ui-tabs tabbable tabs-left\">' +\n                    '<ul id=\"tab-navigation\" class=\"tab-navigation nav nav-tabs\">' +\n                        '<div class=\"operations\" style=\"float: right; margin-bottom: 4px;\"></div>' +\n                    '</ul>'+\n                    '<div id=\"tab-content\" class=\"tab-content\"/>' +\n                '</div>';\n    },\n    \n    // fill template tab\n    _template_tab_new: function(options) {\n        return  '<li id=\"new-tab\">' +\n                    '<a href=\"javascript:void(0);\">' +\n                        '<i class=\"ui-tabs-add fa fa-plus-circle\"/>' +\n                            options.title_new +\n                    '</a>' +\n                '</li>';\n    },\n    \n    // fill template tab\n    _template_tab: function(options) {\n        var tmpl =  '<li id=\"tab-' + options.id + '\" class=\"tab-element\">' +\n                        '<a id=\"tab-title-link-' + options.id + '\" title=\"\" href=\"#' + options.id + '\" data-original-title=\"\">' +\n                            '<span id=\"tab-title-text-' + options.id + '\" class=\"tab-title-text\">' + options.title + '</span>';\n        \n        if (options.ondel) {\n            tmpl +=         '<i id=\"delete\" class=\"ui-tabs-delete fa fa-minus-circle\"/>';\n        }\n        \n        tmpl +=         '</a>' +\n                    '</li>';\n        \n        return tmpl;\n    },\n    \n    // fill template tab content\n    _template_tab_content: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"tab-pane\"/>';\n    }\n});\n\nreturn {\n    View : View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-tabs.js\n ** module id = 27\n ** module chunks = 0 3\n **/","/**\n * Parser.js\n * Copyright 2012-13 Mayank Lahiri\n * mlahiri@gmail.com\n * Released under the BSD License.\n *\n * A forgiving Bibtex parser that can:\n * \n * (1) operate in streaming or block mode, extracting entries as dictionaries. \n * (2) convert Latex special characters to UTF-8.\n * (3) best-effort parse malformed entries.\n * (4) run in a CommonJS environment or a browser, without any dependencies.\n * (5) be advanced-compiled by Google Closure Compiler.\n * \n * Handwritten as a labor of love, not auto-generated from a grammar. \n *\n * Modes of usage:\n *\n * (1) Synchronous, string\n *\n *   var entries = BibtexParser(text);\n *   console.log(entries);\n *\n * (2) Asynchronous, stream\n *\n *   var entryCallback = function(entry) { console.log(entry); }\n *   var parser = new BibtexParser(entryCallback);\n *   parser.parse(chunk1);\n *   parser.parse(chunk2);\n *   ...\n * \n * @param {text|function(Object)} arg Either a Bibtex string or callback \n *                                    function for processing parsed entries.\n * @constructor\n */\nfunction BibtexParser(arg0) {\n  // Determine how this function is to be used\n  if (typeof arg0 == 'string') {\n    // Passed a string, synchronous call without 'new'\n    var tempStorage = {};\n    var entries = [];\n    function accumulator(entry) {\n      entries.push(entry);\n    }\n    var parser = BibtexParser.call(tempStorage, accumulator);\n    parser.parse(arg0);\n    return {\n      'entries':    entries,\n      'errors':     parser.getErrors()\n    }\n  }\n  if (typeof arg0 != 'function') {\n    throw 'Invalid parser construction.';\n  }\n\n  /** @enum {number} */\n  this.STATES_ = {\n    ENTRY_OR_JUNK:    0,\n    OBJECT_TYPE:      1,\n    ENTRY_KEY:        2, \n    KV_KEY:           3, \n    EQUALS:           4,\n    KV_VALUE:         5 \n  }\n  /** @private */ this.DATA_          = {};\n  /** @private */ this.CALLBACK_      = arg0;\n  /** @private */ this.CHAR_          = 0;\n  /** @private */ this.LINE_          = 1;\n  /** @private */ this.CHAR_IN_LINE_  = 0;\n  /** @private */ this.SKIPWS_        = true;\n  /** @private */ this.SKIPCOMMENT_   = true;\n  /** @private */ this.PARSETMP_      = {};\n  /** @private */ this.SKIPTILLEOL_   = false;\n  /** @private */ this.VALBRACES_     = null;\n  /** @private */ this.BRACETYPE_     = null;\n  /** @private */ this.BRACECOUNT_    = 0;\n  /** @private */ this.STATE_         = this.STATES_.ENTRY_OR_JUNK;\n  /** @private */ this.ERRORS_        = [];\n  /** @private */ this.ENTRY_TYPES_   = {\n    'inproceedings'     : 1,\n    'proceedings'       : 2,\n    'article'           : 3,\n    'techreport'        : 4,\n    'misc'              : 5,\n    'mastersthesis'     : 6,\n    'book'              : 7,\n    'phdthesis'         : 8,\n    'incollection'      : 9,\n    'unpublished'       : 10,\n    'inbook'            : 11,\n    'manual'            : 12,\n    'periodical'        : 13,\n    'booklet'           : 14,\n    'masterthesis'      : 15,\n    'conference'        : 16\n    ,'online'           : 998 // Galaxy MOD: Handle @online entries for preprints.\n    ,'data'             : 999 // Galaxy MOD: Handle @data citations coming from figshare.\n  }\n  /** @private */ this.MACROS_        = {\n    'jan'               : 'January',\n    'feb'               : 'February',\n    'mar'               : 'March',\n    'apr'               : 'April',\n    'may'               : 'May',\n    'jun'               : 'June',\n    'jul'               : 'July',\n    'aug'               : 'August',\n    'sep'               : 'September',\n    'oct'               : 'October',\n    'nov'               : 'November',\n    'dec'               : 'December',\n    'Jan'               : 'January',\n    'Feb'               : 'February',\n    'Mar'               : 'March',\n    'Apr'               : 'April',\n    'May'               : 'May',\n    'Jun'               : 'June',\n    'Jul'               : 'July',\n    'Aug'               : 'August',\n    'Sep'               : 'September',\n    'Oct'               : 'October',\n    'Nov'               : 'November',\n    'Dec'               : 'December'\n  }\n\n  /**\n   * Gets an array of all errors encountered during parsing.\n   * Array entries are of the format:\n   *  [ line number, character in line, character in stream, error text ]\n   *\n   * @returns Array<Array>\n   * @public\n   */\n  this.getErrors = function() {\n    return this.ERRORS_;\n  }\n\n  /**\n   * Processes a chunk of data\n   * @public\n   */\n  this.parse = function(chunk) {\n    for (var i = 0; i < chunk.length; i++)\n      this.processCharacter_(chunk[i]);\n  }\n\n  /**\n   * Logs error at current stream position.\n   *\n   * @private\n   */\n  this.error_ = function(text) {\n    this.ERRORS_.push([ this.LINE_, \n                        this.CHAR_IN_LINE_,\n                        this.CHAR_,\n                        text ])\n  }\n\n  /**\n   * Called after an entire entry has been parsed from the stream.\n   * Performs post-processing and invokes the entry callback pointed to by\n   * this.CALLBACK_. Parsed (but unprocessed) entry data is in this.DATA_.\n   */\n  this.processEntry_ = function() {\n    var data = this.DATA_;\n    if (data.Fields) \n      for (var f in data.Fields) {\n        var raw = data.Fields[f];\n\n        // Convert Latex/Bibtex special characters to UTF-8 equivalents\n        for (var i = 0; i < this.CHARCONV_.length; i++) {\n          var re = this.CHARCONV_[i][0];\n          var rep = this.CHARCONV_[i][1];\n          raw = raw.replace(re, rep);\n        }\n\n        // Basic substitutions\n        raw = raw.replace(/[\\n\\r\\t]/g, ' ')\n                 .replace(/\\s\\s+/g, ' ')\n                 .replace(/^\\s+|\\s+$/g, '')\n\n        // Remove braces and backslashes\n        var len = raw.length;\n        var processed = '';\n        for (var i = 0; i < len; i++) {\n          var c = raw[i];\n          var skip = false;\n          if (c == '\\\\' && i < len-1) \n            c = raw[++i];\n          else {\n            if (c == '{' || c == '}')\n              skip = true;\n          }\n          if (!skip)\n            processed += c;\n        }\n        data.Fields[f] = processed\n      }\n\n    if (data.ObjectType == 'string') {\n      for (var f in data.Fields) {  \n        this.MACROS_[f] = data.Fields[f];\n      }\n    } else {\n      // Parsed a new Bibtex entry\n      this.CALLBACK_(data);\n    }\n  }\n\n\n  /**\n   * Processes next character in the stream, invoking the callback after \n   * each entry has been found and processed.\n   * \n   * @private\n   * @param {string} c Next character in input stream\n   */\n  this.processCharacter_ = function(c) {\n    // Housekeeping\n    this.CHAR_++;\n    this.CHAR_IN_LINE_++;\n    if (c == '\\n') {\n      this.LINE_++;\n      this.CHAR_IN_LINE_ = 1;\n    }\n\n    // Convenience states for skipping whitespace when needed\n    if (this.SKIPTILLEOL_) {\n      if (c == '\\n')\n        this.SKIPTILLEOL_ = false;\n      return;\n    }\n    if (this.SKIPCOMMENT_ && c == '%') {\n      this.SKIPTILLEOL_ = true;\n      return;\n    }\n    if (this.SKIPWS_ && /\\s/.test(c))\n      return;\n    this.SKIPWS_ = false;\n    this.SKIPCOMMENT_ = false;\n    this.SKIPTILLEOL_ = false;\n\n    // Main state machine\n    var AnotherIteration = true;\n    while (AnotherIteration) {\n      //console.log(this.LINE_, this.CHAR_IN_LINE_, this.STATE_, c)\n      AnotherIteration = false;\n      switch(this.STATE_) {\n        // -- Scan for an object marker ('@')\n        // -- Reset temporary data structure in case previous entry was garbled\n        case this.STATES_.ENTRY_OR_JUNK:\n          if (c == '@') {\n            // SUCCESS:     Parsed a valid start-of-object marker.\n            // NEXT_STATE:  OBJECT_TYPE\n            this.STATE_ = this.STATES_.OBJECT_TYPE;\n            this.DATA_ = {\n              ObjectType    : ''\n            };\n          }\n          this.BRACETYPE_   = null;\n          this.SKIPWS_      = true;\n          this.SKIPCOMMENT_ = true;\n          break;\n\n        // Start at first non-whitespace character after start-of-object '@'\n        // -- Accept [A-Za-z], break on non-matching character\n        // -- Populate this.DATA_.EntryType and this.DATA_.ObjectType\n        case this.STATES_.OBJECT_TYPE:\n          if (/[A-Za-z]/.test(c)) {\n            this.DATA_.ObjectType += c.toLowerCase();\n            this.SKIPWS_      = true;\n            this.SKIPCOMMENT_ = true;\n          } else {\n            // Break from state and validate object type\n            var ot = this.DATA_.ObjectType;\n            if (ot == 'comment') {\n              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n            } else {\n              if (ot == 'string') {\n                this.DATA_.ObjectType = ot;\n                this.DATA_.Fields = {};\n                this.BRACETYPE_ = c;\n                this.BRACECOUNT_ = 1;\n                this.STATE_ = this.STATES_.KV_KEY;\n                this.SKIPWS_      = true;\n                this.SKIPCOMMENT_ = true;\n                this.PARSETMP_ = {\n                  Key:    ''\n                }\n              } else {\n                if (ot == 'preamble') {\n                  this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n                } else {\n                  if (ot in this.ENTRY_TYPES_) {\n                    // SUCCESS:     Parsed a valid object type.\n                    // NEXT_STATE:  ENTRY_KEY\n                    this.DATA_.ObjectType = 'entry';\n                    this.DATA_.EntryType  = ot;\n                    this.DATA_.EntryKey   = '';\n                    this.STATE_           = this.STATES_.ENTRY_KEY;\n                    AnotherIteration      = true;\n                  } else {\n                    // ERROR:       Unrecognized object type.\n                    // NEXT_STATE:  ENTRY_OR_JUNK\n                    this.error_('Unrecognized object type: \"' +\n                                this.DATA_.ObjectType + '\"')\n                    this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n                  }\n                }\n              }\n            }\n          }\n          break;\n\n          // Start at first non-alphabetic character after an entry type\n          // -- Populate this.DATA_.EntryKey\n          case this.STATES_.ENTRY_KEY:\n            if ((c === '{' || c === '(') && this.BRACETYPE_ == null) {\n              this.BRACETYPE_   = c;\n              this.BRACECOUNT_  = 1;\n              this.SKIPWS_      = true;\n              this.SKIPCOMMENT_ = true;\n              break;\n            }\n            if (/[,%\\s]/.test(c)) {\n              if (this.DATA_.EntryKey.length < 1) { \n                // Skip comments and whitespace before entry key\n                this.SKIPWS_      = true;\n                this.SKIPCOMMENT_ = true;\n              } else {\n                if (this.BRACETYPE_ == null) {\n                  // ERROR:       No opening brace for object\n                  // NEXT_STATE:  ENTRY_OR_JUNK\n                  this.error_('No opening brace for object.');\n                  this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n                } else {\n                  // SUCCESS:     Parsed an entry key\n                  // NEXT_STATE:  KV_KEY\n                  this.SKIPWS_      = true;\n                  this.SKIPCOMMENT_ = true;\n                  AnotherIteration  = true;\n                  this.STATE_       = this.STATES_.KV_KEY;\n                  this.PARSETMP_.Key= '';\n                  this.DATA_.Fields = {};\n                }\n              }\n            } else {\n              this.DATA_.EntryKey += c;\n              this.SKIPWS_        = false;\n              this.SKIPCOMMENT_   = false;\n            }\n            break;\n\n          // Start at first non-whitespace/comment character after entry key.\n          // -- Populate this.PARSETMP_.Key\n          case this.STATES_.KV_KEY:\n            // Test for end of entry\n            if ((c == '}' && this.BRACETYPE_ == '{') ||\n                (c == ')' && this.BRACETYPE_ == '(')) {\n              // SUCCESS:       Parsed an entry, possible incomplete\n              // NEXT_STATE:    ENTRY_OR_JUNK\n              this.processEntry_();\n              this.SKIPWS_      = true;\n              this.SKIPCOMMENT_ = true;\n              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n              break;\n            }\n            if (/[\\-A-Za-z:]/.test(c)) {\n              // Add to key\n              this.PARSETMP_.Key  += c;\n              this.SKIPWS_        = false;\n              this.SKIPCOMMENT_   = false;\n            } else {\n              // Either end of key or we haven't encountered start of key\n              if (this.PARSETMP_.Key.length < 1) {\n                // Keep going till we see a key\n                this.SKIPWS_      = true;\n                this.SKIPCOMMENT_ = true;\n              } else {\n                // SUCCESS:       Found full key in K/V pair\n                // NEXT_STATE:    EQUALS\n                this.SKIPWS_      = true;\n                this.SKIPCOMMENT_ = true;\n                this.STATE_       = this.STATES_.EQUALS;\n                AnotherIteration  = true;\n              }\n            }\n            break;\n\n          // Start at first non-alphabetic character after K/V pair key.\n          case this.STATES_.EQUALS:\n            if ((c == '}' && this.BRACETYPE_ == '{') ||\n                (c == ')' && this.BRACETYPE_ == '(')) {\n              // ERROR:         K/V pair with key but no value\n              // NEXT_STATE:    ENTRY_OR_JUNK\n              this.error_('Key-value pair has key \"' +\n                          this.PARSETMP_.Key + '\", but no value.');\n              this.processEntry_();\n              this.SKIPWS_      = true;\n              this.SKIPCOMMENT_ = true;\n              this.STATE_ = this.STATES_.ENTRY_OR_JUNK;\n              break;\n            }\n            if (c == '=') {\n              // SUCCESS:       found an equal signs separating key and value\n              // NEXT_STATE:    KV_VALUE\n              this.SKIPWS_          = true;\n              this.SKIPCOMMENT_     = true;\n              this.STATE_           = this.STATES_.KV_VALUE;\n              this.PARSETMP_.Value  = '';\n              this.VALBRACES_       = { '\"' : [], '{' : [] };\n            }\n            break;\n\n          // Start at first non-whitespace/comment character after '=' \n          // -- Populate this.PARSETMP_.Value\n          case this.STATES_.KV_VALUE:\n            var delim             = this.VALBRACES_;\n            var val               = this.PARSETMP_.Value;\n            var doneParsingValue  = false;\n\n            // Test for special characters\n            if (c == '\"' || c == '{' || c == '}' || c == ',') {\n              if (c == ',') {\n                // This comma can mean:\n                // (1) just another comma literal\n                // (2) end of a macro reference\n                if (0 === delim['\"'].length + delim['{'].length) {\n                  // end of a macro reference\n                  var macro = this.PARSETMP_.Value.trim();\n                  if (macro in this.MACROS_) {\n                    // Successful macro reference\n                    this.PARSETMP_.Value = this.MACROS_[macro];\n                  } else {\n                    // Reference to an undefined macro\n                    this.error_('Reference to an undefined macro: '+macro);\n                  }\n                  doneParsingValue = true;\n                }\n              }\n              if (c == '\"') {\n                // This quote can mean:\n                // (1) opening delimiter\n                // (2) closing delimiter\n                // (3) literal, if we have a '{' on the stack\n                if (0 === delim['\"'].length + delim['{'].length) {\n                  // opening delimiter\n                  delim['\"'].push(this.CHAR_)\n                  this.SKIPWS_        = false;\n                  this.SKIPCOMMENT_   = false;\n                  break;\n                }\n                if (delim['\"'].length == 1 && delim['{'].length == 0 &&\n                    (val.length==0 || val[val.length-1] != '\\\\')) {\n                  // closing delimiter\n                  doneParsingValue = true;\n                } else {\n                  // literal, add to value\n                }\n              }\n              if (c == '{') {\n                // This brace can mean:\n                // (1) opening delimiter\n                // (2) stacked verbatim delimiter\n                if (val.length == 0 || val[val.length-1] != '\\\\') {\n                  delim['{'].push(this.CHAR_)\n                  this.SKIPWS_        = false;\n                  this.SKIPCOMMENT_   = false;\n                } else {\n                  // literal, add to value\n                }\n              }\n              if (c == '}') {\n                // This brace can mean:\n                // (1) closing delimiter\n                // (2) closing stacked verbatim delimiter\n                // (3) end of object definition if value was a macro\n                if (0 === delim['\"'].length + delim['{'].length) {\n                  // end of object definition, after macro\n                  var macro = this.PARSETMP_.Value.trim();\n                  if (macro in this.MACROS_) {\n                    // Successful macro reference\n                    this.PARSETMP_.Value = this.MACROS_[macro];\n                  } else {\n                    // Reference to an undefined macro\n                    this.error_('Reference to an undefined macro: '+macro);\n                  }\n                  AnotherIteration = true;\n                  doneParsingValue = true;\n                } else {\n                  if (val.length == 0 || val[val.length-1] != '\\\\') {\n                    if (delim['{'].length > 0) {\n                      // pop stack for stacked verbatim delimiter\n                      delim['{'].splice(delim['{'].length-1, 1)\n                      if (0 == delim['{'].length + delim['\"'].length) {\n                        // closing delimiter\n                        doneParsingValue = true;\n                      } else {\n                        // end verbatim block\n                      }\n                    }\n                  } else {\n                    // literal, add to value\n                  }\n                }\n              }\n            }\n\n            // If here, then we are either done parsing the value or \n            // have a literal that should be added to the value.\n            if (doneParsingValue) {\n              // SUCCESS:     value parsed\n              // NEXT_STATE:  KV_KEY\n              this.SKIPWS_        = true;\n              this.SKIPCOMMENT_   = true;\n              this.STATE_         = this.STATES_.KV_KEY;\n              this.DATA_.Fields[this.PARSETMP_.Key] = this.PARSETMP_.Value;\n              this.PARSETMP_      = { Key: '' };\n              this.VALBRACES_     = null;\n            } else {\n              this.PARSETMP_.Value += c;\n            }\n            break;\n      } // end switch (this.STATE_)\n    } // end while(AnotherIteration)\n  } // end function processCharacter \n\n  /** @private */ this.CHARCONV_ = [\n    [ /\\\\space /g, '\\u0020' ],\n    [ /\\\\textdollar /g, '\\u0024' ],\n    [ /\\\\textquotesingle /g, '\\u0027' ],\n    [ /\\\\ast /g, '\\u002A' ],\n    [ /\\\\textbackslash /g, '\\u005C' ],\n    [ /\\\\\\^\\{\\}/g, '\\u005E' ],\n    [ /\\\\textasciigrave /g, '\\u0060' ],\n    [ /\\\\lbrace /g, '\\u007B' ],\n    [ /\\\\vert /g, '\\u007C' ],\n    [ /\\\\rbrace /g, '\\u007D' ],\n    [ /\\\\textasciitilde /g, '\\u007E' ],\n    [ /\\\\textexclamdown /g, '\\u00A1' ],\n    [ /\\\\textcent /g, '\\u00A2' ],\n    [ /\\\\textsterling /g, '\\u00A3' ],\n    [ /\\\\textcurrency /g, '\\u00A4' ],\n    [ /\\\\textyen /g, '\\u00A5' ],\n    [ /\\\\textbrokenbar /g, '\\u00A6' ],\n    [ /\\\\textsection /g, '\\u00A7' ],\n    [ /\\\\textasciidieresis /g, '\\u00A8' ],\n    [ /\\\\textcopyright /g, '\\u00A9' ],\n    [ /\\\\textordfeminine /g, '\\u00AA' ],\n    [ /\\\\guillemotleft /g, '\\u00AB' ],\n    [ /\\\\lnot /g, '\\u00AC' ],\n    [ /\\\\textregistered /g, '\\u00AE' ],\n    [ /\\\\textasciimacron /g, '\\u00AF' ],\n    [ /\\\\textdegree /g, '\\u00B0' ],\n    [ /\\\\pm /g, '\\u00B1' ],\n    [ /\\\\textasciiacute /g, '\\u00B4' ],\n    [ /\\\\mathrm\\{\\\\mu\\}/g, '\\u00B5' ],\n    [ /\\\\textparagraph /g, '\\u00B6' ],\n    [ /\\\\cdot /g, '\\u00B7' ],\n    [ /\\\\c\\{\\}/g, '\\u00B8' ],\n    [ /\\\\textordmasculine /g, '\\u00BA' ],\n    [ /\\\\guillemotright /g, '\\u00BB' ],\n    [ /\\\\textonequarter /g, '\\u00BC' ],\n    [ /\\\\textonehalf /g, '\\u00BD' ],\n    [ /\\\\textthreequarters /g, '\\u00BE' ],\n    [ /\\\\textquestiondown /g, '\\u00BF' ],\n    [ /\\\\`\\{A\\}/g, '\\u00C0' ],\n    [ /\\\\'\\{A\\}/g, '\\u00C1' ],\n    [ /\\\\\\^\\{A\\}/g, '\\u00C2' ],\n    [ /\\\\~\\{A\\}/g, '\\u00C3' ],\n    [ /\\\\\"\\{A\\}/g, '\\u00C4' ],\n    [ /\\\\AA /g, '\\u00C5' ],\n    [ /\\\\AE /g, '\\u00C6' ],\n    [ /\\\\c\\{C\\}/g, '\\u00C7' ],\n    [ /\\\\`\\{E\\}/g, '\\u00C8' ],\n    [ /\\\\'\\{E\\}/g, '\\u00C9' ],\n    [ /\\\\\\^\\{E\\}/g, '\\u00CA' ],\n    [ /\\\\\"\\{E\\}/g, '\\u00CB' ],\n    [ /\\\\`\\{I\\}/g, '\\u00CC' ],\n    [ /\\\\'\\{I\\}/g, '\\u00CD' ],\n    [ /\\\\\\^\\{I\\}/g, '\\u00CE' ],\n    [ /\\\\\"\\{I\\}/g, '\\u00CF' ],\n    [ /\\\\DH /g, '\\u00D0' ],\n    [ /\\\\~\\{N\\}/g, '\\u00D1' ],\n    [ /\\\\`\\{O\\}/g, '\\u00D2' ],\n    [ /\\\\'\\{O\\}/g, '\\u00D3' ],\n    [ /\\\\\\^\\{O\\}/g, '\\u00D4' ],\n    [ /\\\\~\\{O\\}/g, '\\u00D5' ],\n    [ /\\\\\"\\{O\\}/g, '\\u00D6' ],\n    [ /\\\\texttimes /g, '\\u00D7' ],\n    [ /\\\\O /g, '\\u00D8' ],\n    [ /\\\\`\\{U\\}/g, '\\u00D9' ],\n    [ /\\\\'\\{U\\}/g, '\\u00DA' ],\n    [ /\\\\\\^\\{U\\}/g, '\\u00DB' ],\n    [ /\\\\\"\\{U\\}/g, '\\u00DC' ],\n    [ /\\\\'\\{Y\\}/g, '\\u00DD' ],\n    [ /\\\\TH /g, '\\u00DE' ],\n    [ /\\\\ss /g, '\\u00DF' ],\n    [ /\\\\`\\{a\\}/g, '\\u00E0' ],\n    [ /\\\\'\\{a\\}/g, '\\u00E1' ],\n    [ /\\\\\\^\\{a\\}/g, '\\u00E2' ],\n    [ /\\\\~\\{a\\}/g, '\\u00E3' ],\n    [ /\\\\\"\\{a\\}/g, '\\u00E4' ],\n    [ /\\\\aa /g, '\\u00E5' ],\n    [ /\\\\ae /g, '\\u00E6' ],\n    [ /\\\\c\\{c\\}/g, '\\u00E7' ],\n    [ /\\\\`\\{e\\}/g, '\\u00E8' ],\n    [ /\\\\'\\{e\\}/g, '\\u00E9' ],\n    [ /\\\\\\^\\{e\\}/g, '\\u00EA' ],\n    [ /\\\\\"\\{e\\}/g, '\\u00EB' ],\n    [ /\\\\`\\{\\\\i\\}/g, '\\u00EC' ],\n    [ /\\\\'\\{\\\\i\\}/g, '\\u00ED' ],\n    [ /\\\\\\^\\{\\\\i\\}/g, '\\u00EE' ],\n    [ /\\\\\"\\{\\\\i\\}/g, '\\u00EF' ],\n    [ /\\\\dh /g, '\\u00F0' ],\n    [ /\\\\~\\{n\\}/g, '\\u00F1' ],\n    [ /\\\\`\\{o\\}/g, '\\u00F2' ],\n    [ /\\\\'\\{o\\}/g, '\\u00F3' ],\n    [ /\\\\\\^\\{o\\}/g, '\\u00F4' ],\n    [ /\\\\~\\{o\\}/g, '\\u00F5' ],\n    [ /\\\\\"\\{o\\}/g, '\\u00F6' ],\n    [ /\\\\div /g, '\\u00F7' ],\n    [ /\\\\o /g, '\\u00F8' ],\n    [ /\\\\`\\{u\\}/g, '\\u00F9' ],\n    [ /\\\\'\\{u\\}/g, '\\u00FA' ],\n    [ /\\\\\\^\\{u\\}/g, '\\u00FB' ],\n    [ /\\\\\"\\{u\\}/g, '\\u00FC' ],\n    [ /\\\\'\\{y\\}/g, '\\u00FD' ],\n    [ /\\\\th /g, '\\u00FE' ],\n    [ /\\\\\"\\{y\\}/g, '\\u00FF' ],\n    [ /\\\\=\\{A\\}/g, '\\u0100' ],\n    [ /\\\\=\\{a\\}/g, '\\u0101' ],\n    [ /\\\\u\\{A\\}/g, '\\u0102' ],\n    [ /\\\\u\\{a\\}/g, '\\u0103' ],\n    [ /\\\\k\\{A\\}/g, '\\u0104' ],\n    [ /\\\\k\\{a\\}/g, '\\u0105' ],\n    [ /\\\\'\\{C\\}/g, '\\u0106' ],\n    [ /\\\\'\\{c\\}/g, '\\u0107' ],\n    [ /\\\\\\^\\{C\\}/g, '\\u0108' ],\n    [ /\\\\\\^\\{c\\}/g, '\\u0109' ],\n    [ /\\\\.\\{C\\}/g, '\\u010A' ],\n    [ /\\\\.\\{c\\}/g, '\\u010B' ],\n    [ /\\\\v\\{C\\}/g, '\\u010C' ],\n    [ /\\\\v\\{c\\}/g, '\\u010D' ],\n    [ /\\\\v\\{D\\}/g, '\\u010E' ],\n    [ /\\\\v\\{d\\}/g, '\\u010F' ],\n    [ /\\\\DJ /g, '\\u0110' ],\n    [ /\\\\dj /g, '\\u0111' ],\n    [ /\\\\=\\{E\\}/g, '\\u0112' ],\n    [ /\\\\=\\{e\\}/g, '\\u0113' ],\n    [ /\\\\u\\{E\\}/g, '\\u0114' ],\n    [ /\\\\u\\{e\\}/g, '\\u0115' ],\n    [ /\\\\.\\{E\\}/g, '\\u0116' ],\n    [ /\\\\.\\{e\\}/g, '\\u0117' ],\n    [ /\\\\k\\{E\\}/g, '\\u0118' ],\n    [ /\\\\k\\{e\\}/g, '\\u0119' ],\n    [ /\\\\v\\{E\\}/g, '\\u011A' ],\n    [ /\\\\v\\{e\\}/g, '\\u011B' ],\n    [ /\\\\\\^\\{G\\}/g, '\\u011C' ],\n    [ /\\\\\\^\\{g\\}/g, '\\u011D' ],\n    [ /\\\\u\\{G\\}/g, '\\u011E' ],\n    [ /\\\\u\\{g\\}/g, '\\u011F' ],\n    [ /\\\\.\\{G\\}/g, '\\u0120' ],\n    [ /\\\\.\\{g\\}/g, '\\u0121' ],\n    [ /\\\\c\\{G\\}/g, '\\u0122' ],\n    [ /\\\\c\\{g\\}/g, '\\u0123' ],\n    [ /\\\\\\^\\{H\\}/g, '\\u0124' ],\n    [ /\\\\\\^\\{h\\}/g, '\\u0125' ],\n    [ /\\\\Elzxh /g, '\\u0127' ],\n    [ /\\\\~\\{I\\}/g, '\\u0128' ],\n    [ /\\\\~\\{\\\\i\\}/g, '\\u0129' ],\n    [ /\\\\=\\{I\\}/g, '\\u012A' ],\n    [ /\\\\=\\{\\\\i\\}/g, '\\u012B' ],\n    [ /\\\\u\\{I\\}/g, '\\u012C' ],\n    [ /\\\\u\\{\\\\i\\}/g, '\\u012D' ],\n    [ /\\\\k\\{I\\}/g, '\\u012E' ],\n    [ /\\\\k\\{i\\}/g, '\\u012F' ],\n    [ /\\\\.\\{I\\}/g, '\\u0130' ],\n    [ /\\\\i /g, '\\u0131' ],\n    [ /\\\\\\^\\{J\\}/g, '\\u0134' ],\n    [ /\\\\\\^\\{\\\\j\\}/g, '\\u0135' ],\n    [ /\\\\c\\{K\\}/g, '\\u0136' ],\n    [ /\\\\c\\{k\\}/g, '\\u0137' ],\n    [ /\\\\'\\{L\\}/g, '\\u0139' ],\n    [ /\\\\'\\{l\\}/g, '\\u013A' ],\n    [ /\\\\c\\{L\\}/g, '\\u013B' ],\n    [ /\\\\c\\{l\\}/g, '\\u013C' ],\n    [ /\\\\v\\{L\\}/g, '\\u013D' ],\n    [ /\\\\v\\{l\\}/g, '\\u013E' ],\n    [ /\\\\L /g, '\\u0141' ],\n    [ /\\\\l /g, '\\u0142' ],\n    [ /\\\\'\\{N\\}/g, '\\u0143' ],\n    [ /\\\\'\\{n\\}/g, '\\u0144' ],\n    [ /\\\\c\\{N\\}/g, '\\u0145' ],\n    [ /\\\\c\\{n\\}/g, '\\u0146' ],\n    [ /\\\\v\\{N\\}/g, '\\u0147' ],\n    [ /\\\\v\\{n\\}/g, '\\u0148' ],\n    [ /\\\\NG /g, '\\u014A' ],\n    [ /\\\\ng /g, '\\u014B' ],\n    [ /\\\\=\\{O\\}/g, '\\u014C' ],\n    [ /\\\\=\\{o\\}/g, '\\u014D' ],\n    [ /\\\\u\\{O\\}/g, '\\u014E' ],\n    [ /\\\\u\\{o\\}/g, '\\u014F' ],\n    [ /\\\\H\\{O\\}/g, '\\u0150' ],\n    [ /\\\\H\\{o\\}/g, '\\u0151' ],\n    [ /\\\\OE /g, '\\u0152' ],\n    [ /\\\\oe /g, '\\u0153' ],\n    [ /\\\\'\\{R\\}/g, '\\u0154' ],\n    [ /\\\\'\\{r\\}/g, '\\u0155' ],\n    [ /\\\\c\\{R\\}/g, '\\u0156' ],\n    [ /\\\\c\\{r\\}/g, '\\u0157' ],\n    [ /\\\\v\\{R\\}/g, '\\u0158' ],\n    [ /\\\\v\\{r\\}/g, '\\u0159' ],\n    [ /\\\\'\\{S\\}/g, '\\u015A' ],\n    [ /\\\\'\\{s\\}/g, '\\u015B' ],\n    [ /\\\\\\^\\{S\\}/g, '\\u015C' ],\n    [ /\\\\\\^\\{s\\}/g, '\\u015D' ],\n    [ /\\\\c\\{S\\}/g, '\\u015E' ],\n    [ /\\\\c\\{s\\}/g, '\\u015F' ],\n    [ /\\\\v\\{S\\}/g, '\\u0160' ],\n    [ /\\\\v\\{s\\}/g, '\\u0161' ],\n    [ /\\\\c\\{T\\}/g, '\\u0162' ],\n    [ /\\\\c\\{t\\}/g, '\\u0163' ],\n    [ /\\\\v\\{T\\}/g, '\\u0164' ],\n    [ /\\\\v\\{t\\}/g, '\\u0165' ],\n    [ /\\\\~\\{U\\}/g, '\\u0168' ],\n    [ /\\\\~\\{u\\}/g, '\\u0169' ],\n    [ /\\\\=\\{U\\}/g, '\\u016A' ],\n    [ /\\\\=\\{u\\}/g, '\\u016B' ],\n    [ /\\\\u\\{U\\}/g, '\\u016C' ],\n    [ /\\\\u\\{u\\}/g, '\\u016D' ],\n    [ /\\\\r\\{U\\}/g, '\\u016E' ],\n    [ /\\\\r\\{u\\}/g, '\\u016F' ],\n    [ /\\\\H\\{U\\}/g, '\\u0170' ],\n    [ /\\\\H\\{u\\}/g, '\\u0171' ],\n    [ /\\\\k\\{U\\}/g, '\\u0172' ],\n    [ /\\\\k\\{u\\}/g, '\\u0173' ],\n    [ /\\\\\\^\\{W\\}/g, '\\u0174' ],\n    [ /\\\\\\^\\{w\\}/g, '\\u0175' ],\n    [ /\\\\\\^\\{Y\\}/g, '\\u0176' ],\n    [ /\\\\\\^\\{y\\}/g, '\\u0177' ],\n    [ /\\\\\"\\{Y\\}/g, '\\u0178' ],\n    [ /\\\\'\\{Z\\}/g, '\\u0179' ],\n    [ /\\\\'\\{z\\}/g, '\\u017A' ],\n    [ /\\\\.\\{Z\\}/g, '\\u017B' ],\n    [ /\\\\.\\{z\\}/g, '\\u017C' ],\n    [ /\\\\v\\{Z\\}/g, '\\u017D' ],\n    [ /\\\\v\\{z\\}/g, '\\u017E' ],\n    [ /\\\\texthvlig /g, '\\u0195' ],\n    [ /\\\\textnrleg /g, '\\u019E' ],\n    [ /\\\\eth /g, '\\u01AA' ],\n    [ /\\\\textdoublepipe /g, '\\u01C2' ],\n    [ /\\\\'\\{g\\}/g, '\\u01F5' ],\n    [ /\\\\Elztrna /g, '\\u0250' ],\n    [ /\\\\Elztrnsa /g, '\\u0252' ],\n    [ /\\\\Elzopeno /g, '\\u0254' ],\n    [ /\\\\Elzrtld /g, '\\u0256' ],\n    [ /\\\\Elzschwa /g, '\\u0259' ],\n    [ /\\\\varepsilon /g, '\\u025B' ],\n    [ /\\\\Elzpgamma /g, '\\u0263' ],\n    [ /\\\\Elzpbgam /g, '\\u0264' ],\n    [ /\\\\Elztrnh /g, '\\u0265' ],\n    [ /\\\\Elzbtdl /g, '\\u026C' ],\n    [ /\\\\Elzrtll /g, '\\u026D' ],\n    [ /\\\\Elztrnm /g, '\\u026F' ],\n    [ /\\\\Elztrnmlr /g, '\\u0270' ],\n    [ /\\\\Elzltlmr /g, '\\u0271' ],\n    [ /\\\\Elzltln /g, '\\u0272' ],\n    [ /\\\\Elzrtln /g, '\\u0273' ],\n    [ /\\\\Elzclomeg /g, '\\u0277' ],\n    [ /\\\\textphi /g, '\\u0278' ],\n    [ /\\\\Elztrnr /g, '\\u0279' ],\n    [ /\\\\Elztrnrl /g, '\\u027A' ],\n    [ /\\\\Elzrttrnr /g, '\\u027B' ],\n    [ /\\\\Elzrl /g, '\\u027C' ],\n    [ /\\\\Elzrtlr /g, '\\u027D' ],\n    [ /\\\\Elzfhr /g, '\\u027E' ],\n    [ /\\\\Elzrtls /g, '\\u0282' ],\n    [ /\\\\Elzesh /g, '\\u0283' ],\n    [ /\\\\Elztrnt /g, '\\u0287' ],\n    [ /\\\\Elzrtlt /g, '\\u0288' ],\n    [ /\\\\Elzpupsil /g, '\\u028A' ],\n    [ /\\\\Elzpscrv /g, '\\u028B' ],\n    [ /\\\\Elzinvv /g, '\\u028C' ],\n    [ /\\\\Elzinvw /g, '\\u028D' ],\n    [ /\\\\Elztrny /g, '\\u028E' ],\n    [ /\\\\Elzrtlz /g, '\\u0290' ],\n    [ /\\\\Elzyogh /g, '\\u0292' ],\n    [ /\\\\Elzglst /g, '\\u0294' ],\n    [ /\\\\Elzreglst /g, '\\u0295' ],\n    [ /\\\\Elzinglst /g, '\\u0296' ],\n    [ /\\\\textturnk /g, '\\u029E' ],\n    [ /\\\\Elzdyogh /g, '\\u02A4' ],\n    [ /\\\\Elztesh /g, '\\u02A7' ],\n    [ /\\\\textasciicaron /g, '\\u02C7' ],\n    [ /\\\\Elzverts /g, '\\u02C8' ],\n    [ /\\\\Elzverti /g, '\\u02CC' ],\n    [ /\\\\Elzlmrk /g, '\\u02D0' ],\n    [ /\\\\Elzhlmrk /g, '\\u02D1' ],\n    [ /\\\\Elzsbrhr /g, '\\u02D2' ],\n    [ /\\\\Elzsblhr /g, '\\u02D3' ],\n    [ /\\\\Elzrais /g, '\\u02D4' ],\n    [ /\\\\Elzlow /g, '\\u02D5' ],\n    [ /\\\\textasciibreve /g, '\\u02D8' ],\n    [ /\\\\textperiodcentered /g, '\\u02D9' ],\n    [ /\\\\r\\{\\}/g, '\\u02DA' ],\n    [ /\\\\k\\{\\}/g, '\\u02DB' ],\n    [ /\\\\texttildelow /g, '\\u02DC' ],\n    [ /\\\\H\\{\\}/g, '\\u02DD' ],\n    [ /\\\\tone\\{55\\}/g, '\\u02E5' ],\n    [ /\\\\tone\\{44\\}/g, '\\u02E6' ],\n    [ /\\\\tone\\{33\\}/g, '\\u02E7' ],\n    [ /\\\\tone\\{22\\}/g, '\\u02E8' ],\n    [ /\\\\tone\\{11\\}/g, '\\u02E9' ],\n    [ /\\\\cyrchar\\\\C/g, '\\u030F' ],\n    [ /\\\\Elzpalh /g, '\\u0321' ],\n    [ /\\\\Elzrh /g, '\\u0322' ],\n    [ /\\\\Elzsbbrg /g, '\\u032A' ],\n    [ /\\\\Elzxl /g, '\\u0335' ],\n    [ /\\\\Elzbar /g, '\\u0336' ],\n    [ /\\\\'\\{A\\}/g, '\\u0386' ],\n    [ /\\\\'\\{E\\}/g, '\\u0388' ],\n    [ /\\\\'\\{H\\}/g, '\\u0389' ],\n    [ /\\\\'\\{\\}\\{I\\}/g, '\\u038A' ],\n    [ /\\\\'\\{\\}O/g, '\\u038C' ],\n    [ /\\\\mathrm\\{'Y\\}/g, '\\u038E' ],\n    [ /\\\\mathrm\\{'\\\\Omega\\}/g, '\\u038F' ],\n    [ /\\\\acute\\{\\\\ddot\\{\\\\iota\\}\\}/g, '\\u0390' ],\n    [ /\\\\Alpha /g, '\\u0391' ],\n    [ /\\\\Beta /g, '\\u0392' ],\n    [ /\\\\Gamma /g, '\\u0393' ],\n    [ /\\\\Delta /g, '\\u0394' ],\n    [ /\\\\Epsilon /g, '\\u0395' ],\n    [ /\\\\Zeta /g, '\\u0396' ],\n    [ /\\\\Eta /g, '\\u0397' ],\n    [ /\\\\Theta /g, '\\u0398' ],\n    [ /\\\\Iota /g, '\\u0399' ],\n    [ /\\\\Kappa /g, '\\u039A' ],\n    [ /\\\\Lambda /g, '\\u039B' ],\n    [ /\\\\Xi /g, '\\u039E' ],\n    [ /\\\\Pi /g, '\\u03A0' ],\n    [ /\\\\Rho /g, '\\u03A1' ],\n    [ /\\\\Sigma /g, '\\u03A3' ],\n    [ /\\\\Tau /g, '\\u03A4' ],\n    [ /\\\\Upsilon /g, '\\u03A5' ],\n    [ /\\\\Phi /g, '\\u03A6' ],\n    [ /\\\\Chi /g, '\\u03A7' ],\n    [ /\\\\Psi /g, '\\u03A8' ],\n    [ /\\\\Omega /g, '\\u03A9' ],\n    [ /\\\\mathrm\\{\\\\ddot\\{I\\}\\}/g, '\\u03AA' ],\n    [ /\\\\mathrm\\{\\\\ddot\\{Y\\}\\}/g, '\\u03AB' ],\n    [ /\\\\'\\{\\$\\\\alpha\\$\\}/g, '\\u03AC' ],\n    [ /\\\\acute\\{\\\\epsilon\\}/g, '\\u03AD' ],\n    [ /\\\\acute\\{\\\\eta\\}/g, '\\u03AE' ],\n    [ /\\\\acute\\{\\\\iota\\}/g, '\\u03AF' ],\n    [ /\\\\acute\\{\\\\ddot\\{\\\\upsilon\\}\\}/g, '\\u03B0' ],\n    [ /\\\\alpha /g, '\\u03B1' ],\n    [ /\\\\beta /g, '\\u03B2' ],\n    [ /\\\\gamma /g, '\\u03B3' ],\n    [ /\\\\delta /g, '\\u03B4' ],\n    [ /\\\\epsilon /g, '\\u03B5' ],\n    [ /\\\\zeta /g, '\\u03B6' ],\n    [ /\\\\eta /g, '\\u03B7' ],\n    [ /\\\\texttheta /g, '\\u03B8' ],\n    [ /\\\\iota /g, '\\u03B9' ],\n    [ /\\\\kappa /g, '\\u03BA' ],\n    [ /\\\\lambda /g, '\\u03BB' ],\n    [ /\\\\mu /g, '\\u03BC' ],\n    [ /\\\\nu /g, '\\u03BD' ],\n    [ /\\\\xi /g, '\\u03BE' ],\n    [ /\\\\pi /g, '\\u03C0' ],\n    [ /\\\\rho /g, '\\u03C1' ],\n    [ /\\\\varsigma /g, '\\u03C2' ],\n    [ /\\\\sigma /g, '\\u03C3' ],\n    [ /\\\\tau /g, '\\u03C4' ],\n    [ /\\\\upsilon /g, '\\u03C5' ],\n    [ /\\\\varphi /g, '\\u03C6' ],\n    [ /\\\\chi /g, '\\u03C7' ],\n    [ /\\\\psi /g, '\\u03C8' ],\n    [ /\\\\omega /g, '\\u03C9' ],\n    [ /\\\\ddot\\{\\\\iota\\}/g, '\\u03CA' ],\n    [ /\\\\ddot\\{\\\\upsilon\\}/g, '\\u03CB' ],\n    [ /\\\\'\\{o\\}/g, '\\u03CC' ],\n    [ /\\\\acute\\{\\\\upsilon\\}/g, '\\u03CD' ],\n    [ /\\\\acute\\{\\\\omega\\}/g, '\\u03CE' ],\n    [ /\\\\Pisymbol\\{ppi022\\}\\{87\\}/g, '\\u03D0' ],\n    [ /\\\\textvartheta /g, '\\u03D1' ],\n    [ /\\\\Upsilon /g, '\\u03D2' ],\n    [ /\\\\phi /g, '\\u03D5' ],\n    [ /\\\\varpi /g, '\\u03D6' ],\n    [ /\\\\Stigma /g, '\\u03DA' ],\n    [ /\\\\Digamma /g, '\\u03DC' ],\n    [ /\\\\digamma /g, '\\u03DD' ],\n    [ /\\\\Koppa /g, '\\u03DE' ],\n    [ /\\\\Sampi /g, '\\u03E0' ],\n    [ /\\\\varkappa /g, '\\u03F0' ],\n    [ /\\\\varrho /g, '\\u03F1' ],\n    [ /\\\\textTheta /g, '\\u03F4' ],\n    [ /\\\\backepsilon /g, '\\u03F6' ],\n    [ /\\\\cyrchar\\\\CYRYO /g, '\\u0401' ],\n    [ /\\\\cyrchar\\\\CYRDJE /g, '\\u0402' ],\n    [ /\\\\cyrchar\\{\\\\'\\\\CYRG\\}/g, '\\u0403' ],\n    [ /\\\\cyrchar\\\\CYRIE /g, '\\u0404' ],\n    [ /\\\\cyrchar\\\\CYRDZE /g, '\\u0405' ],\n    [ /\\\\cyrchar\\\\CYRII /g, '\\u0406' ],\n    [ /\\\\cyrchar\\\\CYRYI /g, '\\u0407' ],\n    [ /\\\\cyrchar\\\\CYRJE /g, '\\u0408' ],\n    [ /\\\\cyrchar\\\\CYRLJE /g, '\\u0409' ],\n    [ /\\\\cyrchar\\\\CYRNJE /g, '\\u040A' ],\n    [ /\\\\cyrchar\\\\CYRTSHE /g, '\\u040B' ],\n    [ /\\\\cyrchar\\{\\\\'\\\\CYRK\\}/g, '\\u040C' ],\n    [ /\\\\cyrchar\\\\CYRUSHRT /g, '\\u040E' ],\n    [ /\\\\cyrchar\\\\CYRDZHE /g, '\\u040F' ],\n    [ /\\\\cyrchar\\\\CYRA /g, '\\u0410' ],\n    [ /\\\\cyrchar\\\\CYRB /g, '\\u0411' ],\n    [ /\\\\cyrchar\\\\CYRV /g, '\\u0412' ],\n    [ /\\\\cyrchar\\\\CYRG /g, '\\u0413' ],\n    [ /\\\\cyrchar\\\\CYRD /g, '\\u0414' ],\n    [ /\\\\cyrchar\\\\CYRE /g, '\\u0415' ],\n    [ /\\\\cyrchar\\\\CYRZH /g, '\\u0416' ],\n    [ /\\\\cyrchar\\\\CYRZ /g, '\\u0417' ],\n    [ /\\\\cyrchar\\\\CYRI /g, '\\u0418' ],\n    [ /\\\\cyrchar\\\\CYRISHRT /g, '\\u0419' ],\n    [ /\\\\cyrchar\\\\CYRK /g, '\\u041A' ],\n    [ /\\\\cyrchar\\\\CYRL /g, '\\u041B' ],\n    [ /\\\\cyrchar\\\\CYRM /g, '\\u041C' ],\n    [ /\\\\cyrchar\\\\CYRN /g, '\\u041D' ],\n    [ /\\\\cyrchar\\\\CYRO /g, '\\u041E' ],\n    [ /\\\\cyrchar\\\\CYRP /g, '\\u041F' ],\n    [ /\\\\cyrchar\\\\CYRR /g, '\\u0420' ],\n    [ /\\\\cyrchar\\\\CYRS /g, '\\u0421' ],\n    [ /\\\\cyrchar\\\\CYRT /g, '\\u0422' ],\n    [ /\\\\cyrchar\\\\CYRU /g, '\\u0423' ],\n    [ /\\\\cyrchar\\\\CYRF /g, '\\u0424' ],\n    [ /\\\\cyrchar\\\\CYRH /g, '\\u0425' ],\n    [ /\\\\cyrchar\\\\CYRC /g, '\\u0426' ],\n    [ /\\\\cyrchar\\\\CYRCH /g, '\\u0427' ],\n    [ /\\\\cyrchar\\\\CYRSH /g, '\\u0428' ],\n    [ /\\\\cyrchar\\\\CYRSHCH /g, '\\u0429' ],\n    [ /\\\\cyrchar\\\\CYRHRDSN /g, '\\u042A' ],\n    [ /\\\\cyrchar\\\\CYRERY /g, '\\u042B' ],\n    [ /\\\\cyrchar\\\\CYRSFTSN /g, '\\u042C' ],\n    [ /\\\\cyrchar\\\\CYREREV /g, '\\u042D' ],\n    [ /\\\\cyrchar\\\\CYRYU /g, '\\u042E' ],\n    [ /\\\\cyrchar\\\\CYRYA /g, '\\u042F' ],\n    [ /\\\\cyrchar\\\\cyra /g, '\\u0430' ],\n    [ /\\\\cyrchar\\\\cyrb /g, '\\u0431' ],\n    [ /\\\\cyrchar\\\\cyrv /g, '\\u0432' ],\n    [ /\\\\cyrchar\\\\cyrg /g, '\\u0433' ],\n    [ /\\\\cyrchar\\\\cyrd /g, '\\u0434' ],\n    [ /\\\\cyrchar\\\\cyre /g, '\\u0435' ],\n    [ /\\\\cyrchar\\\\cyrzh /g, '\\u0436' ],\n    [ /\\\\cyrchar\\\\cyrz /g, '\\u0437' ],\n    [ /\\\\cyrchar\\\\cyri /g, '\\u0438' ],\n    [ /\\\\cyrchar\\\\cyrishrt /g, '\\u0439' ],\n    [ /\\\\cyrchar\\\\cyrk /g, '\\u043A' ],\n    [ /\\\\cyrchar\\\\cyrl /g, '\\u043B' ],\n    [ /\\\\cyrchar\\\\cyrm /g, '\\u043C' ],\n    [ /\\\\cyrchar\\\\cyrn /g, '\\u043D' ],\n    [ /\\\\cyrchar\\\\cyro /g, '\\u043E' ],\n    [ /\\\\cyrchar\\\\cyrp /g, '\\u043F' ],\n    [ /\\\\cyrchar\\\\cyrr /g, '\\u0440' ],\n    [ /\\\\cyrchar\\\\cyrs /g, '\\u0441' ],\n    [ /\\\\cyrchar\\\\cyrt /g, '\\u0442' ],\n    [ /\\\\cyrchar\\\\cyru /g, '\\u0443' ],\n    [ /\\\\cyrchar\\\\cyrf /g, '\\u0444' ],\n    [ /\\\\cyrchar\\\\cyrh /g, '\\u0445' ],\n    [ /\\\\cyrchar\\\\cyrc /g, '\\u0446' ],\n    [ /\\\\cyrchar\\\\cyrch /g, '\\u0447' ],\n    [ /\\\\cyrchar\\\\cyrsh /g, '\\u0448' ],\n    [ /\\\\cyrchar\\\\cyrshch /g, '\\u0449' ],\n    [ /\\\\cyrchar\\\\cyrhrdsn /g, '\\u044A' ],\n    [ /\\\\cyrchar\\\\cyrery /g, '\\u044B' ],\n    [ /\\\\cyrchar\\\\cyrsftsn /g, '\\u044C' ],\n    [ /\\\\cyrchar\\\\cyrerev /g, '\\u044D' ],\n    [ /\\\\cyrchar\\\\cyryu /g, '\\u044E' ],\n    [ /\\\\cyrchar\\\\cyrya /g, '\\u044F' ],\n    [ /\\\\cyrchar\\\\cyryo /g, '\\u0451' ],\n    [ /\\\\cyrchar\\\\cyrdje /g, '\\u0452' ],\n    [ /\\\\cyrchar\\{\\\\'\\\\cyrg\\}/g, '\\u0453' ],\n    [ /\\\\cyrchar\\\\cyrie /g, '\\u0454' ],\n    [ /\\\\cyrchar\\\\cyrdze /g, '\\u0455' ],\n    [ /\\\\cyrchar\\\\cyrii /g, '\\u0456' ],\n    [ /\\\\cyrchar\\\\cyryi /g, '\\u0457' ],\n    [ /\\\\cyrchar\\\\cyrje /g, '\\u0458' ],\n    [ /\\\\cyrchar\\\\cyrlje /g, '\\u0459' ],\n    [ /\\\\cyrchar\\\\cyrnje /g, '\\u045A' ],\n    [ /\\\\cyrchar\\\\cyrtshe /g, '\\u045B' ],\n    [ /\\\\cyrchar\\{\\\\'\\\\cyrk\\}/g, '\\u045C' ],\n    [ /\\\\cyrchar\\\\cyrushrt /g, '\\u045E' ],\n    [ /\\\\cyrchar\\\\cyrdzhe /g, '\\u045F' ],\n    [ /\\\\cyrchar\\\\CYROMEGA /g, '\\u0460' ],\n    [ /\\\\cyrchar\\\\cyromega /g, '\\u0461' ],\n    [ /\\\\cyrchar\\\\CYRYAT /g, '\\u0462' ],\n    [ /\\\\cyrchar\\\\CYRIOTE /g, '\\u0464' ],\n    [ /\\\\cyrchar\\\\cyriote /g, '\\u0465' ],\n    [ /\\\\cyrchar\\\\CYRLYUS /g, '\\u0466' ],\n    [ /\\\\cyrchar\\\\cyrlyus /g, '\\u0467' ],\n    [ /\\\\cyrchar\\\\CYRIOTLYUS /g, '\\u0468' ],\n    [ /\\\\cyrchar\\\\cyriotlyus /g, '\\u0469' ],\n    [ /\\\\cyrchar\\\\CYRBYUS /g, '\\u046A' ],\n    [ /\\\\cyrchar\\\\CYRIOTBYUS /g, '\\u046C' ],\n    [ /\\\\cyrchar\\\\cyriotbyus /g, '\\u046D' ],\n    [ /\\\\cyrchar\\\\CYRKSI /g, '\\u046E' ],\n    [ /\\\\cyrchar\\\\cyrksi /g, '\\u046F' ],\n    [ /\\\\cyrchar\\\\CYRPSI /g, '\\u0470' ],\n    [ /\\\\cyrchar\\\\cyrpsi /g, '\\u0471' ],\n    [ /\\\\cyrchar\\\\CYRFITA /g, '\\u0472' ],\n    [ /\\\\cyrchar\\\\CYRIZH /g, '\\u0474' ],\n    [ /\\\\cyrchar\\\\CYRUK /g, '\\u0478' ],\n    [ /\\\\cyrchar\\\\cyruk /g, '\\u0479' ],\n    [ /\\\\cyrchar\\\\CYROMEGARND /g, '\\u047A' ],\n    [ /\\\\cyrchar\\\\cyromegarnd /g, '\\u047B' ],\n    [ /\\\\cyrchar\\\\CYROMEGATITLO /g, '\\u047C' ],\n    [ /\\\\cyrchar\\\\cyromegatitlo /g, '\\u047D' ],\n    [ /\\\\cyrchar\\\\CYROT /g, '\\u047E' ],\n    [ /\\\\cyrchar\\\\cyrot /g, '\\u047F' ],\n    [ /\\\\cyrchar\\\\CYRKOPPA /g, '\\u0480' ],\n    [ /\\\\cyrchar\\\\cyrkoppa /g, '\\u0481' ],\n    [ /\\\\cyrchar\\\\cyrthousands /g, '\\u0482' ],\n    [ /\\\\cyrchar\\\\cyrhundredthousands /g, '\\u0488' ],\n    [ /\\\\cyrchar\\\\cyrmillions /g, '\\u0489' ],\n    [ /\\\\cyrchar\\\\CYRSEMISFTSN /g, '\\u048C' ],\n    [ /\\\\cyrchar\\\\cyrsemisftsn /g, '\\u048D' ],\n    [ /\\\\cyrchar\\\\CYRRTICK /g, '\\u048E' ],\n    [ /\\\\cyrchar\\\\cyrrtick /g, '\\u048F' ],\n    [ /\\\\cyrchar\\\\CYRGUP /g, '\\u0490' ],\n    [ /\\\\cyrchar\\\\cyrgup /g, '\\u0491' ],\n    [ /\\\\cyrchar\\\\CYRGHCRS /g, '\\u0492' ],\n    [ /\\\\cyrchar\\\\cyrghcrs /g, '\\u0493' ],\n    [ /\\\\cyrchar\\\\CYRGHK /g, '\\u0494' ],\n    [ /\\\\cyrchar\\\\cyrghk /g, '\\u0495' ],\n    [ /\\\\cyrchar\\\\CYRZHDSC /g, '\\u0496' ],\n    [ /\\\\cyrchar\\\\cyrzhdsc /g, '\\u0497' ],\n    [ /\\\\cyrchar\\\\CYRZDSC /g, '\\u0498' ],\n    [ /\\\\cyrchar\\\\cyrzdsc /g, '\\u0499' ],\n    [ /\\\\cyrchar\\\\CYRKDSC /g, '\\u049A' ],\n    [ /\\\\cyrchar\\\\cyrkdsc /g, '\\u049B' ],\n    [ /\\\\cyrchar\\\\CYRKVCRS /g, '\\u049C' ],\n    [ /\\\\cyrchar\\\\cyrkvcrs /g, '\\u049D' ],\n    [ /\\\\cyrchar\\\\CYRKHCRS /g, '\\u049E' ],\n    [ /\\\\cyrchar\\\\cyrkhcrs /g, '\\u049F' ],\n    [ /\\\\cyrchar\\\\CYRKBEAK /g, '\\u04A0' ],\n    [ /\\\\cyrchar\\\\cyrkbeak /g, '\\u04A1' ],\n    [ /\\\\cyrchar\\\\CYRNDSC /g, '\\u04A2' ],\n    [ /\\\\cyrchar\\\\cyrndsc /g, '\\u04A3' ],\n    [ /\\\\cyrchar\\\\CYRNG /g, '\\u04A4' ],\n    [ /\\\\cyrchar\\\\cyrng /g, '\\u04A5' ],\n    [ /\\\\cyrchar\\\\CYRPHK /g, '\\u04A6' ],\n    [ /\\\\cyrchar\\\\cyrphk /g, '\\u04A7' ],\n    [ /\\\\cyrchar\\\\CYRABHHA /g, '\\u04A8' ],\n    [ /\\\\cyrchar\\\\cyrabhha /g, '\\u04A9' ],\n    [ /\\\\cyrchar\\\\CYRSDSC /g, '\\u04AA' ],\n    [ /\\\\cyrchar\\\\cyrsdsc /g, '\\u04AB' ],\n    [ /\\\\cyrchar\\\\CYRTDSC /g, '\\u04AC' ],\n    [ /\\\\cyrchar\\\\cyrtdsc /g, '\\u04AD' ],\n    [ /\\\\cyrchar\\\\CYRY /g, '\\u04AE' ],\n    [ /\\\\cyrchar\\\\cyry /g, '\\u04AF' ],\n    [ /\\\\cyrchar\\\\CYRYHCRS /g, '\\u04B0' ],\n    [ /\\\\cyrchar\\\\cyryhcrs /g, '\\u04B1' ],\n    [ /\\\\cyrchar\\\\CYRHDSC /g, '\\u04B2' ],\n    [ /\\\\cyrchar\\\\cyrhdsc /g, '\\u04B3' ],\n    [ /\\\\cyrchar\\\\CYRTETSE /g, '\\u04B4' ],\n    [ /\\\\cyrchar\\\\cyrtetse /g, '\\u04B5' ],\n    [ /\\\\cyrchar\\\\CYRCHRDSC /g, '\\u04B6' ],\n    [ /\\\\cyrchar\\\\cyrchrdsc /g, '\\u04B7' ],\n    [ /\\\\cyrchar\\\\CYRCHVCRS /g, '\\u04B8' ],\n    [ /\\\\cyrchar\\\\cyrchvcrs /g, '\\u04B9' ],\n    [ /\\\\cyrchar\\\\CYRSHHA /g, '\\u04BA' ],\n    [ /\\\\cyrchar\\\\cyrshha /g, '\\u04BB' ],\n    [ /\\\\cyrchar\\\\CYRABHCH /g, '\\u04BC' ],\n    [ /\\\\cyrchar\\\\cyrabhch /g, '\\u04BD' ],\n    [ /\\\\cyrchar\\\\CYRABHCHDSC /g, '\\u04BE' ],\n    [ /\\\\cyrchar\\\\cyrabhchdsc /g, '\\u04BF' ],\n    [ /\\\\cyrchar\\\\CYRpalochka /g, '\\u04C0' ],\n    [ /\\\\cyrchar\\\\CYRKHK /g, '\\u04C3' ],\n    [ /\\\\cyrchar\\\\cyrkhk /g, '\\u04C4' ],\n    [ /\\\\cyrchar\\\\CYRNHK /g, '\\u04C7' ],\n    [ /\\\\cyrchar\\\\cyrnhk /g, '\\u04C8' ],\n    [ /\\\\cyrchar\\\\CYRCHLDSC /g, '\\u04CB' ],\n    [ /\\\\cyrchar\\\\cyrchldsc /g, '\\u04CC' ],\n    [ /\\\\cyrchar\\\\CYRAE /g, '\\u04D4' ],\n    [ /\\\\cyrchar\\\\cyrae /g, '\\u04D5' ],\n    [ /\\\\cyrchar\\\\CYRSCHWA /g, '\\u04D8' ],\n    [ /\\\\cyrchar\\\\cyrschwa /g, '\\u04D9' ],\n    [ /\\\\cyrchar\\\\CYRABHDZE /g, '\\u04E0' ],\n    [ /\\\\cyrchar\\\\cyrabhdze /g, '\\u04E1' ],\n    [ /\\\\cyrchar\\\\CYROTLD /g, '\\u04E8' ],\n    [ /\\\\cyrchar\\\\cyrotld /g, '\\u04E9' ],\n    [ /\\\\hspace\\{0.6em\\}/g, '\\u2002' ],\n    [ /\\\\hspace\\{1em\\}/g, '\\u2003' ],\n    [ /\\\\hspace\\{0.33em\\}/g, '\\u2004' ],\n    [ /\\\\hspace\\{0.25em\\}/g, '\\u2005' ],\n    [ /\\\\hspace\\{0.166em\\}/g, '\\u2006' ],\n    [ /\\\\hphantom\\{0\\}/g, '\\u2007' ],\n    [ /\\\\hphantom\\{,\\}/g, '\\u2008' ],\n    [ /\\\\hspace\\{0.167em\\}/g, '\\u2009' ],\n    [ /\\\\mkern1mu /g, '\\u200A' ],\n    [ /\\\\textendash /g, '\\u2013' ],\n    [ /\\\\textemdash /g, '\\u2014' ],\n    [ /\\\\rule\\{1em\\}\\{1pt\\}/g, '\\u2015' ],\n    [ /\\\\Vert /g, '\\u2016' ],\n    [ /\\\\Elzreapos /g, '\\u201B' ],\n    [ /\\\\textquotedblleft /g, '\\u201C' ],\n    [ /\\\\textquotedblright /g, '\\u201D' ],\n    [ /\\\\textdagger /g, '\\u2020' ],\n    [ /\\\\textdaggerdbl /g, '\\u2021' ],\n    [ /\\\\textbullet /g, '\\u2022' ],\n    [ /\\\\ldots /g, '\\u2026' ],\n    [ /\\\\textperthousand /g, '\\u2030' ],\n    [ /\\\\textpertenthousand /g, '\\u2031' ],\n    [ /\\\\backprime /g, '\\u2035' ],\n    [ /\\\\guilsinglleft /g, '\\u2039' ],\n    [ /\\\\guilsinglright /g, '\\u203A' ],\n    [ /\\\\mkern4mu /g, '\\u205F' ],\n    [ /\\\\nolinebreak /g, '\\u2060' ],\n    [ /\\\\ensuremath\\{\\\\Elzpes\\}/g, '\\u20A7' ],\n    [ /\\\\mbox\\{\\\\texteuro\\} /g, '\\u20AC' ],\n    [ /\\\\dddot /g, '\\u20DB' ],\n    [ /\\\\ddddot /g, '\\u20DC' ],\n    [ /\\\\mathbb\\{C\\}/g, '\\u2102' ],\n    [ /\\\\mathscr\\{g\\}/g, '\\u210A' ],\n    [ /\\\\mathscr\\{H\\}/g, '\\u210B' ],\n    [ /\\\\mathfrak\\{H\\}/g, '\\u210C' ],\n    [ /\\\\mathbb\\{H\\}/g, '\\u210D' ],\n    [ /\\\\hslash /g, '\\u210F' ],\n    [ /\\\\mathscr\\{I\\}/g, '\\u2110' ],\n    [ /\\\\mathfrak\\{I\\}/g, '\\u2111' ],\n    [ /\\\\mathscr\\{L\\}/g, '\\u2112' ],\n    [ /\\\\mathscr\\{l\\}/g, '\\u2113' ],\n    [ /\\\\mathbb\\{N\\}/g, '\\u2115' ],\n    [ /\\\\cyrchar\\\\textnumero /g, '\\u2116' ],\n    [ /\\\\wp /g, '\\u2118' ],\n    [ /\\\\mathbb\\{P\\}/g, '\\u2119' ],\n    [ /\\\\mathbb\\{Q\\}/g, '\\u211A' ],\n    [ /\\\\mathscr\\{R\\}/g, '\\u211B' ],\n    [ /\\\\mathfrak\\{R\\}/g, '\\u211C' ],\n    [ /\\\\mathbb\\{R\\}/g, '\\u211D' ],\n    [ /\\\\Elzxrat /g, '\\u211E' ],\n    [ /\\\\texttrademark /g, '\\u2122' ],\n    [ /\\\\mathbb\\{Z\\}/g, '\\u2124' ],\n    [ /\\\\Omega /g, '\\u2126' ],\n    [ /\\\\mho /g, '\\u2127' ],\n    [ /\\\\mathfrak\\{Z\\}/g, '\\u2128' ],\n    [ /\\\\ElsevierGlyph\\{2129\\}/g, '\\u2129' ],\n    [ /\\\\AA /g, '\\u212B' ],\n    [ /\\\\mathscr\\{B\\}/g, '\\u212C' ],\n    [ /\\\\mathfrak\\{C\\}/g, '\\u212D' ],\n    [ /\\\\mathscr\\{e\\}/g, '\\u212F' ],\n    [ /\\\\mathscr\\{E\\}/g, '\\u2130' ],\n    [ /\\\\mathscr\\{F\\}/g, '\\u2131' ],\n    [ /\\\\mathscr\\{M\\}/g, '\\u2133' ],\n    [ /\\\\mathscr\\{o\\}/g, '\\u2134' ],\n    [ /\\\\aleph /g, '\\u2135' ],\n    [ /\\\\beth /g, '\\u2136' ],\n    [ /\\\\gimel /g, '\\u2137' ],\n    [ /\\\\daleth /g, '\\u2138' ],\n    [ /\\\\textfrac\\{1\\}\\{3\\}/g, '\\u2153' ],\n    [ /\\\\textfrac\\{2\\}\\{3\\}/g, '\\u2154' ],\n    [ /\\\\textfrac\\{1\\}\\{5\\}/g, '\\u2155' ],\n    [ /\\\\textfrac\\{2\\}\\{5\\}/g, '\\u2156' ],\n    [ /\\\\textfrac\\{3\\}\\{5\\}/g, '\\u2157' ],\n    [ /\\\\textfrac\\{4\\}\\{5\\}/g, '\\u2158' ],\n    [ /\\\\textfrac\\{1\\}\\{6\\}/g, '\\u2159' ],\n    [ /\\\\textfrac\\{5\\}\\{6\\}/g, '\\u215A' ],\n    [ /\\\\textfrac\\{1\\}\\{8\\}/g, '\\u215B' ],\n    [ /\\\\textfrac\\{3\\}\\{8\\}/g, '\\u215C' ],\n    [ /\\\\textfrac\\{5\\}\\{8\\}/g, '\\u215D' ],\n    [ /\\\\textfrac\\{7\\}\\{8\\}/g, '\\u215E' ],\n    [ /\\\\leftarrow /g, '\\u2190' ],\n    [ /\\\\uparrow /g, '\\u2191' ],\n    [ /\\\\rightarrow /g, '\\u2192' ],\n    [ /\\\\downarrow /g, '\\u2193' ],\n    [ /\\\\leftrightarrow /g, '\\u2194' ],\n    [ /\\\\updownarrow /g, '\\u2195' ],\n    [ /\\\\nwarrow /g, '\\u2196' ],\n    [ /\\\\nearrow /g, '\\u2197' ],\n    [ /\\\\searrow /g, '\\u2198' ],\n    [ /\\\\swarrow /g, '\\u2199' ],\n    [ /\\\\nleftarrow /g, '\\u219A' ],\n    [ /\\\\nrightarrow /g, '\\u219B' ],\n    [ /\\\\arrowwaveright /g, '\\u219C' ],\n    [ /\\\\arrowwaveright /g, '\\u219D' ],\n    [ /\\\\twoheadleftarrow /g, '\\u219E' ],\n    [ /\\\\twoheadrightarrow /g, '\\u21A0' ],\n    [ /\\\\leftarrowtail /g, '\\u21A2' ],\n    [ /\\\\rightarrowtail /g, '\\u21A3' ],\n    [ /\\\\mapsto /g, '\\u21A6' ],\n    [ /\\\\hookleftarrow /g, '\\u21A9' ],\n    [ /\\\\hookrightarrow /g, '\\u21AA' ],\n    [ /\\\\looparrowleft /g, '\\u21AB' ],\n    [ /\\\\looparrowright /g, '\\u21AC' ],\n    [ /\\\\leftrightsquigarrow /g, '\\u21AD' ],\n    [ /\\\\nleftrightarrow /g, '\\u21AE' ],\n    [ /\\\\Lsh /g, '\\u21B0' ],\n    [ /\\\\Rsh /g, '\\u21B1' ],\n    [ /\\\\ElsevierGlyph\\{21B3\\}/g, '\\u21B3' ],\n    [ /\\\\curvearrowleft /g, '\\u21B6' ],\n    [ /\\\\curvearrowright /g, '\\u21B7' ],\n    [ /\\\\circlearrowleft /g, '\\u21BA' ],\n    [ /\\\\circlearrowright /g, '\\u21BB' ],\n    [ /\\\\leftharpoonup /g, '\\u21BC' ],\n    [ /\\\\leftharpoondown /g, '\\u21BD' ],\n    [ /\\\\upharpoonright /g, '\\u21BE' ],\n    [ /\\\\upharpoonleft /g, '\\u21BF' ],\n    [ /\\\\rightharpoonup /g, '\\u21C0' ],\n    [ /\\\\rightharpoondown /g, '\\u21C1' ],\n    [ /\\\\downharpoonright /g, '\\u21C2' ],\n    [ /\\\\downharpoonleft /g, '\\u21C3' ],\n    [ /\\\\rightleftarrows /g, '\\u21C4' ],\n    [ /\\\\dblarrowupdown /g, '\\u21C5' ],\n    [ /\\\\leftrightarrows /g, '\\u21C6' ],\n    [ /\\\\leftleftarrows /g, '\\u21C7' ],\n    [ /\\\\upuparrows /g, '\\u21C8' ],\n    [ /\\\\rightrightarrows /g, '\\u21C9' ],\n    [ /\\\\downdownarrows /g, '\\u21CA' ],\n    [ /\\\\leftrightharpoons /g, '\\u21CB' ],\n    [ /\\\\rightleftharpoons /g, '\\u21CC' ],\n    [ /\\\\nLeftarrow /g, '\\u21CD' ],\n    [ /\\\\nLeftrightarrow /g, '\\u21CE' ],\n    [ /\\\\nRightarrow /g, '\\u21CF' ],\n    [ /\\\\Leftarrow /g, '\\u21D0' ],\n    [ /\\\\Uparrow /g, '\\u21D1' ],\n    [ /\\\\Rightarrow /g, '\\u21D2' ],\n    [ /\\\\Downarrow /g, '\\u21D3' ],\n    [ /\\\\Leftrightarrow /g, '\\u21D4' ],\n    [ /\\\\Updownarrow /g, '\\u21D5' ],\n    [ /\\\\Lleftarrow /g, '\\u21DA' ],\n    [ /\\\\Rrightarrow /g, '\\u21DB' ],\n    [ /\\\\rightsquigarrow /g, '\\u21DD' ],\n    [ /\\\\DownArrowUpArrow /g, '\\u21F5' ],\n    [ /\\\\forall /g, '\\u2200' ],\n    [ /\\\\complement /g, '\\u2201' ],\n    [ /\\\\partial /g, '\\u2202' ],\n    [ /\\\\exists /g, '\\u2203' ],\n    [ /\\\\nexists /g, '\\u2204' ],\n    [ /\\\\varnothing /g, '\\u2205' ],\n    [ /\\\\nabla /g, '\\u2207' ],\n    [ /\\\\in /g, '\\u2208' ],\n    [ /\\\\not\\\\in /g, '\\u2209' ],\n    [ /\\\\ni /g, '\\u220B' ],\n    [ /\\\\not\\\\ni /g, '\\u220C' ],\n    [ /\\\\prod /g, '\\u220F' ],\n    [ /\\\\coprod /g, '\\u2210' ],\n    [ /\\\\sum /g, '\\u2211' ],\n    [ /\\\\mp /g, '\\u2213' ],\n    [ /\\\\dotplus /g, '\\u2214' ],\n    [ /\\\\setminus /g, '\\u2216' ],\n    [ /\\\\circ /g, '\\u2218' ],\n    [ /\\\\bullet /g, '\\u2219' ],\n    [ /\\\\surd /g, '\\u221A' ],\n    [ /\\\\propto /g, '\\u221D' ],\n    [ /\\\\infty /g, '\\u221E' ],\n    [ /\\\\rightangle /g, '\\u221F' ],\n    [ /\\\\angle /g, '\\u2220' ],\n    [ /\\\\measuredangle /g, '\\u2221' ],\n    [ /\\\\sphericalangle /g, '\\u2222' ],\n    [ /\\\\mid /g, '\\u2223' ],\n    [ /\\\\nmid /g, '\\u2224' ],\n    [ /\\\\parallel /g, '\\u2225' ],\n    [ /\\\\nparallel /g, '\\u2226' ],\n    [ /\\\\wedge /g, '\\u2227' ],\n    [ /\\\\vee /g, '\\u2228' ],\n    [ /\\\\cap /g, '\\u2229' ],\n    [ /\\\\cup /g, '\\u222A' ],\n    [ /\\\\int /g, '\\u222B' ],\n    [ /\\\\int\\\\!\\\\int /g, '\\u222C' ],\n    [ /\\\\int\\\\!\\\\int\\\\!\\\\int /g, '\\u222D' ],\n    [ /\\\\oint /g, '\\u222E' ],\n    [ /\\\\surfintegral /g, '\\u222F' ],\n    [ /\\\\volintegral /g, '\\u2230' ],\n    [ /\\\\clwintegral /g, '\\u2231' ],\n    [ /\\\\ElsevierGlyph\\{2232\\}/g, '\\u2232' ],\n    [ /\\\\ElsevierGlyph\\{2233\\}/g, '\\u2233' ],\n    [ /\\\\therefore /g, '\\u2234' ],\n    [ /\\\\because /g, '\\u2235' ],\n    [ /\\\\Colon /g, '\\u2237' ],\n    [ /\\\\ElsevierGlyph\\{2238\\}/g, '\\u2238' ],\n    [ /\\\\mathbin\\{\\{:\\}\\\\!\\\\!\\{\\-\\}\\\\!\\\\!\\{:\\}\\}/g, '\\u223A' ],\n    [ /\\\\homothetic /g, '\\u223B' ],\n    [ /\\\\sim /g, '\\u223C' ],\n    [ /\\\\backsim /g, '\\u223D' ],\n    [ /\\\\lazysinv /g, '\\u223E' ],\n    [ /\\\\wr /g, '\\u2240' ],\n    [ /\\\\not\\\\sim /g, '\\u2241' ],\n    [ /\\\\ElsevierGlyph\\{2242\\}/g, '\\u2242' ],\n    [ /\\\\NotEqualTilde /g, '\\u2242-00338' ],\n    [ /\\\\simeq /g, '\\u2243' ],\n    [ /\\\\not\\\\simeq /g, '\\u2244' ],\n    [ /\\\\cong /g, '\\u2245' ],\n    [ /\\\\approxnotequal /g, '\\u2246' ],\n    [ /\\\\not\\\\cong /g, '\\u2247' ],\n    [ /\\\\approx /g, '\\u2248' ],\n    [ /\\\\not\\\\approx /g, '\\u2249' ],\n    [ /\\\\approxeq /g, '\\u224A' ],\n    [ /\\\\tildetrpl /g, '\\u224B' ],\n    [ /\\\\not\\\\apid /g, '\\u224B-00338' ],\n    [ /\\\\allequal /g, '\\u224C' ],\n    [ /\\\\asymp /g, '\\u224D' ],\n    [ /\\\\Bumpeq /g, '\\u224E' ],\n    [ /\\\\NotHumpDownHump /g, '\\u224E-00338' ],\n    [ /\\\\bumpeq /g, '\\u224F' ],\n    [ /\\\\NotHumpEqual /g, '\\u224F-00338' ],\n    [ /\\\\doteq /g, '\\u2250' ],\n    [ /\\\\not\\\\doteq/g, '\\u2250-00338' ],\n    [ /\\\\doteqdot /g, '\\u2251' ],\n    [ /\\\\fallingdotseq /g, '\\u2252' ],\n    [ /\\\\risingdotseq /g, '\\u2253' ],\n    [ /\\\\eqcirc /g, '\\u2256' ],\n    [ /\\\\circeq /g, '\\u2257' ],\n    [ /\\\\estimates /g, '\\u2259' ],\n    [ /\\\\ElsevierGlyph\\{225A\\}/g, '\\u225A' ],\n    [ /\\\\starequal /g, '\\u225B' ],\n    [ /\\\\triangleq /g, '\\u225C' ],\n    [ /\\\\ElsevierGlyph\\{225F\\}/g, '\\u225F' ],\n    [ /\\\\not =/g, '\\u2260' ],\n    [ /\\\\equiv /g, '\\u2261' ],\n    [ /\\\\not\\\\equiv /g, '\\u2262' ],\n    [ /\\\\leq /g, '\\u2264' ],\n    [ /\\\\geq /g, '\\u2265' ],\n    [ /\\\\leqq /g, '\\u2266' ],\n    [ /\\\\geqq /g, '\\u2267' ],\n    [ /\\\\lneqq /g, '\\u2268' ],\n    [ /\\\\lvertneqq /g, '\\u2268-0FE00' ],\n    [ /\\\\gneqq /g, '\\u2269' ],\n    [ /\\\\gvertneqq /g, '\\u2269-0FE00' ],\n    [ /\\\\ll /g, '\\u226A' ],\n    [ /\\\\NotLessLess /g, '\\u226A-00338' ],\n    [ /\\\\gg /g, '\\u226B' ],\n    [ /\\\\NotGreaterGreater /g, '\\u226B-00338' ],\n    [ /\\\\between /g, '\\u226C' ],\n    [ /\\\\not\\\\kern\\-0.3em\\\\times /g, '\\u226D' ],\n    [ /\\\\not</g, '\\u226E' ],\n    [ /\\\\not>/g, '\\u226F' ],\n    [ /\\\\not\\\\leq /g, '\\u2270' ],\n    [ /\\\\not\\\\geq /g, '\\u2271' ],\n    [ /\\\\lessequivlnt /g, '\\u2272' ],\n    [ /\\\\greaterequivlnt /g, '\\u2273' ],\n    [ /\\\\ElsevierGlyph\\{2274\\}/g, '\\u2274' ],\n    [ /\\\\ElsevierGlyph\\{2275\\}/g, '\\u2275' ],\n    [ /\\\\lessgtr /g, '\\u2276' ],\n    [ /\\\\gtrless /g, '\\u2277' ],\n    [ /\\\\notlessgreater /g, '\\u2278' ],\n    [ /\\\\notgreaterless /g, '\\u2279' ],\n    [ /\\\\prec /g, '\\u227A' ],\n    [ /\\\\succ /g, '\\u227B' ],\n    [ /\\\\preccurlyeq /g, '\\u227C' ],\n    [ /\\\\succcurlyeq /g, '\\u227D' ],\n    [ /\\\\precapprox /g, '\\u227E' ],\n    [ /\\\\NotPrecedesTilde /g, '\\u227E-00338' ],\n    [ /\\\\succapprox /g, '\\u227F' ],\n    [ /\\\\NotSucceedsTilde /g, '\\u227F-00338' ],\n    [ /\\\\not\\\\prec /g, '\\u2280' ],\n    [ /\\\\not\\\\succ /g, '\\u2281' ],\n    [ /\\\\subset /g, '\\u2282' ],\n    [ /\\\\supset /g, '\\u2283' ],\n    [ /\\\\not\\\\subset /g, '\\u2284' ],\n    [ /\\\\not\\\\supset /g, '\\u2285' ],\n    [ /\\\\subseteq /g, '\\u2286' ],\n    [ /\\\\supseteq /g, '\\u2287' ],\n    [ /\\\\not\\\\subseteq /g, '\\u2288' ],\n    [ /\\\\not\\\\supseteq /g, '\\u2289' ],\n    [ /\\\\subsetneq /g, '\\u228A' ],\n    [ /\\\\varsubsetneqq /g, '\\u228A-0FE00' ],\n    [ /\\\\supsetneq /g, '\\u228B' ],\n    [ /\\\\varsupsetneq /g, '\\u228B-0FE00' ],\n    [ /\\\\uplus /g, '\\u228E' ],\n    [ /\\\\sqsubset /g, '\\u228F' ],\n    [ /\\\\NotSquareSubset /g, '\\u228F-00338' ],\n    [ /\\\\sqsupset /g, '\\u2290' ],\n    [ /\\\\NotSquareSuperset /g, '\\u2290-00338' ],\n    [ /\\\\sqsubseteq /g, '\\u2291' ],\n    [ /\\\\sqsupseteq /g, '\\u2292' ],\n    [ /\\\\sqcap /g, '\\u2293' ],\n    [ /\\\\sqcup /g, '\\u2294' ],\n    [ /\\\\oplus /g, '\\u2295' ],\n    [ /\\\\ominus /g, '\\u2296' ],\n    [ /\\\\otimes /g, '\\u2297' ],\n    [ /\\\\oslash /g, '\\u2298' ],\n    [ /\\\\odot /g, '\\u2299' ],\n    [ /\\\\circledcirc /g, '\\u229A' ],\n    [ /\\\\circledast /g, '\\u229B' ],\n    [ /\\\\circleddash /g, '\\u229D' ],\n    [ /\\\\boxplus /g, '\\u229E' ],\n    [ /\\\\boxminus /g, '\\u229F' ],\n    [ /\\\\boxtimes /g, '\\u22A0' ],\n    [ /\\\\boxdot /g, '\\u22A1' ],\n    [ /\\\\vdash /g, '\\u22A2' ],\n    [ /\\\\dashv /g, '\\u22A3' ],\n    [ /\\\\top /g, '\\u22A4' ],\n    [ /\\\\perp /g, '\\u22A5' ],\n    [ /\\\\truestate /g, '\\u22A7' ],\n    [ /\\\\forcesextra /g, '\\u22A8' ],\n    [ /\\\\Vdash /g, '\\u22A9' ],\n    [ /\\\\Vvdash /g, '\\u22AA' ],\n    [ /\\\\VDash /g, '\\u22AB' ],\n    [ /\\\\nvdash /g, '\\u22AC' ],\n    [ /\\\\nvDash /g, '\\u22AD' ],\n    [ /\\\\nVdash /g, '\\u22AE' ],\n    [ /\\\\nVDash /g, '\\u22AF' ],\n    [ /\\\\vartriangleleft /g, '\\u22B2' ],\n    [ /\\\\vartriangleright /g, '\\u22B3' ],\n    [ /\\\\trianglelefteq /g, '\\u22B4' ],\n    [ /\\\\trianglerighteq /g, '\\u22B5' ],\n    [ /\\\\original /g, '\\u22B6' ],\n    [ /\\\\image /g, '\\u22B7' ],\n    [ /\\\\multimap /g, '\\u22B8' ],\n    [ /\\\\hermitconjmatrix /g, '\\u22B9' ],\n    [ /\\\\intercal /g, '\\u22BA' ],\n    [ /\\\\veebar /g, '\\u22BB' ],\n    [ /\\\\rightanglearc /g, '\\u22BE' ],\n    [ /\\\\ElsevierGlyph\\{22C0\\}/g, '\\u22C0' ],\n    [ /\\\\ElsevierGlyph\\{22C1\\}/g, '\\u22C1' ],\n    [ /\\\\bigcap /g, '\\u22C2' ],\n    [ /\\\\bigcup /g, '\\u22C3' ],\n    [ /\\\\diamond /g, '\\u22C4' ],\n    [ /\\\\cdot /g, '\\u22C5' ],\n    [ /\\\\star /g, '\\u22C6' ],\n    [ /\\\\divideontimes /g, '\\u22C7' ],\n    [ /\\\\bowtie /g, '\\u22C8' ],\n    [ /\\\\ltimes /g, '\\u22C9' ],\n    [ /\\\\rtimes /g, '\\u22CA' ],\n    [ /\\\\leftthreetimes /g, '\\u22CB' ],\n    [ /\\\\rightthreetimes /g, '\\u22CC' ],\n    [ /\\\\backsimeq /g, '\\u22CD' ],\n    [ /\\\\curlyvee /g, '\\u22CE' ],\n    [ /\\\\curlywedge /g, '\\u22CF' ],\n    [ /\\\\Subset /g, '\\u22D0' ],\n    [ /\\\\Supset /g, '\\u22D1' ],\n    [ /\\\\Cap /g, '\\u22D2' ],\n    [ /\\\\Cup /g, '\\u22D3' ],\n    [ /\\\\pitchfork /g, '\\u22D4' ],\n    [ /\\\\lessdot /g, '\\u22D6' ],\n    [ /\\\\gtrdot /g, '\\u22D7' ],\n    [ /\\\\verymuchless /g, '\\u22D8' ],\n    [ /\\\\verymuchgreater /g, '\\u22D9' ],\n    [ /\\\\lesseqgtr /g, '\\u22DA' ],\n    [ /\\\\gtreqless /g, '\\u22DB' ],\n    [ /\\\\curlyeqprec /g, '\\u22DE' ],\n    [ /\\\\curlyeqsucc /g, '\\u22DF' ],\n    [ /\\\\not\\\\sqsubseteq /g, '\\u22E2' ],\n    [ /\\\\not\\\\sqsupseteq /g, '\\u22E3' ],\n    [ /\\\\Elzsqspne /g, '\\u22E5' ],\n    [ /\\\\lnsim /g, '\\u22E6' ],\n    [ /\\\\gnsim /g, '\\u22E7' ],\n    [ /\\\\precedesnotsimilar /g, '\\u22E8' ],\n    [ /\\\\succnsim /g, '\\u22E9' ],\n    [ /\\\\ntriangleleft /g, '\\u22EA' ],\n    [ /\\\\ntriangleright /g, '\\u22EB' ],\n    [ /\\\\ntrianglelefteq /g, '\\u22EC' ],\n    [ /\\\\ntrianglerighteq /g, '\\u22ED' ],\n    [ /\\\\vdots /g, '\\u22EE' ],\n    [ /\\\\cdots /g, '\\u22EF' ],\n    [ /\\\\upslopeellipsis /g, '\\u22F0' ],\n    [ /\\\\downslopeellipsis /g, '\\u22F1' ],\n    [ /\\\\barwedge /g, '\\u2305' ],\n    [ /\\\\perspcorrespond /g, '\\u2306' ],\n    [ /\\\\lceil /g, '\\u2308' ],\n    [ /\\\\rceil /g, '\\u2309' ],\n    [ /\\\\lfloor /g, '\\u230A' ],\n    [ /\\\\rfloor /g, '\\u230B' ],\n    [ /\\\\recorder /g, '\\u2315' ],\n    [ /\\\\mathchar\"2208/g, '\\u2316' ],\n    [ /\\\\ulcorner /g, '\\u231C' ],\n    [ /\\\\urcorner /g, '\\u231D' ],\n    [ /\\\\llcorner /g, '\\u231E' ],\n    [ /\\\\lrcorner /g, '\\u231F' ],\n    [ /\\\\frown /g, '\\u2322' ],\n    [ /\\\\smile /g, '\\u2323' ],\n    [ /\\\\langle /g, '\\u2329' ],\n    [ /\\\\rangle /g, '\\u232A' ],\n    [ /\\\\ElsevierGlyph\\{E838\\}/g, '\\u233D' ],\n    [ /\\\\Elzdlcorn /g, '\\u23A3' ],\n    [ /\\\\lmoustache /g, '\\u23B0' ],\n    [ /\\\\rmoustache /g, '\\u23B1' ],\n    [ /\\\\textvisiblespace /g, '\\u2423' ],\n    [ /\\\\ding\\{172\\}/g, '\\u2460' ],\n    [ /\\\\ding\\{173\\}/g, '\\u2461' ],\n    [ /\\\\ding\\{174\\}/g, '\\u2462' ],\n    [ /\\\\ding\\{175\\}/g, '\\u2463' ],\n    [ /\\\\ding\\{176\\}/g, '\\u2464' ],\n    [ /\\\\ding\\{177\\}/g, '\\u2465' ],\n    [ /\\\\ding\\{178\\}/g, '\\u2466' ],\n    [ /\\\\ding\\{179\\}/g, '\\u2467' ],\n    [ /\\\\ding\\{180\\}/g, '\\u2468' ],\n    [ /\\\\ding\\{181\\}/g, '\\u2469' ],\n    [ /\\\\circledS /g, '\\u24C8' ],\n    [ /\\\\Elzdshfnc /g, '\\u2506' ],\n    [ /\\\\Elzsqfnw /g, '\\u2519' ],\n    [ /\\\\diagup /g, '\\u2571' ],\n    [ /\\\\ding\\{110\\}/g, '\\u25A0' ],\n    [ /\\\\square /g, '\\u25A1' ],\n    [ /\\\\blacksquare /g, '\\u25AA' ],\n    [ /\\\\fbox\\{~~\\}/g, '\\u25AD' ],\n    [ /\\\\Elzvrecto /g, '\\u25AF' ],\n    [ /\\\\ElsevierGlyph\\{E381\\}/g, '\\u25B1' ],\n    [ /\\\\ding\\{115\\}/g, '\\u25B2' ],\n    [ /\\\\bigtriangleup /g, '\\u25B3' ],\n    [ /\\\\blacktriangle /g, '\\u25B4' ],\n    [ /\\\\vartriangle /g, '\\u25B5' ],\n    [ /\\\\blacktriangleright /g, '\\u25B8' ],\n    [ /\\\\triangleright /g, '\\u25B9' ],\n    [ /\\\\ding\\{116\\}/g, '\\u25BC' ],\n    [ /\\\\bigtriangledown /g, '\\u25BD' ],\n    [ /\\\\blacktriangledown /g, '\\u25BE' ],\n    [ /\\\\triangledown /g, '\\u25BF' ],\n    [ /\\\\blacktriangleleft /g, '\\u25C2' ],\n    [ /\\\\triangleleft /g, '\\u25C3' ],\n    [ /\\\\ding\\{117\\}/g, '\\u25C6' ],\n    [ /\\\\lozenge /g, '\\u25CA' ],\n    [ /\\\\bigcirc /g, '\\u25CB' ],\n    [ /\\\\ding\\{108\\}/g, '\\u25CF' ],\n    [ /\\\\Elzcirfl /g, '\\u25D0' ],\n    [ /\\\\Elzcirfr /g, '\\u25D1' ],\n    [ /\\\\Elzcirfb /g, '\\u25D2' ],\n    [ /\\\\ding\\{119\\}/g, '\\u25D7' ],\n    [ /\\\\Elzrvbull /g, '\\u25D8' ],\n    [ /\\\\Elzsqfl /g, '\\u25E7' ],\n    [ /\\\\Elzsqfr /g, '\\u25E8' ],\n    [ /\\\\Elzsqfse /g, '\\u25EA' ],\n    [ /\\\\bigcirc /g, '\\u25EF' ],\n    [ /\\\\ding\\{72\\}/g, '\\u2605' ],\n    [ /\\\\ding\\{73\\}/g, '\\u2606' ],\n    [ /\\\\ding\\{37\\}/g, '\\u260E' ],\n    [ /\\\\ding\\{42\\}/g, '\\u261B' ],\n    [ /\\\\ding\\{43\\}/g, '\\u261E' ],\n    [ /\\\\rightmoon /g, '\\u263E' ],\n    [ /\\\\mercury /g, '\\u263F' ],\n    [ /\\\\venus /g, '\\u2640' ],\n    [ /\\\\male /g, '\\u2642' ],\n    [ /\\\\jupiter /g, '\\u2643' ],\n    [ /\\\\saturn /g, '\\u2644' ],\n    [ /\\\\uranus /g, '\\u2645' ],\n    [ /\\\\neptune /g, '\\u2646' ],\n    [ /\\\\pluto /g, '\\u2647' ],\n    [ /\\\\aries /g, '\\u2648' ],\n    [ /\\\\taurus /g, '\\u2649' ],\n    [ /\\\\gemini /g, '\\u264A' ],\n    [ /\\\\cancer /g, '\\u264B' ],\n    [ /\\\\leo /g, '\\u264C' ],\n    [ /\\\\virgo /g, '\\u264D' ],\n    [ /\\\\libra /g, '\\u264E' ],\n    [ /\\\\scorpio /g, '\\u264F' ],\n    [ /\\\\sagittarius /g, '\\u2650' ],\n    [ /\\\\capricornus /g, '\\u2651' ],\n    [ /\\\\aquarius /g, '\\u2652' ],\n    [ /\\\\pisces /g, '\\u2653' ],\n    [ /\\\\ding\\{171\\}/g, '\\u2660' ],\n    [ /\\\\diamond /g, '\\u2662' ],\n    [ /\\\\ding\\{168\\}/g, '\\u2663' ],\n    [ /\\\\ding\\{170\\}/g, '\\u2665' ],\n    [ /\\\\ding\\{169\\}/g, '\\u2666' ],\n    [ /\\\\quarternote /g, '\\u2669' ],\n    [ /\\\\eighthnote /g, '\\u266A' ],\n    [ /\\\\flat /g, '\\u266D' ],\n    [ /\\\\natural /g, '\\u266E' ],\n    [ /\\\\sharp /g, '\\u266F' ],\n    [ /\\\\ding\\{33\\}/g, '\\u2701' ],\n    [ /\\\\ding\\{34\\}/g, '\\u2702' ],\n    [ /\\\\ding\\{35\\}/g, '\\u2703' ],\n    [ /\\\\ding\\{36\\}/g, '\\u2704' ],\n    [ /\\\\ding\\{38\\}/g, '\\u2706' ],\n    [ /\\\\ding\\{39\\}/g, '\\u2707' ],\n    [ /\\\\ding\\{40\\}/g, '\\u2708' ],\n    [ /\\\\ding\\{41\\}/g, '\\u2709' ],\n    [ /\\\\ding\\{44\\}/g, '\\u270C' ],\n    [ /\\\\ding\\{45\\}/g, '\\u270D' ],\n    [ /\\\\ding\\{46\\}/g, '\\u270E' ],\n    [ /\\\\ding\\{47\\}/g, '\\u270F' ],\n    [ /\\\\ding\\{48\\}/g, '\\u2710' ],\n    [ /\\\\ding\\{49\\}/g, '\\u2711' ],\n    [ /\\\\ding\\{50\\}/g, '\\u2712' ],\n    [ /\\\\ding\\{51\\}/g, '\\u2713' ],\n    [ /\\\\ding\\{52\\}/g, '\\u2714' ],\n    [ /\\\\ding\\{53\\}/g, '\\u2715' ],\n    [ /\\\\ding\\{54\\}/g, '\\u2716' ],\n    [ /\\\\ding\\{55\\}/g, '\\u2717' ],\n    [ /\\\\ding\\{56\\}/g, '\\u2718' ],\n    [ /\\\\ding\\{57\\}/g, '\\u2719' ],\n    [ /\\\\ding\\{58\\}/g, '\\u271A' ],\n    [ /\\\\ding\\{59\\}/g, '\\u271B' ],\n    [ /\\\\ding\\{60\\}/g, '\\u271C' ],\n    [ /\\\\ding\\{61\\}/g, '\\u271D' ],\n    [ /\\\\ding\\{62\\}/g, '\\u271E' ],\n    [ /\\\\ding\\{63\\}/g, '\\u271F' ],\n    [ /\\\\ding\\{64\\}/g, '\\u2720' ],\n    [ /\\\\ding\\{65\\}/g, '\\u2721' ],\n    [ /\\\\ding\\{66\\}/g, '\\u2722' ],\n    [ /\\\\ding\\{67\\}/g, '\\u2723' ],\n    [ /\\\\ding\\{68\\}/g, '\\u2724' ],\n    [ /\\\\ding\\{69\\}/g, '\\u2725' ],\n    [ /\\\\ding\\{70\\}/g, '\\u2726' ],\n    [ /\\\\ding\\{71\\}/g, '\\u2727' ],\n    [ /\\\\ding\\{73\\}/g, '\\u2729' ],\n    [ /\\\\ding\\{74\\}/g, '\\u272A' ],\n    [ /\\\\ding\\{75\\}/g, '\\u272B' ],\n    [ /\\\\ding\\{76\\}/g, '\\u272C' ],\n    [ /\\\\ding\\{77\\}/g, '\\u272D' ],\n    [ /\\\\ding\\{78\\}/g, '\\u272E' ],\n    [ /\\\\ding\\{79\\}/g, '\\u272F' ],\n    [ /\\\\ding\\{80\\}/g, '\\u2730' ],\n    [ /\\\\ding\\{81\\}/g, '\\u2731' ],\n    [ /\\\\ding\\{82\\}/g, '\\u2732' ],\n    [ /\\\\ding\\{83\\}/g, '\\u2733' ],\n    [ /\\\\ding\\{84\\}/g, '\\u2734' ],\n    [ /\\\\ding\\{85\\}/g, '\\u2735' ],\n    [ /\\\\ding\\{86\\}/g, '\\u2736' ],\n    [ /\\\\ding\\{87\\}/g, '\\u2737' ],\n    [ /\\\\ding\\{88\\}/g, '\\u2738' ],\n    [ /\\\\ding\\{89\\}/g, '\\u2739' ],\n    [ /\\\\ding\\{90\\}/g, '\\u273A' ],\n    [ /\\\\ding\\{91\\}/g, '\\u273B' ],\n    [ /\\\\ding\\{92\\}/g, '\\u273C' ],\n    [ /\\\\ding\\{93\\}/g, '\\u273D' ],\n    [ /\\\\ding\\{94\\}/g, '\\u273E' ],\n    [ /\\\\ding\\{95\\}/g, '\\u273F' ],\n    [ /\\\\ding\\{96\\}/g, '\\u2740' ],\n    [ /\\\\ding\\{97\\}/g, '\\u2741' ],\n    [ /\\\\ding\\{98\\}/g, '\\u2742' ],\n    [ /\\\\ding\\{99\\}/g, '\\u2743' ],\n    [ /\\\\ding\\{100\\}/g, '\\u2744' ],\n    [ /\\\\ding\\{101\\}/g, '\\u2745' ],\n    [ /\\\\ding\\{102\\}/g, '\\u2746' ],\n    [ /\\\\ding\\{103\\}/g, '\\u2747' ],\n    [ /\\\\ding\\{104\\}/g, '\\u2748' ],\n    [ /\\\\ding\\{105\\}/g, '\\u2749' ],\n    [ /\\\\ding\\{106\\}/g, '\\u274A' ],\n    [ /\\\\ding\\{107\\}/g, '\\u274B' ],\n    [ /\\\\ding\\{109\\}/g, '\\u274D' ],\n    [ /\\\\ding\\{111\\}/g, '\\u274F' ],\n    [ /\\\\ding\\{112\\}/g, '\\u2750' ],\n    [ /\\\\ding\\{113\\}/g, '\\u2751' ],\n    [ /\\\\ding\\{114\\}/g, '\\u2752' ],\n    [ /\\\\ding\\{118\\}/g, '\\u2756' ],\n    [ /\\\\ding\\{120\\}/g, '\\u2758' ],\n    [ /\\\\ding\\{121\\}/g, '\\u2759' ],\n    [ /\\\\ding\\{122\\}/g, '\\u275A' ],\n    [ /\\\\ding\\{123\\}/g, '\\u275B' ],\n    [ /\\\\ding\\{124\\}/g, '\\u275C' ],\n    [ /\\\\ding\\{125\\}/g, '\\u275D' ],\n    [ /\\\\ding\\{126\\}/g, '\\u275E' ],\n    [ /\\\\ding\\{161\\}/g, '\\u2761' ],\n    [ /\\\\ding\\{162\\}/g, '\\u2762' ],\n    [ /\\\\ding\\{163\\}/g, '\\u2763' ],\n    [ /\\\\ding\\{164\\}/g, '\\u2764' ],\n    [ /\\\\ding\\{165\\}/g, '\\u2765' ],\n    [ /\\\\ding\\{166\\}/g, '\\u2766' ],\n    [ /\\\\ding\\{167\\}/g, '\\u2767' ],\n    [ /\\\\ding\\{182\\}/g, '\\u2776' ],\n    [ /\\\\ding\\{183\\}/g, '\\u2777' ],\n    [ /\\\\ding\\{184\\}/g, '\\u2778' ],\n    [ /\\\\ding\\{185\\}/g, '\\u2779' ],\n    [ /\\\\ding\\{186\\}/g, '\\u277A' ],\n    [ /\\\\ding\\{187\\}/g, '\\u277B' ],\n    [ /\\\\ding\\{188\\}/g, '\\u277C' ],\n    [ /\\\\ding\\{189\\}/g, '\\u277D' ],\n    [ /\\\\ding\\{190\\}/g, '\\u277E' ],\n    [ /\\\\ding\\{191\\}/g, '\\u277F' ],\n    [ /\\\\ding\\{192\\}/g, '\\u2780' ],\n    [ /\\\\ding\\{193\\}/g, '\\u2781' ],\n    [ /\\\\ding\\{194\\}/g, '\\u2782' ],\n    [ /\\\\ding\\{195\\}/g, '\\u2783' ],\n    [ /\\\\ding\\{196\\}/g, '\\u2784' ],\n    [ /\\\\ding\\{197\\}/g, '\\u2785' ],\n    [ /\\\\ding\\{198\\}/g, '\\u2786' ],\n    [ /\\\\ding\\{199\\}/g, '\\u2787' ],\n    [ /\\\\ding\\{200\\}/g, '\\u2788' ],\n    [ /\\\\ding\\{201\\}/g, '\\u2789' ],\n    [ /\\\\ding\\{202\\}/g, '\\u278A' ],\n    [ /\\\\ding\\{203\\}/g, '\\u278B' ],\n    [ /\\\\ding\\{204\\}/g, '\\u278C' ],\n    [ /\\\\ding\\{205\\}/g, '\\u278D' ],\n    [ /\\\\ding\\{206\\}/g, '\\u278E' ],\n    [ /\\\\ding\\{207\\}/g, '\\u278F' ],\n    [ /\\\\ding\\{208\\}/g, '\\u2790' ],\n    [ /\\\\ding\\{209\\}/g, '\\u2791' ],\n    [ /\\\\ding\\{210\\}/g, '\\u2792' ],\n    [ /\\\\ding\\{211\\}/g, '\\u2793' ],\n    [ /\\\\ding\\{212\\}/g, '\\u2794' ],\n    [ /\\\\ding\\{216\\}/g, '\\u2798' ],\n    [ /\\\\ding\\{217\\}/g, '\\u2799' ],\n    [ /\\\\ding\\{218\\}/g, '\\u279A' ],\n    [ /\\\\ding\\{219\\}/g, '\\u279B' ],\n    [ /\\\\ding\\{220\\}/g, '\\u279C' ],\n    [ /\\\\ding\\{221\\}/g, '\\u279D' ],\n    [ /\\\\ding\\{222\\}/g, '\\u279E' ],\n    [ /\\\\ding\\{223\\}/g, '\\u279F' ],\n    [ /\\\\ding\\{224\\}/g, '\\u27A0' ],\n    [ /\\\\ding\\{225\\}/g, '\\u27A1' ],\n    [ /\\\\ding\\{226\\}/g, '\\u27A2' ],\n    [ /\\\\ding\\{227\\}/g, '\\u27A3' ],\n    [ /\\\\ding\\{228\\}/g, '\\u27A4' ],\n    [ /\\\\ding\\{229\\}/g, '\\u27A5' ],\n    [ /\\\\ding\\{230\\}/g, '\\u27A6' ],\n    [ /\\\\ding\\{231\\}/g, '\\u27A7' ],\n    [ /\\\\ding\\{232\\}/g, '\\u27A8' ],\n    [ /\\\\ding\\{233\\}/g, '\\u27A9' ],\n    [ /\\\\ding\\{234\\}/g, '\\u27AA' ],\n    [ /\\\\ding\\{235\\}/g, '\\u27AB' ],\n    [ /\\\\ding\\{236\\}/g, '\\u27AC' ],\n    [ /\\\\ding\\{237\\}/g, '\\u27AD' ],\n    [ /\\\\ding\\{238\\}/g, '\\u27AE' ],\n    [ /\\\\ding\\{239\\}/g, '\\u27AF' ],\n    [ /\\\\ding\\{241\\}/g, '\\u27B1' ],\n    [ /\\\\ding\\{242\\}/g, '\\u27B2' ],\n    [ /\\\\ding\\{243\\}/g, '\\u27B3' ],\n    [ /\\\\ding\\{244\\}/g, '\\u27B4' ],\n    [ /\\\\ding\\{245\\}/g, '\\u27B5' ],\n    [ /\\\\ding\\{246\\}/g, '\\u27B6' ],\n    [ /\\\\ding\\{247\\}/g, '\\u27B7' ],\n    [ /\\\\ding\\{248\\}/g, '\\u27B8' ],\n    [ /\\\\ding\\{249\\}/g, '\\u27B9' ],\n    [ /\\\\ding\\{250\\}/g, '\\u27BA' ],\n    [ /\\\\ding\\{251\\}/g, '\\u27BB' ],\n    [ /\\\\ding\\{252\\}/g, '\\u27BC' ],\n    [ /\\\\ding\\{253\\}/g, '\\u27BD' ],\n    [ /\\\\ding\\{254\\}/g, '\\u27BE' ],\n    [ /\\\\longleftarrow /g, '\\u27F5' ],\n    [ /\\\\longrightarrow /g, '\\u27F6' ],\n    [ /\\\\longleftrightarrow /g, '\\u27F7' ],\n    [ /\\\\Longleftarrow /g, '\\u27F8' ],\n    [ /\\\\Longrightarrow /g, '\\u27F9' ],\n    [ /\\\\Longleftrightarrow /g, '\\u27FA' ],\n    [ /\\\\longmapsto /g, '\\u27FC' ],\n    [ /\\\\sim\\\\joinrel\\\\leadsto/g, '\\u27FF' ],\n    [ /\\\\ElsevierGlyph\\{E212\\}/g, '\\u2905' ],\n    [ /\\\\UpArrowBar /g, '\\u2912' ],\n    [ /\\\\DownArrowBar /g, '\\u2913' ],\n    [ /\\\\ElsevierGlyph\\{E20C\\}/g, '\\u2923' ],\n    [ /\\\\ElsevierGlyph\\{E20D\\}/g, '\\u2924' ],\n    [ /\\\\ElsevierGlyph\\{E20B\\}/g, '\\u2925' ],\n    [ /\\\\ElsevierGlyph\\{E20A\\}/g, '\\u2926' ],\n    [ /\\\\ElsevierGlyph\\{E211\\}/g, '\\u2927' ],\n    [ /\\\\ElsevierGlyph\\{E20E\\}/g, '\\u2928' ],\n    [ /\\\\ElsevierGlyph\\{E20F\\}/g, '\\u2929' ],\n    [ /\\\\ElsevierGlyph\\{E210\\}/g, '\\u292A' ],\n    [ /\\\\ElsevierGlyph\\{E21C\\}/g, '\\u2933' ],\n    [ /\\\\ElsevierGlyph\\{E21D\\}/g, '\\u2933-00338' ],\n    [ /\\\\ElsevierGlyph\\{E21A\\}/g, '\\u2936' ],\n    [ /\\\\ElsevierGlyph\\{E219\\}/g, '\\u2937' ],\n    [ /\\\\Elolarr /g, '\\u2940' ],\n    [ /\\\\Elorarr /g, '\\u2941' ],\n    [ /\\\\ElzRlarr /g, '\\u2942' ],\n    [ /\\\\ElzrLarr /g, '\\u2944' ],\n    [ /\\\\Elzrarrx /g, '\\u2947' ],\n    [ /\\\\LeftRightVector /g, '\\u294E' ],\n    [ /\\\\RightUpDownVector /g, '\\u294F' ],\n    [ /\\\\DownLeftRightVector /g, '\\u2950' ],\n    [ /\\\\LeftUpDownVector /g, '\\u2951' ],\n    [ /\\\\LeftVectorBar /g, '\\u2952' ],\n    [ /\\\\RightVectorBar /g, '\\u2953' ],\n    [ /\\\\RightUpVectorBar /g, '\\u2954' ],\n    [ /\\\\RightDownVectorBar /g, '\\u2955' ],\n    [ /\\\\DownLeftVectorBar /g, '\\u2956' ],\n    [ /\\\\DownRightVectorBar /g, '\\u2957' ],\n    [ /\\\\LeftUpVectorBar /g, '\\u2958' ],\n    [ /\\\\LeftDownVectorBar /g, '\\u2959' ],\n    [ /\\\\LeftTeeVector /g, '\\u295A' ],\n    [ /\\\\RightTeeVector /g, '\\u295B' ],\n    [ /\\\\RightUpTeeVector /g, '\\u295C' ],\n    [ /\\\\RightDownTeeVector /g, '\\u295D' ],\n    [ /\\\\DownLeftTeeVector /g, '\\u295E' ],\n    [ /\\\\DownRightTeeVector /g, '\\u295F' ],\n    [ /\\\\LeftUpTeeVector /g, '\\u2960' ],\n    [ /\\\\LeftDownTeeVector /g, '\\u2961' ],\n    [ /\\\\UpEquilibrium /g, '\\u296E' ],\n    [ /\\\\ReverseUpEquilibrium /g, '\\u296F' ],\n    [ /\\\\RoundImplies /g, '\\u2970' ],\n    [ /\\\\ElsevierGlyph\\{E214\\}/g, '\\u297C' ],\n    [ /\\\\ElsevierGlyph\\{E215\\}/g, '\\u297D' ],\n    [ /\\\\Elztfnc /g, '\\u2980' ],\n    [ /\\\\ElsevierGlyph\\{3018\\}/g, '\\u2985' ],\n    [ /\\\\Elroang /g, '\\u2986' ],\n    [ /\\\\ElsevierGlyph\\{E291\\}/g, '\\u2994' ],\n    [ /\\\\Elzddfnc /g, '\\u2999' ],\n    [ /\\\\Angle /g, '\\u299C' ],\n    [ /\\\\Elzlpargt /g, '\\u29A0' ],\n    [ /\\\\ElsevierGlyph\\{E260\\}/g, '\\u29B5' ],\n    [ /\\\\ElsevierGlyph\\{E61B\\}/g, '\\u29B6' ],\n    [ /\\\\ElzLap /g, '\\u29CA' ],\n    [ /\\\\Elzdefas /g, '\\u29CB' ],\n    [ /\\\\LeftTriangleBar /g, '\\u29CF' ],\n    [ /\\\\NotLeftTriangleBar /g, '\\u29CF-00338' ],\n    [ /\\\\RightTriangleBar /g, '\\u29D0' ],\n    [ /\\\\NotRightTriangleBar /g, '\\u29D0-00338' ],\n    [ /\\\\ElsevierGlyph\\{E372\\}/g, '\\u29DC' ],\n    [ /\\\\blacklozenge /g, '\\u29EB' ],\n    [ /\\\\RuleDelayed /g, '\\u29F4' ],\n    [ /\\\\Elxuplus /g, '\\u2A04' ],\n    [ /\\\\ElzThr /g, '\\u2A05' ],\n    [ /\\\\Elxsqcup /g, '\\u2A06' ],\n    [ /\\\\ElzInf /g, '\\u2A07' ],\n    [ /\\\\ElzSup /g, '\\u2A08' ],\n    [ /\\\\ElzCint /g, '\\u2A0D' ],\n    [ /\\\\clockoint /g, '\\u2A0F' ],\n    [ /\\\\ElsevierGlyph\\{E395\\}/g, '\\u2A10' ],\n    [ /\\\\sqrint /g, '\\u2A16' ],\n    [ /\\\\ElsevierGlyph\\{E25A\\}/g, '\\u2A25' ],\n    [ /\\\\ElsevierGlyph\\{E25B\\}/g, '\\u2A2A' ],\n    [ /\\\\ElsevierGlyph\\{E25C\\}/g, '\\u2A2D' ],\n    [ /\\\\ElsevierGlyph\\{E25D\\}/g, '\\u2A2E' ],\n    [ /\\\\ElzTimes /g, '\\u2A2F' ],\n    [ /\\\\ElsevierGlyph\\{E25E\\}/g, '\\u2A34' ],\n    [ /\\\\ElsevierGlyph\\{E25E\\}/g, '\\u2A35' ],\n    [ /\\\\ElsevierGlyph\\{E259\\}/g, '\\u2A3C' ],\n    [ /\\\\amalg /g, '\\u2A3F' ],\n    [ /\\\\ElzAnd /g, '\\u2A53' ],\n    [ /\\\\ElzOr /g, '\\u2A54' ],\n    [ /\\\\ElsevierGlyph\\{E36E\\}/g, '\\u2A55' ],\n    [ /\\\\ElOr /g, '\\u2A56' ],\n    [ /\\\\perspcorrespond /g, '\\u2A5E' ],\n    [ /\\\\Elzminhat /g, '\\u2A5F' ],\n    [ /\\\\ElsevierGlyph\\{225A\\}/g, '\\u2A63' ],\n    [ /\\\\stackrel\\{*\\}\\{=\\}/g, '\\u2A6E' ],\n    [ /\\\\Equal /g, '\\u2A75' ],\n    [ /\\\\leqslant /g, '\\u2A7D' ],\n    [ /\\\\nleqslant /g, '\\u2A7D-00338' ],\n    [ /\\\\geqslant /g, '\\u2A7E' ],\n    [ /\\\\ngeqslant /g, '\\u2A7E-00338' ],\n    [ /\\\\lessapprox /g, '\\u2A85' ],\n    [ /\\\\gtrapprox /g, '\\u2A86' ],\n    [ /\\\\lneq /g, '\\u2A87' ],\n    [ /\\\\gneq /g, '\\u2A88' ],\n    [ /\\\\lnapprox /g, '\\u2A89' ],\n    [ /\\\\gnapprox /g, '\\u2A8A' ],\n    [ /\\\\lesseqqgtr /g, '\\u2A8B' ],\n    [ /\\\\gtreqqless /g, '\\u2A8C' ],\n    [ /\\\\eqslantless /g, '\\u2A95' ],\n    [ /\\\\eqslantgtr /g, '\\u2A96' ],\n    [ /\\\\Pisymbol\\{ppi020\\}\\{117\\}/g, '\\u2A9D' ],\n    [ /\\\\Pisymbol\\{ppi020\\}\\{105\\}/g, '\\u2A9E' ],\n    [ /\\\\NestedLessLess /g, '\\u2AA1' ],\n    [ /\\\\NotNestedLessLess /g, '\\u2AA1-00338' ],\n    [ /\\\\NestedGreaterGreater /g, '\\u2AA2' ],\n    [ /\\\\NotNestedGreaterGreater /g, '\\u2AA2-00338' ],\n    [ /\\\\preceq /g, '\\u2AAF' ],\n    [ /\\\\not\\\\preceq /g, '\\u2AAF-00338' ],\n    [ /\\\\succeq /g, '\\u2AB0' ],\n    [ /\\\\not\\\\succeq /g, '\\u2AB0-00338' ],\n    [ /\\\\precneqq /g, '\\u2AB5' ],\n    [ /\\\\succneqq /g, '\\u2AB6' ],\n    [ /\\\\precapprox /g, '\\u2AB7' ],\n    [ /\\\\succapprox /g, '\\u2AB8' ],\n    [ /\\\\precnapprox /g, '\\u2AB9' ],\n    [ /\\\\succnapprox /g, '\\u2ABA' ],\n    [ /\\\\subseteqq /g, '\\u2AC5' ],\n    [ /\\\\nsubseteqq /g, '\\u2AC5-00338' ],\n    [ /\\\\supseteqq /g, '\\u2AC6' ],\n    [ /\\\\nsupseteqq/g, '\\u2AC6-00338' ],\n    [ /\\\\subsetneqq /g, '\\u2ACB' ],\n    [ /\\\\supsetneqq /g, '\\u2ACC' ],\n    [ /\\\\ElsevierGlyph\\{E30D\\}/g, '\\u2AEB' ],\n    [ /\\\\Elztdcol /g, '\\u2AF6' ],\n    [ /\\\\ElsevierGlyph\\{300A\\}/g, '\\u300A' ],\n    [ /\\\\ElsevierGlyph\\{300B\\}/g, '\\u300B' ],\n    [ /\\\\ElsevierGlyph\\{3018\\}/g, '\\u3018' ],\n    [ /\\\\ElsevierGlyph\\{3019\\}/g, '\\u3019' ],\n    [ /\\\\openbracketleft /g, '\\u301A' ],\n    [ /\\\\openbracketright /g, '\\u301B' ]\n  ]\n\n  return this;\n} // end function BibtexParser\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = BibtexParser;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/libs/bibtex.js\n ** module id = 28\n ** module chunks = 0 3\n **/","define([\n    \"mvc/base-mvc\",\n    \"mvc/citation/citation-model\",\n    \"utils/localization\"\n], function( baseMVC, citationModel, _l ){\n\nvar CitationView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'citations',\n    render: function() {\n        this.$el.append( \"<p>\" + this.formattedReference() + \"</p>\" );\n        return this;\n    },\n    formattedReference: function() {\n        var model = this.model;\n        var entryType = model.entryType();\n        var fields = model.fields();\n\n        var ref = \"\";\n        // Code inspired by...\n        // https://github.com/vkaravir/bib-publication-list/blob/master/src/bib-publication-list.js\n        var authorsAndYear = this._asSentence( (fields.author ? fields.author : \"\") + (fields.year ? (\" (\" + fields.year + \")\") : \"\") ) + \" \";\n        var title = fields.title || \"\";\n        var pages = fields.pages ? (\"pp. \" + fields.pages) : \"\";\n        var address = fields.address;\n        if( entryType == \"article\" ) {\n            var volume = (fields.volume ? fields.volume : \"\") +\n                         (fields.number ? ( \" (\" + fields.number + \")\" ) : \"\") +\n                         (pages ? \", \" + pages : \"\");\n            ref = authorsAndYear + this._asSentence(title) +\n                    (fields.journal ? (\"In <em>\" + fields.journal + \", \") : \"\") +\n                    this._asSentence(volume) + \n                    this._asSentence(fields.address) +\n                    \"<\\/em>\";\n        } else if( entryType == \"inproceedings\" || entryType == \"proceedings\" ) {\n            ref = authorsAndYear + \n                    this._asSentence(title) + \n                    (fields.booktitle ? (\"In <em>\" + fields.booktitle + \", \") : \"\") +\n                    (pages ? pages : \"\") +\n                    (address ? \", \" + address : \"\") + \n                    \".<\\/em>\";\n        } else if( entryType == \"mastersthesis\" || entryType == \"phdthesis\" ) {\n            ref = authorsAndYear + this._asSentence(title) +\n                    (fields.howpublished ? fields.howpublished + \". \" : \"\") +\n                    (fields.note ? fields.note + \".\" : \"\");\n        } else if( entryType == \"techreport\" ) {\n            ref = authorsAndYear + this._asSentence(title) +\n                    this._asSentence(fields.institution) +\n                    this._asSentence(fields.number) +\n                    this._asSentence(fields.type);\n        } else if( entryType == \"book\" || entryType == \"inbook\" || entryType == \"incollection\" ) {\n            ref = authorsAndYear + \" \" + this._formatBookInfo(fields);\n        } else {\n            ref = authorsAndYear + \" \" + this._asSentence(title) +\n                    this._asSentence(fields.howpublished) +\n                    this._asSentence(fields.note);\n        }\n        var doiUrl = \"\";\n        if( fields.doi ) {\n            doiUrl = 'http://dx.doi.org/' + fields.doi;\n            ref += '[<a href=\"' + doiUrl + '\" target=\"_blank\">doi:' + fields.doi + \"</a>]\";\n        }\n        var url = fields.url || doiUrl;\n        if( url ) {\n            ref += '[<a href=\"' + url + '\" target=\"_blank\">Link</a>]';\n        }\n        return ref;\n    },\n    _formatBookInfo: function(fields) {\n        var info = \"\";\n        if( fields.chapter ) {\n            info += fields.chapter + \" in \";\n        }\n        if( fields.title ) {\n            info += \"<em>\" + fields.title + \"<\\/em>\";\n        }\n        if( fields.editor ) {\n            info += \", Edited by \" + fields.editor + \", \";\n        }\n        if( fields.publisher) {\n            info += \", \" + fields.publisher;\n        }\n        if( fields.pages ) {\n            info += \", pp. \" + fields.pages + \"\";\n        }\n        if( fields.series ) {\n            info += \", <em>\" + fields.series + \"<\\/em>\";\n        }\n        if( fields.volume ) {\n            info += \", Vol.\" + fields.volume;\n        }\n        if( fields.issn ) {\n            info += \", ISBN: \" + fields.issn;\n        }\n        return info + \".\";\n    },\n    _asSentence: function(str) {\n        return (str && str.trim()) ? str + \". \" : \"\";\n    }\n});\n\nvar CitationListView = Backbone.View.extend({\n    el: '#citations',\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.listenTo( this.collection, 'add', this.renderCitation );\n    },\n\n    events: {\n        'click .citations-to-bibtex': 'showBibtex',\n        'click .citations-to-formatted': 'showFormatted'\n    },\n\n    renderCitation: function( citation ) {\n        var citationView = new CitationView( { model: citation } );\n        this.$(\".citations-formatted\").append( citationView.render().el );\n        var rawTextarea = this.$(\".citations-bibtex-text\");\n        rawTextarea.val( rawTextarea.val() + \"\\n\\r\" + citation.attributes.content );\n    },\n\n    render: function() {\n        this.$el.html(this.citationsElement());\n        this.collection.each(function( item ){\n            this.renderCitation( item );\n        }, this);\n        this.showFormatted();\n    },\n\n    showBibtex: function() {\n        this.$(\".citations-to-formatted\").show();\n        this.$(\".citations-to-bibtex\").hide();\n        this.$(\".citations-bibtex\").show();\n        this.$(\".citations-formatted\").hide();\n        this.$(\".citations-bibtex-text\").select();\n    },\n\n    showFormatted: function() {\n        this.$(\".citations-to-formatted\").hide();\n        this.$(\".citations-to-bibtex\").show();\n        this.$(\".citations-bibtex\").hide();\n        this.$(\".citations-formatted\").show();\n    },\n\n    partialWarningElement: function() {\n        if( this.collection.partial ) {\n            return [\n                '<div style=\"padding:5px 10px\">',\n                '<b>Warning: This is a experimental feature.</b> Most Galaxy tools will not annotate',\n                ' citations explicitly at this time. When writing up your analysis, please manually',\n                ' review your histories and find all references',\n                ' that should be cited in order to completely describe your work. Also, please remember to',\n                ' <a href=\"https://wiki.galaxyproject.org/CitingGalaxy\">cite Galaxy</a>.',\n                '</div>',\n            ].join('');\n        } else {\n            return '';\n        }\n    },\n\n    citationsElement: function() {\n        return [\n            '<div class=\"toolForm\">',\n                '<div class=\"toolFormTitle\">',\n                    _l(\"Citations\"),\n                    ' <button type=\"button\" class=\"btn btn-xs citations-to-bibtex\" title=\"Show all in BibTeX format.\"><i class=\"fa fa-pencil-square-o\"></i> Show BibTeX</button>',\n                    ' <button type=\"button\" class=\"btn btn-xs citations-to-formatted\" title=\"Return to formatted citation list.\"><i class=\"fa fa-times\"></i> Hide BibTeX</button>',\n                '</div>',\n                '<div class=\"toolFormBody\" style=\"padding:5px 10px\">',\n                this.partialWarningElement(),\n                '<span class=\"citations-formatted\" style=\"word-wrap: break-word;\"></span>',\n                '</div>',\n                '<div class=\"citations-bibtex toolFormBody\" style=\"padding:5px 10px\">',\n                '<textarea style=\"width: 100%; height: 500px;\" class=\"citations-bibtex-text\"></textarea>',\n                '</div>',\n            '</div>'\n        ].join( '' );\n    }\n});\n\n//==============================================================================\nreturn {\n    CitationView : CitationView,\n    CitationListView  : CitationListView\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/citation/citation-view.js\n ** module id = 29\n ** module chunks = 0 3\n **/","/*\n    This class maps the form dom to an api compatible javascript dictionary.\n*/\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum.\n        */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission.\n        */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            return matchIds( model.inputs, this.flat_dict, callback );\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Match context\n     * @param{dict}   inputs    - Dictionary of input elements\n     * @param{dict}   key       - Reference key which is matched to an input name e.g. data_ref\n     * @param{dict}   callback  - Called with matched context i.e. callback( input, referenced_input )\n     */\n    var matchContext = function( inputs, key, callback, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            input && input.type && ( context[ input.name ] = input );\n        });\n        _.each( inputs, function ( input ) {\n            if ( _.isObject( input ) ) {\n                if ( input.type && context[ input[ key ] ] ) {\n                    callback ( input, context[ input[ key ] ] );\n                } else {\n                    matchContext( input, key, callback, context );\n                }\n            }\n        });\n    };\n\n    /** Matches a tool model to a dictionary, indexed with flat ids\n     * @param{dict}   inputs    - Dictionary of input elements\n     * @param{dict}   mapping   - Dictionary containing flat ids\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var matchIds = function( inputs, mapping, callback ) {\n        var result = {};\n        var self = this;\n        function search ( id, head ) {\n            for ( var i in head ) {\n                var node = head[ i ];\n                var index = node.name;\n                id != '' && ( index = id + '|' + index );\n                switch ( node.type ) {\n                    case 'repeat':\n                        for ( var j in node.cache ) {\n                            search ( index + '_' + j, node.cache[ j ] );\n                        }\n                        break;\n                    case 'conditional':\n                        var selectedCase = matchCase( node, node.test_param && node.test_param.value );\n                        selectedCase != -1 && search ( index, node.cases[ selectedCase ].inputs );\n                        break;\n                    case 'section':\n                        search ( index, node.inputs );\n                        break;\n                    default:\n                        var mapped = mapping[ index ];\n                        mapped && callback( mapped, node );\n                }\n            }\n        }\n        search( '', inputs );\n        return result;\n    };\n\n    return {\n        Manager         : Manager,\n        matchIds        : matchIds,\n        matchContext    : matchContext\n    }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-data.js\n ** module id = 34\n ** module chunks = 0 3\n **/","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.field = options.field;\n\n            // set text labels and icons for collapsible button\n            this.text_enable    = app.options.text_enable || 'Enable';\n            this.text_disable   = app.options.text_disable || 'Disable';\n            this.cls_enable     = app.options.cls_enable || 'fa fa-caret-square-o-down';\n            this.cls_disable    = app.options.cls_disable || 'fa fa-caret-square-o-up';\n\n            // set element\n            this.setElement(this._template(options));\n\n            // link elements\n            this.$field = this.$('.ui-form-field');\n            this.$preview = this.$('.ui-form-preview');\n            this.$collapsible = this.$('.ui-form-collapsible');\n            this.$collapsible_icon = this.$('.ui-form-collapsible').find('.icon');\n            this.$error_text = this.$('.ui-form-error-text');\n            this.$error = this.$('.ui-form-error');\n            this.$backdrop = this.$('.ui-form-backdrop');\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            this.field.collapsed = options.collapsible_value !== undefined && JSON.stringify( options.value ) == JSON.stringify( options.collapsible_value );\n\n            // refresh view\n            this._refresh();\n\n            // add collapsible hide/show\n            var self = this;\n            this.$collapsible.on('click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                self._refresh();\n            });\n        },\n\n        /** Disable input element\n        */\n        disable: function( silent ) {\n            this.$backdrop.show();\n            silent && this.$backdrop.css({ 'opacity': 0, 'cursor': 'default' } );\n        },\n\n        /** Set error text\n        */\n        error: function(text) {\n            this.$error_text.html(text);\n            this.$error.show();\n            this.$el.addClass('ui-error');\n        },\n\n        /** Reset this view\n        */\n        reset: function() {\n            this.$error.hide();\n            this.$el.removeClass('ui-error');\n        },\n\n        /** Refresh element\n        */\n        _refresh: function() {\n            this.$collapsible_icon.removeClass().addClass('icon');\n            if (!this.field.collapsed) {\n                this.$field.fadeIn('fast');\n                this.$preview.hide();\n                this._tooltip(this.text_disable, this.cls_disable);\n            } else {\n                this.$field.hide();\n                this.$preview.show();\n                this._tooltip(this.text_enable, this.cls_enable);\n            }\n            this.app.trigger('change');\n        },\n\n        /** Set tooltip text\n        */\n        _tooltip: function(title, cls) {\n            this.$collapsible_icon.addClass(cls)\n                               .tooltip({ placement: 'bottom' })\n                               .attr('data-original-title', title)\n                               .tooltip('fixTitle').tooltip('hide');\n        },\n\n        /** Main Template\n        */\n        _template: function(options) {\n            var tmp =   '<div class=\"ui-form-element\">' +\n                            '<div class=\"ui-form-error ui-error\">' +\n                                '<span class=\"fa fa-arrow-down\"/><span class=\"ui-form-error-text\"/>' +\n                            '</div>' +\n                            '<div class=\"ui-form-title\">';\n            if ( !options.disabled && options.collapsible_value !== undefined ) {\n                tmp +=          '<div class=\"ui-form-collapsible\">' +\n                                    '<i class=\"icon\"/>' + options.label +\n                                '</div>';\n            } else {\n                tmp += options.label;\n            }\n            tmp +=          '</div>' +\n                            '<div class=\"ui-form-field\">';\n            tmp +=              '<div class=\"ui-form-info\">';\n            if (options.help) {\n                tmp +=              options.help;\n            }\n            if (options.argument && options.help.indexOf('(' + options.argument + ')') == -1) {\n                tmp +=              ' (' + options.argument + ')';\n            }\n            tmp +=              '</div>' +\n                                '<div class=\"ui-form-backdrop\"/>' +\n                            '</div>';\n            if ( options.collapsible_preview ) {\n                tmp +=      '<div class=\"ui-form-preview\">' + options.text_value + '</div>';\n            }\n            tmp += '</div>';\n            return tmp;\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-input.js\n ** module id = 35\n ** module chunks = 0 3\n **/","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/form/form-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp'\n        },\n\n        initialize: function( app, options ) {\n            this.app = app;\n        },\n\n        /** Returns an input field for a given field type\n        */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                this.app.incompatible = true;\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field\n        */\n        _fieldData: function( input_def ) {\n            var self = this;\n            return new SelectContent.View( this.app, {\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                data        : input_def.options,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Select/Checkbox/Radio options field\n        */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // configure options fields\n            var options = [];\n            _.each( input_def.options, function( option ) {\n                options.push( { label: option[ 0 ], value: option[ 1 ] } );\n            });\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n            }\n\n            // create select field\n            var self = this;\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : options,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                searchable  : input_def.searchable,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Drill down options field\n        */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            var self = this;\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Text input field\n        */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options ) {\n                input_def.area = input_def.multiple;\n                if ( !Utils.validate( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            var self = this;\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                area        : input_def.area,\n                onchange    : function( new_value ) {\n                    input_def.onchange ? input_def.onchange( new_value ) : self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Slider field\n        */\n        _fieldSlider: function( input_def ) {\n            var self = this;\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Hidden field\n        */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field\n        */\n        _fieldBoolean: function( input_def ) {\n            var self = this;\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Color picker field\n        */\n        _fieldColor: function( input_def ) {\n            var self = this;\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** Library dataset field\n        */\n        _fieldLibrary: function( input_def ) {\n            var self = this;\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        },\n\n        /** FTP file field\n        */\n        _fieldFtp: function( input_def ) {\n            var self = this;\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : function() {\n                    self.app.trigger( 'change' );\n                }\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-parameters.js\n ** module id = 36\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-table', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'],\n        function(Utils, Table, Portlet, Ui) {\n\n/** This class creates a ui component which enables the dynamic creation of portlets\n*/\nvar View = Backbone.View.extend({\n    initialize : function(options) {\n        var self = this;\n        this.options = Utils.merge(options, {\n            title       : 'Section',\n            empty_text  : 'Not available.',\n            max         : null,\n            min         : null\n        });\n        this.setElement('<div/>');\n\n        // create button\n        this.button_new = new Ui.ButtonIcon({\n            icon    : 'fa-plus',\n            title   : 'Insert ' + this.options.title_new,\n            tooltip : 'Add new ' + this.options.title_new + ' block',\n            floating: 'clear',\n            onclick : function() {\n                if (options.onnew) {\n                    options.onnew();\n                }\n            }\n        });\n\n        // create table\n        this.table = new Table.View({\n            cls     : 'ui-table-plain',\n            content : ''\n        });\n        this.$el.append(this.table.$el);\n        this.$el.append($('<div/>').append(this.button_new.$el));\n\n        // reset list\n        this.list = {};\n        this.n = 0;\n    },\n\n    /** Number of repeat blocks\n    */\n    size: function() {\n        return this.n;\n    },\n\n    /** Add new repeat block\n    */\n    add: function(options) {\n        if (!options.id || this.list[options.id]) {\n            Galaxy.emit.debug('form-repeat::add()', 'Duplicate repeat block id.');\n            return;\n        }\n        this.n++;\n        var button_delete = new Ui.ButtonIcon({\n            icon    : 'fa-trash-o',\n            tooltip : 'Delete this repeat block',\n            cls     : 'ui-button-icon-plain',\n            onclick : function() {\n                if (options.ondel) {\n                    options.ondel();\n                }\n            }\n        });\n        var portlet = new Portlet.View({\n            id              : options.id,\n            title           : 'placeholder',\n            cls             : 'ui-portlet-repeat',\n            operations      : {\n                button_delete : button_delete\n            }\n        });\n        portlet.append(options.$el);\n        portlet.$el.addClass('section-row');\n        this.list[options.id] = portlet;\n        this.table.add(portlet.$el);\n        this.table.append('row_' + options.id, true);\n        if (this.options.max > 0 && this.n >= this.options.max) {\n            this.button_new.disable();\n        }\n        this._refresh();\n    },\n\n    /** Delete repeat block\n    */\n    del: function(id) {\n        if (!this.list[id]) {\n            Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n            return;\n        }\n        this.n--;\n        var table_row = this.table.get('row_' + id);\n        table_row.remove();\n        delete this.list[id];\n        this.button_new.enable();\n        this._refresh();\n    },\n\n    /** Hides add/del options\n    */\n    hideOptions: function() {\n        this.button_new.$el.hide();\n        _.each( this.list, function( portlet ) {\n            portlet.hideOperation('button_delete');\n        });\n        if( _.isEmpty( this.list ) ) {\n            this.$el.append( $('<div/>').addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n        }\n    },\n\n    /** Refresh view\n    */\n    _refresh: function() {\n        var index = 0;\n        for (var id in this.list) {\n            var portlet = this.list[id];\n            portlet.title(++index + ': ' + this.options.title);\n            if (this.n > this.options.min) {\n                portlet.showOperation('button_delete');\n            } else {\n                portlet.hideOperation('button_delete');\n            }\n        }\n    }\n});\n\nreturn {\n    View : View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-repeat.js\n ** module id = 37\n ** module chunks = 0 3\n **/","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-table',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-portlet',\n        'mvc/form/form-repeat',\n        'mvc/form/form-input',\n        'mvc/form/form-parameters'],\n    function(Utils, Table, Ui, Portlet, Repeat, InputElement, Parameters) {\n    var View = Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.inputs = options.inputs;\n\n            // fix table style\n            options.cls = 'ui-table-plain';\n\n            // add table class for tr tag\n            // this assist in transforming the form into a json structure\n            options.cls_tr = 'section-row';\n\n            // create/render views\n            this.table = new Table.View(options);\n            this.parameters = new Parameters(app, options);\n            this.setElement(this.table.$el);\n            this.render();\n        },\n\n        /** Render section view\n        */\n        render: function() {\n            this.table.delAll();\n            for (var i in this.inputs) {\n                this.add(this.inputs[i]);\n            }\n        },\n\n        /** Add a new input element\n        */\n        add: function(input) {\n            var self = this;\n            var input_def = jQuery.extend(true, {}, input);\n            input_def.id = input.id = Utils.uid();\n\n            // add to sequential list of inputs\n            this.app.input_list[input_def.id] = input_def;\n\n            // identify field type\n            var type = input_def.type;\n            switch(type) {\n                case 'conditional':\n                    this._addConditional(input_def);\n                    break;\n                case 'repeat':\n                    this._addRepeat(input_def);\n                    break;\n                case 'section':\n                    this._addSection(input_def);\n                    break;\n                default:\n                    this._addRow(input_def);\n            }\n        },\n\n        /** Add a conditional block\n        */\n        _addConditional: function(input_def) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.options.sustain_conditionals && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.options.onchange = function(value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_id = input_def.id + '-section-' + i;\n                    var section_row = self.table.get(section_id);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn('fast');\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger('change');\n            };\n\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section_id = input_def.id + '-section-' + i;\n                var sub_section = new View(this.app, {\n                    inputs  : input_def.cases[i].inputs\n                });\n                sub_section.$el.addClass('ui-table-section');\n                this.table.add(sub_section.$el);\n                this.table.append(sub_section_id);\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger('change');\n        },\n\n        /** Add a repeat block\n        */\n        _addRepeat: function(input_def) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                title_new       : input_def.title || '',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() {\n                    create(input_def.inputs);\n                    self.app.trigger('change');\n                }\n            });\n\n            // helper function to create new repeat blocks\n            function create (inputs) {\n                var sub_section_id = input_def.id + '-section-' + (block_index++);\n                var sub_section = new View(self.app, {\n                    inputs  : inputs\n                });\n                repeat.add({\n                    id      : sub_section_id,\n                    $el     : sub_section.$el,\n                    ondel   : function() {\n                        repeat.del(sub_section_id);\n                        self.app.trigger('change');\n                    }\n                });\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min ), input_def.default ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.options.sustain_repeats && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement(this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this.table.add(input_element.$el);\n            this.table.append(input_def.id);\n        },\n\n        /** Add a customized section\n        */\n        _addSection: function(input_def) {\n            var self = this;\n\n            // create sub section\n            var sub_section = new View(self.app, {\n                inputs  : input_def.inputs\n            });\n\n            // delete button\n            var button_visible = new Ui.ButtonIcon({\n                icon    : 'fa-eye-slash',\n                tooltip : 'Show/hide section',\n                cls     : 'ui-button-icon-plain'\n            });\n\n            // create portlet for sub section\n            var portlet = new Portlet.View({\n                title       : input_def.title || input_def.name,\n                cls         : 'ui-portlet-section',\n                collapsible : true,\n                collapsed   : true,\n                operations  : {\n                    button_visible: button_visible\n                }\n            });\n            portlet.append( sub_section.$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            portlet.setOperation( 'button_visible', function() {\n                if( portlet.collapsed ) {\n                    portlet.expand();\n                } else {\n                    portlet.collapse();\n                }\n            });\n\n            // add expansion event handler\n            portlet.on( 'expanded', function() {\n                button_visible.setIcon( 'fa-eye' );\n            });\n            portlet.on( 'collapsed', function() {\n                button_visible.setIcon( 'fa-eye-slash' );\n            });\n            this.app.on( 'expand', function( input_id ) {\n                ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand();\n            });\n\n            // show sub section if requested\n            input_def.expanded && portlet.expand();\n\n            // create table row\n            this.table.add(portlet.$el);\n            this.table.append(input_def.id);\n        },\n\n        /** Add a single input field element\n        */\n        _addRow: function(input_def) {\n            var id = input_def.id;\n            var field = this.parameters.create(input_def);\n            this.app.field_list[id] = field;\n            var input_element = new InputElement(this.app, {\n                name                : input_def.name,\n                label               : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value || input_def.value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                field               : field\n            });\n            this.app.element_list[id] = input_element;\n            this.table.add(input_element.$el);\n            this.table.append(id);\n            input_def.hidden && this.table.get(id).hide();\n            return field;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-section.js\n ** module id = 38\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-tabs'], function(Utils, Ui, Tabs) {\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(app, options) {\n        // link app and options\n        this.app = app;\n        this.options = options;\n\n        // track current history elements\n        this.history = {};\n\n\n        // link this\n        var self = this;\n\n        // add element\n        this.setElement('<div class=\"ui-select-content\"/>');\n\n        // list of select fieldsFormSection\n        this.list = {};\n\n        // radio button options\n        var radio_buttons = [];\n\n        // identify selector type\n        if (options.type == 'data_collection') {\n            this.mode = 'collection';\n        } else {\n            if (options.multiple) {\n                this.mode = 'multiple';\n            } else {\n                this.mode = 'single';\n            }\n        }\n\n        // set initial state\n        this.current = this.mode;\n        this.list = {};\n\n        // error messages\n        var extensions = Utils.textify(options.extensions);\n        var hda_error = 'No dataset available.';\n        if (extensions) {\n            hda_error = 'No ' + extensions + ' dataset available.';\n        }\n        var hdca_error = 'No dataset list available.';\n        if (extensions) {\n            hdca_error = 'No ' + extensions + ' dataset collection available.';\n        }\n\n        // add single dataset selector\n        if (this.mode == 'single') {\n            radio_buttons.push({\n                icon    : 'fa-file-o',\n                value   : 'single',\n                tooltip : 'Single dataset'\n            });\n            this.select_single = new Ui.Select.View({\n                optional    : options.optional,\n                error_text  : hda_error,\n                onchange    : function() {\n                    self.trigger('change');\n                }\n            });\n            this.list['single'] = {\n                field: this.select_single,\n                type : 'hda'\n            };\n        }\n\n        // add multiple dataset selector\n        if (this.mode == 'single' || this.mode == 'multiple') {\n            radio_buttons.push({\n                icon    : 'fa-files-o',\n                value   : 'multiple',\n                tooltip : 'Multiple datasets'\n            });\n            this.select_multiple = new Ui.Select.View({\n                multiple    : true,\n                searchable  : false,\n                optional    : options.optional,\n                error_text  : hda_error,\n                onchange    : function() {\n                    self.trigger('change');\n                }\n            });\n            this.list['multiple'] = {\n                field: this.select_multiple,\n                type : 'hda'\n            };\n        }\n\n        // add collection selector\n        if (this.mode == 'single' || this.mode == 'multiple' || this.mode == 'collection') {\n            radio_buttons.push({\n                icon    : 'fa-folder-o',\n                value   : 'collection',\n                tooltip : 'Dataset collection'\n            });\n            var multiple = this.mode == 'multiple';\n            this.select_collection = new Ui.Select.View({\n                error_text  : hdca_error,\n                multiple    : multiple,\n                searchable  : false,\n                optional    : options.optional,\n                onchange    : function() {\n                    self.trigger('change');\n                }\n            });\n            this.list['collection'] = {\n                field: this.select_collection,\n                type : 'hdca'\n            };\n        }\n\n        // create button\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.current,\n            data    : radio_buttons,\n            onchange: function(value) {\n                self.current = value;\n                self.refresh();\n                self.trigger('change');\n            }\n        });\n\n        // add batch mode information\n        this.$batch = $(this.template_batch());\n\n        // number of radio buttons\n        var n_buttons = _.size(this.list);\n\n        // add button to dom\n        var button_width = 0;\n        if (n_buttons > 1) {\n            this.$el.append(this.button_type.$el);\n            button_width = Math.max(0, _.size(this.list) * 35) + 'px';\n        }\n\n        // append field elements\n        for (var i in this.list) {\n            this.$el.append(this.list[i].field.$el.css({\n                'margin-left': button_width\n            }));\n        }\n\n        // append batch message\n        this.$el.append(this.$batch.css({\n            'margin-left': button_width\n        }));\n\n        // update options\n        this.update(options.data);\n\n        // set initial value\n        if (this.options.value !== undefined) {\n            this.value(this.options.value);\n        }\n\n        // refresh view\n        this.refresh();\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            if (options.onchange) {\n                options.onchange(self.value());\n            }\n        });\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        for (var i in this.list) {\n            this.list[i].field.wait();\n        }\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        for (var i in this.list) {\n            this.list[i].field.unwait();\n        }\n    },\n\n    /** Update content selector */\n    update: function(options) {\n        // update a particular select field\n        var self = this;\n        function _update(field, options) {\n            if (field) {\n                // identify available options\n                var select_options = [];\n                for (var i in options) {\n                    var item = options[i];\n                    select_options.push({\n                        hid  : item.hid,\n                        label: item.hid + ': ' + item.name,\n                        value: item.id\n                    });\n                    // backup to local history\n                    self.history[item.id + '_' + item.src] = item;\n                }\n                // update field\n                field.add( select_options, function( a, b ) { return b.hid - a.hid } );\n            }\n        }\n\n        // update available options\n        _update(this.select_single, options.hda);\n        _update(this.select_multiple, options.hda);\n        _update(this.select_collection, options.hdca);\n    },\n\n    /** Return the currently selected dataset values */\n    value : function (new_value) {\n        // update current value\n        if (new_value !== undefined) {\n            if (new_value && new_value.values) {\n                try {\n                    // create list with values\n                    var list = [];\n                    for (var i in new_value.values) {\n                        list.push(new_value.values[i].id);\n                    }\n\n                    // identify suitable select field\n                    if (new_value && new_value.values.length > 0 && new_value.values[0].src == 'hdca') {\n                        this.current = 'collection';\n                        this.select_collection.value(list);\n                    } else {\n                        if (this.mode == 'multiple') {\n                            this.current = 'multiple';\n                            this.select_multiple.value(list);\n                        } else {\n                            this.current = 'single';\n                            this.select_single.value(list[0]);\n                        }\n                    }\n                } catch (err) {\n                    Galaxy.emit.debug('tools-select-content::value()', 'Skipped.');\n                }\n            } else {\n                for (var i in this.list) {\n                    this.list[i].field.value(null);\n                }\n            }\n        }\n\n        // refresh view\n        this.refresh();\n\n        // validate value\n        var id_list = this._select().value();\n        if (id_list === null) {\n            return null;\n        }\n\n        // transform into an array\n        if (!(id_list instanceof Array)) {\n            id_list = [id_list];\n        }\n\n        // check if value exists\n        if (id_list.length === 0) {\n            return null;\n        }\n\n        // prepare result dict\n        var result = {\n            batch   : this._batch(),\n            values  : []\n        }\n\n        // append to dataset ids\n        for (var i in id_list) {\n            var details = this.history[id_list[i] + '_' + this.list[this.current].type];\n            if (details) {\n                result.values.push(details);\n            } else {\n                return null;\n            }\n        }\n\n        // sort by history ids\n        result.values.sort(function(a, b){\n            return a.hid - b.hid;\n        });\n\n        // return\n        return result;\n    },\n\n    /** Refreshes data selection view */\n    refresh: function() {\n        this.button_type.value(this.current);\n        for (var i in this.list) {\n            var $el = this.list[i].field.$el;\n            if (this.current == i) {\n                $el.show();\n            } else {\n                $el.hide();\n            }\n        }\n        if (this._batch()) {\n            this.$batch.show();\n        } else {\n            this.$batch.hide();\n        }\n    },\n\n    /** Assists in selecting the current field */\n    _select: function() {\n        return this.list[this.current].field;\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function() {\n        if (this.current == 'collection') {\n            var hdca = this.history[this._select().value() + '_hdca'];\n            if (hdca && hdca.map_over_type) {\n                return true;\n            }\n        }\n        if (this.current != 'single') {\n            if (this.mode == 'single') {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Batch message template */\n    template_batch: function() {\n        return  '<div class=\"ui-form-info\">' +\n                    '<i class=\"fa fa-sitemap\" style=\"font-size: 1.2em; padding: 2px 5px;\"/>' +\n                    'This is a batch mode input field. A separate job will be triggered for each dataset.' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-select-content.js\n ** module id = 39\n ** module chunks = 0 3\n **/","/**\n    This is the main class of the form plugin. It is referenced as 'app' in all lower level modules.\n*/\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data'],\n    function(Utils, Portlet, Ui, FormSection, FormData) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            this.options = Utils.merge(options, {\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : ''\n            });\n            this.modal = ( parent.Galaxy && parent.Galaxy.modal ) || new Ui.Modal.View();\n            this.setElement('<div/>');\n            this.render();\n        },\n\n        /** Update available options */\n        update: function(new_model){\n            var self = this;\n            this.data.matchModel(new_model, function(input_id, node) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        // backup new options\n                        input.options = node.options;\n\n                        // get/update field\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if ((['data', 'data_collection', 'drill_down']).indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({\n                                            'label': opt[0],\n                                            'value': opt[1]\n                                        });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger('change');\n                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    if (active) {\n                        field.wait();\n                    } else {\n                        field.unwait();\n                    }\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications)\n        */\n        highlight: function (input_id, message, silent) {\n            // get input field\n            var input_element = this.element_list[input_id];\n\n            // check input element\n            if (input_element) {\n                // mark error\n                input_element.error(message || 'Please verify this parameter.');\n\n                // trigger expand event for parent containers\n                this.trigger('expand', input_id);\n\n                // scroll to first input element\n                if (!silent) {\n                    if (self==top) {\n                        var $panel = this.$el.parents().filter(function() {\n                            return $(this).css('overflow') == 'auto';\n                        }).first();\n                        $panel.animate({ scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 50 }, 500);\n                    } else {\n                        $('html, body').animate({ scrollTop : input_element.$el.offset().top - 20 }, 500);\n                    }\n                }\n            }\n        },\n\n        /** Highlights errors\n        */\n        errors: function(options) {\n            // hide previous error statements\n            this.trigger('reset');\n\n            // highlight all errors\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form\n        */\n        render: function() {\n            // link this\n            var self = this;\n\n            // reset events\n            this.off('change');\n            this.off('reset');\n\n            // reset field list, which contains the input field elements\n            this.field_list = {};\n\n            // reset sequential input definition list, which contains the input definitions as provided from the api\n            this.input_list = {};\n\n            // reset input element list, which contains the dom elements of each input element (includes also the input field)\n            this.element_list = {};\n\n            // creates a json data structure from the input form\n            this.data = new FormData.Manager(this);\n\n            // create ui elements\n            this._renderForm();\n\n            // refresh data\n            this.data.create();\n\n            // show errors on startup\n            if (this.options.initial_errors) {\n                this.errors(this.options);\n            }\n\n            // add listener which triggers on checksum change\n            var current_check = this.data.checksum();\n            this.on('change', function() {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.options.onchange && self.options.onchange();\n                }\n            });\n\n            // add reset listener\n            this.on('reset', function() {\n                for (var i in this.element_list) {\n                    this.element_list[i].reset();\n                }\n            });\n            return this;\n        },\n\n        /** Renders the UI elements required for the form\n        */\n        _renderForm: function() {\n            // create message view\n            this.message = new Ui.Message();\n\n            // create tool form section\n            this.section = new FormSection.View(this, {\n                inputs : this.options.inputs\n            });\n\n            // remove tooltips\n            $( '.tooltip' ).remove();\n\n            // create portlet\n            this.portlet = new Portlet.View({\n                icon        : this.options.icon,\n                title       : this.options.title,\n                cls         : this.options.cls,\n                operations  : this.options.operations,\n                buttons     : this.options.buttons,\n                collapsible : this.options.collapsible,\n                collapsed   : this.options.collapsed\n            });\n\n            // append message\n            this.portlet.append(this.message.$el);\n\n            // append tool section\n            this.portlet.append(this.section.$el);\n\n            // start form\n            this.$el.empty();\n            this.$el.append(this.portlet.$el);\n\n            // show message if available in model\n            if (this.options.message) {\n                this.message.update({\n                    persistent  : true,\n                    status      : 'warning',\n                    message     : this.options.message\n                });\n            }\n\n            // log\n            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/form/form-view.js\n ** module id = 40\n ** module chunks = 0 3\n **/","/**\n    This is the base class of the tool form plugin. This class is e.g. inherited by the regular and the workflow tool form.\n*/\ndefine(['utils/utils', 'utils/deferred', 'mvc/ui/ui-misc', 'mvc/form/form-view',\n        'mvc/tool/tool-template', 'mvc/citation/citation-model', 'mvc/citation/citation-view'],\n    function(Utils, Deferred, Ui, FormBase, ToolTemplate, CitationModel, CitationView) {\n    return FormBase.extend({\n        initialize: function(options) {\n            var self = this;\n            FormBase.prototype.initialize.call(this, options);\n            this.deferred = new Deferred();\n            if (options.inputs) {\n                this._buildForm(options);\n                options.needs_update && this.deferred.execute( function( process ) {\n                    self._updateModel( process );\n                });\n            } else {\n                this.deferred.execute(function(process) {\n                    self._buildModel(process, options, true);\n                });\n            }\n        },\n\n        /** Wait for deferred build processes before removal */\n        remove: function() {\n            var self = this;\n            this.$el.hide();\n            this.deferred.execute(function(){\n                FormBase.prototype.remove.call(self);\n                Galaxy.emit.debug('tool-form-base::remove()', 'Destroy view.');\n            });\n        },\n\n        /** Build form */\n        _buildForm: function(options) {\n            var self = this;\n            this.options = Utils.merge(options, this.options);\n            this.options = Utils.merge({\n                icon            : ( (options.icon === undefined) && 'fa-wrench' ) || '',\n                title           : '<b>' + options.name + '</b> ' + options.description + ' (Galaxy Version ' + options.version + ')',\n                operations      : this._operations(),\n                onchange        : function() {\n                    self.deferred.reset();\n                    self.deferred.execute(function(process) {\n                        self._updateModel(process);\n                    });\n                }\n            }, this.options);\n            this.options.customize && this.options.customize( this.options );\n            this.render();\n            if ( !this.options.collapsible ) {\n                this.$el.append( $( '<div/>' ).addClass( 'ui-margin-top-large' ).append( this._footer() ) );\n            }\n        },\n\n        /** Builds a new model through api call and recreates the entire form\n        */\n        _buildModel: function(process, options, hide_message) {\n            var self = this;\n            this.options.id = options.id;\n            this.options.version = options.version;\n\n            // build request url\n            var build_url = '';\n            var build_data = {};\n            if ( options.job_id ) {\n                build_url = Galaxy.root + 'api/jobs/' + options.job_id + '/build_for_rerun';\n            } else {\n                build_url = Galaxy.root + 'api/tools/' + options.id + '/build';\n                if ( Galaxy.params && Galaxy.params.tool_id == options.id ) {\n                    build_data = $.extend( {}, Galaxy.params );\n                    options.version && ( build_data[ 'tool_version' ] = options.version );\n                }\n            }\n\n            // get initial model\n            Utils.request({\n                type    : 'GET',\n                url     : build_url,\n                data    : build_data,\n                success : function(new_model) {\n                    self._buildForm(new_model['tool_model'] || new_model);\n                    !hide_message && self.message.update({\n                        status      : 'success',\n                        message     : 'Now you are using \\'' + self.options.name + '\\' version ' + self.options.version + ', id \\'' + self.options.id + '\\'.',\n                        persistent  : false\n                    });\n                    Galaxy.emit.debug('tool-form-base::initialize()', 'Initial tool model ready.', new_model);\n                    process.resolve();\n\n                },\n                error   : function(response) {\n                    var error_message = ( response && response.err_msg ) || 'Uncaught error.';\n                    if ( self.$el.is(':empty') ) {\n                        self.$el.prepend((new Ui.Message({\n                            message     : error_message,\n                            status      : 'danger',\n                            persistent  : true,\n                            large       : true\n                        })).$el);\n                    } else {\n                        Galaxy.modal.show({\n                            title   : 'Tool request failed',\n                            body    : error_message,\n                            buttons : {\n                                'Close' : function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                    Galaxy.emit.debug('tool-form::initialize()', 'Initial tool model request failed.', response);\n                    process.reject();\n                }\n            });\n        },\n\n        /** Request a new model for an already created tool form and updates the form inputs\n        */\n        _updateModel: function(process) {\n            // link this\n            var self = this;\n            var model_url = this.options.update_url || Galaxy.root + 'api/tools/' + this.options.id + '/build';\n            var current_state = {\n                tool_id         : this.options.id,\n                tool_version    : this.options.version,\n                inputs          : $.extend(true, {}, self.data.create())\n            }\n            this.wait(true);\n\n            // log tool state\n            Galaxy.emit.debug('tool-form-base::_updateModel()', 'Sending current state.', current_state);\n\n            // post job\n            Utils.request({\n                type    : 'POST',\n                url     : model_url,\n                data    : current_state,\n                success : function(new_model) {\n                    self.update(new_model['tool_model'] || new_model);\n                    self.options.update && self.options.update(new_model);\n                    self.wait(false);\n                    Galaxy.emit.debug('tool-form-base::_updateModel()', 'Received new model.', new_model);\n                    process.resolve();\n                },\n                error   : function(response) {\n                    Galaxy.emit.debug('tool-form-base::_updateModel()', 'Refresh request failed.', response);\n                    process.reject();\n                }\n            });\n        },\n\n        /** Create tool operation menu\n        */\n        _operations: function() {\n            var self = this;\n            var options = this.options;\n\n            // button for version selection\n            var versions_button = new Ui.ButtonMenu({\n                icon    : 'fa-cubes',\n                title   : (!options.narrow && 'Versions') || null,\n                tooltip : 'Select another tool version'\n            });\n            if (!options.sustain_version && options.versions && options.versions.length > 1) {\n                for (var i in options.versions) {\n                    var version = options.versions[i];\n                    if (version != options.version) {\n                        versions_button.addMenu({\n                            title   : 'Switch to ' + version,\n                            version : version,\n                            icon    : 'fa-cube',\n                            onclick : function() {\n                                // here we update the tool version (some tools encode the version also in the id)\n                                var id = options.id.replace(options.version, this.version);\n                                var version = this.version;\n                                // queue model request\n                                self.deferred.reset();\n                                self.deferred.execute(function(process) {\n                                    self._buildModel(process, {id: id, version: version})\n                                });\n                            }\n                        });\n                    }\n                }\n            } else {\n                versions_button.$el.hide();\n            }\n\n            // button for options e.g. search, help\n            var menu_button = new Ui.ButtonMenu({\n                icon    : 'fa-caret-down',\n                title   : (!options.narrow && 'Options') || null,\n                tooltip : 'View available options'\n            });\n            if(options.biostar_url) {\n                menu_button.addMenu({\n                    icon    : 'fa-question-circle',\n                    title   : 'Question?',\n                    tooltip : 'Ask a question about this tool (Biostar)',\n                    onclick : function() {\n                        window.open(options.biostar_url + '/p/new/post/');\n                    }\n                });\n                menu_button.addMenu({\n                    icon    : 'fa-search',\n                    title   : 'Search',\n                    tooltip : 'Search help for this tool (Biostar)',\n                    onclick : function() {\n                        window.open(options.biostar_url + '/local/search/page/?q=' + options.name);\n                    }\n                });\n            };\n            menu_button.addMenu({\n                icon    : 'fa-share',\n                title   : 'Share',\n                tooltip : 'Share this tool',\n                onclick : function() {\n                    prompt('Copy to clipboard: Ctrl+C, Enter', window.location.origin + Galaxy.root + 'root?tool_id=' + options.id);\n                }\n            });\n\n            // add admin operations\n            if (Galaxy.user && Galaxy.user.get('is_admin')) {\n                menu_button.addMenu({\n                    icon    : 'fa-download',\n                    title   : 'Download',\n                    tooltip : 'Download this tool',\n                    onclick : function() {\n                        window.location.href = Galaxy.root + 'api/tools/' + options.id + '/download';\n                    }\n                });\n            }\n\n            // button for version selection\n            if (options.requirements && options.requirements.length > 0) {\n                menu_button.addMenu({\n                    icon    : 'fa-info-circle',\n                    title   : 'Requirements',\n                    tooltip : 'Display tool requirements',\n                    onclick : function() {\n                        if (!this.visible) {\n                            this.visible = true;\n                            self.message.update({\n                                persistent  : true,\n                                message     : ToolTemplate.requirements(options),\n                                status      : 'info'\n                            });\n                        } else {\n                            this.visible = false;\n                            self.message.update({\n                                message     : ''\n                            });\n                        }\n                    }\n                });\n            }\n\n            // add toolshed url\n            if (options.sharable_url) {\n                menu_button.addMenu({\n                    icon    : 'fa-external-link',\n                    title   : 'See in Tool Shed',\n                    tooltip : 'Access the repository',\n                    onclick : function() {\n                        window.open(options.sharable_url);\n                    }\n                });\n            }\n\n            return {\n                menu        : menu_button,\n                versions    : versions_button\n            }\n        },\n\n        /** Create footer\n        */\n        _footer: function() {\n            var options = this.options;\n            var $el = $( '<div/>' ).append( ToolTemplate.help( options ) );\n            if ( options.citations ) {\n                var $citations = $( '<div/>' );\n                var citations = new CitationModel.ToolCitationCollection();\n                citations.tool_id = options.id;\n                var citation_list_view = new CitationView.CitationListView({ el: $citations, collection: citations });\n                citation_list_view.render();\n                citations.fetch();\n                $el.append( $citations );\n            }\n            return $el;\n        }\n    });\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/tool/tool-form-base.js\n ** module id = 45\n ** module chunks = 0 3\n **/","/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\n define([\n    \"libs/underscore\",\n    \"viz/trackster/util\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tool-form\"\n\n], function(_, util, data, ToolForm) {\n    'use strict';\n\n/**\n * Mixin for tracking model visibility.\n */\nvar VisibilityMixin = {\n    hidden: false,\n\n    show: function() {\n        this.set(\"hidden\", false);\n    },\n\n    hide: function() {\n        this.set(\"hidden\", true);\n    },\n\n    toggle: function() {\n        this.set(\"hidden\", !this.get(\"hidden\"));\n    },\n\n    is_visible: function() {\n        return !this.attributes.hidden;\n    }\n\n};\n\n/**\n * A tool parameter.\n */\nvar ToolParameter = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        label: null,\n        type: null,\n        value: null,\n        html: null,\n        num_samples: 5\n    },\n\n    initialize: function(options) {\n        this.attributes.html = unescape(this.attributes.html);\n    },\n\n    copy: function() {\n        return new ToolParameter(this.toJSON());\n    },\n\n    set_value: function(value) {\n        this.set('value', value || '');\n    }\n});\n\nvar ToolParameterCollection = Backbone.Collection.extend({\n    model: ToolParameter\n});\n\n/**\n * A data tool parameter.\n */\nvar DataToolParameter = ToolParameter.extend({});\n\n/**\n * An integer tool parameter.\n */\nvar IntegerToolParameter = ToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseInt(value, 10));\n    },\n\n    /**\n     * Returns samples from a tool input.\n     */\n    get_samples: function() {\n        return d3.scale.linear()\n                        .domain([this.get('min'), this.get('max')])\n                        .ticks(this.get('num_samples'));\n    }\n});\n\nvar FloatToolParameter = IntegerToolParameter.extend({\n    set_value: function(value) {\n        this.set('value', parseFloat(value));\n    }\n});\n\n/**\n * A select tool parameter.\n */\nvar SelectToolParameter = ToolParameter.extend({\n    /**\n     * Returns tool options.\n     */\n    get_samples: function() {\n        return _.map(this.get('options'), function(option) {\n            return option[0];\n        });\n    }\n});\n\n// Set up dictionary of parameter types.\nToolParameter.subModelTypes = {\n    'integer': IntegerToolParameter,\n    'float': FloatToolParameter,\n    'data': DataToolParameter,\n    'select': SelectToolParameter\n};\n\n/**\n * A Galaxy tool.\n */\nvar Tool = Backbone.Model.extend({\n    // Default attributes.\n    defaults: {\n        id: null,\n        name: null,\n        description: null,\n        target: null,\n        inputs: [],\n        outputs: []\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function(options) {\n\n        // Set parameters.\n        this.set('inputs', new ToolParameterCollection(_.map(options.inputs, function(p) {\n            var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n            return new p_class(p);\n        })));\n    },\n\n    /**\n     *\n     */\n    toJSON: function() {\n        var rval = Backbone.Model.prototype.toJSON.call(this);\n\n        // Convert inputs to JSON manually.\n        rval.inputs = this.get('inputs').map(function(i) { return i.toJSON(); });\n        return rval;\n    },\n\n    /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n    remove_inputs: function(types) {\n        var tool = this,\n            incompatible_inputs = tool.get('inputs').filter( function(input) {\n                return ( types.indexOf( input.get('type') ) !== -1);\n            });\n        tool.get('inputs').remove(incompatible_inputs);\n    },\n\n    /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n    copy: function(only_samplable_inputs) {\n        var copy = new Tool(this.toJSON());\n\n        // Return only samplable inputs if flag is set.\n        if (only_samplable_inputs) {\n            var valid_inputs = new Backbone.Collection();\n            copy.get('inputs').each(function(input) {\n                if (input.get_samples()) {\n                    valid_inputs.push(input);\n                }\n            });\n            copy.set('inputs', valid_inputs);\n        }\n\n        return copy;\n    },\n\n    apply_search_results: function(results) {\n        ( _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide() );\n        return this.is_visible();\n    },\n\n    /**\n     * Set a tool input's value.\n     */\n    set_input_value: function(name, value) {\n        this.get('inputs').find(function(input) {\n            return input.get('name') === name;\n        }).set('value', value);\n    },\n\n    /**\n     * Set many input values at once.\n     */\n    set_input_values: function(inputs_dict) {\n        var self = this;\n        _.each(_.keys(inputs_dict), function(input_name) {\n            self.set_input_value(input_name, inputs_dict[input_name]);\n        });\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n    run: function() {\n        return this._run();\n    },\n\n    /**\n     * Rerun tool using regions and a target dataset.\n     */\n    rerun: function(target_dataset, regions) {\n        return this._run({\n            action: 'rerun',\n            target_dataset_id: target_dataset.id,\n            regions: regions\n        });\n    },\n\n    /**\n     * Returns input dict for tool's inputs.\n     */\n    get_inputs_dict: function() {\n        var input_dict = {};\n        this.get('inputs').each(function(input) {\n            input_dict[input.get('name')] = input.get('value');\n        });\n        return input_dict;\n    },\n\n    /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n    _run: function(additional_params) {\n        // Create payload.\n        var payload = _.extend({\n                tool_id: this.id,\n                inputs: this.get_inputs_dict()\n            }, additional_params);\n\n        // Because job may require indexing datasets, use server-side\n        // deferred to ensure that job is run. Also use deferred that\n        // resolves to outputs from tool.\n        var run_deferred = $.Deferred(),\n            ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: this.urlRoot,\n                data: JSON.stringify(payload),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Run job and resolve run_deferred to tool outputs.\n        $.when(ss_deferred.go()).then(function(result) {\n            run_deferred.resolve(new data.DatasetCollection(result));\n        });\n        return run_deferred;\n    }\n});\n_.extend(Tool.prototype, VisibilityMixin);\n\n/**\n * Tool view.\n */\nvar ToolView = Backbone.View.extend({\n\n});\n\n/**\n * Wrap collection of tools for fast access/manipulation.\n */\nvar ToolCollection = Backbone.Collection.extend({\n    model: Tool\n});\n\n/**\n * Label or section header in tool panel.\n */\nvar ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n/**\n * Section of tool panel with elements (labels and tools).\n */\nvar ToolSection = Backbone.Model.extend({\n    defaults: {\n        elems: [],\n        open: false\n    },\n\n    clear_search_results: function() {\n        _.each(this.attributes.elems, function(elt) {\n            elt.show();\n        });\n\n        this.show();\n        this.set(\"open\", false);\n    },\n\n    apply_search_results: function(results) {\n        var all_hidden = true,\n            cur_label;\n        _.each(this.attributes.elems, function(elt) {\n            if (elt instanceof ToolSectionLabel) {\n                cur_label = elt;\n                cur_label.hide();\n            }\n            else if (elt instanceof Tool) {\n                if (elt.apply_search_results(results)) {\n                    all_hidden = false;\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n        });\n\n        if (all_hidden) {\n            this.hide();\n        }\n        else {\n            this.show();\n            this.set(\"open\", true);\n        }\n    }\n});\n_.extend(ToolSection.prototype, VisibilityMixin);\n\n/**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\nvar ToolSearch = Backbone.Model.extend({\n    defaults: {\n        search_hint_string: \"search tools\",\n        min_chars_for_search: 3,\n        clear_btn_url: \"\",\n        search_url: \"\",\n        visible: true,\n        query: \"\",\n        results: null,\n        // ESC (27) will clear the input field and tool search filters\n        clear_key: 27\n    },\n\n    urlRoot: Galaxy.root + 'api/tools',\n\n    initialize: function() {\n        this.on(\"change:query\", this.do_search);\n    },\n\n    /**\n     * Do the search and update the results.\n     */\n    do_search: function() {\n        var query = this.attributes.query;\n\n        // If query is too short, do not search.\n        if (query.length < this.attributes.min_chars_for_search) {\n            this.set(\"results\", null);\n            return;\n        }\n\n        // Do search via AJAX.\n        var q = query;\n        // Stop previous ajax-request\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        // Start a new ajax-request in X ms\n        $(\"#search-clear-btn\").hide();\n        $(\"#search-spinner\").show();\n        var self = this;\n        this.timer = setTimeout(function () {\n            // log the search to analytics if present\n            if ( typeof ga !== 'undefined' ) {\n                ga( 'send', 'pageview', Galaxy.root + '?q=' + q );\n            }\n            $.get( self.urlRoot, { q: q }, function (data) {\n                self.set(\"results\", data);\n                $(\"#search-spinner\").hide();\n                $(\"#search-clear-btn\").show();\n            }, \"json\" );\n        }, 400 );\n    },\n\n    clear_search: function() {\n        this.set(\"query\", \"\");\n        this.set(\"results\", null);\n    }\n\n});\n_.extend(ToolSearch.prototype, VisibilityMixin);\n\n/**\n * Tool Panel.\n */\nvar ToolPanel = Backbone.Model.extend({\n\n    initialize: function(options) {\n        this.attributes.tool_search = options.tool_search;\n        this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n        this.attributes.tools = options.tools;\n        this.attributes.layout = new Backbone.Collection( this.parse(options.layout) );\n    },\n\n    /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n    parse: function(response) {\n        // Recursive function to parse tool panel elements.\n        var self = this,\n            // Helper to recursively parse tool panel.\n            parse_elt = function(elt_dict) {\n                var type = elt_dict.model_class;\n                // There are many types of tools; for now, anything that ends in 'Tool'\n                // is treated as a generic tool.\n                if ( type.indexOf('Tool') === type.length - 4 ) {\n                    return self.attributes.tools.get(elt_dict.id);\n                }\n                else if (type === 'ToolSection') {\n                    // Parse elements.\n                    var elems = _.map(elt_dict.elems, parse_elt);\n                    elt_dict.elems = elems;\n                    return new ToolSection(elt_dict);\n                }\n                else if (type === 'ToolSectionLabel') {\n                    return new ToolSectionLabel(elt_dict);\n                }\n            };\n\n        return _.map(response, parse_elt);\n    },\n\n    clear_search_results: function() {\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                panel_elt.clear_search_results();\n            }\n            else {\n                // Label or tool, so just show.\n                panel_elt.show();\n            }\n        });\n    },\n\n    apply_search_results: function() {\n        var results = this.get('tool_search').get('results');\n        if (results === null) {\n            this.clear_search_results();\n            return;\n        }\n\n        var cur_label = null;\n        this.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSectionLabel) {\n                cur_label = panel_elt;\n                cur_label.hide();\n            }\n            else if (panel_elt instanceof Tool) {\n                if (panel_elt.apply_search_results(results)) {\n                    if (cur_label) {\n                        cur_label.show();\n                    }\n                }\n            }\n            else {\n                // Starting new section, so clear current label.\n                cur_label = null;\n                panel_elt.apply_search_results(results);\n            }\n        });\n    }\n});\n\n/**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n/**\n * Base view that handles visibility based on model's hidden attribute.\n */\nvar BaseView = Backbone.View.extend({\n    initialize: function() {\n        this.model.on(\"change:hidden\", this.update_visible, this);\n        this.update_visible();\n    },\n    update_visible: function() {\n        ( this.model.attributes.hidden ? this.$el.hide() : this.$el.show() );\n    }\n});\n\n/**\n * Link to a tool.\n */\nvar ToolLinkView = BaseView.extend({\n    tagName: 'div',\n\n    render: function() {\n        // create element\n        var $link = $('<div/>');\n        $link.append(templates.tool_link(this.model.toJSON()));\n\n        // open upload dialog for upload tool\n        if (this.model.id === 'upload1') {\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                Galaxy.upload.show();\n            });\n        }\n        else if ( this.model.get( 'model_class' ) === 'Tool' ) { // regular tools\n            var self = this;\n            $link.find('a').on('click', function(e) {\n                e.preventDefault();\n                var form = new ToolForm.View( { id : self.model.id, version : self.model.get('version') } );\n                form.deferred.execute(function() {\n                    Galaxy.app.display( form );\n                });\n            });\n        }\n\n        // add element\n        this.$el.append($link);\n        return this;\n    }\n});\n\n/**\n * Panel label/section header.\n */\nvar ToolSectionLabelView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolPanelLabel',\n\n    render: function() {\n        this.$el.append( $(\"<span/>\").text(this.model.attributes.text) );\n        return this;\n    }\n});\n\n/**\n * Panel section.\n */\nvar ToolSectionView = BaseView.extend({\n    tagName: 'div',\n    className: 'toolSectionWrapper',\n\n    initialize: function() {\n        BaseView.prototype.initialize.call(this);\n        this.model.on(\"change:open\", this.update_open, this);\n    },\n\n    render: function() {\n        // Build using template.\n        this.$el.append( templates.panel_section(this.model.toJSON()) );\n\n        // Add tools to section.\n        var section_body = this.$el.find(\".toolSectionBody\");\n        _.each(this.model.attributes.elems, function(elt) {\n            if (elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: elt, className: \"toolTitle\"});\n                tool_view.render();\n                section_body.append(tool_view.$el);\n            }\n            else if (elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: elt});\n                label_view.render();\n                section_body.append(label_view.$el);\n            }\n            else {\n                // TODO: handle nested section bodies?\n            }\n        });\n        return this;\n    },\n\n    events: {\n        'click .toolSectionTitle > a': 'toggle'\n    },\n\n    /**\n     * Toggle visibility of tool section.\n     */\n    toggle: function() {\n        this.model.set(\"open\", !this.model.attributes.open);\n    },\n\n    /**\n     * Update whether section is open or close.\n     */\n    update_open: function() {\n        (this.model.attributes.open ?\n            this.$el.children(\".toolSectionBody\").slideDown(\"fast\") :\n            this.$el.children(\".toolSectionBody\").slideUp(\"fast\")\n        );\n    }\n});\n\nvar ToolSearchView = Backbone.View.extend({\n    tagName: 'div',\n    id: 'tool-search',\n    className: 'bar',\n\n    events: {\n        'click': 'focus_and_select',\n        'keyup :input': 'query_changed',\n        'click #search-clear-btn': 'clear'\n    },\n\n    render: function() {\n        this.$el.append( templates.tool_search(this.model.toJSON()) );\n        if (!this.model.is_visible()) {\n            this.$el.hide();\n        }\n        this.$el.find('[title]').tooltip();\n        return this;\n    },\n\n    focus_and_select: function() {\n        this.$el.find(\":input\").focus().select();\n    },\n\n    clear: function() {\n        this.model.clear_search();\n        this.$el.find(\":input\").val('');\n        this.focus_and_select();\n        return false;\n    },\n\n    query_changed: function( evData ) {\n        // check for the 'clear key' (ESC) first\n        if( ( this.model.attributes.clear_key ) &&\n            ( this.model.attributes.clear_key === evData.which ) ){\n            this.clear();\n            return false;\n        }\n        this.model.set(\"query\", this.$el.find(\":input\").val());\n    }\n});\n\n/**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\nvar ToolPanelView = Backbone.View.extend({\n    tagName: 'div',\n    className: 'toolMenu',\n\n    /**\n     * Set up view.\n     */\n    initialize: function() {\n        this.model.get('tool_search').on(\"change:results\", this.handle_search_results, this);\n    },\n\n    render: function() {\n        var self = this;\n\n        // Render search.\n        var search_view = new ToolSearchView( { model: this.model.get('tool_search') } );\n        search_view.render();\n        self.$el.append(search_view.$el);\n\n        // Render panel.\n        this.model.get('layout').each(function(panel_elt) {\n            if (panel_elt instanceof ToolSection) {\n                var section_title_view = new ToolSectionView({model: panel_elt});\n                section_title_view.render();\n                self.$el.append(section_title_view.$el);\n            }\n            else if (panel_elt instanceof Tool) {\n                var tool_view = new ToolLinkView({model: panel_elt, className: \"toolTitleNoSection\"});\n                tool_view.render();\n                self.$el.append(tool_view.$el);\n            }\n            else if (panel_elt instanceof ToolSectionLabel) {\n                var label_view = new ToolSectionLabelView({model: panel_elt});\n                label_view.render();\n                self.$el.append(label_view.$el);\n            }\n        });\n\n        // Setup tool link click eventing.\n        self.$el.find(\"a.tool-link\").click(function(e) {\n            // Tool id is always the first class.\n            var\n                tool_id = $(this).attr('class').split(/\\s+/)[0],\n                tool = self.model.get('tools').get(tool_id);\n\n            self.trigger(\"tool_link_click\", e, tool);\n        });\n\n        return this;\n    },\n\n    handle_search_results: function() {\n        var results = this.model.get('tool_search').get('results');\n        if (results && results.length === 0) {\n            $(\"#search-no-results\").show();\n        }\n        else {\n            $(\"#search-no-results\").hide();\n        }\n    }\n});\n\n/**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\nvar ToolFormView = Backbone.View.extend({\n    className: 'toolForm',\n\n    render: function() {\n        this.$el.children().remove();\n        this.$el.append( templates.tool_form(this.model.toJSON()) );\n    }\n});\n\n/**\n * Integrated tool menu + tool execution.\n */\nvar IntegratedToolMenuAndView = Backbone.View.extend({\n    className: 'toolMenuAndView',\n\n    initialize: function() {\n        this.tool_panel_view = new ToolPanelView({collection: this.collection});\n        this.tool_form_view = new ToolFormView();\n    },\n\n    render: function() {\n        // Render and append tool panel.\n        this.tool_panel_view.render();\n        this.tool_panel_view.$el.css(\"float\", \"left\");\n        this.$el.append(this.tool_panel_view.$el);\n\n        // Append tool form view.\n        this.tool_form_view.$el.hide();\n        this.$el.append(this.tool_form_view.$el);\n\n        // On tool link click, show tool.\n        var self = this;\n        this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n            // Prevents click from activating link:\n            e.preventDefault();\n            // Show tool that was clicked on:\n            self.show_tool(tool);\n        });\n    },\n\n    /**\n     * Fetch and display tool.\n     */\n    show_tool: function(tool) {\n        var self = this;\n        tool.fetch().done( function() {\n            self.tool_form_view.model = tool;\n            self.tool_form_view.render();\n            self.tool_form_view.$el.show();\n            $('#left').width(\"650px\");\n        });\n    }\n});\n\n// TODO: move into relevant views\nvar templates = {\n    // the search bar at the top of the tool panel\n    tool_search : _.template([\n        '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n                'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n        '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n        //TODO: replace with icon\n        '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>',\n    ].join('')),\n\n    // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n    panel_section : _.template([\n        '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n            '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n        '</div>',\n        '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n            '<div class=\"toolSectionBg\"></div>',\n        '<div>'\n    ].join('')),\n\n    // a single tool's link in the tool panel; will load the tool form in the center panel\n    tool_link : _.template([\n        '<span class=\"labels\">',\n            '<% _.each( labels, function( label ){ %>',\n            '<span class=\"label label-default label-<%- label %>\">',\n                '<%- label %>',\n            '</span>',\n            '<% }); %>',\n        '</span>',\n        '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n            '<%- name %>',\n        '</a>',\n        ' <%- description %>'\n    ].join('')),\n\n    // the tool form for entering tool parameters, viewing help and executing the tool\n    // loaded when a tool link is clicked in the tool panel\n    tool_form : _.template([\n        '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n        '<div class=\"toolFormBody\">',\n            '<% _.each( tool.inputs, function( input ){ %>',\n            '<div class=\"form-row\">',\n                '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n                '<div class=\"form-row-input\">',\n                    '<%= input.html %>',\n                '</div>',\n                '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n                    '<%- input.help %>',\n                '</div>',\n                '<div style=\"clear: both;\"></div>',\n            '</div>',\n            '<% }); %>',\n        '</div>',\n        '<div class=\"form-row form-actions\">',\n            '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n        '</div>',\n        '<div class=\"toolHelp\">',\n            '<div class=\"toolHelpBody\"><% tool.help %></div>',\n        '</div>',\n    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n    // which implies a leaky variable that I can't find\n    ].join(''), { variable: 'tool' }),\n};\n\n\n// Exports\nreturn {\n    ToolParameter: ToolParameter,\n    IntegerToolParameter: IntegerToolParameter,\n    SelectToolParameter: SelectToolParameter,\n    Tool: Tool,\n    ToolCollection: ToolCollection,\n    ToolSearch: ToolSearch,\n    ToolPanel: ToolPanel,\n    ToolPanelView: ToolPanelView,\n    ToolFormView: ToolFormView\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/tool/tools.js\n ** module id = 46\n ** module chunks = 0 3\n **/","/** Renders the color picker used e.g. in the tool form **/\ndefine(['utils/utils'], function( Utils ) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n        },\n        initialize : function( options ) {\n            this.options = Utils.merge( options, {} );\n            this.setElement( this._template() );\n\n            // link components\n            this.$panel = this.$( '.ui-color-picker-panel' );\n            this.$view = this.$( '.ui-color-picker-view' );\n            this.$value = this.$( '.ui-color-picker-value' );\n            this.$header = this.$( '.ui-color-picker-header' );\n\n            // build panel\n            this._build();\n\n            // hide panel on start up\n            this.visible = false;\n\n            // set initial value\n            this.value( this.options.value );\n\n            // link boxes\n            this.$boxes = this.$( '.ui-color-picker-box' );\n\n            // add event handler\n            var self = this;\n            this.$boxes.on( 'click', function() {\n                self.value( $( this ).css( 'background-color' ) );\n                self.$header.trigger( 'click' );\n            } );\n            this.$header.on( 'click', function() {\n                self.visible = !self.visible;\n                if ( self.visible ) {\n                    self.$view.fadeIn( 'fast' );\n                } else {\n                    self.$view.fadeOut( 'fast' );\n                }\n            } );\n        },\n\n        // value\n        value : function ( new_val ) {\n            if ( new_val !== undefined && new_val !== null ) {\n                // update color value\n                this.$value.css( 'background-color', new_val );\n            \n                // check selected color in panel\n                this.$( '.ui-color-picker-box' ).empty();\n                this.$( this._getValue() ).html( this._templateCheck() );\n\n                // trigger custom event\n                this.options.onchange && this.options.onchange( new_val );\n            }\n\n            // return current value\n            return this._getValue();\n        },\n\n        // get value from dom\n        _getValue: function() {\n            var rgb = this.$value.css( 'background-color' );\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if ( rgb ) {\n                function hex( x ) {\n                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n                }\n                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n            } else {\n                return null;\n            }\n        },\n\n        // build panel\n        _build: function() {\n            var $content = this._content({\n                label       : 'Theme Colors',\n                colors      : this.colors.base,\n                padding     : 10\n            });\n            for ( var i in this.colors.theme ) {\n                var line_def = {};\n                if ( i == 0 ) {\n                    line_def[ 'bottom' ] = true;\n                } else {\n                    if ( i != this.colors.theme.length - 1 ) {\n                        line_def[ 'top' ]     = true;\n                        line_def[ 'bottom' ]  = true;\n                    } else {\n                        line_def[ 'top' ]     = true;\n                        line_def[ 'padding' ] = 5;\n                    }\n                }\n                line_def[ 'colors' ] = this.colors.theme[ i ];\n                this._content( line_def );\n            }\n            this._content({\n                label       : 'Standard Colors',\n                colors      : this.colors.standard,\n                padding     : 5\n            });\n        },\n\n        // create content\n        _content: function( options ) {\n            // get parameters\n            var label       = options.label;\n            var colors      = options.colors;\n            var padding     = options.padding;\n            var top         = options.top;\n            var bottom      = options.bottom;\n\n            // create lines\n            var $content = $( this._templateContent() );\n\n            // set label\n            var $label = $content.find( '.label' );\n            if ( options.label ) {\n                $label.html( options.label );\n            } else {\n                $label.hide();\n            }\n\n            // build line\n            var $line = $content.find( '.line' );\n            this.$panel.append( $content );\n            for ( var i in colors ) {\n                var $box = $( this._templateBox( colors[ i ] ) );\n                if ( top ) {\n                    $box.css( 'border-top', 'none' );\n                    $box.css( 'border-top-left-radius', '0px' );\n                    $box.css( 'border-top-right-radius', '0px' );\n                }\n                if ( bottom ) {\n                    $box.css( 'border-bottom', 'none' );\n                    $box.css( 'border-bottom-left-radius', '0px' );\n                    $box.css( 'border-bottom-right-radius', '0px' );\n                }\n                $line.append( $box );\n            }\n            if (padding) {\n                $line.css( 'padding-bottom', padding );\n            }\n            return $content;\n        },\n\n        // check icon\n        _templateCheck: function() {\n            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        // content template\n        _templateContent: function() {\n            return  '<div class=\"ui-color-picker-content\">' +\n                        '<div class=\"label\"/>' +\n                        '<div class=\"line\"/>' +\n                    '</div>';\n        },\n\n        // box template\n        _templateBox: function( color ) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        // template\n        _template: function() {\n            return  '<div class=\"ui-color-picker\">' +\n                        '<div class=\"ui-color-picker-header\">' +\n                            '<div class=\"ui-color-picker-value\"/>' +\n                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                        '</div>' +\n                        '<div class=\"ui-color-picker-view ui-input\">' +\n                            '<div class=\"ui-color-picker-panel\"/>' +\n                        '</div>'\n                    '</div>';\n        }\n    });\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-color-picker.js\n ** module id = 49\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-options'], function(Utils, Options) {\n\n/**\n *  This class creates/wraps a drill down element.\n */\nvar View = Options.BaseIcons.extend({\n    // initialize\n    initialize: function(options) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = (options.display == 'checkbox');\n        Options.BaseIcons.prototype.initialize.call(this, options);\n        this.initial = true;\n    },\n\n    // set expand states for initial value\n    value: function (new_val) {\n        var val = Options.BaseIcons.prototype.value.call(this, new_val);\n        if (this.initial && val !== null && this.header_index) {\n            this.initial = false;\n            var values = val;\n            if (!$.isArray(values)) {\n                values = [values];\n            }\n            for (var i in values) {\n                var list = this.header_index[values[i]];\n                for (var j in list) {\n                    this._setState(list[j], true);\n                }\n            }\n        }\n        return val;\n    },\n\n    /** Expand/collapse a sub group\n    */\n    _setState: function (header_id, is_expanded) {\n        var $button = this.$('.button-' + header_id);\n        var $subgroup = this.$('.subgroup-' + header_id);\n        $button.data('is_expanded', is_expanded);\n        if (is_expanded) {\n            $subgroup.fadeIn('fast')\n            $button.removeClass('fa-plus-square');\n            $button.addClass('fa-minus-square');\n        } else {\n            $subgroup.hide();\n            $button.removeClass('fa-minus-square');\n            $button.addClass('fa-plus-square');\n        }\n    },\n\n    /** Template to create options tree\n    */\n    _templateOptions: function(options) {\n        // link this\n        var self = this;\n\n        // link data\n        this.header_index = {};\n        \n        // attach event handler\n        function attach($el, header_id) {\n            var $button = $el.find('.button-' + header_id);\n            $button.on('click', function() {\n                self._setState(header_id, !$button.data('is_expanded'));\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ($tmpl, options, header) {\n            header = header || [];\n            for (i in options) {\n                // current option level in hierarchy\n                var level = options[i];\n\n                // check for options\n                var has_options = level.options.length > 0;\n\n                // copy current header list\n                var new_header = header.slice(0);\n\n                // keep track of header list\n                self.header_index[level.value] = new_header.slice(0);\n\n                // build template\n                var $group = $('<div/>');\n                if (has_options) {\n                    // create button and subgroup\n                    var header_id = Utils.uid();\n                    var $button = $('<span class=\"button-' + header_id + ' ui-drilldown-button fa fa-plus-square\"/>');\n                    var $subgroup = $('<div class=\"subgroup-' + header_id + '\" style=\"display: none; margin-left: 25px;\"/>');\n\n                    // keep track of button and subgroup\n                    new_header.push(header_id);\n\n                    // create expandable header section\n                    var $buttongroup = $('<div/>');\n                    $buttongroup.append($button);\n                    $buttongroup.append(self._templateOption({\n                        label: level.name,\n                        value: level.value\n                    }));\n                    $group.append($buttongroup);\n                    iterate($subgroup, level.options, new_header);\n                    $group.append($subgroup);\n\n                    // attach expand/collapse events\n                    attach($group, header_id);\n                } else {\n                    // append child options\n                    $group.append(self._templateOption({\n                        label: level.name,\n                        value: level.value\n                    }));\n                }\n                $tmpl.append($group);\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $('<div/>');\n        iterate($tmpl, options);\n\n        // return template\n        return $tmpl;\n    },\n\n    /** Template for drill down view\n    */\n    _template: function(options) {\n        return '<div class=\"ui-options-list drilldown-container\" id=\"' + options.id + '\"/>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-drilldown.js\n ** module id = 50\n ** module chunks = 0 3\n **/","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine(['utils/utils', 'mvc/ui/ui-buttons'], function(Utils, Buttons) {\nvar View = Backbone.View.extend({\n    // options\n    optionsDefault: {\n        id          : Utils.uid(),\n        cls         : 'ui-select',\n        error_text  : 'No options available',\n        empty_text  : 'Nothing selected',\n        visible     : true,\n        wait        : false,\n        multiple    : false,\n        searchable  : true,\n        optional    : false\n    },\n\n    // initialize\n    initialize: function(options) {\n        // link this\n        var self = this;\n        this.model = new Backbone.Model();\n\n        // configure options\n        this.options = Utils.merge(options, this.optionsDefault);\n\n        // create new element\n        this.setElement(this._template(this.options));\n\n        // link elements\n        this.$select = this.$el.find('.select');\n        this.$icon_dropdown = this.$el.find('.icon-dropdown');\n        this.$icon_dropdown.on( 'click', function() { self.$select.select2 && self.$select.select2( 'open' ) });\n\n        // allow regular multi-select field to be resized\n        var minHeight = null;\n        this.$('.icon-resize').on('mousedown', function(event) {\n            var currentY = event.pageY;\n            var currentHeight = self.$select.height();\n            minHeight = minHeight || currentHeight;\n            $('#dd-helper').show().on('mousemove', function(event) {\n                self.$select.height(Math.max(currentHeight + (event.pageY - currentY), minHeight));\n            }).on('mouseup mouseleave', function() {\n                $('#dd-helper').hide().off();\n            });\n        });\n\n        // multiple select fields have an additional button and other custom properties\n        if (this.options.multiple) {\n            // create select all button\n            if (this.options.searchable) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        var new_value = [];\n                        if (self.all_button.value() !== 0) {\n                            new_value = self._availableOptions();\n                        }\n                        self.value(new_value);\n                        self.trigger('change');\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            } else {\n                this.$el.addClass('ui-select-multiple');\n            }\n            this.$select.prop('multiple', true);\n            this.$icon_dropdown.remove();\n        }\n\n        // update initial options\n        this.update(this.options.data);\n\n        // set initial value\n        if (this.options.value !== undefined) {\n            this.value(this.options.value);\n        }\n\n        // show/hide\n        if (!this.options.visible) {\n            this.hide();\n        }\n\n        // wait\n        if (this.options.wait) {\n            this.wait();\n        } else {\n            this.show();\n        }\n\n        // add change event. fires only on user activity\n        this.$select.on('change', function() {\n            self.trigger('change');\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            self.options.onchange && self.options.onchange(this.value());\n        });\n    },\n\n    /** Return/Set current selection\n    */\n    value: function (new_value) {\n        // set new value\n        if (new_value !== undefined) {\n            if (new_value === null) {\n                new_value = '__null__';\n            }\n            if (this.exists(new_value) || this.options.multiple) {\n                this.$select.val(new_value);\n                if (this.$select.select2) {\n                    this.$select.select2('val', new_value);\n                }\n            }\n        }\n        // get current value\n        var current = this._getValue();\n        if (this.all_button) {\n            this.all_button.value($.isArray(current) && current.length || 0, this._size());\n        }\n        return current;\n    },\n\n    /** Return the first select option\n    */\n    first: function() {\n        var options = this.$select.find('option').first();\n        if (options.length > 0) {\n            return options.val();\n        } else {\n            return null;\n        }\n    },\n\n    /** Return the label/text of the current selection\n    */\n    text: function () {\n        return this.$select.find('option:selected').text();\n    },\n\n    /** Show the select field\n    */\n    show: function() {\n        this.unwait();\n        this.$select.show();\n        this.$el.show();\n    },\n\n    /** Hide the select field\n    */\n    hide: function() {\n        this.$el.hide();\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded\n    */\n    wait: function() {\n        this.$icon_dropdown.removeClass();\n        this.$icon_dropdown.addClass('icon-dropdown fa fa-spinner fa-spin');\n    },\n\n    /** Hide spinner indicating that the request has been completed\n    */\n    unwait: function() {\n        this.$icon_dropdown.removeClass();\n        this.$icon_dropdown.addClass('icon-dropdown fa fa-caret-down');\n    },\n\n    /** Returns true if the field is disabled\n    */\n    disabled: function() {\n        return this.$select.is(':disabled');\n    },\n\n    /** Enable the select field\n    */\n    enable: function() {\n        this.$select.prop('disabled', false);\n    },\n\n    /** Disable the select field\n    */\n    disable: function() {\n        this.$select.prop('disabled', true);\n    },\n\n    /** Update all available options at once\n    */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'options' ), function( v ) {\n            !_.findWhere( options, v ) && options.push( v );\n        });\n        sorter && options.sort( sorter );\n        this.update( options );\n    },\n    update: function(options) {\n        // backup current value\n        var current = this._getValue();\n\n        // remove all options\n        this.$select.find('option').remove();\n\n        // add optional field\n        if (!this.options.multiple && this.options.optional) {\n            this.$select.append(this._templateOption({value : '__null__', label : this.options.empty_text}));\n        }\n\n        // add new options\n        this.model.set( 'options', options );\n        for (var key in options) {\n            this.$select.append(this._templateOption(options[key]));\n        }\n\n        // count remaining entries\n        if (this._size() == 0) {\n            // disable select field\n            this.disable();\n\n            // create placeholder\n            this.$select.append(this._templateOption({value : '__null__', label : this.options.error_text}));\n        } else {\n            // enable select field\n            this.enable();\n        }\n\n        // update to searchable field (in this case select2)\n        if (this.options.searchable) {\n            this.$select.select2('destroy');\n            this.$select.select2({ closeOnSelect: !this.options.multiple });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        }\n\n        // set previous value\n        this.value(current);\n\n        // check if any value was set\n        if (this._getValue() === null && !(this.options.multiple && this.options.optional)) {\n            this.value(this.first());\n        }\n    },\n\n    /** Set the custom onchange callback function\n    */\n    setOnChange: function(callback) {\n        this.options.onchange = callback;\n    },\n\n    /** Check if a value is an existing option\n    */\n    exists: function(value) {\n        return this.$select.find('option[value=\"' + value + '\"]').length > 0;\n    },\n\n    /** Get current value from dom\n    */\n    _getValue: function() {\n        var val = this.$select.val();\n        if (!Utils.validate(val)) {\n            return null;\n        }\n        return val;\n    },\n\n    /** Returns all currently available options\n    */\n    _availableOptions: function() {\n        var available = [];\n        this.$select.find('option').each(function(i, e){\n            available.push($(e).attr('value'));\n        });\n        return available;\n    },\n\n    /** Number of available options\n    */\n    _size: function() {\n        return this.$select.find('option').length;\n    },\n\n    /** Template for select options\n    */\n    _templateOption: function(options) {\n        return '<option value=\"' + options.value + '\">' + _.escape(options.label) + '</option>';\n    },\n\n    /** Template for select view\n    */\n    _template: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"' + options.cls + '\">' +\n                    '<select id=\"' + options.id + '_select\" class=\"select\"/>' +\n                    '<div class=\"icon-dropdown\"/>' +\n                    '<div class=\"icon-resize\">' +\n                         '<i class=\"fa fa-angle-double-right fa-rotate-45\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-select-default.js\n ** module id = 51\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-list'],\n        function(Utils, List) {\n\n/**\n * FTP file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // create ui-list view to keep track of selected ftp files\n        this.ftpfile_list = new List.View({\n            name        : 'file',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                options.onchange && options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this.ftpfile_list.$el);\n\n        // initial fetch of ftps\n        Utils.get({\n            url     : Galaxy.root + 'api/remote_files',\n            success : function(response) {\n                var data = [];\n                for (var i in response) {\n                    data.push({\n                        value   : response[i]['path'],\n                        label   : response[i]['path']\n                    });\n                }\n                self.ftpfile_list.update(data);\n            }\n        });\n    },\n\n    /** Return/Set currently selected ftp datasets */\n    value: function(val) {\n        return this.ftpfile_list.value(val);\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-select-ftp.js\n ** module id = 52\n ** module chunks = 0 3\n **/","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-select-library.js\n ** module id = 53\n ** module chunks = 0 3\n **/","define([ 'utils/utils' ], function( Utils ) {\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.options = Utils.merge( options, {\n            id      : Utils.uid(),\n            min     : null,\n            max     : null,\n            step    : null,\n            precise : false,\n            split   : 10000\n        } );\n\n        // create new element\n        this.setElement( this._template( this.options ) );\n\n        // determine wether to use the slider\n        this.useslider = this.options.max !== null && this.options.min !== null && this.options.max > this.options.min;\n\n        // set default step size\n        if ( this.options.step === null ) {\n            this.options.step = 1.0;\n            if ( this.options.precise && this.useslider ) {\n                this.options.step = ( this.options.max - this.options.min ) / this.options.split;\n            }\n        }\n\n        // create slider if min and max are defined properly\n        if ( this.useslider ) {\n            this.$slider = this.$( '#slider' );\n            this.$slider.slider( this.options );\n            this.$slider.on( 'slide', function ( event, ui ) {\n                self.value( ui.value );\n            });\n        } else {\n            this.$( '.ui-form-slider-text' ).css( 'width', '100%' );\n        }\n\n        // link text input field\n        this.$text = this.$( '#text' );\n\n        // set initial value\n        this.options.value !== undefined && ( this.value( this.options.value ) );\n\n        // add text field event\n        var pressed = [];\n        this.$text.on( 'change', function () {\n            self.value( $( this ).val() );\n        });\n        this.$text.on( 'keyup', function( e ) {\n            pressed[e.which] = false;\n            self.options.onchange && self.options.onchange( $( this ).val() );\n        });\n        this.$text.on( 'keydown', function ( e ) {\n            var v = e.which;\n            pressed[ v ] = true;\n            if ( self.options.is_workflow && pressed[ 16 ] && v == 52 ) {\n                self.value( '$' )\n                event.preventDefault();\n            } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.options.precise )\n                || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                || self._isParameter( $( this ).val() )\n                || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                event.preventDefault();\n            }\n        });\n    },\n\n    /** Set and Return the current value\n    */\n    value : function ( new_val ) {\n        if ( new_val !== undefined ) {\n            if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                isNaN( new_val ) && ( new_val = 0 );\n                this.options.max !== null && ( new_val = Math.min( new_val, this.options.max ) );\n                this.options.min !== null && ( new_val = Math.max( new_val, this.options.min ) );\n            }\n            this.$slider && this.$slider.slider( 'value', new_val );\n            this.$text.val( new_val );\n            this.options.onchange && this.options.onchange( new_val );\n        }\n        return this.$text.val();\n    },\n\n    /** Return true if the field contains a workflow parameter i.e. $('name')\n    */\n    _isParameter: function( value ) {\n        return this.options.is_workflow && String( value ).substring( 0, 1 ) === '$';\n    },\n\n    /** Slider template\n    */\n    _template: function( options ) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-form-slider\">' +\n                    '<input id=\"text\" type=\"text\" class=\"ui-form-slider-text\"/>' +\n                    '<div id=\"slider\" class=\"ui-form-slider-element\"/>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View : View\n};\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/mvc/ui/ui-slider.js\n ** module id = 54\n ** module chunks = 0 3\n **/","define(['libs/underscore', 'viz/trackster/util', 'utils/config'], function(_, util_mod, config_mod) {\n\n/**\n * A configuration setting. Currently key is used as id.\n */\nvar ConfigSetting = Backbone.Model.extend({\n\n    initialize: function(options) {\n        // Use key as id for now.\n        var key = this.get('key');\n        this.set('id', key);\n\n        // Set defaults based on key.\n        var defaults = _.find(ConfigSetting.known_settings_defaults, function(s) { return s.key === key; });\n        if (defaults) {\n            this.set(_.extend({}, defaults, options));\n        }\n\n        if (this.get('value') === undefined && this.get('default_value') !== undefined) {\n            // Use default to set value (if present).\n            this.set_value(this.get('default_value'));\n\n            // If no default value for color config, set random color.\n            if (!this.get('value') && this.get('type') === 'color') {\n                // For color setting, set random color.\n                this.set('value', util_mod.get_random_color());\n            }\n        }\n    },\n\n    /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n    set_value: function(value, options) {\n        var type = this.get('type');\n\n        if (type === 'float') {\n            value = parseFloat(value);\n        }\n        else if (type === 'int') {\n            value = parseInt(value, 10);\n        }\n        // TODO: handle casting from string to bool?\n\n        this.set({value: value}, options);\n    }\n}, {\n    // This is a master list of default settings for known settings.\n    known_settings_defaults: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'color', label: 'Color', type: 'color', default_value: null },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: null },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: null },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 32, hidden: true },\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'block_color', label: 'Block color', type: 'color', default_value: null },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color', default_value: null },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true }\n    ]\n});\n\n/**\n * Collection of config settings.\n */\nvar ConfigSettingCollection = Backbone.Collection.extend({\n    model: ConfigSetting,\n\n    /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n    to_key_value_dict: function() {\n        var rval = {};\n        this.each(function(setting) {\n            rval[setting.get('key')] = setting.get('value');\n        });\n\n        return rval;\n    },\n\n    /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n    get_value: function(key) {\n        var s = this.get(key);\n        if (s) {\n            return s.get('value');\n        }\n\n        return undefined;\n    },\n\n    /**\n     * Set value for a setting.\n     */\n    set_value: function(key, value, options) {\n        var s = this.get(key);\n        if (s) {\n            return s.set_value(value, options);\n        }\n\n        return undefined;\n     },\n\n     /**\n      * Set default value for a setting.\n      */\n     set_default_value: function(key, default_value) {\n        var s = this.get(key);\n        if (s) {\n            return s.set('default_value', default_value);\n        }\n\n        return undefined;\n     }\n},\n{\n    /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n    from_models_and_saved_values: function(models, saved_values) {\n        // If there are saved values, copy models and update with saved values.\n        if (saved_values) {\n            models = _.map(models, function(m) {\n                return _.extend({}, m, { value: saved_values[m.key] });\n            });\n        }\n\n        return new ConfigSettingCollection(models);\n    }\n});\n\n/**\n * Viewer for config settings collection.\n */\nvar ConfigSettingCollectionView = Backbone.View.extend({\n    className: 'config-settings-view',\n\n    /**\n     * Renders form for editing configuration settings.\n     */\n    render: function() {\n        var container = this.$el;\n\n        this.collection.each(function(param, index) {\n            // Hidden params have no representation in the form\n            if (param.get('hidden')) { return; }\n\n            // Build row for param.\n            var id = 'param_' + index,\n                type = param.get('type'),\n                value = param.get('value');\n            var row = $(\"<div class='form-row' />\").appendTo(container);\n            row.append($('<label />').attr(\"for\", id ).text(param.get('label') + \":\" ));\n            // Draw parameter as checkbox\n            if ( type === 'bool' ) {\n                row.append( $('<input type=\"checkbox\" />').attr(\"id\", id ).attr(\"name\", id ).attr( 'checked', value ) );\n            }\n            // Draw parameter as textbox\n            else if ( type === 'text' ) {\n                row.append( $('<input type=\"text\"/>').attr(\"id\", id ).val(value).click( function() { $(this).select(); }));\n            }\n            // Draw parameter as select area\n            else if ( type === 'select' ) {\n                var select = $('<select />').attr(\"id\", id);\n                _.each(param.get('options'), function(option) {\n                    $(\"<option/>\").text( option.label ).attr( \"value\", option.value ).appendTo( select );\n                });\n                select.val( value );\n                row.append( select );\n\n            }\n            // Draw parameter as color picker\n            else if ( type === 'color' ) {\n                var\n                    container_div = $(\"<div/>\").appendTo(row),\n                    input = $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ).css(\"float\", \"left\")\n                        .appendTo(container_div).click(function(e) {\n                        // Hide other pickers.\n                        $(\".tooltip\").removeClass( \"in\" );\n\n                        // Show input's color picker.\n                        var tip = $(this).siblings(\".tooltip\").addClass( \"in\" );\n                        tip.css( {\n                            // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                            // top: $(this).position().top + $(this.height)\n                            left: $(this).position().left + $(this).width() + 5,\n                            top: $(this).position().top - ( $(tip).height() / 2 ) + ( $(this).height() / 2 )\n                            } ).show();\n\n                        // Click management:\n\n                        // Keep showing tip if clicking in tip.\n                        tip.click(function(e) {\n                            e.stopPropagation();\n                        });\n\n                        // Hide tip if clicking outside of tip.\n                        $(document).bind( \"click.color-picker\", function() {\n                            tip.hide();\n                            $(document).unbind( \"click.color-picker\" );\n                        });\n\n                        // No propagation to avoid triggering document click (and tip hiding) above.\n                        e.stopPropagation();\n                    }),\n                    // Icon for setting a new random color; behavior set below.\n                    new_color_icon = $(\"<a href='javascript:void(0)'/>\").addClass(\"icon-button arrow-circle\").appendTo(container_div)\n                                     .attr(\"title\", \"Set new random color\").tooltip(),\n                    // Color picker in tool tip style.\n                    tip = $( \"<div class='tooltip right' style='position: absolute;' />\" ).appendTo(container_div).hide(),\n                    // Inner div for padding purposes\n                    tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip),\n                    tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip),\n                    farb_obj = $.farbtastic(tip_inner, { width: 100, height: 100, callback: input, color: value });\n\n                // Clear floating.\n                container_div.append( $(\"<div/>\").css(\"clear\", \"both\"));\n\n                // Use function to fix farb_obj value.\n                (function(fixed_farb_obj) {\n                    new_color_icon.click(function() {\n                        fixed_farb_obj.setColor(util_mod.get_random_color());\n                    });\n                })(farb_obj);\n\n            }\n            else {\n                row.append( $('<input />').attr(\"id\", id ).attr(\"name\", id ).val( value ) );\n            }\n            // Help text\n            if ( param.help ) {\n                row.append( $(\"<div class='help'/>\").text( param.help ) );\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Render view in modal.\n     */\n    render_in_modal: function(title) {\n        // Set up handlers for cancel, ok button and for handling esc key.\n        var self = this,\n            cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n            ok_fn = function() {\n                Galaxy.modal.hide();\n                $(window).unbind(\"keypress.check_enter_esc\");\n                self.update_from_form();\n            },\n            check_enter_esc = function(e) {\n                if ((e.keyCode || e.which) === 27) { // Escape key\n                    cancel_fn();\n                } else if ((e.keyCode || e.which) === 13) { // Enter key\n                    ok_fn();\n                }\n            };\n\n        // Set keypress handler.\n        $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n        // Show modal.\n        if (this.$el.children().length === 0) {\n            this.render();\n        }\n        Galaxy.modal.show({\n            title: title || \"Configure\",\n            body: this.$el,\n            buttons: {\n                \"Cancel\": cancel_fn,\n                \"OK\": ok_fn\n            }\n        });\n    },\n\n    /**\n     * Update settings with new values entered via form.\n     */\n    update_from_form: function() {\n        var self = this;\n        this.collection.each(function(setting, index) {\n            if ( !setting.get('hidden') ) {\n                // Set value from view.\n                var id = 'param_' + index;\n                var value = self.$el.find( '#' + id ).val();\n                if ( setting.get('type') === 'bool' ) {\n                    value = self.$el.find( '#' + id ).is( ':checked' );\n                }\n                setting.set_value(value);\n            }\n        });\n    }\n\n});\n\nreturn {\n    ConfigSetting: ConfigSetting,\n    ConfigSettingCollection: ConfigSettingCollection,\n    ConfigSettingCollectionView: ConfigSettingCollectionView\n};\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/utils/config.js\n ** module id = 56\n ** module chunks = 0\n **/","/**\n *  This class defines a queue to ensure that multiple deferred callbacks are executed sequentially.\n */\ndefine(['utils/utils'], function( Utils ) {\nreturn Backbone.Model.extend({\n    initialize: function(){\n        this.active = {};\n        this.last = null;\n    },\n\n    /** Adds a callback to the queue. Upon execution a deferred object is parsed to the callback i.e. callback( deferred ).\n     *  If the callback does not take any arguments, the deferred is resolved instantly.\n    */\n    execute: function( callback ) {\n        var self = this;\n        var id = Utils.uid();\n        var has_deferred = callback.length > 0;\n\n        // register process\n        this.active[ id ] = true;\n\n        // deferred process\n        var process = $.Deferred();\n        process.promise().always(function() {\n            delete self.active[ id ];\n            has_deferred && Galaxy.emit.debug( 'deferred::execute()', this.state().charAt(0).toUpperCase() + this.state().slice(1) + ' ' + id );\n        });\n\n        // deferred queue\n        $.when( this.last ).always(function() {\n            if ( self.active[ id ] ) {\n                has_deferred && Galaxy.emit.debug( 'deferred::execute()', 'Running ' + id );\n                callback( process );\n                !has_deferred && process.resolve();\n            } else {\n                process.reject();\n            }\n        });\n        this.last = process.promise();\n    },\n\n    /** Resets the promise queue. All currently queued but unexecuted callbacks/promises will be rejected.\n    */\n    reset: function() {\n        Galaxy.emit.debug('deferred::execute()', 'Reset');\n        for ( var i in this.active ) {\n            this.active[ i ] = false;\n        }\n    },\n\n    /** Returns true if all processes are done.\n    */\n    ready: function() {\n        return $.isEmptyObject( this.active );\n    }\n});\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/utils/deferred.js\n ** module id = 57\n ** module chunks = 0 3\n **/","define( [\"libs/underscore\", \"mvc/dataset/data\", \"viz/trackster/util\", \"utils/config\"], function(_, data_mod, util_mod, config_mod) {\n\n/**\n * Mixin for returning custom JSON representation from toJSON. Class attribute to_json_keys defines a set of attributes\n * to include in the representation; to_json_mappers defines mappers for returned objects.\n */\nvar CustomToJSON = {\n    /**\n     * Returns JSON representation of object using to_json_keys and to_json_mappers.\n     */\n    toJSON: function() {\n        var self = this,\n            json = {};\n        _.each(self.constructor.to_json_keys, function(k) {\n            var val = self.get(k);\n            if (k in self.constructor.to_json_mappers) {\n                val = self.constructor.to_json_mappers[k](val, self);\n            }\n            json[k] = val;\n        });\n        return json;\n    }\n};\n\n/**\n * Model, view, and controller objects for Galaxy visualization framework.\n *\n * Models have no references to views, instead using events to indicate state\n * changes; this is advantageous because multiple views can use the same object\n * and models can be used without views.\n */\n\n/**\n * Use a popup grid to select datasets from histories or libraries. After datasets are selected,\n * track definitions are obtained from the server and the success_fn is called with the list of\n * definitions for selected datasets.\n */\nvar select_datasets = function(dataset_url, add_track_async_url, filters, success_fn) {\n    $.ajax({\n        url: dataset_url,\n        data: filters,\n        error: function() { alert( \"Grid failed\" ); },\n        success: function(table_html) {\n            Galaxy.modal.show({\n                title   : \"Select datasets for new tracks\",\n                body    : table_html,\n                buttons :\n                {\n                    \"Cancel\": function() {\n                        Galaxy.modal.hide();\n                    },\n                    \"Add\": function() {\n                       var requests = [];\n                        $('input[name=id]:checked,input[name=ldda_ids]:checked').each(function() {\n                            var data = {\n                                    data_type: 'track_config',\n                                   'hda_ldda': 'hda'\n                                },\n                                id = $(this).val();\n                               if ($(this).attr(\"name\") !== \"id\") {\n                                    data.hda_ldda = 'ldda';\n                                }\n                                requests[requests.length] = $.ajax({\n                                   url: add_track_async_url + \"/\" + id,\n                                    data: data,\n                                    dataType: \"json\"\n                                });\n                        });\n                        // To preserve order, wait until there are definitions for all tracks and then add\n                        // them sequentially.\n                        $.when.apply($, requests).then(function() {\n                            // jQuery always returns an Array for arguments, so need to look at first element\n                            // to determine whether multiple requests were made and consequently how to\n                            // map arguments to track definitions.\n                            var track_defs = (arguments[0] instanceof Array ?\n                                               $.map(arguments, function(arg) { return arg[0]; }) :\n                                               [ arguments[0] ]\n                                               );\n                            success_fn(track_defs);\n                        });\n                        Galaxy.modal.hide();\n                    }\n               }\n            });\n        }\n    });\n};\n\n// --------- Models ---------\n\n/**\n * Canvas manager is used to create canvases for browsers as well as providing a pattern cache\n */\nvar CanvasManager = function(default_font) {\n    this.default_font = default_font !== undefined ? default_font : \"9px Monaco, Lucida Console, monospace\";\n\n    this.dummy_canvas = this.new_canvas();\n    this.dummy_context = this.dummy_canvas.getContext('2d');\n    this.dummy_context.font = this.default_font;\n\n    this.char_width_px = this.dummy_context.measureText(\"A\").width;\n\n    this.patterns = {};\n\n    // FIXME: move somewhere to make this more general\n    this.load_pattern( 'right_strand', \"/visualization/strand_right.png\" );\n    this.load_pattern( 'left_strand', \"/visualization/strand_left.png\" );\n    this.load_pattern( 'right_strand_inv', \"/visualization/strand_right_inv.png\" );\n    this.load_pattern( 'left_strand_inv', \"/visualization/strand_left_inv.png\" );\n};\n\n_.extend( CanvasManager.prototype, {\n    load_pattern: function( key, path ) {\n        var patterns = this.patterns,\n            dummy_context = this.dummy_context,\n            image = new Image();\n        image.src = Galaxy.root + \"static/images\" + path;\n        image.onload = function() {\n            patterns[key] = dummy_context.createPattern( image, \"repeat\" );\n        };\n    },\n    get_pattern: function( key ) {\n        return this.patterns[key];\n    },\n    new_canvas: function() {\n        var canvas = $(\"<canvas/>\")[0];\n        // Keep a reference back to the manager\n        canvas.manager = this;\n        return canvas;\n    }\n});\n\n/**\n * Generic cache that handles key/value pairs. Keys can be any object that can be\n * converted to a String and compared.\n */\nvar Cache = Backbone.Model.extend({\n    defaults: {\n        num_elements: 20,\n        // Objects in cache; indexes into cache are strings of keys.\n        obj_cache: null,\n        // key_ary contains keys for objects in cache.\n        key_ary: null\n    },\n\n    initialize: function(options) {\n        this.clear();\n    },\n\n    /**\n     * Get an element from the cache using its key.\n     */\n    get_elt: function(key) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            index = _.indexOf(key_ary, function(k) {\n                return k.toString() === key_str;\n            });\n\n        // Update cache.\n        if (index !== -1) {\n            // Object is in cache, so update it.\n            if (obj_cache[key_str].stale) {\n                // Object is stale: remove key and object.\n                key_ary.splice(index, 1);\n                delete obj_cache[key_str];\n            }\n            else {\n                // Move key to back because it is most recently used.\n                this.move_key_to_end(key, index);\n            }\n        }\n\n        return obj_cache[key_str];\n    },\n\n    /**\n     * Put an element into the cache.\n     */\n    set_elt: function(key, value) {\n        var obj_cache = this.attributes.obj_cache,\n            key_ary = this.attributes.key_ary,\n            key_str = key.toString(),\n            num_elements = this.attributes.num_elements;\n\n        // Update keys, objects.\n        if (!obj_cache[key_str]) {\n            // Add object to cache.\n\n            if (key_ary.length >= num_elements) {\n                // Cache full, so remove first element.\n                var deleted_key = key_ary.shift();\n                delete obj_cache[deleted_key.toString()];\n            }\n\n            // Add key.\n            key_ary.push(key);\n        }\n\n        // Add object.\n        obj_cache[key_str] = value;\n        return value;\n    },\n\n    /**\n     * Move key to end of cache. Keys are removed from the front, so moving a key to the end\n     * delays the key's removal.\n     */\n    move_key_to_end: function(key, index) {\n        this.attributes.key_ary.splice(index, 1);\n        this.attributes.key_ary.push(key);\n    },\n\n    /**\n     * Clear all elements from the cache.\n     */\n    clear: function() {\n        this.attributes.obj_cache = {};\n        this.attributes.key_ary = [];\n    },\n\n    /** Returns the number of elements in the cache. */\n    size: function() {\n        return this.attributes.key_ary.length;\n    },\n\n    /** Returns key most recently added to cache. */\n    most_recently_added: function() {\n        return this.size() === 0 ? null :\n               // Most recent key is at the end of key array.\n               this.attributes.key_ary[this.attributes.key_ary.length - 1];\n    }\n});\n\n/**\n * Data manager for genomic data. Data is connected to and queryable by genomic regions.\n */\nvar GenomeDataManager = Cache.extend({\n    defaults: _.extend({}, Cache.prototype.defaults, {\n        dataset: null,\n        genome: null,\n        init_data: null,\n        min_region_size: 200,\n        filters_manager: null,\n        data_type: \"data\",\n        data_mode_compatible: function(entry, mode) { return true; },\n        can_subset: function(entry) { return false; }\n    }),\n\n    /**\n     * Initialization.\n     */\n    initialize: function(options) {\n        Cache.prototype.initialize.call(this);\n\n        // Set initial entries in data manager.\n        var initial_entries = this.get('init_data');\n        if (initial_entries) {\n            this.add_data(initial_entries);\n        }\n    },\n\n    /**\n     * Add data entries to manager; each entry should be a dict with attributes region (key), data, and data_type.\n     * If necessary, manager size is increased to hold all data.\n     */\n    add_data: function(entries) {\n        // Increase size to accomodate all entries.\n        if (this.get('num_elements') < entries.length) {\n            this.set('num_elements', entries.length);\n        }\n\n        // Put data into manager.\n        var self = this;\n        _.each(entries, function(entry) {\n            self.set_data(entry.region, entry);\n        });\n    },\n\n    /**\n     * Returns deferred that resolves to true when dataset is ready (or false if dataset\n     * cannot be used).\n     */\n    data_is_ready: function() {\n        var dataset = this.get('dataset'),\n            ready_deferred = $.Deferred(),\n            // If requesting raw data, query dataset state; if requesting (converted) data,\n            // need to query converted datasets state.\n            query_type = (this.get('data_type') === 'raw_data' ? 'state' :\n                          this.get('data_type') === 'data' ? 'converted_datasets_state' : \"error\" ),\n            ss_deferred = new util_mod.ServerStateDeferred({\n                ajax_settings: {\n                    url: this.get('dataset').url(),\n                    data: {\n                        hda_ldda: dataset.get('hda_ldda'),\n                        data_type: query_type\n                    },\n                    dataType: \"json\"\n                },\n                interval: 5000,\n                success_fn: function(response) { return response !== \"pending\"; }\n            });\n\n        $.when(ss_deferred.go()).then(function(response) {\n            ready_deferred.resolve(response === \"ok\" || response === \"data\" );\n        });\n        return ready_deferred;\n    },\n\n    /**\n     * Perform a feature search from server; returns Deferred object that resolves when data is available.\n     */\n    search_features: function(query) {\n        var dataset = this.get('dataset'),\n            params = {\n                query: query,\n                hda_ldda: dataset.get('hda_ldda'),\n                data_type: 'features'\n            };\n        return $.getJSON(dataset.url(), params);\n    },\n\n    /**\n     * Load data from server and manages data entries. Adds a Deferred to manager\n     * for region; when data becomes available, replaces Deferred with data.\n     * Returns the Deferred that resolves when data is available.\n     */\n    load_data: function(region, mode, resolution, extra_params) {\n        // Setup data request params.\n        var dataset = this.get('dataset'),\n            params = {\n                        \"data_type\": this.get('data_type'),\n                        \"chrom\": region.get('chrom'),\n                        \"low\": region.get('start'),\n                        \"high\": region.get('end'),\n                        \"mode\": mode,\n                        \"resolution\": resolution,\n                        \"hda_ldda\": dataset.get('hda_ldda')\n                     };\n\n        $.extend(params, extra_params);\n\n        // Add track filters to params.\n        var filters_manager = this.get('filters_manager');\n        if (filters_manager) {\n            var filter_names = [];\n            var filters = filters_manager.filters;\n            for (var i = 0; i < filters.length; i++) {\n                filter_names.push(filters[i].name);\n            }\n            params.filter_cols = JSON.stringify(filter_names);\n        }\n\n        // Do request.\n        var manager = this,\n            entry = $.getJSON(dataset.url(), params, function (result) {\n                // Add region to the result.\n                result.region = region;\n                manager.set_data(region, result);\n            });\n\n        this.set_data(region, entry);\n        return entry;\n    },\n\n    /**\n     * Get data from dataset.\n     */\n    get_data: function(region, mode, resolution, extra_params) {\n        // Look for entry and return if it's a deferred or if data available is compatible with mode.\n        var entry = this.get_elt(region);\n        if ( entry &&\n             ( util_mod.is_deferred(entry) || this.get('data_mode_compatible')(entry, mode) ) ) {\n            return entry;\n        }\n\n        //\n        // Look in cache for data that can be used.\n        // TODO: this logic could be improved if the visualization knew whether\n        // the data was \"index\" or \"data.\"\n        //\n        var key_ary = this.get('key_ary'),\n            obj_cache = this.get('obj_cache'),\n            entry_region, is_subregion;\n        for (var i = 0; i < key_ary.length; i++) {\n            entry_region = key_ary[i];\n\n            if (entry_region.contains(region)) {\n                is_subregion = true;\n\n                // This entry has data in the requested range. Return if data\n                // is compatible and can be subsetted.\n                entry = obj_cache[entry_region.toString()];\n                if ( util_mod.is_deferred(entry) ||\n                    ( this.get('data_mode_compatible')(entry, mode) && this.get('can_subset')(entry) ) ) {\n                    this.move_key_to_end(entry_region, i);\n\n                    // If there's data, subset it.\n                    if ( !util_mod.is_deferred(entry) ) {\n                        var subset_entry = this.subset_entry(entry, region);\n                        this.set_data(region, subset_entry);\n                        entry = subset_entry;\n                    }\n\n                    return entry;\n                }\n            }\n        }\n\n        // FIXME: There _may_ be instances where region is a subregion of another entry but cannot be\n        // subsetted. For these cases, do not increase length because region will never be found (and\n        // an infinite loop will occur.)\n        // If needed, extend region to make it minimum size.\n        if (!is_subregion && region.length() < this.attributes.min_region_size) {\n            // IDEA: alternative heuristic is to find adjacent cache entry to region and use that to extend.\n            // This would prevent bad extensions when zooming in/out while still preserving the behavior\n            // below.\n\n            // Use copy of region to avoid changing actual region.\n            region = region.copy();\n\n            // Use heuristic to extend region: extend relative to last data request.\n            var last_request = this.most_recently_added();\n            if (!last_request || (region.get('start') > last_request.get('start'))) {\n                // This request is after the last request, so extend right.\n                region.set('end', region.get('start') + this.attributes.min_region_size);\n            }\n            else {\n                // This request is after the last request, so extend left.\n                region.set('start', region.get('end') - this.attributes.min_region_size);\n            }\n\n            // Trim region to avoid invalid coordinates.\n            region.set('genome', this.attributes.genome);\n            region.trim();\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Alias for set_elt for readbility.\n     */\n    set_data: function(region, entry) {\n        this.set_elt(region, entry);\n    },\n\n    /** \"Deep\" data request; used as a parameter for DataManager.get_more_data() */\n    DEEP_DATA_REQ: \"deep\",\n\n    /** \"Broad\" data request; used as a parameter for DataManager.get_more_data() */\n    BROAD_DATA_REQ: \"breadth\",\n\n    /**\n     * Gets more data for a region using either a depth-first or a breadth-first approach.\n     */\n    get_more_data: function(region, mode, resolution, extra_params, req_type) {\n        var cur_data = this._mark_stale(region);\n        if (!(cur_data && this.get('data_mode_compatible')(cur_data, mode))) {\n            console.log('ERROR: problem with getting more data: current data is not compatible');\n            return;\n        }\n\n        //\n        // Set parameters based on request type.\n        //\n        var query_low = region.get('start');\n        if (req_type === this.DEEP_DATA_REQ) {\n            // Use same interval but set start_val to skip data that's already in cur_data.\n            $.extend(extra_params, {start_val: cur_data.data.length + 1});\n        }\n        else if (req_type === this.BROAD_DATA_REQ) {\n            // To get past an area of extreme feature depth, set query low to be after either\n            // (a) the maximum high or HACK/FIXME (b) the end of the last feature returned.\n            query_low = (cur_data.max_high ? cur_data.max_high : cur_data.data[cur_data.data.length - 1][2]) + 1;\n        }\n        var query_region = region.copy().set('start', query_low);\n\n        //\n        // Get additional data, append to current data, and set new data. Use a custom deferred object\n        // to signal when new data is available.\n        //\n        var data_manager = this,\n            new_data_request = this.load_data(query_region, mode, resolution, extra_params),\n            new_data_available = $.Deferred();\n        // load_data sets cache to new_data_request, but use custom deferred object so that signal and data\n        // is all data, not just new data.\n        this.set_data(region, new_data_available);\n        $.when(new_data_request).then(function(result) {\n            // Update data and message.\n            if (result.data) {\n                result.data = cur_data.data.concat(result.data);\n                if (result.max_low) {\n                    result.max_low = cur_data.max_low;\n                }\n                if (result.message) {\n                    // HACK: replace number in message with current data length. Works but is ugly.\n                    result.message = result.message.replace(/[0-9]+/, result.data.length);\n                }\n            }\n            data_manager.set_data(region, result);\n            new_data_available.resolve(result);\n        });\n        return new_data_available;\n    },\n\n    /**\n     * Returns true if more detailed data can be obtained for entry.\n     */\n    can_get_more_detailed_data: function(region) {\n        var cur_data = this.get_elt(region);\n\n        // Can only get more detailed data for bigwig data that has less than 8000 data points.\n        // Summary tree returns *way* too much data, and 8000 data points ~ 500KB.\n        return (cur_data.dataset_type === 'bigwig' && cur_data.data.length < 8000);\n    },\n\n    /**\n     * Returns more detailed data for an entry.\n     */\n    get_more_detailed_data: function(region, mode, resolution, detail_multiplier, extra_params) {\n        // Mark current entry as stale.\n        var cur_data = this._mark_stale(region);\n        if (!cur_data) {\n            console.log(\"ERROR getting more detailed data: no current data\");\n            return;\n        }\n\n        if (!extra_params) { extra_params = {}; }\n\n        // Use additional parameters to get more detailed data.\n        if (cur_data.dataset_type === 'bigwig') {\n            // FIXME: constant should go somewhere.\n            extra_params.num_samples = 1000 * detail_multiplier;\n        }\n\n        return this.load_data(region, mode, resolution, extra_params);\n    },\n\n    /**\n     * Marks cache data as stale.\n     */\n    _mark_stale: function(region) {\n        var entry = this.get_elt(region);\n        if (!entry) {\n            console.log(\"ERROR: no data to mark as stale: \", this.get('dataset'), region.toString());\n        }\n        entry.stale = true;\n        return entry;\n    },\n\n    /**\n     * Returns an array of data with each entry representing one chromosome/contig\n     * of data or, if data is not available, returns a Deferred that resolves to the\n     * data when it becomes available.\n     */\n    get_genome_wide_data: function(genome) {\n        // -- Get all data. --\n\n        var self = this,\n            all_data_available = true,\n\n            //  Map chromosome info into genome data.\n            gw_data = _.map(genome.get('chroms_info').chrom_info, function(chrom_info) {\n                var chrom_data = self.get_elt(\n                    new GenomeRegion({\n                        chrom: chrom_info.chrom,\n                        start: 0,\n                        end: chrom_info.len\n                    })\n                );\n\n                // Set flag if data is not available.\n                if (!chrom_data) { all_data_available = false; }\n\n                return chrom_data;\n            });\n\n        // -- If all data is available, return it. --\n        if (all_data_available) {\n            return gw_data;\n        }\n\n        // -- All data is not available, so load from server. --\n\n        var deferred = $.Deferred();\n        $.getJSON(this.get('dataset').url(), { data_type: 'genome_data' }, function(genome_wide_data) {\n            self.add_data(genome_wide_data.data);\n            deferred.resolve(genome_wide_data.data);\n        });\n\n        return deferred;\n    },\n\n    /**\n     * Returns entry with only data in the subregion.\n     */\n    subset_entry: function(entry, subregion) {\n        // Dictionary from entry type to function for subsetting data.\n        var subset_fns = {\n            bigwig: function(data, subregion) {\n                return _.filter(data, function(data_point) {\n                    return data_point[0] >= subregion.get('start') &&\n                           data_point[0] <= subregion.get('end');\n                });\n            },\n            refseq: function(data, subregion) {\n                var seq_start = subregion.get('start') - entry.region.get('start');\n                return entry.data.slice(seq_start, seq_start + subregion.length());\n            }\n        };\n\n        // Subset entry if there is a function for subsetting and regions are not the same.\n        var subregion_data = entry.data;\n        if (!entry.region.same(subregion) && entry.dataset_type in subset_fns) {\n            subregion_data = subset_fns[entry.dataset_type](entry.data, subregion);\n        }\n\n        // Return entry with subregion's data.\n        return {\n            region: subregion,\n            data: subregion_data,\n            dataset_type: entry.dataset_type\n        };\n    }\n});\n\nvar GenomeReferenceDataManager = GenomeDataManager.extend({\n    initialize: function(options) {\n        // Use generic object in place of dataset and set urlRoot to fetch data.\n        var dataset_placeholder = new Backbone.Model();\n        dataset_placeholder.urlRoot = options.data_url;\n        this.set('dataset', dataset_placeholder);\n    },\n\n    load_data: function(region, mode, resolution, extra_params) {\n        // Fetch data if region is not too large.\n        return ( region.length() <= 100000 ?\n                 GenomeDataManager.prototype.load_data.call(this, region, mode, resolution, extra_params) :\n                 { data: null, region: region } );\n    }\n});\n\n/**\n * A genome build.\n */\nvar Genome = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        key: null,\n        chroms_info: null\n    },\n\n    initialize: function(options) {\n        this.id = options.dbkey;\n    },\n\n    /**\n     * Shorthand for getting to chromosome information.\n     */\n    get_chroms_info: function() {\n        return this.attributes.chroms_info.chrom_info;\n    },\n\n    /**\n     * Returns a GenomeRegion object denoting a complete chromosome.\n     */\n    get_chrom_region: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        var chrom_info = _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        });\n        return new GenomeRegion({\n            chrom: chrom_info.chrom,\n            end: chrom_info.len\n        });\n    },\n\n    /** Returns the length of a chromosome. */\n    get_chrom_len: function(chr_name) {\n        // FIXME: use findWhere in underscore 1.4\n        return _.find(this.get_chroms_info(), function(chrom_info) {\n            return chrom_info.chrom === chr_name;\n        }).len;\n    }\n});\n\n/**\n * A genomic region.\n */\nvar GenomeRegion = Backbone.Model.extend({\n    defaults: {\n        chrom: null,\n        start: 0,\n        end: 0,\n        str_val: null,\n        genome: null\n    },\n\n    /**\n     * Returns true if this region is the same as a given region.\n     * It does not test the genome right now.\n     */\n    same: function(region) {\n        return this.attributes.chrom === region.get('chrom') &&\n               this.attributes.start === region.get('start') &&\n               this.attributes.end === region.get('end');\n    },\n\n    /**\n     * If from_str specified, use it to initialize attributes.\n     */\n    initialize: function(options) {\n        if (options.from_str) {\n            var pieces = options.from_str.split(':'),\n                chrom = pieces[0],\n                start_end = pieces[1].split('-');\n            this.set({\n                chrom: chrom,\n                start: parseInt(start_end[0], 10),\n                end: parseInt(start_end[1], 10)\n            });\n        }\n\n        // Keep a copy of region's string value for fast lookup.\n        this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n\n        // Set str_val on attribute change.\n        this.on('change', function() {\n            this.attributes.str_val = this.get('chrom') + \":\" + this.get('start') + \"-\" + this.get('end');\n        }, this);\n    },\n\n    copy: function() {\n        return new GenomeRegion({\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        });\n    },\n\n    length: function() {\n        return this.get('end') - this.get('start');\n    },\n\n    /** Returns region in canonical form chrom:start-end */\n    toString: function() {\n        return this.attributes.str_val;\n    },\n\n    toJSON: function() {\n        return {\n            chrom: this.get('chrom'),\n            start: this.get('start'),\n            end: this.get('end')\n        };\n    },\n\n    /**\n     * Compute the type of overlap between this region and another region. The overlap is computed relative to the given/second region;\n     * hence, OVERLAP_START indicates that the first region overlaps the start (but not the end) of the second region.\n     */\n    compute_overlap: function(a_region) {\n        var first_chrom = this.get('chrom'), second_chrom = a_region.get('chrom'),\n            first_start = this.get('start'), second_start = a_region.get('start'),\n            first_end = this.get('end'), second_end = a_region.get('end'),\n            overlap;\n\n        // Compare chroms.\n        if (first_chrom && second_chrom && first_chrom !== second_chrom) {\n            return GenomeRegion.overlap_results.DIF_CHROMS;\n        }\n\n        // Compare regions.\n        if (first_start < second_start) {\n            if (first_end < second_start) {\n                overlap = GenomeRegion.overlap_results.BEFORE;\n            }\n            else if (first_end < second_end) {\n                overlap = GenomeRegion.overlap_results.OVERLAP_START;\n            }\n            else { // first_end >= second_end\n                overlap = GenomeRegion.overlap_results.CONTAINS;\n            }\n        }\n        else if (first_start > second_start) {\n            if (first_start > second_end) {\n                overlap = GenomeRegion.overlap_results.AFTER;\n            }\n            else if (first_end <= second_end) {\n                overlap = GenomeRegion.overlap_results.CONTAINED_BY;\n            }\n            else {\n                overlap = GenomeRegion.overlap_results.OVERLAP_END;\n            }\n        }\n        else { // first_start === second_start\n            overlap = (first_end >= second_end ?\n                       GenomeRegion.overlap_results.CONTAINS :\n                       GenomeRegion.overlap_results.CONTAINED_BY);\n        }\n\n        return overlap;\n    },\n\n    /**\n     * Trim a region to match genome's constraints.\n     */\n    trim: function(genome) {\n        // Assume that all chromosome/contigs start at 0.\n        if (this.attributes.start < 0) {\n            this.attributes.start = 0;\n        }\n\n        // Only try to trim the end if genome is set.\n        if (this.attributes.genome) {\n            var chrom_len = this.attributes.genome.get_chrom_len(this.attributes.chrom);\n            if (this.attributes.end > chrom_len) {\n                this.attributes.end = chrom_len - 1;\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Returns true if this region contains a given region.\n     */\n    contains: function(a_region) {\n        return this.compute_overlap(a_region) === GenomeRegion.overlap_results.CONTAINS;\n    },\n\n    /**\n     * Returns true if regions overlap.\n     */\n    overlaps: function(a_region) {\n        return _.intersection( [this.compute_overlap(a_region)],\n                               [GenomeRegion.overlap_results.DIF_CHROMS, GenomeRegion.overlap_results.BEFORE, GenomeRegion.overlap_results.AFTER] ).length === 0;\n    }\n},\n{\n    overlap_results: {\n        DIF_CHROMS: 1000,\n        BEFORE: 1001,\n        CONTAINS: 1002,\n        OVERLAP_START: 1003,\n        OVERLAP_END: 1004,\n        CONTAINED_BY: 1005,\n        AFTER: 1006\n    }\n});\n\nvar GenomeRegionCollection = Backbone.Collection.extend({\n    model: GenomeRegion\n});\n\n/**\n * A genome browser bookmark.\n */\nvar BrowserBookmark = Backbone.Model.extend({\n    defaults: {\n        region: null,\n        note: ''\n    },\n\n    initialize: function(options) {\n        this.set('region', new GenomeRegion(options.region));\n    }\n});\n\n/**\n * Bookmarks collection.\n */\nvar BrowserBookmarkCollection = Backbone.Collection.extend({\n    model: BrowserBookmark\n});\n\n/**\n * A track of data in a genome visualization.\n */\n// TODO: rename to Track and merge with Trackster's Track object.\nvar BackboneTrack = Backbone.Model.extend(CustomToJSON).extend({\n    defaults: {\n        mode: 'Auto'\n    },\n\n    initialize: function(options) {\n        this.set('dataset', new data_mod.Dataset(options.dataset));\n\n        // -- Set up config settings. --\n        var models =  [\n            { key: 'name', default_value: this.get('dataset').get('name') },\n            { key: 'color' },\n            { key: 'min_value', label: 'Min Value', type: 'float', default_value: 0 },\n            { key: 'max_value', label: 'Max Value', type: 'float', default_value: 1 }\n        ];\n\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // -- Set up data manager. --\n        var preloaded_data = this.get('preloaded_data');\n        if (preloaded_data) {\n            preloaded_data = preloaded_data.data;\n        }\n        else {\n            preloaded_data = [];\n        }\n        this.set('data_manager', new GenomeDataManager({\n            dataset: this.get('dataset'),\n            init_data: preloaded_data\n        }));\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'track_type',\n        'dataset',\n        'prefs',\n        'mode',\n        'filters',\n        'tool_state'\n    ],\n    to_json_mappers: {\n        prefs: function(p, self) {\n            if (_.size(p) === 0) {\n                p = {\n                    name: self.get('config').get('name').get('value'),\n                    color: self.get('config').get('color').get('value')\n                };\n            }\n            return p;\n        },\n        dataset: function(d) {\n            return {\n                id: d.id,\n                hda_ldda: d.get('hda_ldda')\n            };\n        }\n    }\n});\n\nvar BackboneTrackCollection = Backbone.Collection.extend({\n    model: BackboneTrack\n});\n\n/**\n * A visualization.\n */\nvar Visualization = Backbone.Model.extend({\n    defaults: {\n        title: '',\n        type: ''\n    },\n\n    urlRoot: Galaxy.root + \"api/visualizations\",\n\n    /**\n     * POSTs visualization's JSON to its URL using the parameter 'vis_json'\n     * Note: This is necessary because (a) Galaxy requires keyword args and\n     * (b) Galaxy does not handle PUT now.\n     */\n    save: function() {\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                vis_json: JSON.stringify(this)\n            }\n        });\n    }\n});\n\n/**\n * A visualization of genome data.\n */\nvar GenomeVisualization = Visualization.extend(CustomToJSON).extend({\n    defaults: _.extend({}, Visualization.prototype.defaults, {\n        dbkey: '',\n        drawables: null,\n        bookmarks: null,\n        viewport: null\n    }),\n\n    initialize: function(options) {\n        // Replace drawables with tracks.\n        this.set('drawables', new BackboneTrackCollection(options.tracks));\n\n        var models = [];\n        this.set('config', config_mod.ConfigSettingCollection.from_models_and_saved_values(models, options.prefs));\n\n        // Clear track and data definitions to avoid storing large objects.\n        this.unset('tracks');\n        this.get('drawables').each(function(d) {\n            d.unset('preloaded_data');\n        });\n    },\n\n    /**\n     * Add a track or array of tracks to the visualization.\n     */\n    add_tracks: function(tracks) {\n        this.get('drawables').add(tracks);\n    }\n},\n{\n    // This definition matches that produced by to_dict() methods in tracks.js\n    to_json_keys: [\n        'view',\n        'viewport',\n        'bookmarks'\n    ],\n\n    to_json_mappers: {\n        'view': function(dummy, self) {\n            return {\n                obj_type: 'View',\n                prefs: {\n                    name: self.get('title'),\n                    content_visible: true\n                },\n                drawables: self.get('drawables')\n            };\n        }\n    }\n}\n);\n\n/**\n * -- Routers --\n */\n\n/**\n * Router for track browser.\n */\nvar TrackBrowserRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.view = options.view;\n\n        // Can't put regular expression in routes dictionary.\n        // NOTE: parentheses are used to denote parameters returned to callback.\n        this.route(/([\\w]+)$/, 'change_location');\n        this.route(/([\\w\\+]+\\:[\\d,]+-[\\d,]+)$/, 'change_location');\n\n        // Handle navigate events from view.\n        var self = this;\n        self.view.on(\"navigate\", function(new_loc) {\n            self.navigate(new_loc);\n        });\n    },\n\n    change_location: function(new_loc) {\n        this.view.go_to(new_loc);\n    }\n});\n\nreturn {\n    BackboneTrack: BackboneTrack,\n    BrowserBookmark: BrowserBookmark,\n    BrowserBookmarkCollection: BrowserBookmarkCollection,\n    Cache: Cache,\n    CanvasManager: CanvasManager,\n    Genome: Genome,\n    GenomeDataManager: GenomeDataManager,\n    GenomeRegion: GenomeRegion,\n    GenomeRegionCollection: GenomeRegionCollection,\n    GenomeVisualization: GenomeVisualization,\n    GenomeReferenceDataManager: GenomeReferenceDataManager,\n    TrackBrowserRouter: TrackBrowserRouter,\n    Visualization: Visualization,\n    select_datasets: select_datasets\n};\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/visualization.js\n ** module id = 59\n ** module chunks = 0\n **/","/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui              = null;\nvar view            = null;\nvar browser_router  = null;\n\n// load required libraries\nrequire(\n[\n    // load js libraries\n    'utils/utils',\n    'libs/jquery/jquery.event.drag',\n    'libs/jquery/jquery.event.hover',\n    'libs/jquery/jquery.mousewheel',\n    'libs/jquery/jquery-ui',\n    'libs/jquery/select2',\n    'libs/farbtastic',\n    'libs/jquery/jquery.form',\n    'libs/jquery/jquery.rating',\n    \"ui/editable-text\",\n], function(mod_utils, mod_icon_btn)\n{\n    // load css\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine([\n    \"libs/underscore\",\n    \"viz/trackster/tracks\",\n    \"viz/visualization\",\n    \"mvc/ui/icon-button\",\n    \"utils/query-string-parsing\"\n], function(_, tracks, visualization, mod_icon_btn, query_string) {\n\n/**\n * Base Object/Model for inhertiance.\n */\nvar Base = function() {\n    if( this.initialize ) {\n        this.initialize.apply(this, arguments);\n    }\n};\nBase.extend = Backbone.Model.extend;\n\n/**\n * User interface controls for trackster\n */\nvar TracksterUI = Base.extend({\n    initialize: function( baseURL ) {\n        this.baseURL = baseURL;\n    },\n\n    /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n    save_viz: function() {\n        // show dialog\n        Galaxy.modal.show({title: \"Saving...\", body: \"progress\" });\n\n        // Save bookmarks.\n        var bookmarks = [];\n        $(\".bookmark\").each(function() {\n            bookmarks.push({\n                position: $(this).children(\".position\").text(),\n                annotation: $(this).children(\".annotation\").text()\n            });\n        });\n\n        // FIXME: give unique IDs to Drawables and save overview as ID.\n        var overview_track_name = (view.overview_drawable ? view.overview_drawable.config.get_value('name') : null),\n            viz_config = {\n                'view': view.to_dict(),\n                'viewport': { 'chrom': view.chrom, 'start': view.low , 'end': view.high, 'overview': overview_track_name },\n                'bookmarks': bookmarks\n            };\n\n        // Make call to save visualization.\n        return $.ajax({\n            url: Galaxy.root + \"visualization/save\",\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                'id'        : view.vis_id,\n                'title'     : view.config.get_value('name'),\n                'dbkey'     : view.dbkey,\n                'type'      : 'trackster',\n                'vis_json'  : JSON.stringify(viz_config)\n            }\n        }).success(function(vis_info) {\n            Galaxy.modal.hide();\n            view.vis_id = vis_info.vis_id;\n            view.has_changes = false;\n\n            // Needed to set URL when first saving a visualization.\n            window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n        }).error(function() {\n            // show dialog\n            Galaxy.modal.show({\n                title   : \"Could Not Save\",\n                body    : \"Could not save visualization. Please try again later.\",\n                buttons : { \"Cancel\": function() { Galaxy.modal.hide(); } }\n            });\n        });\n    },\n\n    /**\n     * Create button menu\n     */\n    createButtonMenu: function() {\n        var self = this,\n            menu = mod_icon_btn.create_icon_buttons_menu([\n            { icon_class: 'plus-button', title: 'Add tracks', on_click: function() {\n                visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey },\n                function(new_tracks) {\n                    _.each(new_tracks, function(track) {\n                        view.add_drawable( tracks.object_from_template(track, view, view) );\n                    });\n                });\n            } },\n            { icon_class: 'block--plus', title: 'Add group', on_click: function() {\n                view.add_drawable( new tracks.DrawableGroup(view, view, { name: \"New Group\" }) );\n            } },\n            { icon_class: 'bookmarks', title: 'Bookmarks', on_click: function() {\n                // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                force_right_panel(($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\"));\n            } },\n            {\n                icon_class: 'globe',\n                title: 'Circster',\n                on_click: function() {\n                    window.location = self.baseURL + 'visualization/circster?id=' + view.vis_id;\n                }\n            },\n            { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                self.save_viz();\n            } },\n            {\n                icon_class: 'cross-circle',\n                title: 'Close',\n                on_click: function() {\n                    self.handle_unsaved_changes(view);\n                }\n            }\n        ],\n        {\n            tooltip_config: { placement: 'bottom' }\n        });\n        this.buttonMenu = menu;\n        return menu;\n    },\n\n    /**\n     * Use a popup to select a dataset of create bookmarks from\n     */\n    add_bookmarks: function() {\n        var self = this,\n            baseURL = this.baseURL;\n\n        // show modal while loading history\n        Galaxy.modal.show({title: \"Select dataset for new bookmarks\", body: \"progress\" });\n\n        $.ajax({\n            url: this.baseURL + \"/visualization/list_histories\",\n            data: { \"f-dbkey\": view.dbkey },\n            error: function() { alert( \"Grid failed\" ); },\n            success: function(table_html) {\n\n                // show modal to select bookmarks\n                Galaxy.modal.show(\n                {\n                    title   : \"Select dataset for new bookmarks\",\n                    body    : table_html,\n                    buttons :\n                    {\n                        \"Cancel\": function()\n                        {\n                            Galaxy.modal.hide();\n                        },\n\n                        \"Insert\": function()\n                        {\n                            // Just use the first selected\n                            $('input[name=id]:checked,input[name=ldda_ids]:checked').first().each(function()\n                            {\n                                var data, id = $(this).val();\n                                if ($(this).attr(\"name\") === \"id\")\n                                    data = { hda_id: id };\n                                else\n                                    data = { ldda_id: id};\n\n                                $.ajax({\n                                    url: this.baseURL + \"/visualization/bookmarks_from_dataset\",\n                                    data: data,\n                                    dataType: \"json\"\n                                }).then( function(data) {\n                                    for( i = 0; i < data.data.length; i++ ) {\n                                        var row = data.data[i];\n                                        self.add_bookmark( row[0], row[1] );\n                                    }\n                                });\n                            });\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Add bookmark.\n     */\n    add_bookmark: function(position, annotation, editable) {\n        // Create HTML.\n        var bookmarks_container = $(\"#right .unified-panel-body\"),\n            new_bookmark = $(\"<div/>\").addClass(\"bookmark\").appendTo(bookmarks_container);\n\n        var position_div = $(\"<div/>\").addClass(\"position\").appendTo(new_bookmark),\n            position_link = $(\"<a href=''/>\").text(position).appendTo(position_div).click(function() {\n                view.go_to(position);\n                return false;\n            }),\n            annotation_div = $(\"<div/>\").text(annotation).appendTo(new_bookmark);\n\n        // If editable, enable bookmark deletion and annotation editing.\n        if (editable) {\n            var delete_icon_container = $(\"<div/>\").addClass(\"delete-icon-container\").prependTo(new_bookmark).click(function (){\n                    // Remove bookmark.\n                    new_bookmark.slideUp(\"fast\");\n                    new_bookmark.remove();\n                    view.has_changes = true;\n                    return false;\n                }),\n                delete_icon = $(\"<a href=''/>\").addClass(\"icon-button delete\").appendTo(delete_icon_container);\n            annotation_div.make_text_editable({\n                num_rows: 3,\n                use_textarea: true,\n                help_text: \"Edit bookmark note\"\n            }).addClass(\"annotation\");\n        }\n\n        view.has_changes = true;\n        return new_bookmark;\n    },\n\n    /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n    create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n\n        // Create view.\n        var self = this,\n            view = new tracks.TracksterView(_.extend(view_config, {header: false}));\n        view.editor = true;\n        $.when( view.load_chroms_deferred ).then(function(chrom_info) {\n            // Viewport config.\n            if (viewport_config) {\n                var chrom = viewport_config.chrom,\n                    start = viewport_config.start,\n                    end = viewport_config.end,\n                    overview_drawable_name = viewport_config.overview;\n\n                if (chrom && (start !== undefined) && end) {\n                    view.change_chrom(chrom, start, end);\n                }\n                else {\n                    // No valid viewport, so use first chromosome.\n                    view.change_chrom(chrom_info[0].chrom);\n                }\n            }\n            else {\n                // No viewport, so use first chromosome.\n                view.change_chrom(chrom_info[0].chrom);\n            }\n\n            // Add drawables to view.\n            if (drawables_config) {\n                // FIXME: can from_dict() be used to create view and add drawables?\n                var drawable_config,\n                    drawable_type,\n                    drawable;\n                for (var i = 0; i < drawables_config.length; i++) {\n                    view.add_drawable( tracks.object_from_template( drawables_config[i], view, view ) );\n                }\n            }\n\n            // Set overview.\n            var overview_drawable;\n            for (var i = 0; i < view.drawables.length; i++) {\n                if (view.drawables[i].config.get_value('name') === overview_drawable_name) {\n                    view.set_overview(view.drawables[i]);\n                    break;\n                }\n            }\n\n            // Load bookmarks.\n            if (bookmarks_config) {\n                var bookmark;\n                for (var i = 0; i < bookmarks_config.length; i++) {\n                    bookmark = bookmarks_config[i];\n                    self.add_bookmark(bookmark['position'], bookmark['annotation'], editable);\n                }\n            }\n\n            // View has no changes as of yet.\n            view.has_changes = false;\n        });\n\n        // Final initialization.\n        this.set_up_router({view: view});\n\n        return view;\n    },\n\n    /**\n     * Set up location router to use hashes as track browser locations.\n     */\n    set_up_router : function(options)\n    {\n        new visualization.TrackBrowserRouter(options);\n        Backbone.history.start();\n    },\n\n    /**\n     * Set up keyboard navigation for a visualization.\n     */\n    init_keyboard_nav: function(view) {\n        // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n        $(document).keyup(function(e) {\n            // Do not navigate if arrow keys used in input element.\n            if ($(e.srcElement).is(':input')) {\n                return;\n            }\n\n            // Key codes: left == 37, up == 38, right == 39, down == 40\n            switch(e.which) {\n                case 37:\n                    view.move_fraction(0.25);\n                    break;\n                case 38:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() - 20);\n                    break;\n                case 39:\n                    view.move_fraction(-0.25);\n                    break;\n                case 40:\n                    var change = Math.round(view.viewport_container.height()/15.0);\n                    view.viewport_container.scrollTop( view.viewport_container.scrollTop() + 20);\n                    break;\n            }\n        });\n    },\n\n    /**\n     * Handle unsaved changes in visualization.\n     */\n    handle_unsaved_changes: function(view) {\n        if (view.has_changes) {\n            var self = this;\n            Galaxy.modal.show({\n                title: \"Close visualization\",\n                body: \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                buttons: {\n                    \"Cancel\": function() { Galaxy.modal.hide(); },\n                    \"Leave without Saving\" : function() {\n                        $(window).off('beforeunload');\n                        window.location = Galaxy.root + 'visualization';\n                    },\n                    \"Save\" : function() {\n                        $.when(self.save_viz()).then(function() {\n                            window.location = Galaxy.root + 'visualization';\n                        });\n                    }\n                }\n            });\n\n        }\n        else {\n            window.location = Galaxy.root + 'visualization';\n        }\n    }\n\n});\n\nvar TracksterView = Backbone.View.extend(\n{\n    // initalize trackster\n    initialize : function ()\n    {\n        // load ui\n        ui = new TracksterUI(Galaxy.root);\n\n        // create button menu\n        ui.createButtonMenu();\n\n        // attach the button menu to the panel header and float it left\n        ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n        // add to center panel\n        $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n        // configure right panel\n        $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n        $(\"#right .unified-panel-icons\").append(\"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\");\n\n        // resize view when showing/hiding right panel (bookmarks for now).\n        $(\"#right-border\").click(function() { view.resize_window(); });\n\n        // hide right panel\n        force_right_panel(\"hide\");\n\n\n        // check if id is available\n        if (galaxy_config.app.id){\n            this.view_existing();\n        } else if( query_string.get( 'dataset_id' ) ){\n            this.choose_existing_or_new();\n        } else {\n            this.view_new();\n        }\n    },\n\n    choose_existing_or_new : function () {\n        var self = this;\n        var dbkey = query_string.get( 'dbkey' ),\n            listTracksParams = {},\n            dataset_params = {\n                dbkey       : dbkey,\n                dataset_id  : query_string.get( 'dataset_id' ),\n                hda_ldda    : query_string.get( 'hda_ldda' )\n            };\n        if (dbkey){\n            listTracksParams[ 'f-dbkey' ] = dbkey;\n        }\n        $.ajax({\n            url: Galaxy.root + 'visualization/list_tracks?' + $.param( listTracksParams ),\n            dataType: \"html\",\n            error: function() { alert( \"Could not add this dataset to browser.\" ); },\n\n            success: function(table_html) {\n                console.debug( 'success' );\n                function view_in_saved(){\n                    // Show new modal with saved visualizations.\n                    Galaxy.modal.show({\n                        title : \"Add Data to Saved Visualization\",\n                        body : table_html,\n                        buttons : {\n                            \"Cancel\": function() {\n                                // go back to the first choice\n                                show_choice();\n                            },\n                            \"Add to visualization\": function() {\n                                $(parent.document).find('input[name=id]:checked').each(function() {\n                                    var vis_id = $(this).val();\n                                    dataset_params.id = vis_id;\n                                    window.location = Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                                });\n                            }\n                        }\n                    });\n                }\n                function show_choice(){\n                    Galaxy.modal.show({\n                        title : \"View Data in a New or Saved Visualization?\",\n                        // either have text in here or have to remove body and the header/footer margins\n                        body  : (\n                            // TODO: yay. inline styles. thanks, galaxy\n                            '<p><ul style=\"list-style: disc inside none\">You can add this dataset as:' +\n                                \"<li>a new track to one of your existing, saved Trackster \" +\n                                \"sessions if they share the genome build: <b>\" + dbkey + \"</b></li>\" +\n                                \"<li>or create a new session with this dataset as the only track</li>\" +\n                            \"</ul></p>\"\n                        ),\n                        buttons : {\n                            \"Cancel\": function() {\n                                window.location = Galaxy.root + \"visualization/list\";\n                            },\n                            \"View in saved visualization\": function() {\n                                view_in_saved();\n                            },\n                            \"View in new visualization\": function() {\n                                self.view_new();\n                            }\n                        }\n                    });\n                }\n                show_choice();\n            }\n        });\n    },\n\n    // view\n    view_existing : function ()\n    {\n        // get config\n        var viz_config = galaxy_config.app.viz_config;\n\n        // view\n        view = ui.create_visualization(\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: viz_config.title,\n            vis_id: viz_config.vis_id,\n            dbkey: viz_config.dbkey\n        }, viz_config.viewport, viz_config.tracks, viz_config.bookmarks, true);\n\n        // initialize editor\n        this.init_editor();\n    },\n\n    // view\n    view_new : function ()\n    {\n        // availability of default database key\n        /*if (galaxy_config.app.default_dbkey !== undefined)\n        {\n            this.create_browser(\"Unnamed\", galaxy_config.app.default_dbkey);\n            return;\n        }*/\n\n        // reference this\n        var self = this;\n\n        // ajax\n        $.ajax(\n        {\n            url: Galaxy.root + \"api/genomes?chrom_info=True\",\n            data: {},\n            error: function() { alert( \"Couldn't create new browser.\" ); },\n            success: function(response)\n            {\n                // show dialog\n                Galaxy.modal.show({\n                    title   : \"New Visualization\",\n                    body    : self.template_view_new(response),\n                    buttons : {\n                        \"Cancel\": function() { window.location = Galaxy.root + \"visualization/list\"; },\n                        \"Create\": function() { self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val()); Galaxy.modal.hide(); }\n                    }\n                });\n\n                // select default\n                var dbkeys_in_genomes = response.map( function( r ){ return r[1]; });\n                if (galaxy_config.app.default_dbkey && _.contains(dbkeys_in_genomes,galaxy_config.app.default_dbkey)) {\n                    $(\"#new-dbkey\").val( galaxy_config.app.default_dbkey );\n                }\n\n                // change focus\n                $(\"#new-title\").focus();\n                $(\"select[name='dbkey']\").select2();\n\n                // to support the large number of options for dbkey, enable scrolling in overlay.\n                $(\"#overlay\").css(\"overflow\", \"auto\");\n            }\n        });\n    },\n\n    // new browser form\n    template_view_new: function(response)\n    {\n        // start template\n        var html =  '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-title\">Browser name:</label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                            '<div class=\"form-row-input\">' +\n                                '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n        // add dbkeys\n        for (var i = 0; i < response.length; i++) {\n            html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + '</option>';\n        }\n\n        // close selection/finalize template\n        html +=                 '</select>' +\n                            '</div>' +\n                            '<div style=\"clear: both;\"></div>' +\n                        '</div>' +\n                        '<div class=\"form-row\">' +\n                            'Is the build not listed here? ' +\n                            '<a href=\"' + Galaxy.root + 'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                        '</div>' +\n                    '</form>';\n\n        // return\n        return html;\n    },\n\n    // create\n    create_browser : function(name, dbkey)\n    {\n        $(document).trigger(\"convert_to_values\");\n\n        view = ui.create_visualization (\n        {\n            container: $(\"#center .unified-panel-body\"),\n            name: name,\n            dbkey: dbkey\n        }, galaxy_config.app.gene_region);\n\n        // initialize editor\n        this.init_editor();\n\n        // modify view setting\n        view.editor = true;\n    },\n\n    // initialization for editor-specific functions.\n    init_editor : function ()\n    {\n        // set title\n        $(\"#center .unified-panel-title\").text(view.config.get_value('name') + \" (\" + view.dbkey + \")\");\n\n        // add dataset\n        if (galaxy_config.app.add_dataset)\n            $.ajax({\n                url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n                data: { hda_ldda: 'hda', data_type: 'track_config' },\n                dataType: \"json\",\n                success: function(track_data) { view.add_drawable( tracks.object_from_template(track_data, view, view) ); }\n            });\n\n        // initialize icons\n        $(\"#add-bookmark-button\").click(function()\n        {\n            // add new bookmark.\n            var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                annotation = \"Bookmark description\";\n            return ui.add_bookmark(position, annotation, true);\n        });\n\n        // initialize keyboard\n        ui.init_keyboard_nav(view);\n\n        $(window).on('beforeunload', function() {\n            if (view.has_changes) {\n                return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n            }\n        });\n    }\n});\n\nreturn {\n    TracksterUI: TracksterUI,\n    GalaxyApp : TracksterView\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster.js\n ** module id = 124\n ** module chunks = 0\n **/","define( [\"libs/underscore\"], function(_) {\n\nvar extend = _.extend;\n\n/**\n * Filters that enable users to show/hide data points dynamically.\n */\nvar Filter = function(obj_dict) {\n    this.manager = null;\n    this.name = obj_dict.name;\n    // Index into payload to filter.\n    this.index = obj_dict.index;\n    this.tool_id = obj_dict.tool_id;\n    // Name to use for filter when building expression for tool.\n    this.tool_exp_name = obj_dict.tool_exp_name;\n};\n\nextend(Filter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        return {\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        };\n    } \n});\n\n/**\n * Creates an action icon.\n */\nvar create_action_icon =  function(title, css_class, on_click_fn) {\n    return $(\"<a/>\").attr(\"href\", \"javascript:void(0);\").attr(\"title\", title)\n                    .addClass(\"icon-button\").addClass(css_class).tooltip()\n                    .click(on_click_fn);\n};\n\n/**\n * Number filters have a min, max as well as a low, high; low and high are used \n */\nvar NumberFilter = function(obj_dict) {\n    //\n    // Attribute init.\n    //\n    Filter.call(this, obj_dict);\n    // Filter low/high. These values are used to filter elements.\n    this.low = ('low' in obj_dict ? obj_dict.low : -Number.MAX_VALUE);\n    this.high = ('high' in obj_dict ? obj_dict.high : Number.MAX_VALUE);\n    // Slide min/max. These values are used to set/update slider.\n    this.min = ('min' in obj_dict ? obj_dict.min : Number.MAX_VALUE);\n    this.max = ('max' in obj_dict ? obj_dict.max : -Number.MAX_VALUE);\n    // UI elements associated with filter.\n    this.container = null;\n    this.slider = null;\n    this.slider_label = null;\n    \n    //\n    // Create HTML.\n    //\n    \n    // Function that supports inline text editing of slider values.\n    // Enable users to edit parameter's value via a text box.\n    var edit_slider_values = function(container, span, slider) {\n        container.click(function() {\n            var cur_value = span.text(),\n                max = parseFloat(slider.slider(\"option\", \"max\")),\n                input_size = (max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6),\n                multi_value = false,\n                slider_row = $(this).parents(\".slider-row\");\n                \n            // Row now has input.\n            slider_row.addClass(\"input\");\n                \n            // Increase input size if there are two values.\n            if (slider.slider(\"option\", \"values\")) {\n                input_size = 2*input_size + 1;\n                multi_value = true;\n            }\n            span.text(\"\");\n            // Temporary input for changing value.\n            $(\"<input type='text'/>\").attr(\"size\", input_size).attr(\"maxlength\", input_size)\n                                     .attr(\"value\", cur_value).appendTo(span).focus().select()\n                                     .click(function(e) {\n                // Don't want click to propogate up to values_span and restart everything.\n                e.stopPropagation();\n            }).blur(function() {\n                $(this).remove();\n                span.text(cur_value);\n                slider_row.removeClass(\"input\");\n            }).keyup(function(e) {\n                if (e.keyCode === 27) {\n                    // Escape key.\n                    $(this).trigger(\"blur\");\n                } else if (e.keyCode === 13) {\n                    //\n                    // Enter/return key initiates callback. If new value(s) are in slider range, \n                    // change value (which calls slider's change() function).\n                    //\n                    var slider_min = slider.slider(\"option\", \"min\"),\n                        slider_max = slider.slider(\"option\", \"max\"),\n                        invalid = function(a_val) {\n                            return (isNaN(a_val) || a_val > slider_max || a_val < slider_min);\n                        },\n                        new_value = $(this).val();\n                    if (!multi_value) {\n                        new_value = parseFloat(new_value);\n                        if (invalid(new_value)) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    }\n                    else { // Multi value.\n                        new_value = new_value.split(\"-\");\n                        new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n                        if (invalid(new_value[0]) || invalid(new_value[1])) {\n                            alert(\"Parameter value must be in the range [\" + slider_min + \"-\" + slider_max + \"]\");\n                            return $(this);\n                        }\n                    }\n                    \n                    // Updating the slider also updates slider values and removes input. \n                    slider.slider((multi_value ? \"values\" : \"value\"), new_value);\n                    slider_row.removeClass(\"input\");\n                }\n            });\n        });\n    };\n    \n    var filter = this;\n    \n    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n    \n    // Set up filter label (name, values).\n    var filter_label = $(\"<div/>\").addClass(\"elt-label\").appendTo(filter.parent_div),\n        name_span = $(\"<span/>\").addClass(\"slider-name\").text(filter.name + \"  \").appendTo(filter_label),\n        values_span = $(\"<span/>\").text(this.low + \"-\" + this.high),\n        values_span_container = $(\"<span/>\").addClass(\"slider-value\").appendTo(filter_label).append(\"[\").append(values_span).append(\"]\");\n    filter.values_span = values_span;\n            \n    // Set up slider for filter.\n    var slider_div = $(\"<div/>\").addClass(\"slider\").appendTo(filter.parent_div);\n    filter.control_element = $(\"<div/>\").attr(\"id\", filter.name + \"-filter-control\").appendTo(slider_div);\n    filter.control_element.slider({\n        range: true,\n        min: this.min,\n        max: this.max,\n        step: this.get_slider_step(this.min, this.max),\n        values: [this.low, this.high],\n        slide: function(event, ui) { \n            filter.slide(event, ui); \n        },\n        change: function(event, ui) {\n            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n        }\n    });\n    filter.slider = filter.control_element;\n    filter.slider_label = values_span;\n    \n    // Enable users to edit slider values via text box.\n    edit_slider_values(values_span_container, values_span, filter.control_element);\n    \n    // Set up filter display controls.\n    var display_controls_div = $(\"<div/>\").addClass(\"display-controls\").appendTo(filter.parent_div);\n    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", \n                                                function() {\n                                                    if (filter.manager.alpha_filter !== filter) {\n                                                        // Setting this filter as the alpha filter.\n                                                        filter.manager.alpha_filter = filter;\n                                                        // Update UI for new filter.\n                                                        filter.manager.parent_div.find(\".layer-transparent\").removeClass(\"active\").hide();\n                                                        filter.transparency_icon.addClass(\"active\").show();\n                                                    }\n                                                    else {\n                                                        // Clearing filter as alpha filter.\n                                                        filter.manager.alpha_filter = null;\n                                                        filter.transparency_icon.removeClass(\"active\");\n                                                    }\n                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n                                                } )\n                                                .appendTo(display_controls_div).hide();\n    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", \n                                                function() {\n                                                    if (filter.manager.height_filter !== filter) {\n                                                        // Setting this filter as the height filter.\n                                                        filter.manager.height_filter = filter;\n                                                        // Update UI for new filter.\n                                                        filter.manager.parent_div.find(\".arrow-resize-090\").removeClass(\"active\").hide();\n                                                        filter.height_icon.addClass(\"active\").show();\n                                                    }\n                                                    else {\n                                                        // Clearing filter as alpha filter.\n                                                        filter.manager.height_filter = null;\n                                                        filter.height_icon.removeClass(\"active\");\n                                                    }\n                                                    filter.manager.track.request_draw({ force: true, clear_after: true });\n                                                } )\n                                                .appendTo(display_controls_div).hide();\n    filter.parent_div.hover( function() { \n                                filter.transparency_icon.show();\n                                filter.height_icon.show(); \n                            },\n                            function() {\n                                if (filter.manager.alpha_filter !== filter) {\n                                    filter.transparency_icon.hide();\n                                }\n                                if (filter.manager.height_filter !== filter) {\n                                    filter.height_icon.hide();\n                                }\n                            } );\n    \n    // Add to clear floating layout.\n    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n};\nextend(NumberFilter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        var obj_dict = Filter.prototype.to_dict.call(this);\n        return extend(obj_dict, {\n            type: 'number',\n            min: this.min,\n            max: this.max,\n            low: this.low,\n            high: this.high\n        });\n    },\n    /**\n     * Return a copy of filter.\n     */\n    copy: function() {\n        return new NumberFilter( \n            {\n                name: this.name, \n                index: this.index, \n                tool_id: this.tool_id, \n                tool_exp_name: this.tool_exp_name\n            });\n    },\n    /**\n     * Get step for slider.\n     */\n    // FIXME: make this a \"static\" function.\n    get_slider_step: function(min, max) {\n        var range = max - min;\n        return (range <= 2 ? 0.01 : 1);\n    },\n    /**\n     * Handle slide events.\n     */\n    slide: function(event, ui) {\n        var values = ui.values;\n\n        // Set new values in UI.\n        this.values_span.text(values[0] + \"-\" + values[1]);\n\n        // Set new values in filter.\n        this.low = values[0];\n        this.high = values[1];\n         \n        // Set timeout to update if filter low, high are stable.\n        var self = this;\n        setTimeout(function() {\n            if (values[0] === self.low && values[1] === self.high) {\n                self.manager.track.request_draw({ force: true, clear_after: true });\n            }\n        }, 25);\n         \n     },\n    /** \n     * Returns true if filter can be applied to element.\n     */\n    applies_to: function(element) {\n        if (element.length > this.index) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n    _keep_val: function(val) {\n        return (isNaN(val) || (val >= this.low && val <= this.high));\n    },    \n    /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive) \n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n    keep: function(element) {\n        if ( !this.applies_to( element ) ) {\n            // No element to filter on.\n            return true;\n        }\n\n        // Keep value function.\n        var filter = this;\n\n        // Do filtering.\n        var to_filter = element[this.index];\n        if (to_filter instanceof Array) {\n            var returnVal = true;\n            for (var i = 0; i < to_filter.length; i++) {\n                if (!this._keep_val(to_filter[i])) {\n                    // Exclude element.\n                    returnVal = false;\n                    break;\n                }\n            }\n            return returnVal;\n        }\n        else {\n            return this._keep_val(element[this.index]);\n        }\n    },\n    /**\n     * Update filter's min and max values based on element's values.\n     */\n    update_attrs: function(element) {\n        var updated = false;\n        if (!this.applies_to(element) ) {\n            return updated;\n        }\n        \n        //\n        // Update filter's min, max based on element values.\n        //\n        \n        // Make value(s) into an Array.\n        var values = element[this.index];\n        if (!(values instanceof Array)) {\n            values = [values];\n        }\n        \n        // Loop through values and update min, max.\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            if (value < this.min) {\n                this.min = Math.floor(value);\n                updated = true;\n            }\n            if (value > this.max) {\n                this.max = Math.ceil(value);\n                updated = true;\n            }\n        }\n        return updated;\n    },\n    /**\n     * Update filter's slider.\n     */\n    update_ui_elt: function () {\n        // Only show filter if min < max because filter is not useful otherwise. This\n        // covers all corner cases, such as when min, max have not been defined and\n        // when min == max.\n        if (this.min < this.max) {\n            this.parent_div.show();\n        }\n        else {\n            this.parent_div.hide();\n        }\n        \n        var \n            slider_min = this.slider.slider(\"option\", \"min\"),\n            slider_max = this.slider.slider(\"option\", \"max\");\n        if (this.min < slider_min || this.max > slider_max) {\n            // Update slider min, max, step.\n            this.slider.slider(\"option\", \"min\", this.min);\n            this.slider.slider(\"option\", \"max\", this.max);\n            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n            // Refresh slider:\n            // TODO: do we want to keep current values or reset to min/max?\n            // Currently we reset values:\n            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n            // To use the current values.\n            //var values = this.slider.slider( \"option\", \"values\" );\n            //this.slider.slider( \"option\", \"values\", values );\n        }\n    }\n});\n \n/**\n * Manages a set of filters.\n */\nvar FiltersManager = function(track, obj_dict) {\n    this.track = track;\n    this.alpha_filter = null;\n    this.height_filter = null;\n    this.filters = [];\n    \n    //\n    // Create HTML.\n    //\n        \n    //\n    // Create parent div.\n    //\n    this.parent_div = $(\"<div/>\").addClass(\"filters\").hide();\n    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n    this.parent_div.bind(\"drag\", function(e) {\n        e.stopPropagation();\n    }).click(function(e) {\n        e.stopPropagation();\n    }).bind(\"dblclick\", function(e) {\n        e.stopPropagation();\n    }).bind(\"keydown\", function(e) {\n        e.stopPropagation();\n    });\n    \n    //\n    // Restore state from dict.\n    //\n    if (obj_dict && 'filters' in obj_dict) { // Second condition needed for backward compatibility.\n        var \n            alpha_filter_name = ('alpha_filter' in obj_dict ? obj_dict.alpha_filter : null),\n            height_filter_name = ('height_filter' in obj_dict ? obj_dict.height_filter : null),            \n            filters_dict = obj_dict.filters,\n            filter;\n        for (var i = 0; i < filters_dict.length; i++) {\n            if (filters_dict[i].type === 'number') {\n                filter = new NumberFilter(filters_dict[i]);\n                this.add_filter(filter);\n                if (filter.name === alpha_filter_name) {\n                    this.alpha_filter = filter;\n                    filter.transparency_icon.addClass(\"active\").show();\n                }\n                if (filter.name === height_filter_name) {\n                    this.height_filter = filter;\n                    filter.height_icon.addClass(\"active\").show();\n                }\n            } \n            else {\n                console.log(\"ERROR: unsupported filter: \", name, type);\n            }\n        }\n        \n        \n        if ('visible' in obj_dict && obj_dict.visible) {\n            this.parent_div.show();\n        }\n    }\n    \n    // Add button to filter complete dataset.\n    if (this.filters.length !== 0) {\n        var run_buttons_row = $(\"<div/>\").addClass(\"param-row\").appendTo(this.parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'/>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_buttons_row);\n        var filter_manager = this;\n        run_on_dataset_button.click( function() {\n            filter_manager.run_on_dataset();\n        });\n    }\n        \n};\n\nextend(FiltersManager.prototype, {\n    // HTML manipulation and inspection.\n    show: function() { this.parent_div.show(); },\n    hide: function() { this.parent_div.hide(); },\n    toggle: function() { this.parent_div.toggle(); },\n    visible: function() { return this.parent_div.is(\":visible\"); },\n    /**\n     * Returns dictionary for manager.\n     */\n    to_dict: function() {\n        var obj_dict = {},\n            filter_dicts = [],\n            filter;\n            \n        // Include individual filter states.\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            filter_dicts.push(filter.to_dict());\n        }\n        obj_dict.filters = filter_dicts;\n        \n        // Include transparency, height filters.\n        obj_dict.alpha_filter = (this.alpha_filter ? this.alpha_filter.name : null);\n        obj_dict.height_filter = (this.height_filter ? this.height_filter.name : null);\n        \n        // Include visibility.\n        obj_dict.visible = this.parent_div.is(\":visible\");\n        \n        return obj_dict;\n    },\n    /**\n     * Return a copy of the manager.\n     */\n    copy: function(new_track) {\n        var copy = new FiltersManager(new_track);\n        for (var i = 0; i < this.filters.length; i++) {\n            copy.add_filter(this.filters[i].copy());\n        }\n        return copy;\n    },\n    /**\n     * Add a filter to the manager.\n     */\n    add_filter: function(filter) {\n        filter.manager = this;\n        this.parent_div.append(filter.parent_div);\n        this.filters.push(filter);  \n    },\n    /**\n     * Remove all filters from manager.\n     */\n    remove_all: function() {\n        this.filters = [];\n        this.parent_div.children().remove();\n    },\n    /**\n     * Initialize filters.\n     */ \n    init_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.update_ui_elt();\n        }\n    },\n    /**\n     * Clear filters so that they do not impact track display.\n     */\n    clear_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n        }\n        this.alpha_filter = null;\n        this.height_filter = null;\n        \n        // Hide icons for setting filters.\n        this.parent_div.find(\".icon-button\").hide();\n    },\n    run_on_dataset: function() {\n        // Get or create dictionary item.\n        var get_or_create_dict_item = function(dict, key, new_item) {\n            // Add new item to dict if \n            if (!(key in dict)) {\n                dict[key] = new_item;\n            }\n            return dict[key];\n        };\n        \n        //\n        // Find and group active filters. Active filters are those being used to hide data.\n        // Filters with the same tool id are grouped.\n        //\n        var active_filters = {},\n            filter, \n            tool_filter_conditions;\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            if (filter.tool_id) {\n                // Add filtering conditions if filter low/high are set.\n                if (filter.min !== filter.low) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" >= \" + filter.low;\n                }\n                if (filter.max !== filter.high) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = filter.tool_exp_name + \" <= \" + filter.high;\n                }\n            }\n        }\n        \n        //\n        // Use tools to run filters.\n        //\n        \n        // Create list of (tool_id, tool_filters) tuples.\n        var active_filters_list = [];\n        for (var tool_id in active_filters) {\n            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n        }\n        \n        // Invoke recursive function to run filters; this enables chaining of filters via\n        // iteratively application.\n        (function run_filter(input_dataset_id, filters) {\n            var \n                // Set up filtering info and params.\n                filter_tuple = filters[0],\n                tool_id = filter_tuple[0],\n                tool_filters = filter_tuple[1],\n                tool_filter_str = \"(\" + tool_filters.join(\") and (\") + \")\",\n                url_params = {\n                    cond: tool_filter_str,\n                    input: input_dataset_id,\n                    target_dataset_id: input_dataset_id,\n                    tool_id: tool_id\n                };\n\n            // Remove current filter.\n            filters = filters.slice(1);\n                \n            $.getJSON(run_tool_url, url_params, function(response) {\n                if (response.error) {\n                    // General error.\n                    Galaxy.modal.show({\n                        title: \"Filter Dataset\",\n                        body : \"Error running tool \" + tool_id,\n                        buttons : { \"Close\" : Galaxy.modal.hide() }\n                    });\n                }\n                else if (filters.length === 0) {\n                    // No more filters to run.\n                    Galaxy.modal.show({\n                        title: \"Filtering Dataset\",\n                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                        buttons: { \"Close\" : Galaxy.modal.hide() }\n                    });\n                }\n                else {\n                    // More filters to run.\n                    run_filter(response.dataset_id, filters);\n                }\n            });\n              \n        })(this.track.dataset_id, active_filters_list);        \n    }\n});\n\nreturn {\n    FiltersManager: FiltersManager,\n    NumberFilter: NumberFilter\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster/filters.js\n ** module id = 125\n ** module chunks = 0\n **/","define( [\"libs/underscore\"], function( _ ) {\n\n/**\n * Compute the type of overlap between two regions. They are assumed to be on the same chrom/contig.\n * The overlap is computed relative to the second region; hence, OVERLAP_START indicates that the first\n * region overlaps the start (but not the end) of the second region.\n * NOTE: Coordinates are assumed to be in BED format: half open (start is closed, end is open).\n */\nvar BEFORE = 1001, CONTAINS = 1002, OVERLAP_START = 1003, OVERLAP_END = 1004, CONTAINED_BY = 1005, AFTER = 1006;\nvar compute_overlap = function(first_region, second_region) {\n    var\n        first_start = first_region[0], first_end = first_region[1],\n        second_start = second_region[0], second_end = second_region[1],\n        overlap;\n    if (first_start < second_start) {\n        if (first_end <= second_start) {\n            overlap = BEFORE;\n        }\n        else if (first_end <= second_end) {\n            overlap = OVERLAP_START;\n        }\n        else { // first_end > second_end\n            overlap = CONTAINS;\n        }\n    }\n    else { // first_start >= second_start\n        if (first_start > second_end) {\n            overlap = AFTER;\n        }\n        else if (first_end <= second_end) {\n            overlap = CONTAINED_BY;\n        }\n        else {\n            overlap = OVERLAP_END;\n        }\n    }\n\n    return overlap;\n};\n\n/**\n * Returns true if regions overlap.\n */\nvar is_overlap = function(first_region, second_region) {\n    var overlap = compute_overlap(first_region, second_region);\n    return (overlap !== BEFORE && overlap !== AFTER);\n};\n\n/**\n * Draw a dashed line on a canvas using filled rectangles. This function is based on:\n * http://vetruvet.blogspot.com/2010/10/drawing-dashed-lines-on-html5-canvas.html\n * However, that approach uses lines, which don't seem to render as well, so use\n * rectangles instead.\n */\nvar dashedLine = function(ctx, x1, y1, x2, y2, dashLen) {\n    if (dashLen === undefined) { dashLen = 4; }\n    var dX = x2 - x1;\n    var dY = y2 - y1;\n    var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\n    var dashX = dX / dashes;\n    var dashY = dY / dashes;\n    var q;\n\n    for (q = 0; q < dashes; q++, x1 += dashX, y1 += dashY) {\n        if (q % 2 !== 0) {\n            continue;\n        }\n        ctx.fillRect(x1, y1, dashLen, 1);\n    }\n};\n\n/**\n * Draw an isosceles triangle that points down.\n */\nvar drawDownwardEquilateralTriangle = function(ctx, down_vertex_x, down_vertex_y, side_len) {\n    // Compute other two points of triangle.\n    var\n        x1 = down_vertex_x - side_len/2,\n        x2 = down_vertex_x + side_len/2,\n        y = down_vertex_y - Math.sqrt( side_len*3/2 );\n\n    // Draw and fill.\n    ctx.beginPath();\n    ctx.moveTo(x1, y);\n    ctx.lineTo(x2, y);\n    ctx.lineTo(down_vertex_x, down_vertex_y);\n    ctx.lineTo(x1, y);\n\n    ctx.strokeStyle = this.fillStyle;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n};\n\n/**\n * Base class for all scalers. Scalers produce values that are used to change (scale) drawing attributes.\n */\nvar Scaler = function(default_val) {\n    this.default_val = (default_val ? default_val : 1);\n};\n\n/**\n * Produce a scaling value.\n */\nScaler.prototype.gen_val = function(input) {\n    return this.default_val;\n};\n\n/**\n * Results from painter.draw()\n */\nvar DrawResults = function(options) {\n    this.incomplete_features = options.incomplete_features;\n    this.feature_mapper = options.feature_mapper;\n};\n\n/**\n * Base class for painters\n *\n * -- Mode and prefs are both optional\n */\nvar Painter = function(data, view_start, view_end, prefs, mode) {\n    // Data and data properties\n    this.data = data;\n    // View\n    this.view_start = view_start;\n    this.view_end = view_end;\n    // Drawing prefs\n    this.prefs = _.extend({}, this.default_prefs, prefs);\n    this.mode = mode;\n};\n\nPainter.prototype.default_prefs = {};\n\n/**\n * Draw on the context using a rectangle of width x height using scale w_scale.\n */\nPainter.prototype.draw = function(ctx, width, height, w_scale) {};\n\n/**\n * Get starting drawing position, which is offset a half-base left of coordinate.\n */\nPainter.prototype.get_start_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, -0.5);\n};\n\n/**\n * Get end drawing position, which is offset a half-base right of coordinate.\n */\nPainter.prototype.get_end_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0.5);\n};\n\n/**\n * Get drawing position.\n */\nPainter.prototype.get_draw_pos = function(chrom_pos, w_scale) {\n    return this._chrom_pos_to_draw_pos(chrom_pos, w_scale, 0);\n};\n\n/**\n * Convert chromosome position to drawing position.\n */\nPainter.prototype._chrom_pos_to_draw_pos = function(chrom_pos, w_scale, offset) {\n    return Math.floor( w_scale * ( Math.max(0, chrom_pos - this.view_start) + offset) );\n};\n\n\nvar LinePainter = function(data, view_start, view_end, prefs, mode) {\n    Painter.call( this, data, view_start, view_end, prefs, mode );\n    if ( this.prefs.min_value === undefined ) {\n        this.prefs.min_value = _.min( _.map(this.data, function(d) { return d[1]; }) ) || 0;\n    }\n    if ( this.prefs.max_value === undefined ) {\n        this.prefs.max_value = _.max( _.map(this.data, function(d) { return d[1]; }) ) || 0;\n    }\n};\n\nLinePainter.prototype.default_prefs = { min_value: undefined, max_value: undefined, mode: \"Histogram\", color: \"#000\", overflow_color: \"#F66\" };\n\nLinePainter.prototype.draw = function(ctx, width, height, w_scale) {\n    var in_path = false,\n        min_value = this.prefs.min_value,\n        max_value = this.prefs.max_value,\n        vertical_range = max_value - min_value,\n        height_px = height,\n        view_start = this.view_start,\n        mode = this.mode,\n        data = this.data;\n\n    ctx.save();\n\n    // Pixel position of 0 on the y axis\n    var y_zero = Math.round( height + min_value / vertical_range * height );\n\n    // Horizontal line to denote x-axis\n    if ( mode !== \"Intensity\" ) {\n        ctx.fillStyle = \"#aaa\";\n        ctx.fillRect( 0, y_zero, width, 1 );\n    }\n\n    ctx.beginPath();\n    var x_scaled, y, delta_x_px;\n    if (data.length > 1) {\n        delta_x_px = Math.ceil((data[1][0] - data[0][0]) * w_scale);\n    }\n    else {\n        delta_x_px = 10;\n    }\n\n    // Painter color can be in either block_color (FeatureTrack) or color pref (LineTrack).\n    var painter_color = this.prefs.block_color || this.prefs.color,\n        // Extract RGB from preference color.\n        pref_color = parseInt( painter_color.slice(1), 16 ),\n        pref_r = (pref_color & 0xff0000) >> 16,\n        pref_g = (pref_color & 0x00ff00) >> 8,\n        pref_b = pref_color & 0x0000ff,\n        top_overflow = false,\n        bot_overflow = false;\n\n\n    // Paint track.\n    for (var i = 0, len = data.length; i < len; i++) {\n        // Reset attributes for next point.\n        ctx.fillStyle = ctx.strokeStyle = painter_color;\n        top_overflow = bot_overflow = false;\n\n        x_scaled = Math.ceil((data[i][0] - view_start) * w_scale);\n        y = data[i][1];\n\n        // Process Y (scaler) value.\n        if (y === null) {\n            if (in_path && mode === \"Filled\") {\n                ctx.lineTo(x_scaled, height_px);\n            }\n            in_path = false;\n            continue;\n        }\n\n        // Bound Y value by min, max.\n        if (y < min_value) {\n            bot_overflow = true;\n            y = min_value;\n        }\n        else if (y > max_value) {\n            top_overflow = true;\n            y = max_value;\n        }\n\n        // Draw point.\n        if (mode === \"Histogram\") {\n            // y becomes the bar height in pixels, which is the negated for canvas coords\n            y = Math.round( y / vertical_range * height_px );\n            ctx.fillRect(x_scaled, y_zero, delta_x_px, - y );\n        }\n        else if (mode === \"Intensity\") {\n            var\n                saturation = (y - min_value) / vertical_range,\n                // Range is [pref_color, 255] where saturation = 0 --> 255 and saturation = 1 --> pref color\n                new_r = Math.round( pref_r + (255 - pref_r) * (1 - saturation) ),\n                new_g = Math.round( pref_g + (255 - pref_g) * (1 - saturation) ),\n                new_b = Math.round( pref_b + (255 - pref_b) * (1 - saturation) );\n            ctx.fillStyle = \"rgb(\" + new_r + \",\" + new_g + \",\" + new_b + \")\";\n            ctx.fillRect(x_scaled, 0, delta_x_px, height_px);\n        }\n        else { // mode is Coverage/Line or Filled.\n\n            // Scale Y value.\n            y = Math.round( height_px - (y - min_value) / vertical_range * height_px );\n            if (in_path) {\n                ctx.lineTo(x_scaled, y);\n            }\n            else {\n                in_path = true;\n                if (mode === \"Filled\") {\n                    ctx.moveTo(x_scaled, height_px);\n                    ctx.lineTo(x_scaled, y);\n                }\n                else {\n                    ctx.moveTo(x_scaled, y);\n                    // Use this approach (note: same as for filled) to draw line from 0 to\n                    // first data point.\n                    //ctx.moveTo(x_scaled, height_px);\n                    //ctx.lineTo(x_scaled, y);\n                }\n            }\n        }\n\n        // Draw lines at boundaries if overflowing min or max\n        ctx.fillStyle = this.prefs.overflow_color;\n        if (top_overflow || bot_overflow) {\n            var overflow_x;\n            if (mode === \"Histogram\" || mode === \"Intensity\") {\n                overflow_x = delta_x_px;\n            }\n            else { // Line and Filled, which are points\n                x_scaled -= 2; // Move it over to the left so it's centered on the point\n                overflow_x = 4;\n            }\n            if (top_overflow) {\n                ctx.fillRect(x_scaled, 0, overflow_x, 3);\n            }\n            if (bot_overflow) {\n                ctx.fillRect(x_scaled, height_px - 3, overflow_x, 3);\n            }\n        }\n        ctx.fillStyle = painter_color;\n    }\n    if (mode === \"Filled\") {\n        if (in_path) {\n            ctx.lineTo( x_scaled, y_zero );\n            ctx.lineTo( 0, y_zero );\n        }\n        ctx.fill();\n    }\n    else {\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Mapper that contains information about feature locations and data.\n */\nvar FeaturePositionMapper = function(slot_height) {\n    this.feature_positions = {};\n    this.slot_height = slot_height;\n    this.translation = 0;\n    this.y_translation = 0;\n};\n\n/**\n * Map feature data to a position defined by <slot, x_start, x_end>.\n */\nFeaturePositionMapper.prototype.map_feature_data = function(feature_data, slot, x_start, x_end) {\n    if (!this.feature_positions[slot]) {\n        this.feature_positions[slot] = [];\n    }\n    this.feature_positions[slot].push({\n        data: feature_data,\n        x_start: x_start,\n        x_end: x_end\n    });\n};\n\n/**\n * Get feature data for position <x, y>\n */\nFeaturePositionMapper.prototype.get_feature_data = function(x, y) {\n    // Find slot using Y.\n    var slot = Math.floor( (y-this.y_translation)/this.slot_height ),\n        feature_dict;\n\n    // May not be over a slot due to padding, margin, etc.\n    if (!this.feature_positions[slot]) {\n        return null;\n    }\n\n    // Find feature using X.\n    x += this.translation;\n    for (var i = 0; i < this.feature_positions[slot].length; i++) {\n        feature_dict = this.feature_positions[slot][i];\n        if (x >= feature_dict.x_start && x <= feature_dict.x_end) {\n            return feature_dict.data;\n        }\n    }\n};\n\n/**\n * Abstract object for painting feature tracks. Subclasses must implement draw_element() for painting to work.\n * Painter uses a 0-based, half-open coordinate system; start coordinate is closed--included--and the end is open.\n * This coordinate system matches the BED format.\n */\nvar FeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.alpha_scaler = (alpha_scaler ? alpha_scaler : new Scaler());\n    this.height_scaler = (height_scaler ? height_scaler : new Scaler());\n    this.max_label_length = 200;\n};\n\nFeaturePainter.prototype.default_prefs = { block_color: \"#FFF\", connector_color: \"#FFF\" };\n\n_.extend(FeaturePainter.prototype, {\n    get_required_height: function(rows_required, width) {\n        // y_scale is the height per row\n        var required_height = this.get_row_height(),\n            y_scale = required_height,\n            mode = this.mode;\n        // If using a packing mode, need to multiply by the number of slots used\n        if (mode === \"no_detail\" || mode === \"Squish\" || mode === \"Pack\") {\n            required_height = rows_required * y_scale;\n        }\n        return required_height + this.get_top_padding(width);\n    },\n\n    /** Extra padding before first row of features */\n    get_top_padding: function(width) {\n        return 0;\n    },\n\n    /**\n     * Draw data on ctx using slots and within the rectangle defined by width and height. Returns\n     * a FeaturePositionMapper object with information about where features were drawn.\n     */\n    draw: function(ctx, width, height, w_scale, slots) {\n        var data = this.data,\n            view_start = this.view_start,\n            view_end = this.view_end;\n\n        ctx.save();\n\n        ctx.fillStyle = this.prefs.block_color;\n        ctx.textAlign = \"right\";\n\n        var y_scale = this.get_row_height(),\n            feature_mapper = new FeaturePositionMapper(y_scale),\n            x_draw_coords,\n            incomplete_features = [];\n\n        for (var i = 0, len = data.length; i < len; i++) {\n            var feature = data[i],\n                feature_uid = feature[0],\n                feature_start = feature[1],\n                feature_end = feature[2],\n                // Slot valid only if features are slotted and this feature is slotted;\n                // feature may not be due to lack of space.\n                slot = (slots && slots[feature_uid] !== undefined ? slots[feature_uid].slot : null);\n\n            // Draw feature if (a) mode is dense or feature is slotted (as it must be for all non-dense modes) and\n            // (b) there's overlap between the feature and drawing region.\n            if ( (this.mode === \"Dense\" || slot !== null) && ( feature_start < view_end && feature_end > view_start ) ) {\n                x_draw_coords = this.draw_element(ctx, this.mode, feature, slot, view_start, view_end, w_scale, y_scale, width);\n                feature_mapper.map_feature_data(feature, slot, x_draw_coords[0], x_draw_coords[1]);\n\n                // Add to incomplete features if it's not drawn completely in region.\n                if (feature_start < view_start || feature_end > view_end) {\n                    incomplete_features.push(feature);\n                }\n            }\n        }\n\n        ctx.restore();\n\n        feature_mapper.y_translation = this.get_top_padding(width);\n        return new DrawResults({\n            incomplete_features: incomplete_features,\n            feature_mapper: feature_mapper\n        });\n    },\n\n    /**\n     * Abstract function for drawing an individual feature.\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width ) {\n        return [0, 0];\n    }\n});\n\n// Constants specific to feature tracks moved here (HACKING, these should\n// basically all be configuration options)\nvar DENSE_TRACK_HEIGHT = 10,\n    NO_DETAIL_TRACK_HEIGHT = 3,\n    SQUISH_TRACK_HEIGHT = 5,\n    PACK_TRACK_HEIGHT = 10,\n    NO_DETAIL_FEATURE_HEIGHT = 1,\n    DENSE_FEATURE_HEIGHT = 9,\n    SQUISH_FEATURE_HEIGHT = 3,\n    PACK_FEATURE_HEIGHT = 9,\n    LABEL_SPACING = 2,\n    CONNECTOR_COLOR = \"#ccc\";\n\nvar LinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Whether to draw a single connector in the background that spans the entire feature (the intron fishbone)\n    this.draw_background_connector = true;\n    // Whether to call draw_connector for every pair of blocks\n    this.draw_individual_connectors = false;\n};\n\n_.extend(LinkedFeaturePainter.prototype, FeaturePainter.prototype, {\n\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function() {\n        var mode = this.mode, height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        }\n        else if (mode === \"no_detail\") {\n            height = NO_DETAIL_TRACK_HEIGHT;\n        }\n        else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        }\n        else { // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Draw a feature. Returns an array with feature's start and end X coordinates.\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width) {\n        var feature_uid = feature[0],\n            feature_start = feature[1],\n            feature_end = feature[2],\n            feature_name = feature[3],\n            feature_strand = feature[4],\n            // -0.5 to offset region between bases.\n            f_start = Math.floor( Math.max(0, (feature_start - tile_low - 0.5) * w_scale) ),\n            f_end   = Math.ceil( Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)) ),\n            draw_start = f_start,\n            draw_end = f_end,\n            y_start = (mode === \"Dense\" ? 0 : (0 + slot)) * y_scale + this.get_top_padding(width),\n            thickness, y_start, thick_start = null, thick_end = null,\n            // TODO: is there any reason why block, label color cannot be set at the Painter level?\n            // For now, assume '.' === '+'\n            block_color = (!feature_strand || feature_strand === \"+\" || feature_strand === \".\" ? this.prefs.block_color : this.prefs.reverse_strand_color);\n            label_color = this.prefs.label_color;\n\n        // Set global alpha.\n        ctx.globalAlpha = this.alpha_scaler.gen_val(feature);\n\n        // In dense mode, put all data in top slot.\n        if (mode === \"Dense\") {\n            slot = 1;\n        }\n\n        if (mode === \"no_detail\") {\n            // No details for feature, so only one way to display.\n            ctx.fillStyle = block_color;\n            ctx.fillRect(f_start, y_start + 5, f_end - f_start, NO_DETAIL_FEATURE_HEIGHT);\n        }\n        else { // Mode is either Squish or Pack:\n            // Feature details.\n            var feature_ts = feature[5],\n                feature_te = feature[6],\n                feature_blocks = feature[7],\n                // Whether we are drawing full height or squished features\n                full_height = true;\n\n            if (feature_ts && feature_te) {\n                thick_start = Math.floor( Math.max(0, (feature_ts - tile_low) * w_scale) );\n                thick_end = Math.ceil( Math.min(width, Math.max(0, (feature_te - tile_low) * w_scale)) );\n            }\n\n            // Set vars that depend on mode.\n            var thin_height, thick_height;\n            if (mode === \"Squish\" ) {\n                thin_height = 1;\n                thick_height = SQUISH_FEATURE_HEIGHT;\n                full_height = false;\n            } else if ( mode === \"Dense\" ) {\n                thin_height = 5;\n                thick_height = DENSE_FEATURE_HEIGHT;\n            } else { // mode === \"Pack\"\n                thin_height = 5;\n                thick_height = PACK_FEATURE_HEIGHT;\n            }\n\n            // Draw feature/feature blocks + connectors.\n            if (!feature_blocks) {\n                // If there are no blocks, treat the feature as one big exon.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                // If strand is specified, draw arrows over feature\n                if ( feature_strand && full_height ) {\n                    if (feature_strand === \"+\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand_inv' );\n                    } else if (feature_strand === \"-\") {\n                        ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand_inv' );\n                    }\n                    ctx.fillRect(f_start, y_start + 1, f_end - f_start, thick_height);\n                }\n            } else {\n                //\n                // There are feature blocks and mode is either Squish or Pack.\n                //\n                // Approach: (a) draw whole feature as connector/intron and (b) draw blocks as\n                // needed. This ensures that whole feature, regardless of whether it starts with\n                // a block, is visible.\n                //\n\n                // Compute y axis start position and height\n                var cur_y_start, cur_height;\n                if (mode === \"Squish\" || mode === \"Dense\") {\n                    cur_y_start = y_start + Math.floor(SQUISH_FEATURE_HEIGHT/2) + 1;\n                    cur_height = 1;\n                }\n                else { // mode === \"Pack\"\n                    if (feature_strand) {\n                        cur_y_start = y_start;\n                        cur_height = thick_height;\n                    }\n                    else {\n                        cur_y_start += (SQUISH_FEATURE_HEIGHT/2) + 1;\n                        cur_height = 1;\n                    }\n                }\n\n                // Draw whole feature as connector/intron.\n                if ( this.draw_background_connector ) {\n                    if (mode === \"Squish\" || mode === \"Dense\") {\n                        ctx.fillStyle = CONNECTOR_COLOR;\n                    }\n                    else { // mode === \"Pack\"\n                        if (feature_strand) {\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand' );\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand' );\n                            }\n                        }\n                        else {\n                            ctx.fillStyle = CONNECTOR_COLOR;\n                        }\n                    }\n                    ctx.fillRect(f_start, cur_y_start, f_end - f_start, cur_height);\n                }\n\n                // Draw blocks.\n                var start_and_height;\n                for (var k = 0, k_len = feature_blocks.length; k < k_len; k++) {\n                    var block = feature_blocks[k],\n                        // -0.5 to offset block between bases.\n                        block_start = Math.floor( Math.max(0, (block[0] - tile_low - 0.5) * w_scale) ),\n                        block_end = Math.ceil( Math.min(width, Math.max((block[1] - tile_low - 0.5) * w_scale)) ),\n                        last_block_start, last_block_end;\n\n                    // Skip drawing if block not on tile.\n                    if (block_start > block_end) { continue; }\n\n                    // Draw thin block.\n                    ctx.fillStyle = block_color;\n                    ctx.fillRect(block_start, y_start + (thick_height-thin_height)/2 + 1, block_end - block_start, thin_height);\n\n                    // If block intersects with thick region, draw block as thick.\n                    // - No thick is sometimes encoded as thick_start == thick_end, so don't draw in that case\n                    if (thick_start !== undefined && feature_te > feature_ts && !(block_start > thick_end || block_end < thick_start) ) {\n                        var block_thick_start = Math.max(block_start, thick_start),\n                            block_thick_end = Math.min(block_end, thick_end);\n                        ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n                        if ( feature_blocks.length === 1 && mode === \"Pack\") {\n                            // Exactly one block means we have no introns, but do have a distinct \"thick\" region,\n                            // draw arrows over it if in pack mode.\n                            if (feature_strand === \"+\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'right_strand_inv' );\n                            } else if (feature_strand === \"-\") {\n                                ctx.fillStyle = ctx.canvas.manager.get_pattern( 'left_strand_inv' );\n                            }\n                            // If region is wide enough in pixels, pad a bit\n                            if ( block_thick_start + 14 < block_thick_end ) {\n                                block_thick_start += 2;\n                                block_thick_end -= 2;\n                            }\n                            ctx.fillRect(block_thick_start, y_start + 1, block_thick_end - block_thick_start, thick_height);\n                        }\n                    }\n                    // Draw individual connectors if required\n                    if ( this.draw_individual_connectors && last_block_start ) {\n                        this.draw_connector( ctx, last_block_start, last_block_end, block_start, block_end, y_start );\n                    }\n                    last_block_start = block_start;\n                    last_block_end = block_end;\n                }\n\n                // FIXME: Height scaling only works in Pack mode right now.\n                if (mode === \"Pack\") {\n                    // Reset alpha so height scaling is not impacted by alpha scaling.\n                    ctx.globalAlpha = 1;\n\n                    // Height scaling: draw white lines to reduce height according to height scale factor.\n                    ctx.fillStyle = \"white\"; // TODO: set this to background color.\n                    var\n                        hscale_factor = this.height_scaler.gen_val(feature),\n                        // Ceil ensures that min height is >= 1.\n                        new_height = Math.ceil(thick_height * hscale_factor),\n                        ws_height = Math.round( (thick_height-new_height)/2 );\n                    if (hscale_factor !== 1) {\n                        ctx.fillRect(f_start, cur_y_start + 1, f_end - f_start, ws_height);\n                        ctx.fillRect(f_start, cur_y_start + thick_height - ws_height + 1, f_end - f_start, ws_height);\n                    }\n                }\n            }\n\n            // Reset alpha so that label is not transparent.\n            ctx.globalAlpha = 1;\n\n            // Draw label for Pack mode.\n            if (feature_name && mode === \"Pack\" && feature_start > tile_low) {\n                ctx.fillStyle = label_color;\n                // FIXME: assumption here that the entire view starts at 0\n                if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                    ctx.textAlign = \"left\";\n                    ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_end += ctx.measureText(feature_name).width + LABEL_SPACING;\n                } else {\n                    ctx.textAlign = \"right\";\n                    ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 8, this.max_label_length);\n                    draw_start -= ctx.measureText(feature_name).width + LABEL_SPACING;\n                }\n                //ctx.fillStyle = block_color;\n            }\n        }\n\n        // Reset global alpha.\n        ctx.globalAlpha = 1;\n\n        return [draw_start, draw_end];\n    }\n});\n\nvar ReadPainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler, ref_seq, base_color_fn) {\n    FeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    this.ref_seq = (ref_seq ? ref_seq.data : null);\n    this.base_color_fn = base_color_fn;\n};\n\n_.extend(ReadPainter.prototype, FeaturePainter.prototype, {\n    /**\n     * Returns height based on mode.\n     */\n    get_row_height: function() {\n        var height, mode = this.mode;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        }\n        else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        }\n        else { // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n            if (this.prefs.show_insertions) {\n                height *= 2;\n            }\n        }\n        return height;\n    },\n\n    /**\n     * Parse CIGAR string to get (a) a list of contiguous drawing blocks (MD=X) and\n     * (b) an array of [ op_index, op_len ] pairs where op_index is an index into the\n     * string 'MIDNSHP=X' Return value is a dictionary with two entries, blocks and cigar\n     */\n    _parse_cigar: function(cigar_str) {\n        var cigar_ops = 'MIDNSHP=X';\n\n        // Parse cigar.\n        var blocks = [ [0, 0] ],\n            cur_block = blocks[0],\n            base_pos = 0,\n\n            // Parse cigar operations out and update/create blocks as needed.\n            parsed_cigar = _.map(cigar_str.match(/[0-9]+[MIDNSHP=X]/g), function(op) {\n                // Get operation length, character.\n                var op_len = parseInt(op.slice(0, -1), 10),\n                    op_char = op.slice(-1);\n\n                // Update drawing block.\n                if (op_char === 'N') {\n                    // At skip, so need to start new block if current block represents\n                    // drawing area.\n                    if (cur_block[1] !== 0) {\n                        cur_block = [base_pos + op_len, base_pos + op_len];\n                        blocks.push(cur_block);\n                    }\n                }\n                else if ('ISHP'.indexOf(op_char) === -1) {\n                    // Operation is M,D,=,X.\n                    cur_block[1] += op_len;\n                    base_pos += op_len;\n                }\n\n                // Return parsed cigar.\n                return [ cigar_ops.indexOf(op_char), op_len ];\n            });\n\n        return {\n            blocks: blocks,\n            cigar: parsed_cigar\n        };\n    },\n\n    /**\n     * Draw a single read from reference-based read sequence and cigar.\n     */\n    draw_read: function(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, cigar, strand, read_seq) {\n        // Helper function to update base and sequnence offsets.\n        var update_base_offset = function(offset, cig_op, cig_len) {\n                if ('M=NXD'.indexOf(cig_op) !== -1) {\n                    offset += cig_len;\n                }\n                return offset;\n            },\n            update_seq_offset = function(offset, cig_op, cig_len) {\n                if ('IX'.indexOf(cig_op) !== -1) {\n                    offset += cig_len;\n                }\n                return offset;\n            },\n            // Gets drawing coordinate for a sequence coordinate. Assumes closure variables w_scale and tile_low.\n            get_draw_coord = function(sequence_coord) {\n                // -0.5 to offset sequence between bases.\n                return Math.floor( Math.max(0, (sequence_coord - tile_low - 0.5) * w_scale) );\n            };\n\n        ctx.textAlign = \"center\";\n        var tile_region = [tile_low, tile_high],\n            base_offset = 0,\n            seq_offset = 0,\n            gap = Math.round(w_scale/2),\n            char_width_px = ctx.canvas.manager.char_width_px,\n            block_color = (strand === \"+\" ? this.prefs.detail_block_color : this.prefs.reverse_strand_color),\n            pack_mode = (mode === 'Pack'),\n            draw_height = (pack_mode ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT),\n            rect_y = y_start + 1,\n            paint_utils = new ReadPainterUtils(ctx, draw_height, w_scale, mode),\n            drawing_blocks = [],\n            s_start,\n            s_end;\n\n        // Keep list of items that need to be drawn on top of initial drawing layer.\n        var draw_last = [];\n\n        // Parse cigar and get drawing blocks.\n        var t = this._parse_cigar(cigar);\n        cigar = t.cigar;\n        drawing_blocks = t.blocks;\n\n        // Draw blocks.\n        for (var i = 0; i < drawing_blocks.length; i++) {\n            var block = drawing_blocks[i];\n\n            if (is_overlap([feature_start + block[0], feature_start + block[1]], tile_region)) {\n                s_start = get_draw_coord(feature_start + block[0]);\n                s_end = get_draw_coord(feature_start + block[1]);\n\n                // Make sure that block is drawn even if it too small to be rendered officially; in this case,\n                // read is drawn at 1px.\n                // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n                // and drawing.\n                if (s_start === s_end) {\n                    s_end += 1;\n                }\n\n                // Draw read base as rectangle.\n                ctx.fillStyle = block_color;\n                ctx.fillRect(s_start, rect_y, s_end - s_start, draw_height);\n            }\n        }\n\n        // Draw read features.\n        for (var cig_id = 0, len = cigar.length; cig_id < len; cig_id++) {\n            var cig = cigar[cig_id],\n                cig_op = \"MIDNSHP=X\"[ cig[0] ],\n                cig_len = cig[1];\n\n            var seq_start = feature_start + base_offset;\n            s_start = get_draw_coord(seq_start);\n            s_end = get_draw_coord(seq_start + cig_len);\n\n            // Skip feature if it's not in tile.\n            if (!is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                // Update offsets.\n                base_offset = update_base_offset(base_offset, cig_op, cig_len);\n                seq_offset = update_seq_offset(seq_offset, cig_op, cig_len);\n                continue;\n            }\n\n            // Make sure that read is drawn even if it too small to be rendered officially; in this case,\n            // read is drawn at 1px.\n            // TODO: need to ensure that s_start, s_end are calculated the same for both slotting\n            // and drawing.\n            if (s_start === s_end) {\n                s_end += 1;\n            }\n\n            // Draw read feature.\n            switch (cig_op) {\n                case \"H\": // Hard clipping.\n                case \"S\": // Soft clipping.\n                case \"P\": // Padding.\n                    // Sequence not present and not related to alignment; do nothing.\n                    break;\n                case \"M\": // \"Match\".\n                    // Because it's not known whether there is a match, ignore.\n                    base_offset += cig_len;\n                    break;\n                case \"=\": // Match with reference.\n                case \"X\": // Mismatch with reference.\n                    //\n                    // Draw sequence and/or variants.\n                    //\n\n                    // Get sequence to draw.\n                    var cur_seq = '';\n                    if (cig_op === 'X') {\n                        // Get sequence from read_seq.\n                        cur_seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                    }\n                    else if (this.ref_seq) { // && cig_op === '='\n                        // Use reference sequence.\n                        cur_seq = this.ref_seq.slice(\n                            // If read starts after tile start, slice at read start.\n                            Math.max(0, seq_start - tile_low),\n                            // If read ends before tile end, slice at read end.\n                            Math.min(seq_start - tile_low + cig_len, tile_high - tile_low)\n                        );\n                    }\n\n                    // Draw sequence. Because cur_seq starts and read/tile start, go to there to start writing.\n                    var start_pos = Math.max(seq_start, tile_low);\n                    for (var c = 0; c < cur_seq.length; c++) {\n                        // Draw base if showing all (i.e. not showing differences) or there is a mismatch.\n                        if (cur_seq && !this.prefs.show_differences || cig_op === 'X') {\n                            // Draw base.\n                            var c_start = Math.floor( Math.max(0, (start_pos + c - tile_low) * w_scale) );\n                            ctx.fillStyle = this.base_color_fn(cur_seq[c]);\n                            if (pack_mode && w_scale > char_width_px) {\n                                ctx.fillText(cur_seq[c], c_start, y_start + 9);\n                            }\n                            // Require a minimum w_scale so that variants are only drawn when somewhat zoomed in.\n                            else if (w_scale > 0.05) {\n                                ctx.fillRect(c_start - gap, rect_y, Math.max( 1, Math.round(w_scale) ), draw_height);\n                            }\n                        }\n                    }\n\n                    // Move forward in sequence only if sequence used to get mismatches.\n                    if (cig_op === 'X') { seq_offset += cig_len; }\n                    base_offset += cig_len;\n\n                    break;\n                case \"N\": // Skipped bases.\n                    ctx.fillStyle = CONNECTOR_COLOR;\n                    ctx.fillRect(s_start, rect_y + (draw_height - 1)/2, s_end - s_start, 1);\n                    // No change in seq_offset because sequence not used when skipping.\n                    base_offset += cig_len;\n                    break;\n                case \"D\": // Deletion.\n                    paint_utils.draw_deletion(s_start, rect_y, cig_len);\n                    base_offset += cig_len;\n                    break;\n                case \"I\": // Insertion.\n                    // Check to see if sequence should be drawn at all by looking at the overlap between\n                    // the sequence region and the tile region.\n                    var insert_x_coord = s_start - gap;\n\n                    if (is_overlap([seq_start, seq_start + cig_len], tile_region)) {\n                        var seq = read_seq.slice(seq_offset, seq_offset + cig_len);\n                        // Insertion point is between the sequence start and the previous base: (-gap) moves\n                        // back from sequence start to insertion point.\n                        if (this.prefs.show_insertions) {\n                            //\n                            // Show inserted sequence above, centered on insertion point.\n                            //\n\n                            // Draw sequence.\n                            // X center is offset + start - <half_sequence_length>\n                            var x_center = s_start - (s_end - s_start)/2;\n                            if ( (mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n                                // Draw sequence container.\n                                ctx.fillStyle = \"yellow\";\n                                ctx.fillRect(x_center - gap, y_start - 9, s_end - s_start, 9);\n                                draw_last[draw_last.length] = {type: \"triangle\", data: [insert_x_coord, y_start + 4, 5]};\n                                ctx.fillStyle = CONNECTOR_COLOR;\n                                // Based on overlap b/t sequence and tile, get sequence to be drawn.\n                                switch( compute_overlap( [seq_start, seq_start + cig_len], tile_region ) ) {\n                                    case(OVERLAP_START):\n                                        seq = seq.slice(tile_low-seq_start);\n                                        break;\n                                    case(OVERLAP_END):\n                                        seq = seq.slice(0, seq_start-tile_high);\n                                        break;\n                                    case(CONTAINED_BY):\n                                        // All of sequence drawn.\n                                        break;\n                                    case(CONTAINS):\n                                        seq = seq.slice(tile_low-seq_start, seq_start-tile_high);\n                                        break;\n                                }\n                                // Draw sequence.\n                                for (var c = 0, str_len = seq.length; c < str_len; c++) {\n                                    var c_start = Math.floor( Math.max(0, (seq_start + c -  tile_low) * w_scale) );\n                                    ctx.fillText(seq[c], c_start - (s_end - s_start)/2, y_start);\n                                }\n                            }\n                            else {\n                                // Draw block.\n                                ctx.fillStyle = \"yellow\";\n                                // TODO: This is a pretty hack-ish way to fill rectangle based on mode.\n                                ctx.fillRect(x_center, y_start + (this.mode !== \"Dense\" ? 2 : 5),\n                                             s_end - s_start, (mode !== \"Dense\" ? SQUISH_FEATURE_HEIGHT : DENSE_FEATURE_HEIGHT));\n                            }\n                        }\n                        else {\n                            if ( (mode === \"Pack\" || this.mode === \"Auto\") && read_seq !== undefined && w_scale > char_width_px) {\n                                // Show insertions with a single number at the insertion point.\n                                draw_last.push( { type: \"text\", data: [seq.length, insert_x_coord, y_start + 9] } );\n                            }\n                            else {\n                                // TODO: probably can merge this case with code above.\n                            }\n                        }\n                    }\n                    seq_offset += cig_len;\n                    // No change to base offset because insertions are drawn above sequence/read.\n                    break;\n            }\n        }\n\n        //\n        // Draw last items.\n        //\n        ctx.fillStyle = \"yellow\";\n        var item, type, data;\n        for (var i = 0; i < draw_last.length; i++) {\n            item = draw_last[i];\n            type = item.type;\n            data = item.data;\n            if (type === \"text\") {\n                ctx.save();\n                ctx.font = \"bold \" + ctx.font;\n                ctx.fillText(data[0], data[1], data[2]);\n                ctx.restore();\n            }\n            else if (type === \"triangle\") {\n                drawDownwardEquilateralTriangle(ctx, data[0], data[1], data[2]);\n            }\n        }\n    },\n\n    /**\n     * Draw a complete read pair\n     */\n    draw_element: function(ctx, mode, feature, slot, tile_low, tile_high, w_scale, y_scale, width ) {\n        // All features need a start, end, and vertical center.\n        var feature_uid = feature[0],\n            feature_start = feature[1],\n            feature_end = feature[2],\n            feature_name = feature[3],\n            // -0.5 to put element between bases.\n            f_start = Math.floor( Math.max(-0.5 * w_scale, (feature_start - tile_low - 0.5) * w_scale) ),\n            f_end   = Math.ceil( Math.min(width, Math.max(0, (feature_end - tile_low - 0.5) * w_scale)) ),\n            y_start = (mode === \"Dense\" ? 0 : (0 + slot)) * y_scale,\n            draw_height = (mode === 'Pack' ? PACK_FEATURE_HEIGHT : SQUISH_FEATURE_HEIGHT),\n            label_color = this.prefs.label_color;\n\n        // Draw read.\n        if (feature[5] instanceof Array) {\n            // Read is paired.\n            var connector = true;\n\n            // Draw left/forward read.\n            if (feature[4][1] >= tile_low && feature[4][0] <= tile_high && feature[4][2]) {\n                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[4][0], feature[4][2], feature[4][3], feature[4][4]);\n            }\n            else {\n                connector = false;\n            }\n\n            // Draw right/reverse read.\n            if (feature[5][1] >= tile_low && feature[5][0] <= tile_high && feature[5][2]) {\n                this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature[5][0], feature[5][2], feature[5][3], feature[5][4]);\n            }\n            else {\n                connector = false;\n            }\n\n            // Draw connector if both reads were drawn.\n            // TODO: currently, there is no way to connect reads drawn on different tiles; to connect reads on different tiles, data manager\n            // code is needed to join mate pairs from different regions. Alternatively, requesting multiple regions of data at once would\n            // make it possible to put together more easily.\n            // -0.5 to position connector correctly between reads.\n            var b1_end   = Math.ceil( Math.min(width, Math.max(-0.5 * w_scale, (feature[4][1] - tile_low - 0.5) * w_scale)) ),\n                b2_start = Math.floor( Math.max(-0.5 * w_scale, (feature[5][0] - tile_low - 0.5) * w_scale) );\n            if (connector && b2_start > b1_end) {\n                ctx.fillStyle = CONNECTOR_COLOR;\n                var line_height = y_start + 1 + (draw_height - 1)/2;\n                dashedLine(ctx, b1_end, line_height, b2_start, line_height);\n            }\n        } else {\n            // Read is single.\n            this.draw_read(ctx, mode, w_scale, y_start, tile_low, tile_high, feature_start, feature[4], feature[5], feature[6]);\n        }\n        if (mode === \"Pack\" && feature_start >= tile_low && feature_name !== \".\") {\n            // Draw label.\n            ctx.fillStyle = this.prefs.label_color;\n            if (tile_low === 0 && f_start - ctx.measureText(feature_name).width < 0) {\n                ctx.textAlign = \"left\";\n                ctx.fillText(feature_name, f_end + LABEL_SPACING, y_start + 9, this.max_label_length);\n            } else {\n                ctx.textAlign = \"right\";\n                ctx.fillText(feature_name, f_start - LABEL_SPACING, y_start + 9, this.max_label_length);\n            }\n        }\n\n        // FIXME: provide actual coordinates for drawn read.\n        return [0,0];\n    }\n});\n\nvar ArcLinkedFeaturePainter = function(data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler) {\n    LinkedFeaturePainter.call(this, data, view_start, view_end, prefs, mode, alpha_scaler, height_scaler);\n    // Need to know the longest feature length for adding spacing\n    this.longest_feature_length = this.calculate_longest_feature_length();\n    this.draw_background_connector = false;\n    this.draw_individual_connectors = true;\n};\n\n_.extend(ArcLinkedFeaturePainter.prototype, FeaturePainter.prototype, LinkedFeaturePainter.prototype, {\n\n    calculate_longest_feature_length: function () {\n        var longest_feature_length = 0;\n        for (var i = 0, len = this.data.length; i < len; i++) {\n            var feature = this.data[i], feature_start = feature[1], feature_end = feature[2];\n            longest_feature_length = Math.max( longest_feature_length, feature_end - feature_start );\n        }\n        return longest_feature_length;\n    },\n\n    get_top_padding: function( width ) {\n        var view_range = this.view_end - this.view_start,\n            w_scale = width / view_range;\n        return Math.min( 128, Math.ceil( ( this.longest_feature_length / 2 ) * w_scale ) );\n    },\n\n    draw_connector: function( ctx, block1_start, block1_end, block2_start, block2_end, y_start ) {\n        // Arc drawing -- from closest endpoints\n        var x_center = ( block1_end + block2_start ) / 2,\n            radius = block2_start - x_center;\n        // For full half circles\n        var angle1 = Math.PI, angle2 = 0;\n        if ( radius > 0 ) {\n            ctx.beginPath();\n            ctx.arc( x_center, y_start, block2_start - x_center, Math.PI, 0 );\n            ctx.stroke();\n        }\n    }\n});\n\n// Color stuff from less.js\n\nvar Color = function (rgb, a) {\n    /**\n     * The end goal here, is to parse the arguments\n     * into an integer triplet, such as `128, 255, 0`\n     *\n     * This facilitates operations and conversions.\n     */\n    if (Array.isArray(rgb)) {\n        this.rgb = rgb;\n    } else if (rgb.length == 6) {\n        this.rgb = rgb.match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else if (rgb.length == 7) {\n        this.rgb = rgb.substring(1,7).match(/.{2}/g).map(function (c) {\n            return parseInt(c, 16);\n        });\n    } else {\n        this.rgb = rgb.split('').map(function (c) {\n            return parseInt(c + c, 16);\n        });\n    }\n    this.alpha = typeof(a) === 'number' ? a : 1;\n};\nColor.prototype = {\n    eval: function () { return this; },\n\n    //\n    // If we have some transparency, the only way to represent it\n    // is via `rgba`. Otherwise, we use the hex representation,\n    // which has better compatibility with older browsers.\n    // Values are capped between `0` and `255`, rounded and zero-padded.\n    //\n    toCSS: function () {\n        if (this.alpha < 1.0) {\n            return \"rgba(\" + this.rgb.map(function (c) {\n                return Math.round(c);\n            }).concat(this.alpha).join(', ') + \")\";\n        } else {\n            return '#' + this.rgb.map(function (i) {\n                i = Math.round(i);\n                i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n                return i.length === 1 ? '0' + i : i;\n            }).join('');\n        }\n    },\n\n    toHSL: function () {\n        var r = this.rgb[0] / 255,\n            g = this.rgb[1] / 255,\n            b = this.rgb[2] / 255,\n            a = this.alpha;\n\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2, d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2;               break;\n                case b: h = (r - g) / d + 4;               break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s: s, l: l, a: a };\n    },\n\n    toARGB: function () {\n        var argb = [Math.round(this.alpha * 255)].concat(this.rgb);\n        return '#' + argb.map(function (i) {\n            i = Math.round(i);\n            i = (i > 255 ? 255 : (i < 0 ? 0 : i)).toString(16);\n            return i.length === 1 ? '0' + i : i;\n        }).join('');\n    },\n\n    mix: function (color2, weight) {\n        color1 = this;\n\n        var p = weight; // .value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n                   color1.rgb[1] * w1 + color2.rgb[1] * w2,\n                   color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    }\n};\n\n\n// End colors from less.js\n\nvar LinearRamp = function( start_color, end_color, start_value, end_value ) {\n    /**\n     * Simple linear gradient\n     */\n    this.start_color = new Color( start_color );\n    this.end_color = new Color( end_color );\n    this.start_value = start_value;\n    this.end_value = end_value;\n    this.value_range = end_value - start_value;\n};\n\nLinearRamp.prototype.map_value = function( value ) {\n    value = Math.max( value, this.start_value );\n    value = Math.min( value, this.end_value );\n    value = ( value - this.start_value ) / this.value_range;\n    // HACK: just red for now\n    // return \"hsl(0,100%,\" + (value * 100) + \"%)\"\n    return this.start_color.mix( this.end_color, 1 - value ).toCSS();\n};\n\nvar SplitRamp = function( start_color, middle_color, end_color, start_value, end_value ) {\n    /**\n     * Two gradients split away from 0\n     */\n    this.positive_ramp = new LinearRamp( middle_color, end_color, 0, end_value );\n    this.negative_ramp = new LinearRamp( middle_color, start_color, 0, -start_value );\n    this.start_value = start_value;\n    this.end_value = end_value;\n};\n\nSplitRamp.prototype.map_value = function( value ) {\n    value = Math.max( value, this.start_value );\n    value = Math.min( value, this.end_value );\n    if ( value >= 0 ) {\n        return this.positive_ramp.map_value( value );\n    } else {\n        return this.negative_ramp.map_value( -value );\n    }\n};\n\nvar DiagonalHeatmapPainter = function(data, view_start, view_end, prefs, mode) {\n    Painter.call( this, data, view_start, view_end, prefs, mode );\n    var i, len;\n\n    if ( this.prefs.min_value === undefined ) {\n        var min_value = Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            min_value = Math.min( min_value, this.data[i][6] );\n        }\n        this.prefs.min_value = min_value;\n    }\n    if ( this.prefs.max_value === undefined ) {\n        var max_value = -Infinity;\n        for (i = 0, len = this.data.length; i < len; i++) {\n            max_value = Math.max( max_value, this.data[i][6] );\n        }\n        this.prefs.max_value = max_value;\n    }\n};\n\nDiagonalHeatmapPainter.prototype.default_prefs = {\n    min_value: undefined,\n    max_value: undefined,\n    mode: \"Heatmap\",\n    pos_color: \"#FF8C00\",\n    neg_color: \"#4169E1\"\n};\n\nDiagonalHeatmapPainter.prototype.draw = function(ctx, width, height, w_scale) {\n    var\n        min_value = this.prefs.min_value,\n        max_value = this.prefs.max_value,\n        value_range = max_value - min_value,\n        height_px = height,\n        view_start = this.view_start,\n        mode = this.mode,\n        data = this.data,\n        invsqrt2 = 1 / Math.sqrt(2);\n\n    var ramp = ( new SplitRamp( this.prefs.neg_color, \"#FFFFFF\", this.prefs.pos_color, min_value, max_value ) );\n\n    var d, s1, e1, s2, e2, value;\n\n    var scale = function( p ) { return ( p - view_start ) * w_scale; };\n\n    ctx.save();\n\n    // Draw into triangle, then rotate and scale\n    ctx.rotate(-45 * Math.PI / 180);\n    ctx.scale( invsqrt2, invsqrt2 );\n\n    // Paint track.\n    for (var i = 0, len = data.length; i < len; i++) {\n        d = data[i];\n\n        s1 = scale( d[1] );\n        e1 = scale( d[2] );\n        s2 = scale( d[4] );\n        e2 = scale( d[5] );\n        value = d[6];\n\n        ctx.fillStyle = ( ramp.map_value( value ) );\n        ctx.fillRect( s1, s2, ( e1 - s1 ), ( e2 - s2 ) );\n    }\n\n    ctx.restore();\n};\n\n/**\n * Utilities for painting reads.\n */\nvar ReadPainterUtils = function(ctx, row_height, px_per_base, mode) {\n    this.ctx = ctx;\n    this.row_height = row_height;\n    this.px_per_base = px_per_base;\n    this.draw_details = (mode === 'Pack' || mode === 'Auto') && (px_per_base >= ctx.canvas.manager.char_width_px);\n    this.delete_details_thickness = 0.2;\n};\n\n_.extend(ReadPainterUtils.prototype, {\n    /**\n     * Draw deletion of base(s).\n     * @param draw_detail if true, drawing in detail and deletion is drawn more subtly\n     */\n    draw_deletion: function(x, y, len) {\n        this.ctx.fillStyle = \"black\";\n        var thickness = (this.draw_details ? this.delete_details_thickness : 1) * this.row_height;\n        y += 0.5 * ( this.row_height - thickness );\n        this.ctx.fillRect(x, y, len * this.px_per_base, thickness);\n    }\n});\n\n/**\n * Paints variant data onto canvas.\n */\nvar VariantPainter = function(data, view_start, view_end, prefs, mode, base_color_fn) {\n    Painter.call(this, data, view_start, view_end, prefs, mode);\n    this.base_color_fn = base_color_fn;\n    this.divider_height = 1;\n};\n\n_.extend(VariantPainter.prototype, Painter.prototype, {\n    /**\n     * Height of a single row, depends on mode\n     */\n    get_row_height: function() {\n        var mode = this.mode, height;\n        if (mode === \"Dense\") {\n            height = DENSE_TRACK_HEIGHT;\n        }\n        else if (mode === \"Squish\") {\n            height = SQUISH_TRACK_HEIGHT;\n        }\n        else { // mode === \"Pack\"\n            height = PACK_TRACK_HEIGHT;\n        }\n        return height;\n    },\n\n    /**\n     * Returns required height to draw a particular number of samples in a given mode.\n     */\n    get_required_height: function(num_samples) {\n        // FIXME: for single-sample data, height should be summary_height when zoomed out and\n        // row_height when zoomed in.\n        var height = this.prefs.summary_height;\n\n        // If showing sample data, height is summary + divider + samples.\n        if (num_samples > 1 && this.prefs.show_sample_data) {\n            height += this.divider_height + num_samples * this.get_row_height();\n        }\n        return height;\n    },\n\n    /**\n     * Draw on the context using a rectangle of width x height with scale w_scale.\n     */\n    draw: function(ctx, width, height, w_scale) {\n        ctx.save();\n\n        var\n        /**\n         * Returns dictionary of information about an indel; returns empty if there no indel. Assumes indel is left-aligned.\n         * Dict attributes:\n         *    -type: 'insertion' or 'deletion'\n         *    -start: where the deletion starts relative to reference start\n         *    -len: how long the deletion is\n         */\n        get_indel_info = function(ref, alt) {\n            var ref_len = ref.length,\n                alt_len = alt.length,\n                start = 0,\n                len = 1,\n                type = null;\n            if (alt === '-') {\n                type = 'deletion';\n                len = ref.length;\n            }\n            else if (ref.indexOf(alt) === 0 && ref_len > alt_len) {\n                type = 'deletion';\n                len = ref_len - alt_len;\n                start = alt_len;\n            }\n            else if (alt.indexOf(ref) === 0 && ref_len < alt_len) {\n                // Insertion.\n                type = 'insertion';\n                len = alt_len - ref_len;\n                start = alt_len;\n            }\n\n            return ( type !== null ? { type: type, start: start, len: len } : {} );\n        };\n\n        // Draw.\n        var locus_data,\n            pos,\n            id,\n            ref,\n            alt,\n            qual,\n            filter,\n            sample_gts,\n            allele_counts,\n            variant,\n            draw_x_start,\n            draw_y_start,\n            genotype,\n            // Always draw variants at least 1 pixel wide.\n            base_px = Math.max(1, Math.floor(w_scale)),\n            // Determine number of samples.\n            num_samples = (this.data.length ? this.data[0][7].split(',').length : 0),\n            row_height = (this.mode === 'Squish' ? SQUISH_TRACK_HEIGHT : PACK_TRACK_HEIGHT),\n            // If zoomed out, fill the whole row with feature to make it easier to read;\n            // when zoomed in, use feature height so that there are gaps in sample rows.\n            feature_height = (w_scale < 0.1 ?\n                              row_height :\n                              (this.mode === 'Squish' ? SQUISH_FEATURE_HEIGHT : PACK_FEATURE_HEIGHT)\n                             ),\n            draw_summary = true,\n            paint_utils = new ReadPainterUtils(ctx, row_height, w_scale, this.mode),\n            j;\n\n        // If there's a single sample, update drawing variables.\n        if (num_samples === 1) {\n            row_height = feature_height =\n                (w_scale < ctx.canvas.manager.char_width_px ? this.prefs.summary_height : row_height);\n            paint_utils.row_height = row_height;\n            // No summary when there's a single sample.\n            draw_summary = false;\n        }\n\n        // Draw divider between summary and samples.\n        if (this.prefs.show_sample_data && draw_summary) {\n            ctx.fillStyle = '#F3F3F3';\n            ctx.globalAlpha = 1;\n            ctx.fillRect(0, this.prefs.summary_height - this.divider_height, width, this.divider_height);\n        }\n\n        // Draw variants.\n        ctx.textAlign = \"center\";\n        for (var i = 0; i < this.data.length; i++) {\n            // Get locus data.\n            locus_data = this.data[i];\n            pos = locus_data[1];\n            ref = locus_data[3];\n            alt = [ locus_data[4].split(',') ];\n            sample_gts = locus_data[7].split(',');\n            allele_counts = locus_data.slice(8);\n\n            // Process alterate values to derive information about each alt.\n            alt = _.map(_.flatten(alt), function(a) {\n                var alt_info = {\n                        type: 'snp',\n                        value: a,\n                        start: 0\n                    },\n                    indel_info = get_indel_info(ref, a);\n\n                return _.extend(alt_info, indel_info);\n            });\n\n            // Only draw locus data if it's in viewing region.\n            if (pos < this.view_start || pos > this.view_end) {\n                continue;\n            }\n\n            // Draw summary for alleles.\n            if (draw_summary) {\n                ctx.fillStyle = '#999999';\n                ctx.globalAlpha = 1;\n                for (j = 0; j < alt.length; j++) {\n                    // Draw background for summary.\n                    draw_x_start = this.get_start_draw_pos(pos + alt[j].start, w_scale);\n                    ctx.fillRect(draw_x_start, 0, base_px, this.prefs.summary_height);\n                    draw_y_start = this.prefs.summary_height;\n                    // Draw allele fractions onto summary.\n                    for (j = 0; j < alt.length; j++) {\n                        ctx.fillStyle = ( alt[j].type === 'deletion' ? 'black' : this.base_color_fn(alt[j].value) );\n                        allele_frac = allele_counts / sample_gts.length;\n                        draw_height = Math.ceil(this.prefs.summary_height * allele_frac);\n                        ctx.fillRect(draw_x_start, draw_y_start - draw_height, base_px, draw_height);\n                        draw_y_start -= draw_height;\n                    }\n                }\n            }\n\n            // Done drawing if not showing samples data.\n            if (!this.prefs.show_sample_data) { continue; }\n\n            // Draw sample genotype(s).\n            draw_y_start = (draw_summary ? this.prefs.summary_height + this.divider_height : 0);\n            for (j = 0; j < sample_gts.length; j++, draw_y_start += row_height) {\n                genotype = (sample_gts[j] ? sample_gts[j].split(/\\/|\\|/) : ['0', '0']);\n\n                // Get variant to draw and set drawing properties.\n                variant = null;\n                if (genotype[0] === genotype[1]) {\n                    if (genotype[0] === '.') {\n                        // TODO: draw uncalled variant.\n                    }\n                    else if (genotype[0] !== '0') {\n                        // Homozygous for variant.\n                        variant = alt[ parseInt(genotype[0], 10) - 1 ];\n                        ctx.globalAlpha = 1;\n                    }\n                    // else reference\n                }\n                else { // Heterozygous for variant.\n                    variant = (genotype[0] !== '0' ? genotype[0] : genotype[1]);\n                    variant = alt[ parseInt(variant, 10) - 1 ];\n                    ctx.globalAlpha = 0.5;\n                }\n\n                // If there's a variant, draw it.\n                if (variant) {\n                    draw_x_start = this.get_start_draw_pos(pos + variant.start, w_scale);\n                    if (variant.type === 'snp') {\n                        var snp = variant.value;\n                        ctx.fillStyle = this.base_color_fn(snp);\n                        if (paint_utils.draw_details) {\n                            ctx.fillText(snp, this.get_draw_pos(pos, w_scale), draw_y_start + row_height);\n                        }\n                        else {\n                            ctx.fillRect(draw_x_start, draw_y_start + 1, base_px, feature_height);\n                        }\n                    }\n                    else if (variant.type === 'deletion') {\n                        paint_utils.draw_deletion(draw_x_start, draw_y_start + 1, variant.len);\n                    }\n                    else {\n                        // TODO: handle insertions.\n                    }\n                }\n            }\n        }\n\n        ctx.restore();\n    }\n});\n\nreturn {\n    Scaler: Scaler,\n    LinePainter: LinePainter,\n    LinkedFeaturePainter: LinkedFeaturePainter,\n    ReadPainter: ReadPainter,\n    ArcLinkedFeaturePainter: ArcLinkedFeaturePainter,\n    DiagonalHeatmapPainter: DiagonalHeatmapPainter,\n    VariantPainter: VariantPainter\n};\n\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster/painters.js\n ** module id = 126\n ** module chunks = 0\n **/","define( [\"libs/underscore\"], function( _ ) {\n\nvar extend = _.extend;\n\n// HACK: LABEL_SPACING is currently duplicated between here and painters\nvar LABEL_SPACING = 2,\n    PACK_SPACING = 5;\n\n/**\n * Hold slotting information for a feature.\n */\nvar SlottedInfo = function(slot, feature) {\n    this.slot = slot;\n    this.feature = feature;\n};\n\n/**\n * FeatureSlotter determines slots in which to draw features for vertical\n * packing.\n *\n * This implementation is incremental, any feature assigned a slot will be\n * retained for slotting future features.\n */\nvar FeatureSlotter = function (w_scale, mode, max_rows, measureText) {\n    this.slots = {};\n    this.start_end_dct = {};\n    this.w_scale = w_scale;\n    this.mode = mode;\n    this.include_label = (mode === \"Pack\");\n    this.max_rows = max_rows;\n    this.measureText = measureText;\n};\n\n/**\n * Slot a set of features, `this.slots` will be updated with slots by id, and\n * the largest slot required for the passed set of features is returned\n */\nextend( FeatureSlotter.prototype, {\n    /**\n     * Get drawing coordinate for a feature.\n     */\n    _get_draw_coords: function(feature) {\n        // Get initial draw coordinates using w_scale.\n        var draw_start = Math.floor(feature[1] * this.w_scale),\n            draw_end = Math.ceil(feature[2] * this.w_scale),\n            f_name = feature[3],\n            text_align;\n\n        // Update start, end drawing locations to include feature name.\n        // Try to put the name on the left, if not, put on right.\n        if (f_name !== undefined && this.include_label ) {\n            // Add gap for label spacing and extra pack space padding\n            // TODO: Fix constants\n            var text_len = this.measureText(f_name).width + (LABEL_SPACING + PACK_SPACING);\n            if (draw_start - text_len >= 0) {\n                draw_start -= text_len;\n                text_align = \"left\";\n            } else {\n                draw_end += text_len;\n                text_align = \"right\";\n            }\n        }\n\n        /*\n        if (slot_num < 0) {\n            \n            TODO: this is not yet working --\n            console.log(feature_uid, \"looking for slot with text on the right\");\n            // Slot not found. If text was on left, try on right and see\n            // if slot can be found.\n            // TODO: are there any checks we need to do to ensure that text\n            // will fit on tile?\n            if (text_align === \"left\") {\n                draw_start -= text_len;\n                draw_end -= text_len;\n                text_align = \"right\";\n                slot_num = find_slot(draw_start, draw_end);\n            }\n            if (slot_num >= 0) {\n                console.log(feature_uid, \"found slot with text on the right\");\n            }\n\n        }\n        */\n\n        return [draw_start, draw_end];\n    },\n\n    /**\n     * Find the first slot such that current feature doesn't overlap any other features in that slot.\n     * Returns -1 if no slot was found.\n     */\n    _find_slot: function(draw_coords) {\n        // TODO: Use a data structure for faster searching of available slots.\n        var draw_start = draw_coords[0],\n            draw_end = draw_coords[1];\n        for (var slot_num = 0; slot_num <= this.max_rows; slot_num++) {\n            var has_overlap = false,\n                slot = this.start_end_dct[slot_num];\n            if (slot !== undefined) {\n                // Iterate through features already in slot to see if current feature will fit.\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    var s_e = slot[k];\n                    if (draw_end > s_e[0] && draw_start < s_e[1]) {\n                        // There is overlap\n                        has_overlap = true;\n                        break;\n                    }\n                }\n            }\n            if (!has_overlap) {\n                return slot_num;\n            }\n        }\n        return -1;\n    },\n\n    /**\n     * Slot features.\n     */\n    slot_features: function( features ) {\n        var start_end_dct = this.start_end_dct,\n            undone = [], \n            highest_slot = 0,\n            feature,\n            feature_uid;\n\n        // Loop through features to (a) find those that are not yet slotted and (b) update\n        // those that are slotted if new information is availabe. For (a), features already\n        // slotted (based on slotting from other tiles) will retain their current slot.\n        for (var i = 0, len = features.length; i < len; i++) {\n            feature = features[i];\n            feature_uid = feature[0];\n            var slotted_info = this.slots[feature_uid];\n\n            // Separate and handle slotted vs. unslotted features.\n            if (slotted_info) {\n                // Feature is slotted; if feature now has larger start/end coordinates,\n                // update drawing coordinates.\n                if (feature[1] < slotted_info.feature[1]  || slotted_info.feature[2] < feature[2]) {\n                    // Feature has changed (e.g. a single read now has its pair), so recalculate its \n                    // drawing coordinates.\n                    var old_draw_coords = this._get_draw_coords(slotted_info.feature),\n                        new_draw_coords = this._get_draw_coords(feature),\n                        slotted_coords = this.start_end_dct[slotted_info.slot];\n                    for (var k = 0; k < slotted_coords.length; k++) {\n                        var dc = slotted_coords[k];\n                        if (dc[0] === old_draw_coords[0] && dc[1] === old_draw_coords[1]) {\n                            // Replace old drawing coordinates with new ones.\n                            slotted_coords[k] = new_draw_coords;\n                        }\n                    }\n                }\n                highest_slot = Math.max(highest_slot, this.slots[feature_uid].slot);\n            } \n            else {\n                undone.push(i);\n            }\n        }\n        \n        // Slot unslotted features.\n        \n        // Do slotting.\n        for (var i = 0, len = undone.length; i < len; i++) {\n            feature = features[undone[i]];\n            feature_uid = feature[0];\n            var draw_coords = this._get_draw_coords(feature);\n                        \n            // Find slot.\n            var slot_num = this._find_slot(draw_coords);\n\n            // Do slotting.\n            if (slot_num >= 0) {\n                // Add current feature to slot.\n                if (start_end_dct[slot_num] === undefined) {\n                    start_end_dct[slot_num] = [];\n                }\n                start_end_dct[slot_num].push(draw_coords);\n                this.slots[feature_uid] = new SlottedInfo(slot_num, feature);\n                highest_slot = Math.max(highest_slot, slot_num);\n            }\n        }\n        \n        // Debugging: view slots data.\n        /*\n        for (var i = 0; i < MAX_FEATURE_DEPTH; i++) {\n            var slot = start_end_dct[i];\n            if (slot !== undefined) {\n                console.log(i, \"*************\");\n                for (var k = 0, k_len = slot.length; k < k_len; k++) {\n                    console.log(\"\\t\", slot[k][0], slot[k][1]);\n                }\n            }\n        }\n        */\n        return highest_slot + 1;\n    }\n});\n\nreturn {\n    FeatureSlotter: FeatureSlotter\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster/slotting.js\n ** module id = 127\n ** module chunks = 0\n **/","define([\n    \"libs/underscore\",\n    \"viz/visualization\",\n    \"viz/viz_views\",\n    \"viz/trackster/util\",\n    \"viz/trackster/slotting\",\n    \"viz/trackster/painters\",\n    \"viz/trackster/filters\",\n    \"mvc/dataset/data\",\n    \"mvc/tool/tools\",\n    \"utils/config\",\n    \"ui/editable-text\",\n], function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod) {\n\n\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = function(element, obj) {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = function(element, handle_class, container_selector, element_js_obj) {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element.bind( \"drag\", { handle: \".\" + handle_class, relative: true }, function ( e, d ) {\n        var element = $(this),\n            parent = $(this).parent(),\n            // Only sorting amongst tracks and groups.\n            children = parent.children('.track,.group'),\n            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n            child,\n            container,\n            top,\n            bottom,\n            i;\n\n        //\n        // Enable three types of dragging: (a) out of container; (b) into container;\n        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n        //\n\n        // Handle dragging out of container.\n        container = $(this).parents(container_selector);\n        if (container.length !== 0) {\n            top = container.position().top;\n            bottom = top + container.outerHeight();\n            var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n            if (d.offsetY < top) {\n                // Moving above container.\n                $(this).insertBefore(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable_before(this_obj, cur_container);\n                return;\n            }\n            else if (d.offsetY > bottom) {\n                // Moving below container.\n                $(this).insertAfter(container);\n                cur_container.remove_drawable(this_obj);\n                cur_container.container.add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle dragging into container. Child is appended to container's content_div.\n        container = null;\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            top = child.position().top;\n            bottom = top + child.outerHeight();\n            // Dragging into container if child is a container and offset is inside container.\n            if ( child.is(container_selector) && this !== child.get(0) &&\n                 d.offsetY >= top && d.offsetY <= bottom ) {\n                // Append/prepend based on where offsetY is closest to and return.\n                if (d.offsetY - top < bottom - d.offsetY) {\n                    child.find(\".content-div\").prepend(this);\n                }\n                else {\n                    child.find(\".content-div\").append(this);\n                }\n                // Update containers. Object may not have container if it is being moved quickly.\n                if (this_obj.container) {\n                    this_obj.container.remove_drawable(this_obj);\n                }\n                html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                return;\n            }\n        }\n\n        // Handle sibling movement, aka sorting.\n\n        // Determine new position\n        for ( i = 0; i < children.length; i++ ) {\n            child = $(children.get(i));\n            if ( d.offsetY < child.position().top &&\n                 // Cannot move tracks above reference track or intro div.\n                 !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\")) ) {\n                break;\n            }\n        }\n\n        // If not already in the right place, move. Need\n        // to handle the end specially since we don't have\n        // insert at index\n        if ( i === children.length ) {\n            if ( this !== children.get(i - 1) ) {\n                parent.append(this);\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n            }\n        }\n        else if ( this !== children.get(i) ) {\n            $(this).insertBefore( children.get(i) );\n            // Need to adjust insert position if moving down because move is changing\n            // indices of all list items.\n            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, (d.deltaY > 0 ? i-1 : i) );\n        }\n    }).bind(\"dragstart\", function() {\n        $(this).addClass('dragging');\n    }).bind(\"dragend\", function() {\n        $(this).removeClass('dragging');\n    });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar\n    // Padding at the top of tracks for error messages\n    ERROR_PADDING = 20,\n    // Maximum number of rows un a slotted track\n    MAX_FEATURE_DEPTH = 100,\n    // Minimum width for window for squish to be used.\n    MIN_SQUISH_VIEW_WIDTH = 12000,\n    // Number of pixels per tile, not including left offset.\n    TILE_SIZE = 400,\n    DEFAULT_DATA_QUERY_WAIT = 5000,\n    // Maximum number of chromosomes that are selectable at any one time.\n    MAX_CHROMS_SELECTABLE = 100,\n    DATA_ERROR = \"Cannot display dataset due to an error. \",\n    DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n    DATA_NONE = \"No data for this chrom/contig.\",\n    DATA_PENDING = \"Preparing data. This can take a while for a large dataset. \" +\n                   \"If the visualization is saved and closed, preparation will continue in the background.\",\n    DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n    DATA_LOADING = \"Loading data...\",\n    DATA_OK = \"Ready for display\",\n    TILE_CACHE_SIZE = 10,\n    DATA_CACHE_SIZE = 20,\n\n    // Numerical/continuous data display modes.\n    CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) { Drawable.id_counter = 0; }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value('name')) {\n        this.config.set_value('name', obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on('change', this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            function() { icons_div.show(); }, function() { icons_div.hide(); }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if ( drawable.config.get_value('content_visible') ) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value('content_visible', false);\n            }\n            else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value('content_visible', true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: \"Edit settings\",\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal('Configure Track');\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: \"Remove\",\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: 'name', label: 'Name', type: 'text', default_value: '' },\n        { key: 'content_visible', type: 'bool', default_value: true, hidden: true }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value('content_visible')) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value('name');\n        this.config.set_value('name', new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value('name', this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function () {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0),\n            tracks = [],\n            drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            }\n            else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\").addClass(\"content-div\").attr(\"id\", \"group_\" + this.id + \"_content_div\").appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after( $(\"<div style='clear: both'/>\") );\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if ('drawables' in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if ('filters' in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: \"Show composite track\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                }\n                else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\").addClass(\"group\").attr(\"id\", \"group_\" + this.id);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function () {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        }\n        else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        }\n        else { // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i, j, drawable,\n                same_type = true,\n                a_type = this.drawables[0].get_type(),\n                num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            }\n            else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {},\n                    filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var\n                    filters,\n                    new_filter,\n                    min,\n                    max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter( {\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                        } );\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            }\n            else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value('name'),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), { \"filters\": this.filters_manager.to_dict() });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, function(d) {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = (obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true);\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager( this.container.get(0).ownerDocument );\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values( [\n                { key: 'name', label: 'Name', type: 'text', default_value: '' },\n                { key: 'a_color', label: 'A Color', type: 'color', default_value: \"#FF0000\" },\n                { key: 'c_color', label: 'C Color', type: 'color', default_value: \"#00FF00\" },\n                { key: 'g_color', label: 'G Color', type: 'color', default_value: \"#0000FF\" },\n                { key: 't_color', label: 'T Color', type: 'color', default_value: \"#FF00FF\" },\n                { key: 'n_color', label: 'N Color', type: 'color', default_value: \"#AAAAAA\" }\n            ], { name: obj_dict.name });\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container,\n            view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\").addClass(\"top-container\").appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\").addClass(\"content\").appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\").addClass(\"bottom-container\").appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\").addClass(\"top-labeltrack\").appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\").addClass(\"viewport-container\").attr(\"id\", \"viewport-container\").appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\").addClass(\"intro\").appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\").text(\"Add Datasets to Visualization\").addClass(\"action-button\").appendTo(this.intro_div).click(function () {\n            visualization.select_datasets(Galaxy.root + \"visualization/list_current_history_datasets\", Galaxy.root + \"api/datasets\", { 'f-dbkey': view.dbkey }, function(tracks) {\n                _.each(tracks, function(track) {\n                    view.add_drawable( object_from_template(track, view, view) );\n                });\n            });\n        });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\").addClass(\"trackster-nav-container\").prependTo(this.top_container);\n        this.nav = $(\"<div/>\").addClass(\"trackster-nav\").appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\").addClass(\"overview\").appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\").addClass(\"overview-viewport\").appendTo(this.overview);\n        this.overview_close = $(\"<a/>\").attr(\"title\", \"Close overview\")\n                                       .addClass(\"icon-button overview-close tooltip\")\n                                       .hide()\n                                       .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\").addClass(\"overview-highlight\").hide().appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\").addClass(\"overview-boxback\").appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\").addClass(\"overview-box\").appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\").addClass(\"nav-controls\").appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\").attr({ \"name\": \"chrom\"}).addClass('chrom-nav').append(\"<option value=''>Loading</option>\").appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27 ) {\n                if ((e.keyCode || e.which) !== 27) { // Not escape key\n                    view.go_to( $(this).val() );\n                }\n                $(this).hide();\n                $(this).val('');\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\").addClass(\"nav-input\").hide().bind(\"keyup focusout\", submit_nav).appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\").addClass(\"location\").attr('title', 'Click to change location').tooltip( { placement: 'bottom' } ).appendTo(this.nav_controls);\n        this.location_span.click(function() {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [],\n                        feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                        return t.data_manager.search_features(request.term).success(function(dataset_features) {\n                            all_features = all_features.concat(dataset_features);\n                        });\n                    });\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(function() {\n                        response($.map(all_features, function(feature) {\n                            return {\n                                label: feature[0],\n                                value: feature[1]\n                            };\n                        }));\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\").attr(\"type\", \"hidden\").val(this.vis_id).appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\").attr(\"id\", \"zoom-out\").attr(\"title\", \"Zoom out\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_out(); }).appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\").attr(\"id\", \"zoom-in\").attr(\"title\", \"Zoom in\").tooltip( {placement: 'bottom'} )\n                                .click(function() { view.zoom_in(); }).appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({low: 0});\n        this.chrom_select.bind(\"change\", function() {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function( e ) {\n            $(this).find(\"input\").trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function( e ) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box.bind(\"dragstart\", function( e, d ) {\n            this.current_x = d.offsetX;\n        }).bind(\"drag\", function( e, d ) {\n            var delta = d.offsetX - this.current_x;\n            this.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low) );\n            view.move_delta(-delta_chrom);\n        });\n\n        this.overview_close.click(function() {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container.bind( \"draginit\", function( e, d ) {\n            // Disable interaction if started in scrollbar (for webkit)\n            if ( e.clientX > view.viewport_container.width() - 16 ) {\n                return false;\n            }\n        }).bind( \"dragstart\", function( e, d ) {\n            d.original_low = view.low;\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n        }).bind( \"drag\", function( e, d ) {\n            var container = $(this);\n            var delta = d.offsetX - d.current_x;\n            var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n            container.scrollTop(new_scroll);\n            d.current_height = e.clientY;\n            d.current_x = d.offsetX;\n            var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n            view.move_delta(delta_chrom);\n        });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack.bind( \"dragstart\", function( e, d ) {\n            return $(\"<div/>\").addClass('zoom-area').css(\n                \"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1\n            ).appendTo( $(this) );\n        }).bind( \"drag\", function( e, d ) {\n            $( d.proxy ).css({ left: Math.min( e.pageX, d.startX ) - view.container.offset().left, width: Math.abs( e.pageX - d.startX ) });\n            var min = Math.min(e.pageX, d.startX ) - view.container.offset().left,\n                max = Math.max(e.pageX, d.startX ) - view.container.offset().left,\n                span = (view.high - view.low),\n                width = view.viewport_container.width();\n            view.update_location( Math.round(min / width * span) + view.low,\n                                  Math.round(max / width * span) + view.low );\n        }).bind( \"dragend\", function( e, d ) {\n            var min = Math.min(e.pageX, d.startX),\n                max = Math.max(e.pageX, d.startX),\n                span = (view.high - view.low),\n                width = view.viewport_container.width(),\n                old_low = view.low;\n            view.low = Math.round(min / width * span) + old_low;\n            view.high = Math.round(max / width * span) + old_low;\n            $(d.proxy).remove();\n            view.request_redraw();\n        });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track( new LabelTrack( this, { content_div: this.top_labeltrack } ) );\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(function () {\n                view.resize_window();\n            }, 500 );\n        });\n        $(document).bind(\"redraw\", function() { view.redraw(); });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(base.toLowerCase() + '_color') ||\n               this.config.get_value('n_color');\n    }\n\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend( TracksterView.prototype, DrawableCollection.prototype, {\n\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(function () {\n                self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n            }, 500 );\n        }\n        else {\n            view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text( util.commatize(low) + ' - ' + util.commatize(high) );\n        this.nav_input.val( this.chrom + ':' + util.commatize(low) + '-' + util.commatize(high) );\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var\n            view = this,\n            chrom_data = $.Deferred();\n        $.ajax({\n            url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n            data: url_parms,\n            dataType: \"json\",\n            success: function (result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n                var chrom_options = '<option value=\"\">Select Chrom/Contig</option>';\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    chrom_options += '<option value=\"' + chrom + '\">' + chrom + '</option>';\n                }\n                if (result.prev_chroms) {\n                    chrom_options += '<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + '</option>';\n                }\n                if (result.next_chroms) {\n                    chrom_options += '<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + '</option>';\n                }\n                view.chrom_select.html(chrom_options);\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(function() {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({low: this.chrom_start_index - MAX_CHROMS_SELECTABLE});\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({low: this.chrom_start_index + MAX_CHROMS_SELECTABLE});\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, function(v, i) {\n            return v.chrom === chrom;\n        })[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({'chrom': chrom}, function() { view.change_chrom(chrom, low, high); });\n            return;\n        }\n        else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len-1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            }\n            else {\n                // Low and/or high is defined.\n                view.low = (low !== undefined ? Math.max(low, 0) : 0);\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                }\n                else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, '');\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, ' ');\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/),\n            chrom = chrom_pos[0],\n            new_low = (chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined),\n            new_high = (chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined);\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(function() {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on('change', function() {\n            self.changed();\n        });\n    },\n\n    add_label_track: function (label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this,\n            // Either redrawing a single drawable or all view's drawables.\n            track_list = (drawable ? [drawable] : view.drawables);\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, function(track) {\n            var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                return to[0] === track;\n            });\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            }\n            else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(function() { view._redraw(); });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low,\n            high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = ( this.low / (this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var width_px = ( (this.high - this.low)/(this.max_high - this.max_low) * this.overview_viewport.width() ) || 0;\n        var min_width_px = 13;\n\n        this.overview_box.css({ left: left_px, width: Math.max(min_width_px, width_px) }).show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px)/2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({ left: left_px, width: width_px });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, function(track_options) {\n            var track = track_options[0],\n                options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, function(label_track) {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function (point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span / this.zoom_factor) / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function () {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low,\n            cur_center = span / 2 + this.low,\n            new_half = (span * this.zoom_factor) / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height( this.container.height() - this.top_container.height() - this.bottom_container.height() );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var\n            overview_drawable = drawable.copy( { content_div: this.overview_viewport } ),\n            view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = function() {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(view.overview_drawable.content_div.height() + view.overview_box.outerHeight());\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set('hidden', hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs( [ 'data', 'hidden_data', 'conditional' ] );\n    },\n\n    state_dict: function(options) {\n        return _.extend( this.get_inputs_dict(), { hidden: !this.is_visible() } );\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n var ToolParameterView = Backbone.View.extend({\n\n    events: {\n        'change :input': 'update_value'\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\"),\n            param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\").addClass(\"param-label\").text(param.get('label')).appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\").addClass(\"param-input\").html(param.get('html')).appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get('value'));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n });\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n\n    initialize: function(options) {\n        this.model.on('change:hidden', this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n            tool = this.model,\n            parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div.bind(\"drag\", function(e) {\n            e.stopPropagation();\n        }).click(function(e) {\n            e.stopPropagation();\n        }).bind(\"dblclick\", function(e) {\n            e.stopPropagation();\n        }).keydown(function(e) { e.stopPropagation(); });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\").appendTo(parent_div).text(tool.get('name'));\n        tool.get('inputs').each(function(param) {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() { $(this).select(); });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\").addClass(\"param-row\").appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on complete dataset\").appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\").attr(\"value\", \"Run on visible region\").appendTo(run_tool_row);\n        run_on_region_button.click( function() {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click( function() {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get('track').dataset.id,\n                action: 'rerun',\n                tool_id: tool.id\n            },\n            null,\n            // Success callback.\n            function(track_data) {\n                Galaxy.modal.show({title: tool.get('name') + \" is Running\", body: tool.get('name') + \" is running on the complete dataset. Tool outputs are in dataset's history.\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get('track'),\n            tool = this.model,\n            region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: track.view.low,\n                end: track.view.high\n            }),\n            url_params =\n            {\n                target_dataset_id: track.dataset.id,\n                action: 'rerun',\n                tool_id: tool.id,\n                regions: [\n                    region.toJSON()\n                ]\n            },\n            current_track = track,\n            // Set name of track to include tool name, parameters, and region used.\n            track_name = tool.get('name') +\n                         current_track.tool_region_and_parameters_str(region),\n            container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, { name: track.config.get_value('name') });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        }\n        else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track,\n                // Success callback.\n                function(track_data) {\n                    new_track.set_dataset(new data.Dataset(track_data));\n                    new_track.tiles_div.text(\"Running job.\");\n                    new_track.init();\n                }\n        );\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: Galaxy.root + \"api/tools\",\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: 'application/json',\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(function(response) {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            }\n            else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            }\n            else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (this.filter.high === Number.MAX_VALUE || this.filter.low === -Number.MAX_VALUE || this.filter.low === this.filter.high) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return ( ( parseFloat(feature_data[this.filter.index]) - this.filter.low ) / ( this.filter.high - this.filter.low ) );\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get('start');\n    this.high = region.get('end');\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = function() {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = function() {};\n\nvar FeatureTrackTile = function(track, region, w_scale, canvas, data, mode, message, all_slotted,\n                                feature_mapper, incomplete_features, seq_data) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = function() {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset = (obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset) );\n    }\n    this.dataset_check_type = 'converted_datasets_state';\n    this.data_url_extra_params = {};\n    this.data_query_wait = ('data_query_wait' in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT);\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager = ('data_manager' in obj_dict ?\n                         obj_dict.data_manager :\n                         new visualization.GenomeDataManager({\n                             dataset: this.dataset,\n                             // HACK: simulate 'genome' attributes from view for now.\n                             // View should eventually use Genome object.\n                             genome: new visualization.Genome({\n                                key: view.dbkey,\n                                chroms_info: {\n                                    chrom_info: view.chrom_data\n                                }\n                             }),\n                             data_mode_compatible: this.data_and_mode_compatible,\n                             can_subset: this.can_subset\n                         }));\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value('height');\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if ( !(\"resize\" in obj_dict) || obj_dict.resize ) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: \"Set display mode\",\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: \"Set as overview\",\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: \"Filters\",\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                }\n                else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: \"Tool\",\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value('name') + track.tool_region_and_parameters_str());\n                }\n                else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: \"Tool parameter space visualization\",\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html =\n                    '<strong>Tool</strong>:' + track.tool.get(\"name\") + '<br/>' +\n                    '<strong>Dataset</strong>:' + track.config.get_value(\"name\") + '<br/>' +\n                    '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                    '<option value=\"cur\">current viewing area</option>' +\n                    '<option value=\"bookmarks\">bookmarks</option>' +\n                    '<option value=\"both\">current viewing area and bookmarks</option>' +\n                    '</select>';\n                var cancel_fn = function() { Galaxy.modal.hide(); $(window).unbind(\"keypress.check_enter_esc\"); },\n                    ok_fn = function() {\n                        var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                            regions,\n                            view_region = new visualization.GenomeRegion({\n                                chrom: view.chrom,\n                                start: view.low,\n                                end: view.high\n                            }),\n                            bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                return new visualization.GenomeRegion({from_str: $(elt).children(\".position\").text()});\n                            });\n\n                        // Get regions for visualization.\n                        if (regions_to_use === 'cur') {\n                            // Use only current region.\n                            regions = [ view_region ];\n                        }\n                        else if (regions_to_use === 'bookmarks') {\n                            // Use only bookmarks.\n                            regions = bookmarked_regions;\n                        }\n                        else {\n                            // Use both current region and bookmarks.\n                            regions = [ view_region ].concat(bookmarked_regions);\n                        }\n\n                        Galaxy.modal.hide();\n\n                        // Go to visualization.\n                        window.location.href =\n                            Galaxy.root + \"visualization/sweepster\" + \"?\" +\n                            $.param({\n                                dataset_id: track.dataset.id,\n                                hda_ldda: track.dataset.get('hda_ldda'),\n                                regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                            });\n                    },\n                    check_enter_esc = function(e) {\n                        if ((e.keyCode || e.which) === 27) { // Escape key\n                            cancel_fn();\n                        } else if ((e.keyCode || e.which) === 13) { // Enter key\n                            ok_fn();\n                        }\n                    };\n\n                // show dialog\n                Galaxy.modal.show({title: \"Visualize tool parameter space and output from different parameter settings?\", body: html, buttons : {'No' : cancel_fn, 'Yes' : ok_fn } });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function () {\n        return $(\"<div/>\").addClass('track').attr(\"id\", \"track_\" + this.id);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set('dataset', dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function () {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $( \"<div class='track-resize'>\" );\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover( function() {\n            if ( track.config.get_value('content_visible') ) {\n                in_handle = true;\n                drag_control.show();\n            }\n        }, function() {\n            in_handle = false;\n            if ( ! in_drag ) { drag_control.hide(); }\n        });\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control.hide().bind( \"dragstart\", function( e, d ) {\n            in_drag = true;\n            d.original_height = $(track.content_div).height();\n        }).bind( \"drag\", function( e, d ) {\n            var new_height = Math.min( Math.max( d.original_height + d.deltaY, track.min_height_px ), track.max_height_px );\n            $(track.tiles_div).css( 'height', new_height );\n            track.visible_height_px = (track.max_height_px === new_height ? 0 : new_height);\n            track.on_resize();\n        }).bind( \"dragend\", function( e, d ) {\n            track.tile_cache.clear();\n            in_drag = false;\n            if (!in_handle) { drag_control.hide(); }\n            track.config.set_value('height', track.visible_height_px);\n            track.changed();\n        }).appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function () {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        }\n        else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        }\n        else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        }\n        else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        }\n        else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        }\n        else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        }\n        else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $('<span/>').addClass('message').html(msg_html).appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred(),\n            params = {\n                hda_ldda: track.dataset.get('hda_ldda'),\n                data_type: this.dataset_check_type,\n                chrom: track.view.chrom,\n                retry: retry\n            };\n        $.getJSON(this.dataset.url(), params, function (result) {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"View error\").click(function() {\n                            Galaxy.modal.show({title: \"Trackster Error\", body: \"<pre>\" + result.message + \"</pre>\", buttons : {'Close' : function() { Galaxy.modal.hide(); } } });\n                        })\n                    );\n                    msg_elt.append( $('<span/>').text(' ') );\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\").text(\"Try again\").click(function() {\n                            track.init(true);\n                        })\n                    );\n                }\n            }\n            else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            }\n            else if (result === \"no data\" || (result.data !== undefined && (result.data === null || result.data.length === 0))) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            }\n            else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(function() { track.init(); }, track.data_query_wait);\n            }\n            else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css( \"height\", track.visible_height_px + \"px\" );\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(function() {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                }\n                else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n\n            // Tracks may not have stat data either because there is no data or data is not yet ready.\n            if (data !== undefined && data.min !== undefined && data.max !== undefined) {\n                // Compute default minimum and maximum values\n                var min_value = data.min,\n                    max_value = data.max;\n                // If mean and sd are present, use them to compute a ~95% window\n                // but only if it would shrink the range on one side\n                min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                // Update config, prefs\n                track.config.set_default_value('min_value', min_value);\n                track.config.set_default_value('max_value', max_value);\n                track.config.set_value('min_value', min_value);\n                track.config.set_value('max_value', max_value);\n            }\n        });\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, ('filters' in obj_dict ? obj_dict.filters : null));\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set('filters_manager', this.filters_manager);\n    this.filters_available = false;\n    this.tool = (obj_dict.tool ? new TracksterTool( _.extend( obj_dict.tool, {\n        'track': this,\n        'tool_state': obj_dict.tool_state\n    } ) )\n    : null);\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\").addClass(\"tiles\").appendTo(this.content_div);\n    if (!this.config.get_value('content_visible')) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\").addClass(\"overlay\").appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n\n    action_icons_def: Track.prototype.action_icons_def.concat( [\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[ track.view.resolution_px_b ].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ] ),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get('hda_ldda')\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: (this.tool ? this.tool.state_dict() : {})\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON( track.dataset.url(),\n            { data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n              high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') },\n            function(result) {\n                var data = result.data;\n                if ( isNaN(parseFloat(track.config.get_value('min_value'))) ||\n                     isNaN(parseFloat(track.config.get_value('max_value'))) ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min,\n                        max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor( Math.min( 0, Math.max( min_value, data.mean - 2 * data.sd ) ) );\n                    max_value = Math.ceil( Math.max( 0, Math.min( max_value, data.mean + 2 * data.sd ) ) );\n                    // Update the prefs\n                    track.config.set_value('min_value', min_value);\n                    track.config.set_value('max_value', max_value);\n                }\n            });\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value('mode', new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === 'Auto') { this.data_manager.clear(); }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return w_scale + '_' + tile_region;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if ( !this.can_draw() ) { return; }\n\n        var clear_after = options && options.clear_after,\n            low = this.view.low,\n            high = this.view.high,\n            range = high - low,\n            width = this.view.container.width(),\n            w_scale = this.view.resolution_px_b,\n            resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var\n            // Tile width in bases.\n            tile_width = Math.floor(TILE_SIZE * resolution),\n            // Index of first tile that overlaps visible region.\n            tile_index = Math.floor(low / tile_width),\n            tile_region,\n            tile_promise,\n            tile_promises = [],\n            tiles = [];\n        // Draw tiles.\n        while ( (tile_index * tile_width) < high ) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min( (tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(function(tile) {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) { this.tiles_div.children(\".remove\").removeClass(\"remove\").remove(); }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(function() {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, function(t) {\n                return t !== null;\n            });\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this,\n            css_class = (type === 'max' ? 'top' : 'bottom'),\n            text = (type === 'max' ? 'max' : 'min'),\n            pref_name = (type === 'max' ? 'max_value' : 'min_value'),\n            label = this.container_div.find(\".yaxislabel.\" + css_class);\n\n        // Default action for on_change is to redraw track.\n        on_change = on_change || function() {\n            track.request_draw({ clear_tile_cache: true });\n        };\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(track.config.get_value(pref_name));\n        }\n        else {\n            // Add label.\n            label = $(\"<div/>\").text(track.config.get_value(pref_name)).make_text_editable({\n                num_cols: 12,\n                on_finish: function(new_val) {\n                    $(\".tooltip\").remove();\n                    track.config.set_value(pref_name, new_val);\n                    on_change();\n                },\n                help_text: \"Set \" + text + \" value\"\n            }).addClass('yaxislabel ' + css_class).css(\"color\", this.config.get_value('label_color'));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, function(tile) {\n            return (tile instanceof LineTrackTile);\n        });\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, function(tile) {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, { force: true, mode: 'Coverage' });\n                }\n            });\n\n            track._add_yaxis_label('max');\n        }\n        else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find('.yaxislabel').remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, function(tile) {\n                return tile.has_icons;\n            });\n\n            if (icons_present) {\n                _.each(tiles, function(tile) {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function( display_mode ) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [ this ];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) { options = {}; }\n\n        var force = options.force,\n            mode = options.mode || this.mode,\n            resolution = 1 / w_scale,\n\n            // Useful vars.\n            track = this,\n            drawables = this._get_drawables(),\n            key = this._gen_tile_cache_key(w_scale, region),\n            is_tile = function(o) { return (o && 'track' in o); };\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = (force ? undefined : track.tile_cache.get_elt(key));\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) { return null; }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = function() {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = (_.find(CONTINUOUS_DATA_MODES, function(m) { return m === mode; }) ? \"Coverage\" : mode);\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, function(d) {\n                // Get the track data/promise.\n                return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n            });\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(view.reference_track.data_manager.get_data(region, mode, resolution, view.reference_track.data_url_extra_params));\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then( function() {\n            var tile_data = get_tile_data(),\n                tracks_data = tile_data,\n                seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, function(d) { return util.is_deferred(d); })) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [],\n                drawing_heights = [];\n\n            _.each(drawables, function(d, i) {\n                var mode = d.mode,\n                    data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas(),\n                tile_low = region.get('start'),\n                tile_high = region.get('end'),\n                all_data_index = 0,\n                width = Math.ceil( (tile_high - tile_low) * w_scale ) + track.left_offset,\n                height = _.max(drawing_heights),\n                tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = (options.height || height);\n            var ctx = canvas.getContext('2d');\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, function(d, i) {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        var canvas = ctx.canvas,\n            painter = new painters.LinePainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this,\n            tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round( ( tile.low - (this.is_overview? this.view.max_low : this.view.low) ) * w_scale );\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css('left', left);\n\n        if ( tile_element.hasClass(\"remove\") ) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        }\n        else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css('height', 'auto');\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element.parent().children().css(\"height\", this.max_height_px + \"px\");\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", track_height + \"px\");\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this,\n            region_str = (region !== undefined ? region.toString() : \"all\"),\n            param_str = _.values( track.tool.get_inputs_dict()).join(', ');\n        return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        }\n        // Histogram mode requires bigwig data.\n        else if (mode === \"Coverage\") {\n            return data.dataset_type === \"bigwig\";\n        }\n        // All other modes--Dense, Squish, Pack--require data + details.\n        else if (data.dataset_type === \"bigwig\" ||\n                 data.extra_info === \"no_detail\") {\n            return false;\n        }\n        else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\")  {\n            return false;\n        }\n        // Subset only if data is single-bp resolution.\n        else if (entry.dataset_type === 'bigwig') {\n            return (entry.data[1][0] - entry.data[0][0] === 1);\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set('data_type', 'raw_data');\n        this.data_query_wait = 1000;\n        this.dataset_check_type = 'state';\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function (view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass( \"label-track\" );\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view,\n            range = view.high - view.low,\n            tickDistance = Math.floor( Math.pow( 10, Math.floor( Math.log( range ) / Math.log( 10 ) ) ) ),\n            position = Math.floor( view.low / tickDistance ) * tickDistance,\n            width = this.view.container.width(),\n            new_div = $(\"<div/>\").addClass('label-container');\n        while ( position < view.high ) {\n            var screenPosition = Math.floor( ( position - view.low ) / range * width );\n            new_div.append( $(\"<div/>\").addClass('pos-label').text(util.commatize( position )).css( {\n                left: screenPosition\n            }));\n            position += tickDistance;\n        }\n        this.content_div.children( \":first\" ).remove();\n        this.content_div.append( new_div );\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if ('drawables' in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, function(d) {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    action_icons_def:\n    [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: \"Show individual tracks\",\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, function(d) {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(function() {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n                name: this.config.get_value('name')\n            }),\n            track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, function(d) { return d.config.get_value('min_value'); })),\n            max = _.max(_.map(this.drawables, function(d) { return d.config.get_value('max_value'); }));\n\n        this.config.set_value('min_value', min);\n        this.config.set_value('max_value', max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min);\n            d.config.set_value('max_value', max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this,\n            min_value = this.config.get_value('min_value'),\n            max_value = this.config.get_value('max_value');\n        _.each(this.drawables, function(d) {\n            d.config.set_value('min_value', min_value);\n            d.config.set_value('max_value', max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1, i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, { force: true, height: max_height } );\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this,\n            t = function() { track.update_all_min_max(); };\n\n        // Add min, max labels.\n        this._add_yaxis_label('min', t);\n        this._add_yaxis_label('max', t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function (view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n    this.data_url_extra_params = {reference: true};\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'height', type: 'int', default_value: 13, hidden: true }\n    ] ),\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(':visible'),\n            new_visible,\n            tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        }\n        else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) { return true; },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region),\n            seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function (view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Color', type: 'color' },\n        { key: 'min_value', label: 'Min Value', type: 'float', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'float', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 30, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return (entry.data[1][0] - entry.data[0][0] === 1);\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label('max');\n        this._add_yaxis_label('min');\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function (view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'pos_color', label: 'Positive Color', type: 'color', default_value: \"#FF8C00\" },\n        { key: 'neg_color', label: 'Negative Color', type: 'color', default_value: \"#4169E1\" },\n        { key: 'min_value', label: 'Min Value', type: 'int', default_value: undefined },\n        { key: 'max_value', label: 'Max Value', type: 'int', default_value: undefined },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 500, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON( track.dataset.url(),\n            {  data_type: 'data', stats: true, chrom: track.view.chrom, low: 0,\n               high: track.view.max_high, hda_ldda: track.dataset.get('hda_ldda') }, function(result) {\n            var data = result.data;\n        });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas,\n            painter = new painters.DiagonalHeatmapPainter(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode);\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass( \"feature-track\" );\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Block color', type: 'color' },\n        { key: 'reverse_strand_color', label: 'Antisense strand color', type: 'color' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true,\n          help: 'Show the number of items in each bin when drawing summary histogram' },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n        { key: 'connector_style', label: 'Connector style', type: 'select', default_value: 'fishbones',\n            options: [ { label: 'Line with arrows', value: 'fishbone' }, { label: 'Arcs', value: 'arcs' } ] },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if ( this.config.get_value('connector_style') === 'arcs' ) {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this,\n            i,\n            line_track_tiles = _.filter(tiles, function(t) {\n                return (t instanceof LineTrackTile);\n            });\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, 'incomplete_features'), function(inc_features) {\n                _.each(inc_features, function(feature) {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, function(tile) {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features =_.omit(all_incomplete_features,\n                                                     _.map(tile.incomplete_features, function(f) { return f[0]; }));\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = { data: _.values( tile_incomplete_features ) },\n                        new_canvas = self.view.canvas_manager.new_canvas(),\n                        new_canvas_ctx = new_canvas.getContext('2d');\n                    new_canvas.height = Math.max(tile.canvas.height,\n                                                 self.get_canvas_height(features, tile.mode, tile.w_scale, 100));\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(features, new_canvas_ctx, tile.mode,\n                                                  tile.region, tile.w_scale, tile.seq_data);\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters,\n                f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false,\n                example_feature,\n                filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if ( filter.applies_to(example_feature) &&\n                             filter.min !== filter.max ) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        }\n        else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context,\n            slotter = this.slotters[level];\n        if (!slotter || (slotter.mode !== mode)) {\n            slotter = new (slotting.FeatureSlotter)( level, mode, MAX_FEATURE_DEPTH, function ( x ) { return dummy_context.measureText( x ); } );\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features( features );\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        }\n        else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if ( this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH ) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width) );\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this,\n            canvas = ctx.canvas,\n            tile_low = region.get('start'),\n            tile_high = region.get('end'),\n            left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var\n            filtered = [],\n            slots = this.slotters[w_scale].slots;\n            all_slotted = true;\n        if ( result.data ) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if ( !(feature[0] in slots) ) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = (this.filters_manager.alpha_filter ? new FilterScaler(this.filters_manager.alpha_filter) : null),\n            filter_height_scaler = (this.filters_manager.height_filter ? new FilterScaler(this.filters_manager.height_filter) : null),\n            painter = new (this.painter)(filtered, tile_low, tile_high, this.config.to_key_value_dict(), mode, filter_alpha_scaler, filter_height_scaler,\n                                         // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                                         ref_seq,\n                                         // Only the ReadPainer will use this function\n                                         function(b) { return track.view.get_base_color(b); });\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value('block_color');\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(track, region, w_scale, canvas, result.data, mode,\n                                        result.message, all_slotted, feature_mapper,\n                                        incomplete_features, ref_seq);\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'color', label: 'Histogram color', type: 'color' },\n        { key: 'show_sample_data', label: 'Show sample data', type: 'bool', default_value: true },\n        { key: 'show_labels', label: 'Show summary and sample labels', type: 'bool', default_value: true },\n        { key: 'summary_height', label: 'Locus summary height', type: 'float', default_value: 20 },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'height', type: 'int', default_value: 0, hidden: true }\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === 'bigwig') {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        }\n        else { // result.dataset_type === 'variant'\n            var view = this.view,\n                painter = new (this.painter)(result.data, region.get('start'), region.get('end'), this.config.to_key_value_dict(), mode,\n                                             function(b) { return view.get_base_color(b); });\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === 'bigwig') {\n            return this.summary_draw_height;\n        }\n        else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = ( this.dataset.get_metadata('sample_names') ? this.dataset.get_metadata('sample_names').length : 0);\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if ( num_samples === null ) {\n                    num_samples = 1;\n                }\n                else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new (this.painter)(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [ Track.prototype.predraw_init.call(this) ];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata('sample_names')) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, function(t) {\n            return (t instanceof LineTrackTile);\n        });\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata('sample_names');\n        if (line_track_tiles.length === 0 && this.config.get_value('show_labels') && sample_names && sample_names.length > 1) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find('.yaxislabel.variant').length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value('summary_height') / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\").text('Summary').addClass('yaxislabel variant top').css({\n                        'font-size': font_size + 'px',\n                        'top': (this.config.get_value('summary_height') - font_size) / 2 + 'px'\n                    })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value('show_sample_data')) {\n                    var samples_div_html = sample_names.join('<br/>');\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\").html(samples_div_html).addClass('yaxislabel variant top sample').css({\n                            'top': this.config.get_value('summary_height')\n                        })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = (this.mode === 'Squish' ? 5 : 10) + 'px';\n            $(this.tiles_div).find('.sample').css({\n                'font-size': font_size,\n                'line-height': font_size\n            });\n            // Color labels to preference color.\n            $(this.tiles_div).find('.yaxislabel').css('color', this.config.get_value('label_color'));\n        }\n        else {\n            // Remove all labels.\n            this.container_div.find('.yaxislabel.variant').remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function (view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    config_params: _.union( Drawable.prototype.config_params, [\n        { key: 'block_color', label: 'Histogram color', type: 'color' },\n        { key: 'detail_block_color', label: 'Sense strand block color', type: 'color', 'default_value': '#AAAAAA' },\n        { key: 'reverse_strand_color', label: 'Antisense strand block color', type: 'color', 'default_value': '#DDDDDD' },\n        { key: 'label_color', label: 'Label color', type: 'color', default_value: 'black' },\n        { key: 'show_insertions', label: 'Show insertions', type: 'bool', default_value: false },\n        { key: 'show_differences', label: 'Show differences only', type: 'bool', default_value: true },\n        { key: 'show_counts', label: 'Show summary counts', type: 'bool', default_value: true },\n        { key: 'mode', type: 'string', default_value: this.mode, hidden: true },\n        { key: 'min_value', label: 'Histogram minimum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n        { key: 'max_value', label: 'Histogram maximum', type: 'float', default_value: null, help: 'clear value to set automatically' },\n        { key: 'height', type: 'int', default_value: 0, hidden: true}\n    ] ),\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value('name'));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    \"CompositeTrack\": CompositeTrack,\n    \"DrawableGroup\": DrawableGroup,\n    \"DiagonalHeatmapTrack\": DiagonalHeatmapTrack,\n    \"FeatureTrack\": FeatureTrack,\n    \"LineTrack\": LineTrack,\n    \"ReadTrack\": ReadTrack,\n    \"VariantTrack\": VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    \"VcfTrack\": VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = function(template, view, container) {\n    if ('copy' in template) {\n        // Template is an object.\n        return template.copy(container);\n    }\n    else {\n        // Template is a dictionary.\n        var\n           drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[ drawable_type ](view, container, template);\n    }\n};\n\nreturn {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/trackster/tracks.js\n ** module id = 128\n ** module chunks = 0\n **/","define( [\"libs/underscore\"], function(_) {\n\n/**\n * View for track/group header.\n */\nvar TrackHeaderView = Backbone.View.extend({\n    className: 'track-header',\n\n    initialize: function() {\n        // Watch and update name changes.\n        this.model.config.get('name').on('change:value', this.update_name, this);\n        this.render();\n    },\n\n    render: function() {\n        this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n        this.$el.append($(\"<div/>\").addClass(\"track-name\")\n                                   .text(this.model.config.get_value('name')));\n\n        // Icons container.\n        this.action_icons = {};\n        this.render_action_icons();\n\n        // Suppress double clicks in header so that they do not impact viz under header.\n        this.$el.dblclick( function(e) { e.stopPropagation(); } );\n        \n        // Needed for floating elts in header.\n        this.$el.append( $(\"<div style='clear: both'/>\") );\n    },\n\n    update_name: function() {\n        this.$el.find('.track-name').text(this.model.config.get_value('name'));\n    },\n\n    render_action_icons: function() {\n        var self = this;\n        this.icons_div = $(\"<div/>\").addClass('track-icons').hide().appendTo(this.$el);\n        _.each(this.model.action_icons_def, function(icon_dict) {\n            self.add_action_icon(icon_dict.name, icon_dict.title, icon_dict.css_class, \n                                 icon_dict.on_click_fn, icon_dict.prepend, icon_dict.hide);\n        });\n\n        // Set up behavior for modes popup.\n        this.set_display_modes(this.model.display_modes);\n    },\n\n    /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n    add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n        var self = this;\n        this.action_icons[name] = $(\"<a/>\").attr(\"title\", title)\n                                           .addClass(\"icon-button\").addClass(css_class).tooltip()\n                                           .click( function() { on_click_fn(self.model); } )\n                                           .appendTo(this.icons_div);\n        if (hide) {\n            this.action_icons[name].hide();\n        }\n    },\n\n    /**\n     * Set track's modes and update mode icon popup.\n     */\n    set_display_modes: function(new_modes, init_mode) {\n        if (!new_modes) { return; }\n\n        // HACK: move this out of view and into track.\n\n        // Set modes, init mode.\n        this.model.display_modes = new_modes;\n        this.model.mode = (init_mode || this.model.config.get_value('mode') || this.model.display_modes[0]);\n        \n        this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\n        // Setup popup menu for changing modes.\n        var self = this,\n            track = this.model,\n            mode_mapping = {};\n        for (var i = 0, len = track.display_modes.length; i < len; i++) {\n            var mode = track.display_modes[i];\n            mode_mapping[mode] = function(mode) {\n                return function() { \n                    track.change_mode(mode);\n                    // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                    // icons div for now.\n                    //self.icons_div.show(); \n                    //track.container_div.mouseleave(function() { track.icons_div.hide(); } ); \n                };\n            }(mode);\n        }\n\n        make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n    }\n});\n\nreturn {\n    TrackHeaderView: TrackHeaderView\n};\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./galaxy/scripts/viz/viz_views.js\n ** module id = 129\n ** module chunks = 0\n **/"],"sourceRoot":""}